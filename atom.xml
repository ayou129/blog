<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿尤</title>
  
  <subtitle>博客</subtitle>
  <link href="https://ayou129.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://ayou129.github.io/blog/"/>
  <updated>2024-04-12T10:22:29.000Z</updated>
  <id>https://ayou129.github.io/blog/</id>
  
  <author>
    <name>阿尤</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DevTools</title>
    <link href="https://ayou129.github.io/blog/p/5618cb0a/"/>
    <id>https://ayou129.github.io/blog/p/5618cb0a/</id>
    <published>2024-04-12T10:22:29.000Z</published>
    <updated>2024-04-12T10:22:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂无描述</p><span id="more"></span><h2 id="Google-浏览器无法翻译"><a href="#Google-浏览器无法翻译" class="headerlink" title="Google 浏览器无法翻译"></a>Google 浏览器无法翻译</h2><blockquote><p>Google搜索快捷URL <a href="https://www.google.com/search?q=%E6%9C%80%E6%96%B0+ip+google%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BF%BB%E8%AF%91%E6%97%A0%E6%B3%95%E7%BF%BB%E8%AF%91&amp;sxsrf=AJOqlzV4U5Ocu0Te4Hb9jd5UfRkizevn7g:1675319918786&amp;source=lnt&amp;tbs=qdr:m&amp;sa=X&amp;ved=2ahUKEwjow5OFnfb8AhVDRzABHUTCCQcQpwV6BAgBEB4&amp;biw=1680&amp;bih=844&amp;dpr=2" target="_blank" rel="noopener">https://www.google.com/search?q=%E6%9C%80%E6%96%B0+ip+google%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BF%BB%E8%AF%91%E6%97%A0%E6%B3%95%E7%BF%BB%E8%AF%91&amp;sxsrf=AJOqlzV4U5Ocu0Te4Hb9jd5UfRkizevn7g:1675319918786&amp;source=lnt&amp;tbs=qdr:m&amp;sa=X&amp;ved=2ahUKEwjow5OFnfb8AhVDRzABHUTCCQcQpwV6BAgBEB4&amp;biw=1680&amp;bih=844&amp;dpr=2</a><br>最新 <a href="https://www.maxiaobang.com/15434.html" target="_blank" rel="noopener">https://www.maxiaobang.com/15434.html</a></p></blockquote><p>编辑 host</p><ul><li>Mac：<code>sudo vim /etc/hosts</code><ul><li>刷新 <code>dscacheutil -flushcache</code><ul><li>Mac OS X 10.7 – 10.8：sudo killall -HUP mDNSResponder</li><li>Mac OS X 10.5 – 10.6：dscacheutil -flushcache</li><li>Mac OS X 10.4：lookupd -flushcache</li></ul></li></ul></li><li>Windows<ul><li>刷新 <code>ipconfig /flushdns</code></li></ul></li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Google翻译</span><br><span class="line"><span class="number">180.163.150.34</span> translate.googleapis.com</span><br><span class="line"><span class="number">180.163.150.34</span> translate.google.com</span><br></pre></td></tr></table></figure><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.zshrc || sudo vim /etc/bash.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># example:socks5=http://127.0.0.1:10809</span></span><br><span class="line"><span class="comment"># example window :</span></span><br><span class="line"><span class="comment">## set http_proxy=http://192.168.31.21:10809</span></span><br><span class="line"><span class="comment">## set https_proxy=http://192.168.31.21:10809</span></span><br><span class="line">PROXY=http://192.168.31.21:10809</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxyOff</span></span>()&#123;</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;已关闭代理&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxyOn</span></span>() &#123;</span><br><span class="line">    <span class="comment"># 端口号在代理软件中查看Sock监听端口</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="variable">$PROXY</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="variable">$PROXY</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;已开启代理&quot;</span> . <span class="variable">$PROXY</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc || <span class="built_in">source</span> /etc/bash.bashrc</span><br></pre></td></tr></table></figure><p>重载配置文件：&#96;&#96;<br>开启代理 <code>proxyOn</code><br>关闭代理 <code>proxyOff</code></p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="Linux-x2F-Ubuntu"><a href="#Linux-x2F-Ubuntu" class="headerlink" title="Linux&#x2F;Ubuntu"></a>Linux&#x2F;Ubuntu</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-12 g++ kernel-headers kernel-devel make curl unzip</span><br><span class="line">sudo <span class="built_in">ln</span> -sf /usr/bin/gcc-12 /etc/alternatives/cc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装deb包</span></span><br><span class="line">sudo dpkg -i ./...deb</span><br></pre></td></tr></table></figure><h2 id="NVIDIA-驱动"><a href="#NVIDIA-驱动" class="headerlink" title="NVIDIA 驱动"></a>NVIDIA 驱动</h2><blockquote><p><a href="https://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">https://www.nvidia.cn/Download/index.aspx?lang=cn</a> 下载驱动</p></blockquote><h3 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h3><h3 id="Linux-x2F-Ubuntu-1"><a href="#Linux-x2F-Ubuntu-1" class="headerlink" title="Linux&#x2F;Ubuntu"></a>Linux&#x2F;Ubuntu</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt autoremove nvidia* libnvidia*</span><br><span class="line"></span><br><span class="line">sudo apt install ./xxx.run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里显示的Cuda版本是最高版本</span></span><br><span class="line">nvidia-smi</span><br><span class="line"></span><br><span class="line"><span class="comment"># uninstall</span></span><br><span class="line">sudo apt autoremove nvidia* libnvidia*</span><br></pre></td></tr></table></figure><h2 id="NVIDIA-CUDA"><a href="#NVIDIA-CUDA" class="headerlink" title="NVIDIA CUDA"></a>NVIDIA CUDA</h2><blockquote><p><a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-toolkit-archive</a></p></blockquote><h3 id="Linux-x2F-Ubuntu-2"><a href="#Linux-x2F-Ubuntu-2" class="headerlink" title="Linux&#x2F;Ubuntu"></a>Linux&#x2F;Ubuntu</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧数据</span></span><br><span class="line">sudo apt-get autoremove <span class="string">&quot;*cuda*&quot;</span> <span class="string">&quot;*cublas*&quot;</span> <span class="string">&quot;*cufft*&quot;</span> <span class="string">&quot;*cufile*&quot;</span> <span class="string">&quot;*curand*&quot;</span>  <span class="string">&quot;*cusolver*&quot;</span> <span class="string">&quot;*cusparse*&quot;</span> <span class="string">&quot;*gds-tools*&quot;</span> <span class="string">&quot;*npp*&quot;</span> <span class="string">&quot;*nvjpeg*&quot;</span> <span class="string">&quot;nsight*&quot;</span> <span class="string">&quot;*nvvm*&quot;</span></span><br><span class="line">sudo apt-get autoremove 或 sudo /usr/local/cuda-xxxxx/bin/cuda-uninstaller</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 用空格选择所有cuda相关文件，确认，需要一会儿提示成功卸载。</span></span><br><span class="line"><span class="comment"># 最后删除磁盘文件：sudo rm -rf /usr/local/cuda-xxxxx</span></span><br><span class="line">sudo dpkg --list | grep nvidia-*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直到命令不输出任何内容：</span></span><br><span class="line">ubuntu-drivers devices</span><br><span class="line"></span><br><span class="line">wget 上面找到对应的url</span><br><span class="line">sudo sh cuda_12.2.0_535.54.03_linux.run</span><br><span class="line"></span><br><span class="line">取消 Drive 安装，因为已经安装过驱动了</span><br><span class="line"></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/local/cuda-12.2</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$&#123;CUDA_HOME&#125;</span>/lib64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;CUDA_HOME&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">nvcc -V</span><br><span class="line"></span><br><span class="line">import torch</span><br><span class="line"><span class="built_in">print</span>(torch.version.cuda)</span><br></pre></td></tr></table></figure><h2 id="NVIDIA-cuDNN"><a href="#NVIDIA-cuDNN" class="headerlink" title="NVIDIA cuDNN"></a>NVIDIA cuDNN</h2><blockquote><p><a href="https://docs.nvidia.com/deeplearning/cudnn/archives/index.html" target="_blank" rel="noopener">https://docs.nvidia.com/deeplearning/cudnn/archives/index.html</a></p></blockquote><h3 id="Linux-x2F-Ubuntu-3"><a href="#Linux-x2F-Ubuntu-3" class="headerlink" title="Linux&#x2F;Ubuntu"></a>Linux&#x2F;Ubuntu</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 deb 文件</span></span><br><span class="line">wget https://developer.download.nvidia.com/compute/cudnn/9.1.0/local_installers/cudnn-local-repo-ubuntu2204-9.1.0_1.0-1_amd64.deb</span><br><span class="line">sudo dpkg -i cudnn-local-repo-ubuntu2204-9.1.0_1.0-1_amd64.deb</span><br><span class="line">sudo <span class="built_in">cp</span> /var/cudnn-local-repo-ubuntu2204-9.1.0/cudnn-*-keyring.gpg /usr/share/keyrings/</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install cudnn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">import torch</span><br><span class="line"><span class="built_in">print</span>(torch.version.cuda)</span><br><span class="line"><span class="built_in">print</span>(torch.backends.cudnn.version())</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br></pre></td></tr></table></figure><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用源安装各类包</span></span><br><span class="line">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple 包名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">pip3 uninstall -y 包</span><br></pre></td></tr></table></figure><h3 id="疑难解答"><a href="#疑难解答" class="headerlink" title="疑难解答"></a>疑难解答</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有可能提示需要更新pip版本，可以使用以下命令更新，不会更新python版本</span></span><br><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><h3 id="python-其他安装包"><a href="#python-其他安装包" class="headerlink" title="python 其他安装包"></a>python 其他安装包</h3><h4 id="Linux-x2F-Ubuntu-4"><a href="#Linux-x2F-Ubuntu-4" class="headerlink" title="Linux&#x2F;Ubuntu"></a>Linux&#x2F;Ubuntu</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> EL\/d2l-zh &amp;&amp; <span class="built_in">cd</span> /app/d2l-zh</span><br><span class="line">curl https://zh-v2.d2l.ai/d2l-zh-2.0.0.zip -o d2l-zh.zip</span><br><span class="line">unzip d2l-zh.zip &amp;&amp; <span class="built_in">rm</span> d2l-zh.zip</span><br><span class="line"><span class="built_in">cd</span> pytorch</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># d2l 选择好安装文件夹</span></span><br><span class="line">下载文件 https://zh-v2.d2l.ai/d2l-zh-2.0.0.zip 解压到 E:\miniconda3\envs\ai\d2l-zh</span><br><span class="line"><span class="built_in">cd</span> pytorch</span><br></pre></td></tr></table></figure><h2 id="Conda"><a href="#Conda" class="headerlink" title="Conda"></a>Conda</h2><p>设置源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用命令</span></span><br><span class="line">conda init</span><br><span class="line">conda create -n ai python=3.8</span><br><span class="line"></span><br><span class="line">conda <span class="built_in">env</span> list</span><br><span class="line"></span><br><span class="line">conda activate ai</span><br><span class="line"></span><br><span class="line">conda deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除源</span></span><br><span class="line">conda config --remove channels pytorch</span><br><span class="line">conda config --remove channels nvidia</span><br><span class="line">conda config --remove channels conda-forge</span><br><span class="line">conda config --remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加源</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><h3 id="Windows10"><a href="#Windows10" class="headerlink" title="Windows10"></a>Windows10</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载安装 Miniconda</span></span><br><span class="line">https://repo.anaconda.com/miniconda/Miniconda3-py38_23.11.0-2-Windows-x86_64.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加环境变量 Z:\miniconda3\Scripts 到系统变量中</span></span><br><span class="line">E:\miniconda3\Scripts</span><br><span class="line">E:\miniconda3\condabin</span><br><span class="line">E:\miniconda3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Win搜索运行 Anaconda Powershell Prompt (Miniconda3) 进入Base 环境</span></span><br><span class="line"></span><br><span class="line">conda init</span><br><span class="line">conda create -n ai python=3.8</span><br></pre></td></tr></table></figure><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">brew install wget</span><br><span class="line"></span><br><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-py38_23.11.0-2-MacOSX-arm64.sh -O ~/Downloads/miniconda.sh</span><br><span class="line"></span><br><span class="line">bash ~/Downloads/miniconda.sh -b -u -p ~/Desktop/web/miniconda3</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf ~/Downloads/miniconda.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># conda 在 mac中自动写入bash，直接执行 conda --version</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="built_in">export</span> PATH=/app/miniconda3/bin:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="Linux-x2F-Ubuntu-5"><a href="#Linux-x2F-Ubuntu-5" class="headerlink" title="Linux&#x2F;Ubuntu"></a>Linux&#x2F;Ubuntu</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-py38_23.11.0-1-Linux-x86_64.sh -O ~/下载/miniconda.sh</span><br><span class="line">bash ~/下载/miniconda.sh -b -u -p /app/miniconda3</span><br><span class="line"><span class="built_in">rm</span> -rf ~/下载/miniconda.sh</span><br><span class="line"></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=/app/miniconda3/bin:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line">conda init</span><br><span class="line"></span><br><span class="line">conda create -n ai python=3.8</span><br><span class="line"></span><br><span class="line">conda activate ai</span><br></pre></td></tr></table></figure><h3 id="其他包"><a href="#其他包" class="headerlink" title="其他包"></a>其他包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 jupyter notebook</span></span><br><span class="line">conda install pandas jupyter notebook  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Other</span></span><br><span class="line">conda activate ai</span><br><span class="line">conda install seaborn matplotlib scikit-learn keras keras-preprocessing </span><br><span class="line"><span class="comment">## keras_applications TODO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 tensorflow</span></span><br><span class="line">conda activate ai</span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑增加变量</span></span><br><span class="line">conda <span class="built_in">env</span> config vars <span class="built_in">set</span> LD_LIBRARY_PATH=变量值</span><br><span class="line">conda <span class="built_in">env</span> config vars <span class="built_in">unset</span> LD_LIBRARY_PATH</span><br><span class="line">conda <span class="built_in">env</span> config vars list</span><br><span class="line">conda deactivate</span><br><span class="line">conda activate ai</span><br><span class="line"></span><br><span class="line">conda search -c main tensorflow</span><br><span class="line">conda install -c main tensorflow-gpu</span><br><span class="line"></span><br><span class="line"><span class="comment">## 测试 tensorflow</span></span><br><span class="line">import tensorflow as tf </span><br><span class="line"><span class="built_in">print</span>(tf.test.is_built_with_cuda())</span><br></pre></td></tr></table></figure><h4 id="Jupyter-notebook"><a href="#Jupyter-notebook" class="headerlink" title="Jupyter notebook"></a>Jupyter notebook</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br><span class="line">（可选）更改 Jupyter notebook 样式</span><br><span class="line">jt -t grade3 -f roboto -fs <span class="number">16</span> -cellw <span class="number">90</span>% -ofs <span class="number">11</span> -dfs <span class="number">11</span> -T</span><br></pre></td></tr></table></figure><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><h4 id="conda-deactivate-后-CondaError-Run-‘conda-init’-before-‘conda-deactivate’"><a href="#conda-deactivate-后-CondaError-Run-‘conda-init’-before-‘conda-deactivate’" class="headerlink" title="conda deactivate 后 CondaError: Run ‘conda init’ before ‘conda deactivate’"></a>conda deactivate 后 CondaError: Run ‘conda init’ before ‘conda deactivate’</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> activate</span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><h2 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h2><blockquote><p><a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">https://pytorch.org/get-started/locally/</a></p></blockquote><p>下载代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac</span></span><br><span class="line">conda install pytorch torchvision -c pytorch</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">a = torch.ones([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]).cuda(<span class="number">0</span>)</span><br><span class="line">b = torch.ones([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]).cuda(<span class="number">0</span>)</span><br><span class="line">a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回 tensor([[[2., 2., 2.], [2., 2., 2.]]], device=&#x27;cuda:0&#x27;) 就是正常</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查CUDA是否可用</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">cuda_available = torch.cuda.is_available()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> cuda_available:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;CUDA is available!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;CUDA is not available.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h2><blockquote><p><a href="https://nodejs.org/en/download/package-manager" target="_blank" rel="noopener">https://nodejs.org/en/download/package-manager</a></p></blockquote><h3 id="Linux-x2F-Ubuntu-6"><a href="#Linux-x2F-Ubuntu-6" class="headerlink" title="Linux&#x2F;Ubuntu"></a>Linux&#x2F;Ubuntu</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载二进制文件后，放入/app/nodexxxx</span></span><br><span class="line"></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=/app/node-v20.12.2-linux-x64/bin:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样可以执行 `sudo node`</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/node/bin/node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样可以执行 `sudo npm`</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/node/bin/npm</span><br><span class="line"></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="NodeJs-后置操作"><a href="#NodeJs-后置操作" class="headerlink" title="NodeJs 后置操作"></a>NodeJs 后置操作</h2><h3 id="代理-1"><a href="#代理-1" class="headerlink" title="代理"></a>代理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy http://192.168.31.21:10809</span><br><span class="line">npm config <span class="built_in">set</span> https-proxy http://192.168.31.21:10809</span><br></pre></td></tr></table></figure><h3 id="Nrm"><a href="#Nrm" class="headerlink" title="Nrm"></a>Nrm</h3><blockquote><p>npm cache clean –force<br>npm config delete registry<br>可以先设置源为 npm config set registry <a href="https://mirrors.cloud.tencent.com/npm/" target="_blank" rel="noopener">https://mirrors.cloud.tencent.com/npm/</a></p></blockquote><ol><li><p>安装nrm <code>npm i -g nrm</code></p></li><li><p>测试所有 <b>源</b> <code>nrm test</code></p><img src="/blog/p/5618cb0a/nrm%E6%B5%8B%E8%AF%95%E6%89%80%E6%9C%89%E6%BA%90.png" class="" title="nrm测试所有源.png"></li><li><p>选择最快的 <b>源</b> <code>nrm use *</code></p><img src="/blog/p/5618cb0a/nrm%E9%80%89%E6%8B%A9%E6%9C%80%E5%BF%AB%E7%9A%84%E6%BA%90.png" class="" title="nrm选择最快的源.png"></li><li><p>完毕</p></li></ol><h2 id="公共DNS"><a href="#公共DNS" class="headerlink" title="公共DNS"></a>公共DNS</h2><h3 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h3><blockquote><p><a href="https://www.dnspod.cn/products/publicdns" target="_blank" rel="noopener">https://www.dnspod.cn/products/publicdns</a></p></blockquote><p>IPV4: 119.29.29.29<br>IPV6: 2402:4e00::</p><h2 id="SSH-生成秘钥"><a href="#SSH-生成秘钥" class="headerlink" title="SSH 生成秘钥"></a>SSH 生成秘钥</h2><ol><li>cd ~&#x2F;.ssh</li><li>ssh-keygen -t rsa -C “guoxinlee129@gmail”</li><li>接着按3个回车</li><li>在c&#x2F;Users&#x2F;Administrator&#x2F;.ssh生成了加密文件，复制id_rsa.pub</li><li>打开github 添加New SSH key</li><li>验证是否连接成功 ssh -T <a href="mailto:&#103;&#105;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#109;">&#103;&#105;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#109;</a>(gitee site)</li></ol><h2 id="SSH-开启xftp-公钥登录"><a href="#SSH-开启xftp-公钥登录" class="headerlink" title="SSH 开启xftp 公钥登录"></a>SSH 开启xftp 公钥登录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个.ssh文件</span></span><br><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line">/etc/ssh/sshd_config</span><br><span class="line">RSAAuthentication <span class="built_in">yes</span></span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">systemctl start sshd.service</span><br><span class="line"></span><br><span class="line">adduser liguoxin</span><br><span class="line">passwd liguoxin</span><br><span class="line">abcABC123</span><br><span class="line"><span class="comment"># 将某个用户的公钥放进去</span></span><br><span class="line">vim /home/liguoxin/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-port=22/tcp --permanent</span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成指定邮箱的ssh文件</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;1422476675@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /root/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">git config --global user.name <span class="string">&quot;Administrator&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;1422476675@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line">git remote add origin git@120.78.175.202:enticementchina/web.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="huggingface"><a href="#huggingface" class="headerlink" title="huggingface"></a>huggingface</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 说明文档 https://huggingface.co/docs/huggingface_hub/guides/cli</span></span><br><span class="line">/app/miniconda3/envs/ai/bin/pip3 install -U <span class="string">&quot;huggingface_hub[cli]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载模型 https://huggingface.co/google/codegemma-7b</span></span><br><span class="line">huggingface-cli login --token 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</span><br><span class="line"></span><br><span class="line">huggingface-cli download google/codegemma-7b</span><br></pre></td></tr></table></figure><h2 id="Linux-开启定时任务"><a href="#Linux-开启定时任务" class="headerlink" title="Linux 开启定时任务"></a>Linux 开启定时任务</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span></span><br><span class="line">*<span class="regexp">/1 * * * * root /u</span>sr<span class="regexp">/local/</span>php<span class="regexp">/bin/</span>php <span class="regexp">/home/</span>wwwroot<span class="regexp">/app.enticementchina.com/</span>think activity</span><br></pre></td></tr></table></figure><ul><li><p><code>crontab</code></p><ul><li>crontab -e #编写定时任务 命令(分时日月周)</li><li>在以上各个字段中，还可以使用以下特殊字符：</li><li>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li><li>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</li><li>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</li><li>正斜线（&#x2F;）：可以用正斜线指定时间的间隔频率，例如“0-23&#x2F;2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*&#x2F;10，如果用在minute字段，表示每十分钟执行一次。</li></ul>  <img src="/blog/p/5618cb0a/crontab%E6%A0%BC%E5%BC%8F.png" class="" title="crontab格式"></li><li><p><code>at</code></p><ul><li>at 2:00 tomorrow<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at&gt;/home/do_job</span><br><span class="line">at&gt;Ctrl+D</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="真题：如何实现每天0点钟重启服务器"><a href="#真题：如何实现每天0点钟重启服务器" class="headerlink" title="真题：如何实现每天0点钟重启服务器"></a>真题：如何实现每天0点钟重启服务器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;crontab -e</span><br><span class="line">&gt;0 0 * * * reboot</span><br><span class="line"><span class="comment">#分时日月周</span></span><br></pre></td></tr></table></figure><h2 id="Phpstorm开发工具的使用说明"><a href="#Phpstorm开发工具的使用说明" class="headerlink" title="Phpstorm开发工具的使用说明"></a>Phpstorm开发工具的使用说明</h2><h3 id="注释不顶格"><a href="#注释不顶格" class="headerlink" title="注释不顶格"></a>注释不顶格</h3><ol><li>setting</li><li>editor</li><li>color style</li><li>PHP</li><li>Code Generatio</li><li>Comment Code</li><li>Line Comment at first column 取消勾选</li><li>勾选 add a space at comment start</li></ol><img src="/blog/p/5618cb0a/%E6%B3%A8%E9%87%8A%E4%B8%8D%E9%A1%B6%E6%A0%BC.png" class="" title="注释不顶格.png"><h3 id="设置-工具栏字体大小"><a href="#设置-工具栏字体大小" class="headerlink" title="设置 工具栏字体大小"></a>设置 工具栏字体大小</h3><ol><li>setting</li><li>appearance &amp; behavior</li><li>appearance</li></ol><img src="/blog/p/5618cb0a/%E8%AE%BE%E7%BD%AE%E5%B7%A5%E5%85%B7%E6%A0%8F%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F.jpg" class="" title="设置工具栏字体大小.jpg"><h3 id="设置工作区字体大小"><a href="#设置工作区字体大小" class="headerlink" title="设置工作区字体大小"></a>设置工作区字体大小</h3><ol><li>setting</li><li>editor</li><li>color scheme</li><li>color scheme font</li></ol><img src="/blog/p/5618cb0a/%E8%AE%BE%E7%BD%AE%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F.jpg" class="" title="设置工作区字体大小.jpg"><h3 id="空格代替制表符"><a href="#空格代替制表符" class="headerlink" title="空格代替制表符"></a>空格代替制表符</h3><ol><li>setting</li><li>editor</li><li>color style</li><li>PHP</li><li>tab和缩进</li><li>取消勾选 <code>Use tab character</code></li></ol><h3 id="命令行中文乱码"><a href="#命令行中文乱码" class="headerlink" title="命令行中文乱码"></a>命令行中文乱码</h3><ol><li>setting</li><li>editor</li><li>file encodings 全部设置为<code>utf8</code></li></ol><h3 id="添加template"><a href="#添加template" class="headerlink" title="添加template"></a>添加template</h3><ol><li>setting</li><li>editor</li><li>file and code templates</li><li>添加如下内容：<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* <span class="variable">@Author</span>: Li Guo Xin &lt;guoxinlee129<span class="variable">@gmail</span>.com&gt;</span><br><span class="line">* <span class="variable">@Date</span>: <span class="variable">$&#123;</span>DATE&#125;</span><br><span class="line">* <span class="variable">@Time</span>: <span class="variable">$&#123;</span>TIME&#125;</span><br></pre></td></tr></table></figure><img src="/blog/p/5618cb0a/phpstorm%E6%B7%BB%E5%8A%A0%E4%BD%9C%E8%80%85%E5%90%8D%E7%A7%B0template.jpg" class="" title="phpstorm添加作者名称template.jpg"></li></ol><h3 id="开启xdebug断点调试"><a href="#开启xdebug断点调试" class="headerlink" title="开启xdebug断点调试"></a>开启xdebug断点调试</h3><h4 id="注意：phpstorm2020-3才支持xdebug3断点调试"><a href="#注意：phpstorm2020-3才支持xdebug3断点调试" class="headerlink" title="注意：phpstorm2020.3才支持xdebug3断点调试"></a>注意：phpstorm2020.3才支持xdebug3断点调试</h4><ul><li>下载xdebug历史进入 <code>https://xdebug.org/download/historical</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># php.ini xdebug2</span><br><span class="line">[xdebug]</span><br><span class="line">xdebug.idekey=&quot;PHPSTORM&quot;</span><br><span class="line">xdebug.remote_enable =1</span><br><span class="line">xdebug.remote_handler = &quot;dbgp&quot;</span><br><span class="line">xdebug.remote_host = localhost</span><br><span class="line">xdebug.remote_mode = &quot;req&quot;</span><br><span class="line">xdebug.remote_port = 9001</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># php.ini xdebug3更新后的配置</span><br><span class="line">[xdebug]</span><br><span class="line">zend_extension=&quot;xdebug.so&quot;</span><br><span class="line">xdebug.idekey=&quot;PHPSTORM&quot;</span><br><span class="line">xdebug.mode=debug</span><br><span class="line">xdebug.client_host = localhost</span><br><span class="line">xdebug.client_port = 9001</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># dyld: Library not loaded: <span class="regexp">/opt/</span>homebrew<span class="regexp">/opt/i</span>cu4c<span class="regexp">/lib/</span>libicuio.<span class="number">68</span>.dylib</span><br><span class="line">ln -s <span class="regexp">/opt/</span>homebrew<span class="regexp">/include/</span>pcre2.h <span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/</span>php@<span class="number">7.4</span><span class="regexp">/7.4.16/i</span>nclude<span class="regexp">/php/</span>ext<span class="regexp">/pcre/</span>pcre2.h</span><br></pre></td></tr></table></figure><h3 id="使用-yasd"><a href="#使用-yasd" class="headerlink" title="使用 yasd"></a>使用 yasd</h3><h4 id="安装boost"><a href="#安装boost" class="headerlink" title="安装boost"></a>安装boost</h4><h5 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h5><p><code>brew install boost</code> 但是不知道目前为啥不行</p><h4 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 下载Boost源码 https:<span class="regexp">//</span>www.boost.org<span class="regexp">/doc/</span>libs<span class="regexp">/1_57_0/m</span>ore<span class="regexp">/getting_started/u</span>nix-variants.html</span><br><span class="line"><span class="number">2</span>. 解压放在任意目录</span><br><span class="line"><span class="number">3</span>. ./bootstrap.sh</span><br><span class="line"><span class="number">4</span>. ./b2 headers 查看headers可跳过</span><br><span class="line"><span class="number">5</span>. .<span class="regexp">/b2 install --prefix=/u</span>sr/local</span><br><span class="line"></span><br><span class="line">留意运行日志头文件目录: <span class="regexp">/usr/</span>local/boost_1_76_0</span><br><span class="line">lib目录: <span class="regexp">/usr/</span>local<span class="regexp">/boost_1_76_0/</span>stage/lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出现 checking for boost... configure: error: lib boost not found.  Try: install boost library</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line">export CPLUS_INCLUDE_PATH=<span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/</span>boost<span class="regexp">/1.75.0_3/i</span>nclude</span><br><span class="line">export LIBRARY_PATH=<span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/</span>boost<span class="regexp">/1.75.0_3/</span>lib</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><blockquote><p><a href="https://www.oracle.com/downloads/" target="_blank" rel="noopener">https://www.oracle.com/downloads/</a><br><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a><br><a href="https://jdk.java.net/java-se-ri/8-MR3" target="_blank" rel="noopener">https://jdk.java.net/java-se-ri/8-MR3</a></p></blockquote><ul><li>环境变量<ol><li>系统变量 <code>JAVA_HOME</code>  -&gt;  <code>D:\Java\jdk</code></li><li>用户变量 <code>CLASSPATH</code>  -&gt;  <code>%JAVA_HOME%lib</code></li></ol></li></ul><h4 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载好包jdk-8u251-linux-x64.tar.gz</span></span><br><span class="line">rz</span><br><span class="line">tar -zxvf jdk-8u251-linux-x64.tar.gz</span><br><span class="line"><span class="built_in">mkdir</span> /usr/local/java</span><br><span class="line"><span class="built_in">mv</span> jdk1.8.0_251 /usr/local/java</span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java/jdk1.8.0_251</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/usr/local/java/jdk1.8.0_251/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib <span class="comment">#似乎可有可无</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src/</span><br><span class="line">wget https://download.java.net/openjdk/jdk8u41/ri/openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz</span><br><span class="line">tar -zxvf openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz</span><br><span class="line"><span class="built_in">mv</span> ./java-se-8u41-ri /usr/local/java</span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><h3 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h3><h4 id="安装7-jdk"><a href="#安装7-jdk" class="headerlink" title="安装7 jdk"></a>安装7 jdk</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># oracle 存档下载 java7</span></span><br><span class="line">https:<span class="regexp">//</span>www.oracle.com<span class="regexp">/java/</span>technologies<span class="regexp">/javase/</span>javase7-archive-downloads.html</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line">ls <span class="regexp">/Library/</span>Java/JavaVirtualMachines</span><br><span class="line">&gt; jdk1.<span class="number">7.0</span>_80.jdk  jdk1.<span class="number">8.0</span>_351.jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改环境变量</span></span><br><span class="line">vim <span class="regexp">/Users/</span>liguoxin/.zshrc</span><br><span class="line">    export JAVA_HOME=<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">7.0</span>_80.jdk<span class="regexp">/Contents/</span>Home/</span><br><span class="line">    export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># check</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="安装8-jdk"><a href="#安装8-jdk" class="headerlink" title="安装8 jdk"></a>安装8 jdk</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官网下载 或者去oracle下载</span></span><br><span class="line">https:<span class="regexp">//</span>www.oracle.com<span class="regexp">/java/</span>technologies<span class="regexp">/downloads/</span><span class="comment">#java8-mac</span></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line">ls <span class="regexp">/Library/</span>Java/JavaVirtualMachines</span><br><span class="line">&gt; jdk1.<span class="number">7.0</span>_80.jdk jdk1.<span class="number">8.0</span>_351.jdk jdk-<span class="number">19</span>.jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改环境变量</span></span><br><span class="line">vim <span class="regexp">/Users/</span>liguoxin/.zshrc</span><br><span class="line">    export JAVA_HOME=<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_351.jdk<span class="regexp">/Contents/</span>Home/</span><br><span class="line">    export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># check</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="安装8-jre"><a href="#安装8-jre" class="headerlink" title="安装8 jre"></a>安装8 jre</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官网下载 或者去oracle下载</span></span><br><span class="line">https:<span class="regexp">//</span>www.oracle.com<span class="regexp">/java/</span>technologies<span class="regexp">/downloads/</span><span class="comment">#java8-mac</span></span><br><span class="line"><span class="comment"># 安装</span></span><br></pre></td></tr></table></figure><h2 id="Mac-显示所有隐藏文件"><a href="#Mac-显示所有隐藏文件" class="headerlink" title="Mac 显示所有隐藏文件"></a>Mac 显示所有隐藏文件</h2><p>方式1：</p><ul><li><code>defaults write com.apple.finder AppleShowAllFiles -bool true</code></li><li><code>defaults write com.apple.finder AppleShowAllFiles -bool false</code><br>方式2：</li><li>显示和隐藏：三个按键一起按下<code>Command + Shift + .</code></li></ul><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><h3 id="在Hyperf中使用-cs-fixer-格式化代码"><a href="#在Hyperf中使用-cs-fixer-格式化代码" class="headerlink" title="在Hyperf中使用 cs-fixer 格式化代码"></a>在Hyperf中使用 cs-fixer 格式化代码</h3><ol><li>创建文件：<code>.php_cs.php</code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$header</span> = &lt;&lt;&lt;<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">EOF;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $header = &lt;&lt;&lt;&#x27;EOF&#x27;</span></span><br><span class="line"><span class="comment">// @author liguoxin</span></span><br><span class="line"><span class="comment">// @email guoxinlee129@gmail.com</span></span><br><span class="line"><span class="comment">// EOF;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">new</span> PhpCsFixer\Config())</span><br><span class="line">    -&gt;setRiskyAllowed(<span class="literal">true</span>)</span><br><span class="line">    -&gt;setRules([</span><br><span class="line">        <span class="string">&#x27;@PSR12&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;@Symfony&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;@DoctrineAnnotation&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;@PhpCsFixer&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;header_comment&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;comment_type&#x27;</span> =&gt; <span class="string">&#x27;PHPDoc&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;header&#x27;</span> =&gt; <span class="variable">$header</span>,</span><br><span class="line">            <span class="string">&#x27;separate&#x27;</span> =&gt; <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;after_declare_strict&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;array_syntax&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;syntax&#x27;</span> =&gt; <span class="string">&#x27;short&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;list_syntax&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;syntax&#x27;</span> =&gt; <span class="string">&#x27;short&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;concat_space&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;spacing&#x27;</span> =&gt; <span class="string">&#x27;one&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;blank_line_before_statement&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;statements&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;declare&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;general_phpdoc_annotation_remove&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;annotations&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;author&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;ordered_imports&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;imports_order&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;function&#x27;</span>, <span class="string">&#x27;const&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&#x27;sort_algorithm&#x27;</span> =&gt; <span class="string">&#x27;alpha&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;single_line_comment_style&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;comment_types&#x27;</span> =&gt; [</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;yoda_style&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;always_move_variable&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&#x27;equal&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&#x27;identical&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;phpdoc_align&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;align&#x27;</span> =&gt; <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;multiline_whitespace_before_semicolons&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;strategy&#x27;</span> =&gt; <span class="string">&#x27;no_multi_line&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;constant_case&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;case&#x27;</span> =&gt; <span class="string">&#x27;lower&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;class_attributes_separation&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;combine_consecutive_unsets&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;declare_strict_types&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;linebreak_after_opening_tag&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;lowercase_static_reference&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_useless_else&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_unused_imports&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;not_operator_with_successor_space&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;not_operator_with_space&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&#x27;ordered_class_elements&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;php_unit_strict&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&#x27;phpdoc_separation&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&#x27;single_quote&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;standardize_not_equals&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;multiline_comment_opening_closing&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">    ])</span><br><span class="line">    -&gt;setFinder(</span><br><span class="line">        PhpCsFixer\Finder::create()</span><br><span class="line">            -&gt;exclude(<span class="string">&#x27;public&#x27;</span>)</span><br><span class="line">            -&gt;exclude(<span class="string">&#x27;runtime&#x27;</span>)</span><br><span class="line">            -&gt;exclude(<span class="string">&#x27;vendor&#x27;</span>)</span><br><span class="line">            -&gt;in(<span class="keyword">__DIR__</span>)</span><br><span class="line">    )</span><br><span class="line">    -&gt;setUsingCache(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li>Composer安装包：<code>composer require friendsofphp/php-cs-fixer</code></li><li>在Composer中增加：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cs-fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;php-cs-fixer --config=./.php_cs.php fix $1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>执行：<code>composer cs-fix</code></li><li>vscode配置文件(给idea配置格式化，save时格式化):<code>settings.json</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;intelephense.environment.phpVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7.4&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;intelephense.format.enable&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;[php]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;junstyle.php-cs-fixer&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;php-cs-fixer.onsave&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;php-cs-fixer.config&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.php_cs.php&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;php-cs-fixer.executablePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;extensionPath&#125;/php-cs-fixer.phar&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Vscode中复制变量无法复制-符号"><a href="#Vscode中复制变量无法复制-符号" class="headerlink" title="Vscode中复制变量无法复制$符号"></a>Vscode中复制变量无法复制$符号</h3><p>VsCode -&gt; setting -&gt; search “word separators” -&gt; 去掉”$”</p><h3 id="Vscode中-设置资源管理器字体大小"><a href="#Vscode中-设置资源管理器字体大小" class="headerlink" title="Vscode中 设置资源管理器字体大小"></a>Vscode中 设置资源管理器字体大小</h3><p>VsCode -&gt; setting -&gt; search “zook level” -&gt; 改成1</p><h3 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h3><p>安装指定版本：<code>composer require overtrue/flysystem-qiniu:&quot;v版本&quot;</code><br>安装指定范围版本：<code>composer require overtrue/flysystem-qiniu:&quot;&gt;=v版本&quot;</code></p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><h3 id="广州高铁"><a href="#广州高铁" class="headerlink" title="广州高铁"></a>广州高铁</h3><p>顺地铁口：序依次 F H(最接近检票口)<br>FH方向，检票口从大到小 21-1(AB)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;暂无描述&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://ayou129.github.io/blog/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>AI大模型</title>
    <link href="https://ayou129.github.io/blog/p/614a8113/"/>
    <id>https://ayou129.github.io/blog/p/614a8113/</id>
    <published>2024-03-14T14:34:00.000Z</published>
    <updated>2024-03-14T14:34:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂无描述</p><span id="more"></span><p><a href="https://huggingface.co/welcome" target="_blank" rel="noopener">https://huggingface.co/welcome</a></p><p>ML 模型</p><p>模型存储库</p><ul><li>模型卡 Model Cards 模型随附的文件，可提供方便的信息<ul><li>带有附加元数据的简单 Markdown 文件 README.md</li><li>模型卡 模板 <a href="https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/templates/modelcard_template.md" target="_blank" rel="noopener">https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/templates/modelcard_template.md</a></li></ul></li></ul><p>模型<br>数据集</p><ul><li>不同领域和模式的各种数据<br>Spaces</li><li>用于直接在浏览器中演示 ML 模型的交互式应用程序。</li></ul><p>使用 Huggingface hub 客户端 下载 预先训练的模型，数据集和 Spaces，使用 Transformers 进行微调和推理。而后可以利用 Inference API 在生产设置中使用模型。</p><h2 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h2><h3 id="使用-Hugging-Face-客户端库"><a href="#使用-Hugging-Face-客户端库" class="headerlink" title="使用 Hugging Face 客户端库"></a>使用 Hugging Face 客户端库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> huggingface_hub <span class="keyword">import</span> hf_hub_download</span><br><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line">REPO_ID = <span class="string">&quot;YOUR_REPO_ID&quot;</span></span><br><span class="line">FILENAME = <span class="string">&quot;sklearn_model.joblib&quot;</span></span><br><span class="line"></span><br><span class="line">model = joblib.load(</span><br><span class="line">    hf_hub_download(repo_id=REPO_ID, filename=FILENAME)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="使用-Git"><a href="#使用-Git" class="headerlink" title="使用 Git"></a>使用 Git</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git lfs install </span><br><span class="line">git clone git@hf.co:&lt;MODEL ID&gt; <span class="comment"># 示例: git clone git@hf.co:bigscience/bloom</span></span><br></pre></td></tr></table></figure><h2 id="模型推理"><a href="#模型推理" class="headerlink" title="模型推理"></a>模型推理</h2><h3 id="Transformers-模型"><a href="#Transformers-模型" class="headerlink" title="Transformers 模型"></a>Transformers 模型</h3><p>Pipelines （管道）为 API 提供支持</p><ul><li>命名实体识别</li><li>掩码语言建模</li><li>情感分析特征提取</li><li>问答</li></ul><h2 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h2><h3 id="Transformers-处理器有两种不同的含义"><a href="#Transformers-处理器有两种不同的含义" class="headerlink" title="Transformers 处理器有两种不同的含义"></a>Transformers 处理器有两种不同的含义</h3><ul><li>预处理多模态模型输入的对象，例如Wav2Vec2（语音和文本）或CLIP（文本和视觉）</li><li>旧版本库中用于预处理 GLUE 或 SQUAD 数据的已弃用对象。</li></ul><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>Introduction<br>We’ll start with an overview of how machine learning models work and how they are used. This may feel basic if you’ve done statistical modeling or machine learning before. Don’t worry, we will progress to building powerful models soon.</p><p>This course will have you build models as you go through following scenario:</p><p>Your cousin has made millions of dollars speculating on real estate. He’s offered to become business partners with you because of your interest in data science. He’ll supply the money, and you’ll supply models that predict how much various houses are worth.</p><p>You ask your cousin how he’s predicted real estate values in the past, and he says it is just intuition. But more questioning reveals that he’s identified price patterns from houses he has seen in the past, and he uses those patterns to make predictions for new houses he is considering.</p><p>Machine learning works the same way. We’ll start with a model called the Decision Tree. There are fancier models that give more accurate predictions. But decision trees are easy to understand, and they are the basic building block for some of the best models in data science.</p><p>For simplicity, we’ll start with the simplest possible decision tree.</p><p>决策树的模型</p><p>Pandas 简称ps，是数据科学家用来探索和操纵数据的主要工具。<br>import pandas as pd</p><p>将把同样的过程应用于一个新的数据集</p><p>示例（墨尔本）数据位于文件路径&#x2F;input&#x2F;melbourne housing snapshot&#x2F;melb_data.csv</p><p>使用以下命令加载和浏览数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># save filepath to variable for easier access</span></span><br><span class="line">melbourne_file_path = <span class="string">&#x27;../input/melbourne-housing-snapshot/melb_data.csv&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># read the data and store data in DataFrame titled melbourne_data</span></span><br><span class="line">melbourne_data = pd.read_csv(melbourne_file_path) </span><br><span class="line"></span><br><span class="line"><span class="comment"># print a summary of the data in Melbourne data</span></span><br><span class="line">melbourne_data.describe()</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>我现在计划训练一个能帮助我写代码的机器人</p><p>需求和目标如下：</p><ul><li>模型是专注于特定编程语言（Html5、css3、php8、Mysql8）<ul><li>其中 php 采用的是 Hyperf3.1 版本基于Swoole的协程框架</li><li>项目整体采用的Docker-compose 架构</li></ul></li><li>模型的应用场景，用于自动生成函数、类、模块、甚至是整个项目的代码。</li><li>设计模型目标输出：<ul><li>基于自然语言描述自动生成符合需求的<ul><li>函数和类</li><li>API说明文档</li><li>数据表</li></ul></li></ul></li><li>除了能根据代码片段生成建议代码，我还要能够正常和ai沟通，让他了解我的需求，从而进一步帮我生成更完善的需求代码</li></ul><p>我现在的项目预训练数据大概是这种结构(每个结构中都是一个文件夹，内部都是相关的许多文件)：</p><ul><li>服务端<ul><li>使用的hyperf3.1基于swoole（PHP的异步、并行、高性能网络通信引擎,支持TCP长连接,Websocket,Mqtt等协议）的php语言框架</li></ul></li><li>数据库<ul><li>mysql目前只有一个sql文件。</li></ul></li><li>前端代码<ul><li>基于Vue3的JavaScript 框架，包含了sass等</li></ul></li></ul><p>训练项目的文件结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">project/</span><br><span class="line">  ├── data/</span><br><span class="line">      <span class="comment"># 存放项目所需的数据集</span></span><br><span class="line">      ├── raw_text/</span><br><span class="line">          <span class="comment"># 存放原始自然语言描述和对应代码示例的文本数据</span></span><br><span class="line">          <span class="comment"># 可以根据数据格式进一步细分，例如 .txt 文件、.json 文件等</span></span><br><span class="line">          <span class="comment"># 建议使用版本控制工具管理原始数据的版本</span></span><br><span class="line">          ├── python/</span><br><span class="line">          └── php/</span><br><span class="line">              ├── hyperf/</span><br><span class="line">              └── hyperf-skeleton/</span><br><span class="line">      ├── preprocessed/</span><br><span class="line">          <span class="comment"># 存放预处理后的数据集，便于模型直接读取</span></span><br><span class="line">          <span class="comment"># 可以根据编程语言或框架分类存储，方便后续训练和使用</span></span><br><span class="line">          <span class="comment"># 预处理脚本应该记录预处理过程和参数，以便复现结果</span></span><br><span class="line">          ├── python/</span><br><span class="line">              ├── train.json</span><br><span class="line">              ├── dev.json</span><br><span class="line">              ├── test.json</span><br><span class="line">          └── java/</span><br><span class="line">              ├── train.json</span><br><span class="line">              ├── dev.json</span><br><span class="line">              ├── test.json</span><br><span class="line">  ├── models/</span><br><span class="line">      ├── models.py</span><br><span class="line">      <span class="comment"># 存放模型文件</span></span><br><span class="line">      ├── base_model/</span><br><span class="line">          <span class="comment"># 存储预训练模型文件，例如来自 Hugging Face 或其他模型库</span></span><br><span class="line">          <span class="comment"># 可以根据模型类型或来源进行分类存储</span></span><br><span class="line">          <span class="comment"># 建议记录模型的版本、训练参数等信息</span></span><br><span class="line">          ├── bert-base-uncased.<span class="built_in">zip</span></span><br><span class="line">          └── gpt2.<span class="built_in">zip</span></span><br><span class="line">      ├── fine_tuned_model/</span><br><span class="line">          <span class="comment"># 存储微调后保存的特定编程语言和框架的模型</span></span><br><span class="line">          <span class="comment"># 可以根据编程语言、框架或任务进行分类存储</span></span><br><span class="line">          <span class="comment"># 建议记录模型的训练参数、性能指标等信息</span></span><br><span class="line">          ├── python/</span><br><span class="line">              ├── model_name.ckpt</span><br><span class="line">          └── java/</span><br><span class="line">              ├── model_name.ckpt</span><br><span class="line">  ├── scripts/</span><br><span class="line">      <span class="comment"># 存放项目相关的脚本</span></span><br><span class="line">      ├── preprocessing.py</span><br><span class="line">          <span class="comment"># 数据预处理脚本，用于将原始数据转换为模型可用的格式</span></span><br><span class="line">          <span class="comment"># 应该包含详细的注释和文档，解释预处理过程和参数</span></span><br><span class="line">          <span class="comment"># 可以使用函数或类将代码组织成模块，提高可读性</span></span><br><span class="line">      ├── training.py</span><br><span class="line">          <span class="comment"># 模型训练脚本，用于训练代码生成模型</span></span><br><span class="line">          <span class="comment"># 应该包含详细的注释和文档，解释训练参数和过程</span></span><br><span class="line">          <span class="comment"># 可以使用函数或类将代码组织成模块，提高可读性</span></span><br><span class="line">      ├── inference.py</span><br><span class="line">          <span class="comment"># 模型推理脚本，用于使用训练好的模型生成代码</span></span><br><span class="line">          <span class="comment"># 应该包含详细的注释和文档，解释推理过程和参数</span></span><br><span class="line">          <span class="comment"># 可以提供命令行接口或 API 方便调用</span></span><br><span class="line">  ├── config.py</span><br><span class="line">      <span class="comment"># 训练配置文件，存储训练所需的参数，例如数据集路径、模型参数、训练超参数等</span></span><br><span class="line">      <span class="comment"># 建议将配置文件细分为不同的模块，例如 data、model、training 等，以便更清晰地管理配置参数</span></span><br><span class="line">  └── README.md</span><br><span class="line">      <span class="comment"># 项目说明文档，介绍项目概况、文件结构、使用说明等</span></span><br><span class="line">      <span class="comment"># 应该包含项目简介、安装说明、使用教程、常见问题解答等内容</span></span><br><span class="line">      <span class="comment"># 可以使用 Markdown 格式编写，方便阅读和维护</span></span><br></pre></td></tr></table></figure><p>我现在计划训练一个能帮助我写代码的机器人</p><p>需求和目标如下：</p><ul><li>模型是专注于特定编程语言（Html5、css3、php8、Mysql8）<ul><li>其中 php 采用的是 Hyperf3.1 版本基于Swoole的协程框架</li><li>项目整体采用的Docker-compose 架构</li></ul></li><li>模型的应用场景，用于自动生成函数、类、模块、甚至是整个项目的代码。</li><li>设计模型目标输出：<ul><li>基于自然语言描述自动生成符合需求的<ul><li>函数和类</li><li>API说明文档</li><li>数据表</li></ul></li></ul></li><li>除了能根据代码片段生成建议代码，我还要能够正常和ai沟通，让他了解我的需求，从而进一步帮我生成更完善的需求代码</li></ul><p>我现在的项目预训练数据大概是这种结构(每个结构中都是一个文件夹，内部都是相关的许多文件)：</p><ul><li>服务端<ul><li>使用的hyperf3.1基于swoole（PHP的异步、并行、高性能网络通信引擎,支持TCP长连接,Websocket,Mqtt等协议）的php语言框架</li></ul></li><li>数据库<ul><li>mysql目前只有一个sql文件。</li></ul></li><li>前端代码<ul><li>基于Vue3的JavaScript 框架，包含了sass等</li></ul></li></ul><p>我计划使用本地设备包括一个显卡NVIDIA GeForce RTX 4070 Ti SUPER 以及采用 Transformer 架构来训练场景</p><p>我现在添加了学习前的数据，在php目录下的文件夹</p><ul><li>hyperf-skeleton 文件夹是独立的专门用于开发后端应用服务的框架</li></ul><p>现在开始执行第一步的代码：整理php的数据集<br>要求如下：</p><ul><li>要考虑除了.php文件的情况，每一种文件的数据集整理方式不同</li><li>数据集需要清除不必要的符号，但是需要留下注释作为描述</li></ul><ol><li>先训练一个php的模型<ol><li>训练</li><li>预测</li><li>评估</li><li>优化</li></ol></li><li>训练Composer的模型<ol><li>训练</li><li>预测</li><li>评估</li><li>优化</li></ol></li><li>训练Mysql的模型<br>TODO</li></ol><p>现在我准备着手开始训练我的模型，我应该给什么样子的数据给 模型 进行第一步的训练呢</p><p>我应该如何将数据集加入到训练项目中，你的回答要带实际的代码</p><p>首先我确定我使用的是基于Transformer的模型，但是我学习到 有很多其他的功能 比如双向循环神经网络 深层循环神经网络 长短期记忆网络 门控循环单元 循环神经网络 序列模型 卷积神经网络 批量归一化  等 我应该如何根据自己的需求选择呢 或者如何搭配？在python代码层面来说 我拿到php所有内容之后 是直接执行 tf的 fit 进行训练吗？</p><p>针对于与我的.php内容想要进行训练，训练前，我需要进行分词或Tokenization吗 分词或Tokenization是什么？<br>针对于与我的.php内容想要进行训练，如何进行分词或Tokenization？用python表示一下</p><p>如果放在一起 路径和注释需不需要转化以及如何转化为稠密向量   代码已经做了分词处理 然后三者应该如何结合在一起呢</p><p>针对于与我的.php内容想要进行训练，训练前，我需要进行词嵌入（例如使用Word2Vec、BERT等预训练模型）将tokens转化为稠密向量吗？</p><p>针对于与我的.php内容想要进行训练，训练前，我需要将所有数组文本构造成适合模型训练的形式，通常是张量（Tensor）吗？</p><p>针对于与我的.php内容想要进行训练，我这个是属于监督学习还是其他的？</p><h4 id="11-模型选择-过拟合和欠拟合"><a href="#11-模型选择-过拟合和欠拟合" class="headerlink" title="11 模型选择+过拟合和欠拟合"></a>11 模型选择+过拟合和欠拟合</h4><p>训练误差和泛化误差</p><ul><li>训练误差(训练场景)：景-训练集上的误差</li><li>泛化误差(真实场景)：-模型在任意一个新样本上的误差的期望，并且泛化误差是我们关心的，因为我们希望模型对新样本也能有很好的预测能力</li></ul><p>验证数据集合测试数据集</p><ul><li>验证数据集：用来评估模型好坏<ul><li>拿出50%的训练数据</li><li>不和训练数据混在一起（常犯错误）</li></ul></li><li>测试数据集：只用一次的数据集<ul><li>未来的考试</li></ul></li></ul><p>K-则交叉验证</p><ul><li>在没有足够多数据时使用（常态）</li><li>算法<ul><li>将训练数据分割成K块</li><li>For i &#x3D; 1,2,…,K<ul><li>循环的使用第i块作为验证数据集，其他的座位训练数据集</li></ul></li><li>报告K个验证集误差的平均</li></ul></li><li>常用K&#x3D;5或10</li></ul><p>总结：</p><ol><li>训练数据集：训练模型参数</li><li>验证数据集：选择模型超参数</li><li>非大数据集上通常使用k-则交叉验证</li></ol><p>过拟合Underfitting和欠拟合Overfitting 中间是 Desired</p><ul><li>过拟合：模型在训练数据集上表现很好，但是在测试数据集上表现很差<ul><li>原因：模型太复杂，参数太多</li><li>解决：减少模型复杂度(多层神经网络)，增加数据量</li></ul></li><li>欠拟合：模型在训练数据集上表现很差<ul><li>原因：模型太简单，参数太少</li><li>解决：增加模型复杂度(多层神经网络)，增加数据量</li></ul></li></ul><div>                <img src="/blog/p/614a8113/模型容量和数据的关系.png" alt="模型容量和数据的关系"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[模型容量和数据的关系]</p>            </div>模型容量（max-0,0就是完美拟合）：- 拟合各种函数的能力- 低容量的模型难以拟合训练数据- 高容量的模型可以记住所有的训练数据<p>估计模型容量</p><ul><li>难以在不同的种类算法之间比较<ul><li>例如 树模型 和 神经网络</li></ul></li><li>给定一个模型种类，将有两个主要因素<ul><li>参数的个数</li><li>参数值的选择范围</li></ul></li></ul><p>统计学理论核心思想：VC理论</p><ul><li>给定一个分类模型，VC等于一个最大的数据集的大小，不管如何给定标号，都存在一个模型来对她进行完美分类</li></ul><p>线性分类器的VC维</p><ul><li>2维输入的感知机，VC维&#x3D;3<ul><li>能分类任何三个点，但不是4个（xor）</li></ul></li><li>支持N维输入的感知机的VC维是N+1</li><li>一些多层感知机的VC维是O(N * log2N)</li></ul><p>VC维的用处</p><ul><li>提供为什么一个模型好的理论依据<ul><li>可以衡量训练误差和泛化误差之间的间隔</li></ul></li><li>深度学习中很少使用<ul><li>衡量不准确</li><li>计算深度学习模型的VC维很困难</li></ul></li></ul><p>数据复杂度</p><ul><li>多个重要因素<ul><li>样本个数</li><li>每个样本的元素个数</li><li>时间、空间结构</li><li>多样性</li></ul></li></ul><h4 id="28-批量归一化"><a href="#28-批量归一化" class="headerlink" title="28 批量归一化"></a>28 批量归一化</h4><ul><li>层数很多，损失梯度大，数据在最后</li><li>上层训练的快，但是更新了底层后上层需要重新训练，导致收敛会很慢</li></ul><p>解决方案：</p><ul><li>固定小批量里面的均值和方差，使得每一层的输入分布都是固定的</li><li>可学习的参数为 γ 和 β，使得模型可以学习到恒等映射</li><li>作用在<ul><li>全连接层和卷积层输出上，激活函数前</li><li>全连接层和卷积层输入上</li></ul></li><li>对全连接层，作用在特征维度</li><li>对于卷积层，作用在通道维度</li></ul><p>通过在每个小批量里增加噪音（随机偏移和随机缩放）控制模型复杂度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"><span class="comment"># 定义批量归一化层</span></span><br><span class="line"><span class="comment"># X: 输入</span></span><br><span class="line"><span class="comment"># gamma: 可以学习的缩放参数</span></span><br><span class="line"><span class="comment"># beta: 可以学习的偏移参数</span></span><br><span class="line"><span class="comment"># moving_mean: 整个数据集上的平均的均值</span></span><br><span class="line"><span class="comment"># moving_var: 整个数据集上的平均的方差</span></span><br><span class="line"><span class="comment"># eps: 防止除以0的值</span></span><br><span class="line"><span class="comment"># momentum: 移动平均的动量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">batch_norm</span>(<span class="params">X, gamma, beta, moving_mean, moving_var, eps, momentum</span>)</span><br><span class="line">    <span class="comment"># 通过 is_grad_enabled 函数来判断当前模式是训练还是预测</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> torch.is_grad_enabled():</span><br><span class="line">        <span class="comment"># 如果是在预测模式下，直接使用整个数据集上的的均值和方差</span></span><br><span class="line">        X_hat = (X - moving_mean) / torch.sqrt(moving_var + eps)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果是在训练模式下，计算当前小批量的均值和方差</span></span><br><span class="line">        <span class="comment"># X.shape = 2 时，计算全连接层的均值和方差</span></span><br><span class="line">        <span class="comment"># X.shape = 4 时，计算卷积层的均值和方差</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(X.shape) <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(X.shape) == <span class="number">2</span>: <span class="comment"># = 2的情况 0就是批量大小 1就是特征数 （全连接）</span></span><br><span class="line">            <span class="comment"># 按行求均值</span></span><br><span class="line">            mean = X.mean(dim=<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 方差也是1xn的行向量 2d</span></span><br><span class="line">            var = ((X - mean) ** <span class="number">2</span>).mean(dim=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># = 4的情况 0就是批量大小 1就是通道数 2就是高 3就是宽 （卷积）</span></span><br><span class="line">            <span class="comment"># 按行求均值</span></span><br><span class="line">            mean = X.mean(dim=(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>), keepdim=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># 方差 也是 1xnx1x1 4d</span></span><br><span class="line">            var = ((X - mean) ** <span class="number">2</span>).mean(dim=(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>), keepdim=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 训练模式下，使用当前小批量的均值和方差做标准化</span></span><br><span class="line">        X_hat = (X - mean) / torch.sqrt(var + eps)</span><br><span class="line">        moving_mean = momentum * moving_mean + (<span class="number">1.0</span> - momentum) * mean</span><br><span class="line">        moving_var = momentum * moving_var + (<span class="number">1.0</span> - momentum) * var</span><br><span class="line">    Y = gamma * X_hat + beta</span><br><span class="line">    <span class="keyword">return</span> Y, moving_mean, moving_var</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 BatchNorm 图层</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BatchNorm</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_features, num_dims</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="keyword">if</span> num_dims == <span class="number">2</span>:</span><br><span class="line">            shape = (<span class="number">1</span>, num_features)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            shape = (<span class="number">1</span>, num_features, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 可学习的缩放和偏移参数，要不断被迭代的</span></span><br><span class="line">        self.gamma = nn.Parameter(torch.ones(shape))</span><br><span class="line">        self.beta = nn.Parameter(torch.zeros(shape))</span><br><span class="line">        <span class="comment"># 不参与训练的变量</span></span><br><span class="line">        self.moving_mean = torch.zeros(shape)</span><br><span class="line">        self.moving_var = torch.zeros(shape)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X</span>):</span><br><span class="line">        <span class="keyword">if</span> self.moving_mean.device != X.device:</span><br><span class="line">            self.moving_mean = self.moving_mean.to(X.device)</span><br><span class="line">            self.moving_var = self.moving_var.to(X.device)</span><br><span class="line">        <span class="comment"># 保存更新过的 moving_mean 和 moving_var</span></span><br><span class="line">        Y, self.moving_mean, self.moving_var = batch_norm(</span><br><span class="line">            X, self.gamma, self.beta, self.moving_mean,</span><br><span class="line">            self.moving_var, eps=<span class="number">1e-5</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line">        <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用 BatchNorm 于 卷积神经网络(LeNet) 模型</span></span><br><span class="line">net = nn.Sequential(</span><br><span class="line">    nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, kernel_size=<span class="number">5</span>), </span><br><span class="line">    BatchNorm(<span class="number">6</span>, num_dims=<span class="number">4</span>), <span class="comment"># 第一个卷积后增加 BatchNorm 在Sigmoid之前，给定输入的通道数6</span></span><br><span class="line">    nn.Sigmoid(), </span><br><span class="line">    nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line">    nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, kernel_size=<span class="number">5</span>), </span><br><span class="line">    BatchNorm(<span class="number">16</span>, num_dims=<span class="number">4</span>), <span class="comment"># 第二个卷积后增加 BatchNorm 在Sigmoid之前</span></span><br><span class="line">    nn.Sigmoid(), </span><br><span class="line">    nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>), </span><br><span class="line">    nn.Flatten(),</span><br><span class="line">    nn.Linear(<span class="number">16</span>*<span class="number">4</span>*<span class="number">4</span>, <span class="number">120</span>), </span><br><span class="line">    BatchNorm(<span class="number">120</span>, num_dims=<span class="number">2</span>), <span class="comment"># 在线性层后增加 BatchNorm 在Sigmoid之前，给定输出的通道数120</span></span><br><span class="line">    nn.Sigmoid(),</span><br><span class="line">    nn.Linear(<span class="number">120</span>, <span class="number">84</span>), </span><br><span class="line">    BatchNorm(<span class="number">84</span>, num_dims=<span class="number">2</span>), <span class="comment"># 在线性层后增加 BatchNorm 在Sigmoid之前</span></span><br><span class="line">    nn.Sigmoid(),</span><br><span class="line">    nn.Linear(<span class="number">84</span>, <span class="number">10</span>)) <span class="comment"># 输出层不增加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Fashion-MNIST 数据集上训练带有批量归一化的 卷积神经网络(LeNet)</span></span><br><span class="line">lr, num_epochs, batch_size = <span class="number">1.0</span>, <span class="number">10</span>, <span class="number">256</span></span><br><span class="line">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br><span class="line">d2l.train_ch6(net, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉伸参数 gamma 和偏移参数 beta</span></span><br><span class="line">net[<span class="number">1</span>].gamma.reshape((-<span class="number">1</span>,)), net[<span class="number">1</span>].beta.reshape((-<span class="number">1</span>,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简明实现</span></span><br><span class="line">net = nn.Sequential(</span><br><span class="line">    nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, kernel_size=<span class="number">5</span>), </span><br><span class="line">    nn.BatchNorm2d(<span class="number">6</span>), <span class="comment"># 不需要增加维度，内部自动处理</span></span><br><span class="line">    nn.Sigmoid(), </span><br><span class="line">    nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>), </span><br><span class="line">    nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, kernel_size=<span class="number">5</span>), </span><br><span class="line">    nn.BatchNorm2d(<span class="number">16</span>), </span><br><span class="line">    nn.Sigmoid(), </span><br><span class="line">    nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>), </span><br><span class="line">    nn.Flatten(), </span><br><span class="line">    nn.Linear(<span class="number">256</span>, <span class="number">120</span>), </span><br><span class="line">    nn.BatchNorm1d(<span class="number">120</span>), </span><br><span class="line">    nn.Sigmoid(), </span><br><span class="line">    nn.Linear(<span class="number">120</span>, <span class="number">84</span>), </span><br><span class="line">    nn.BatchNorm1d(<span class="number">84</span>), </span><br><span class="line">    nn.Sigmoid(), </span><br><span class="line">    nn.Linear(<span class="number">84</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用相同超参数来训练模型</span></span><br><span class="line">d2l.train_ch6(net, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())</span><br></pre></td></tr></table></figure><p>那现在应该使用什么预训练模型能满足需求呢？</p><p>训练场景项目的 文件结构是什么样</p><h3 id="训练思路"><a href="#训练思路" class="headerlink" title="训练思路"></a>训练思路</h3><h4 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h4><p>我现在对机器学习有一些不理解，我知道大致的学习流程 比如 准备预处理数据集  然后不知道怎么处理数据 后面是开始学习 然后微调 最后得到想要的结果  中间的细节我不太懂</p><h4 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h4><ul><li>数据收集和预处理：<ul><li>收集数据集，包括训练数据、验证数据和测试数据。</li><li>数据清洗：处理缺失值、异常值等。</li><li>特征工程：选择合适的特征、进行特征变换和提取。</li><li>数据标准化或归一化：确保数据在相同的尺度范围内，以提高模型训练的稳定性和收敛速度。</li></ul></li><li>选择合适的模型：<ul><li>根据问题类型（分类、回归、聚类等）和数据特点选择合适的模型。</li><li>选择模型的结构和参数，可以通过调参、网格搜索等方法来寻找最优的模型配置。</li></ul></li><li>模型训练：<ul><li>使用训练数据对模型进行训练。</li><li>选择合适的损失函数和优化算法。</li><li>监控训练过程中的指标，如损失函数值、准确率等。</li></ul></li><li>模型评估：<ul><li>使用验证数据集评估模型的性能，检查模型是否过拟合或欠拟合。</li><li>考虑不同的评估指标，如准确率、精确率、召回率、F1 分数等。</li></ul></li><li>模型微调和优化：<ul><li>根据验证结果调整模型结构、超参数和优化算法，以进一步提高模型性能。</li><li>可以使用交叉验证等技术来确定最优的参数组合。</li></ul></li><li>模型部署和应用：<ul><li>使用测试数据对模型进行最终评估。</li><li>将模型部署到生产环境中，应用于实际问题解决中。</li></ul></li><li>持续监控和更新：<ul><li>监控模型在实际应用中的性能，定期更新模型以适应数据的变化和新的需求。</li></ul></li></ul><h3 id="梳理一下第一步-数据收集和预处理的每个细节"><a href="#梳理一下第一步-数据收集和预处理的每个细节" class="headerlink" title="梳理一下第一步 数据收集和预处理的每个细节"></a>梳理一下第一步 数据收集和预处理的每个细节</h3><h4 id="提问-1"><a href="#提问-1" class="headerlink" title="提问"></a>提问</h4><p>我现在计划训练一个能帮助我写代码的机器人</p><p>需求和目标如下：</p><p>模型是专注于特定编程语言（Html5、css3、php8、Mysql8）<br>其中 php 采用的是 Hyperf3.1 版本基于Swoole的协程框架<br>项目整体采用的Docker-compose 架构<br>模型的应用场景，用于自动生成函数、类、模块、甚至是整个项目的代码。<br>设计模型目标输出：<br>基于自然语言描述自动生成符合需求的<br>函数和类<br>API说明文档<br>数据表<br>除了能根据代码片段生成建议代码，我还要能够正常和ai沟通，让他了解我的需求，从而进一步帮我生成更完善的需求代码<br>我现在的项目预训练数据大概是这种结构(每个结构中都是一个文件夹，内部都是相关的许多文件)：</p><p>服务端<br>使用的hyperf3.1基于swoole（PHP的异步、并行、高性能网络通信引擎,支持TCP长连接,Websocket,Mqtt等协议）的php语言框架<br>数据库<br>mysql目前只有一个sql文件。<br>前端代码<br>基于Vue3的JavaScript 框架，包含了sass等   现在可以从php的项目初始化的所有文件开始，你结合一下上面的解答，帮我梳理一下第一步 数据收集和预处理的每个细节</p><h4 id="回答-1"><a href="#回答-1" class="headerlink" title="回答"></a>回答</h4><p>第一步是数据收集和预处理，针对您的项目需求，这个步骤可以细分如下：</p><ul><li>收集预训练数据：<ul><li>从您的项目中收集关于 PHP、HTML5、CSS3、MySQL8 的代码片段和相关文档，包括函数、类、模块、API 文档等。</li><li>收集关于 Hyperf3.1 和 Docker-compose 架构的相关文档和示例代码。</li></ul></li><li>数据清洗：<ul><li>清洗收集到的代码片段和文档，去除无效的、重复的或者不相关的部分。</li><li>处理可能存在的缺失值、异常值等问题。</li></ul></li><li>数据标准化或归一化：<ul><li>对收集到的数据进行统一的格式处理，确保数据的一致性和可比性。</li><li>对代码片段进行标准化，去除不必要的格式差异，使其适合模型训练。</li></ul></li><li>特征工程：<ul><li>对收集到的代码片段进行特征提取，包括词频统计、词向量化等方法，以便模型理解和处理。</li><li>对文档和注释进行文本处理，提取关键信息和特征，以便模型生成相应的代码片段或文档。</li></ul></li><li>构建预处理数据集：<ul><li>将清洗和标准化后的数据组织成适合模型训练的数据集，包括训练数据集、验证数据集和测试数据集。</li><li>将数据集保存为适合模型读取的格式，如 JSON、CSV 等。</li></ul></li><li>记录数据预处理过程：<ul><li>记录数据预处理的步骤和方法，以便后续复现和调整。</li><li>记录数据集的统计信息，如数据量、特征数量等。</li></ul></li><li>数据集管理和版本控制：<ul><li>使用版本控制工具管理数据集的版本，确保数据集的一致性和可追溯性。</li><li>定期更新数据集，保持数据集的新鲜和有效性。</li></ul></li><li>通过以上步骤，您可以完成数据收集和预处理阶段，为后续模型训练提供高质量的数据基础。</li></ul><h4 id="对php文件进行处理"><a href="#对php文件进行处理" class="headerlink" title="对php文件进行处理"></a>对php文件进行处理</h4><h5 id="提问-2"><a href="#提问-2" class="headerlink" title="提问"></a>提问</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">给你举个例子 这是.php文件的某个文件 你看一下 如果想要学习的话 需要怎么处理 </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This file is part of Hyperf.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span>     https://www.hyperf.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@document</span> https://hyperf.wiki</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@contact</span>  group<span class="doctag">@hyperf</span>.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span>  https://github.com/hyperf/hyperf/blob/master/LICENSE</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Constants</span>\<span class="title">ErrorCode</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Server</span>\<span class="title">Exception</span>\<span class="title">ServerException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Throwable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BusinessException</span> <span class="keyword">extends</span> <span class="title">ServerException</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$code</span> = <span class="number">0</span>, <span class="keyword">string</span> <span class="variable">$message</span> = <span class="literal">null</span>, <span class="built_in">Throwable</span> <span class="variable">$previous</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_null(<span class="variable">$message</span>)) &#123;</span><br><span class="line">            <span class="variable">$message</span> = ErrorCode::getMessage(<span class="variable">$code</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">parent</span>::__construct(<span class="variable">$message</span>, <span class="variable">$code</span>, <span class="variable">$previous</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="回答-2"><a href="#回答-2" class="headerlink" title="回答"></a>回答</h5><p>下面是对这个 PHP 文件进行预处理的一般步骤：</p><ul><li>去除注释和文档注释： 通常代码中包含了大量的注释，但是这些注释对于模型的训练来说可能并不重要，因此可以选择去除注释部分，只保留代码。</li><li>分词或分割代码： 将代码分割成单词或标记，这样可以更容易地处理和理解代码结构。在 PHP 中，可以根据空格、分号、括号等符号进行分割。</li><li>处理命名空间和引用： 在这个例子中，可以将命名空间 namespace App\Exception; 和 use 声明语句 use App\Constants\ErrorCode; 进行处理，可能需要将它们转换成相应的标记或特殊表示形式。</li><li>特殊字符处理： 有些特殊字符可能需要进行特殊处理，例如 :, -&gt;, :: 等符号在代码中具有特殊含义，需要注意处理。</li><li>将代码转换成数字表示： 最终，将预处理后的代码转换成模型可以理解的数字表示，例如使用词嵌入或字符嵌入进行编码。</li><li>数据序列化和保存： 将预处理后的数据序列化并保存到文件中，以便后续模型的训练和使用。</li></ul><h3 id="数据集收集和处理训练数据"><a href="#数据集收集和处理训练数据" class="headerlink" title="数据集收集和处理训练数据"></a>数据集收集和处理训练数据</h3><blockquote><p>收集大量源代码作为训练数据，可以是从开源项目中爬取的代码片段或完整的项目。<br>对这些源代码进行标注或构建对应的自然语言描述（如果适用），形成输入-输出对（NL-code pairs）。</p></blockquote><p>Q:对于数据代码，我只有例如Html5、css3、php8、Mysql8等语言而定项目代码 怎么办</p><ul><li>PHP（hyperf3.1基于swoole）<ul><li>提取注释<ul><li>使用正则表达式或解析器来提取PHP文件中的注释作为自然语言描述。</li><li>将注释与其对应的代码片段（函数、类或方法）组合成训练数据。</li></ul></li><li>自动生成描述<ul><li>使用自然语言生成（NLG）技术为PHP文件自动生成自然语言描述。</li></ul></li></ul></li><li>Mysql<ul><li>提取MySQL SQL文件中的注释作为自然语言描述。</li><li>将注释与其对应的SQL语句或数据模型组合成训练数据。</li></ul></li><li>前端代码（Vue3 + JavaScript + Sass等）<ul><li>提取注释<ul><li>提取Vue文件、JavaScript文件和Sass文件中的注释作为自然语言描述。</li><li>将注释与其对应的代码片段（组件、函数、样式等）组合成训练数据。</li></ul></li><li>自动生成描述<ul><li>使用自然语言生成（NLG）技术为Vue文件、JavaScript文件和Sass文件自动生成自然语言描述。</li></ul></li></ul></li></ul><p>Q:模型能够运行对应的语言环境达到理解和测试代码吗？</p><ul><li>可以将训练好的模型集成到代码生成器或辅助工具中，以帮助理解和生成代码</li></ul><p>我现在准备采用 Transformer 架构，T5模型作为基础预训练模型<br>如何对我现有的数据进行预处理，如何将代码片段和对应的自然语言描述配对，并进行标记化、分词等处理？</p><p>我找到了 一个 php的数据集Card 里面似乎是 php的使用文档 包括所有的内置方法 参数 变量使用说明等等 这个对我的需求有帮助吗</p><p>帮我寻找一些 和我这个需求符合的 已有数据集Card，能够直接用</p><p>找到的数据集：php</p><ul><li>框架核心架构<ul><li>运行在 Swoole 5 的协程和 Swow 协程之上</li><li>协程<ul><li>配置<ul><li>配置文件结构   <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">config</span><br><span class="line">├── autoload <span class="regexp">//</span> 此文件夹内的配置文件会被配置组件自己加载，并以文件夹内的文件名作为第一个键值</span><br><span class="line">│   ├── amqp.php  <span class="regexp">//</span> 用于管理 AMQP 组件</span><br><span class="line">│   ├── annotations.php <span class="regexp">//</span> 用于管理注解</span><br><span class="line">│   ├── apollo.php <span class="regexp">//</span> 用于管理基于 Apollo 实现的配置中心</span><br><span class="line">│   ├── aspects.php <span class="regexp">//</span> 用于管理 AOP 切面</span><br><span class="line">│   ├── async_queue.php <span class="regexp">//</span> 用于管理基于 Redis 实现的简易队列服务</span><br><span class="line">│   ├── cache.php <span class="regexp">//</span> 用于管理缓存组件</span><br><span class="line">│   ├── commands.php <span class="regexp">//</span> 用于管理自定义命令</span><br><span class="line">│   ├── consul.php <span class="regexp">//</span> 用于管理 Consul 客户端</span><br><span class="line">│   ├── databases.php <span class="regexp">//</span> 用于管理数据库客户端</span><br><span class="line">│   ├── dependencies.php <span class="regexp">//</span> 用于管理 DI 的依赖关系和类对应关系</span><br><span class="line">│   ├── devtool.php <span class="regexp">//</span> 用于管理开发者工具</span><br><span class="line">│   ├── exceptions.php <span class="regexp">//</span> 用于管理异常处理器</span><br><span class="line">│   ├── listeners.php <span class="regexp">//</span> 用于管理事件监听者</span><br><span class="line">│   ├── logger.php <span class="regexp">//</span> 用于管理日志</span><br><span class="line">│   ├── middlewares.php <span class="regexp">//</span> 用于管理中间件</span><br><span class="line">│   ├── opentracing.php <span class="regexp">//</span> 用于管理调用链追踪</span><br><span class="line">│   ├── processes.php <span class="regexp">//</span> 用于管理自定义进程</span><br><span class="line">│   ├── redis.php <span class="regexp">//</span> 用于管理 Redis 客户端</span><br><span class="line">│   └── server.php <span class="regexp">//</span> 用于管理 Server 服务</span><br><span class="line">├── config.php <span class="regexp">//</span> 用于管理用户或框架的配置，如配置相对独立亦可放于 autoload 文件夹内</span><br><span class="line">├── container.php <span class="regexp">//</span> 负责容器的初始化，作为一个配置文件运行并最终返回一个 Psr\Container\ContainerInterface 对象</span><br><span class="line">└── routes.php <span class="regexp">//</span> 用于管理路由</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>注解</li><li>依赖注入</li><li>事件机制</li></ul></li><li>基础功能<ul><li>路由</li><li>中间件</li><li>控制器</li><li>请求</li><li>响应</li><li>异常处理</li><li>缓存</li><li>日志</li><li>分页器</li><li>命令行</li><li>自动化测试</li><li>视图</li><li>视图引擎</li><li>国际化</li><li>验证器</li><li>Session会话管理</li><li>文件系统</li></ul></li><li>数据库模型</li><li>客户端</li><li>消息队列</li><li>其他组件<ul><li>连接池</li><li>自定义进程</li><li>辅助类</li><li>定时任务</li><li>Task机制</li><li>枚举类</li><li>信号处理器</li><li>ReactiveX</li><li>Watcher</li><li>Phar打包器</li></ul></li><li>应用部署<ul><li>DockerSwarm集群搭建</li><li>DaoCloudDevops搭建</li><li>Supervisor部署</li><li>Nginx反向代理</li><li>阿里云日志服务</li></ul></li></ul><p>站在神经网络深度学习的角度上，帮我将hyperf3.1框架（文档网站<a href="https://hyperf.wikitarget="_blank" rel="noopener">https://hyperf.wiki/3.1）整理成可以做成数据集的格式，内容是框架的核心架构、基础功能、数据库模型、客户端、消息队列、其他组件、应用部署等等</a></p><p>这些就可以让神经网络深度学习进行学习了是吗</p><p>ok，你先帮我整理hyperf3.1框架（文档网站<a href="https://hyperf.wiki/3.1%EF%BC%89" target="_blank" rel="noopener">https://hyperf.wiki/3.1）</a> 核心架构一章所有重要的数据集，不需向我解释，直接写JSON</p><h2 id="Download模型"><a href="#Download模型" class="headerlink" title="Download模型"></a>Download模型</h2><blockquote><p><a href="https://hf-mirror.com/" target="_blank" rel="noopener">https://hf-mirror.com/</a> 使用镜像源 + 迅雷下载 token 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</p></blockquote><p>huggingface-cli download –token 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 –resume-download google&#x2F;gemma-7b –local-dir Z:\web\code_assistant\models\other\google-gemma-7b</p><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><p>下载模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># export HF_HUB_ENABLE_HF_TRANSFER=1  # For Linux/macOS</span></span><br><span class="line"><span class="comment"># set HF_HUB_ENABLE_HF_TRANSFER=1     # For Windows (Command Prompt)</span></span><br><span class="line"><span class="comment"># huggingface-cli download --resume-download deepseek-ai/deepseek-coder-33b-instruct --local-dir models/other/deepseek-ai/deepseek-coder-33b-instruct</span></span><br></pre></td></tr></table></figure><h2 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h2><h3 id="Approaching-Almost-Any-NLP-Problem"><a href="#Approaching-Almost-Any-NLP-Problem" class="headerlink" title="Approaching (Almost) Any NLP Problem"></a>Approaching (Almost) Any NLP Problem</h3><blockquote><p>下载 Datasets 数据集 <a href="https://www.kaggle.com/datasets/abhishek/aaamlp/code" target="_blank" rel="noopener">https://www.kaggle.com/datasets/abhishek/aaamlp/code</a></p></blockquote><h4 id="有监督和无监督学习"><a href="#有监督和无监督学习" class="headerlink" title="有监督和无监督学习"></a>有监督和无监督学习</h4><p>在处理机器学习问题时，通常有两类数据：</p><ul><li>监督数据：通过有标签的数据训练模型，然后进行推理<ul><li>分类：预测类别，如猫或狗</li><li>回归：预测数值，如房价</li><li>…</li></ul></li><li>无监督数据：在没有标签的情况下，试图从数据中发现隐藏的结构或模式，然后进行推理<ul><li>聚类：将数据样本分组成具有相似特征的集合，以便更好地理解数据的内在结构和性质。聚类常被用于数据探索、模式发现以及在预处理阶段为其他机器学习任务提供有用的特征。</li><li>…</li></ul></li></ul><p>处理无监督问题时，首先要将数据分为n个聚类。</p><p>进而使用 <code>聚类算法</code> 解决无监督问题.</p><p>为了理解无监督问题，我们还需要了解 <code>降维和特征提取(分解)技术</code>：</p><ul><li>主成分分析（PCA）<ul><li>主要用于数据的降维。它试图找到数据中最重要的方向，以尽可能保留原始数据中的方差，同时减少数据的维度。PCA通常用于探索性数据分析和特征提取，也可用于数据压缩和去噪。</li></ul></li><li>独立成分分析（Independent Component Analysis，ICA）：<ul><li>用于从混合信号中分离出统计独立的成分，通常用于信号处理和脑电图（EEG）数据分析。</li></ul></li><li>t-分布随机邻域嵌入（t-SNE）<ul><li>用于数据的可视化。它可以将高维数据映射到二维或三维空间，以便直观地展示数据的结构和关系。t-SNE通常用于探索性数据分析、聚类验证和分类问题的可视化。</li></ul></li><li>因子分析（Factor Analysis）<ul><li>用于发现数据中的潜在变量或因素，通过将观察到的变量表示为潜在因素的线性组合。</li></ul></li></ul><p>实验对象：MNIST数据集（图像0123456789）</p><p>进行 t 分布随机邻域嵌入（t-SNE）分解，将数据降维到2个维度，就可以在一定程度上分离图像</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 matplotlib 和 seaborn 进行绘图</span></span><br><span class="line"><span class="comment"># 使用 numpy 处理数值数组</span></span><br><span class="line"><span class="comment"># 使用 pandas 从数值数组创建数据帧</span></span><br><span class="line"><span class="comment"># 使用 scikit-learn (sklearn) 获取数据并执行 t-SNE。</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> manifold</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载数据并单独读取，或者使用 sklearn 的内置函数来提供 MNIST 数据集。</span></span><br><span class="line">data = datasets.fetch_openml(<span class="string">&#x27;mnist_784&#x27;</span>, version=<span class="number">1</span>, return_X_y=<span class="literal">True</span>, parser=<span class="string">&#x27;auto&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pixel_values 是一个形状为 70000x784 的二维数组。 共有 70000 张不同的图像，每张图像大小为 28x28 像素。平铺 28x28 后得到 784 个数据点。</span></span><br><span class="line">pixel_values, targets = data</span><br><span class="line">pixel_values = np.array(pixel_values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面获得了一个像素值数组和另一个目标数组。由于目标是字符串类型，我们将其转换为整数。</span></span><br><span class="line">targets = targets.astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将该数据集中的样本重塑为原来的形状，然后使用 matplotlib 绘制成图表，从而将其可视化。</span></span><br><span class="line">single_image = pixel_values[<span class="number">1</span>, :].reshape(<span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">plt.imshow(single_image, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建了数据的 t-SNE 变换。只使用 2 个维度，因为在二维环境中可以很好地将它们可视化。在本例中，转换后的数据是一个 3000x2 形状的数组（3000 行 2 列）。在数组上调用 pd.DataFrame 可以将这样的数据转换为 pandas 数据帧。</span></span><br><span class="line">tsne = manifold.TSNE(n_components=<span class="number">2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">transformed_data = tsne.fit_transform(pixel_values[:<span class="number">3000</span>, :])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从一个 numpy 数组创建一个 pandas 数据帧。x 和 y 是 t-SNE 分解的两个维度，target 是实际数字。</span></span><br><span class="line">tsne_df = pd.DataFrame(np.column_stack((transformed_data, targets[:<span class="number">3000</span>])),</span><br><span class="line">                       columns=[<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;targets&quot;</span>])</span><br><span class="line">tsne_df.loc[:, <span class="string">&quot;targets&quot;</span>] = tsne_df.targets.astype(<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(tsne_df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，可以使用 seaborn 和 matplotlib 绘制它。</span></span><br><span class="line">grid = sns.FacetGrid(tsne_df, hue=<span class="string">&quot;targets&quot;</span>, height=<span class="number">8</span>)</span><br><span class="line">grid.<span class="built_in">map</span>(plt.scatter, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>).add_legend()</span><br></pre></td></tr></table></figure><div>                <img src="/blog/p/614a8113/tsne_df.png" alt="tsne_df数据帧" height="300px" width="400px"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[tsne_df数据帧]</p>            </div><div>                <img src="/blog/p/614a8113/进行t分布随机邻域嵌入（t-SNE）分解，将数据降维到2个维度，就可以在一定程度上分离图像.png" alt="进行t分布随机邻域嵌入（t-SNE）分解，将数据降维到2个维度，就可以在一定程度上分离图像"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[进行t分布随机邻域嵌入（t-SNE）分解，将数据降维到2个维度，就可以在一定程度上分离图像]</p>            </div><p>这是无监督数据集可视化的一种方法。我们还可以在同一数据集上进行 k-means 聚类，看看它在无监督环境下的表现如何。</p><p>一个经常出现的问题是，如何在 k-means 聚类中找到最佳的簇数。这个问题没有正确答案。你必须通过交叉验证来找到最佳簇数。</p><h4 id="交叉检验"><a href="#交叉检验" class="headerlink" title="交叉检验"></a>交叉检验</h4><blockquote><p>建立模型的步骤之一，确保模型准确拟合数据,同时确保我们不会过拟合。</p></blockquote><p>测试数据集：红酒质量数据集（red wine quality dataset）</p><p>数据集中有11个特征，共同决定了红酒的质量</p><ul><li>固定酸度（fixed acidity）</li><li>挥发性酸度（volatile acidity）</li><li>柠檬酸（citric acid）</li><li>残留糖（residual sugar）</li><li>氯化物（chlorides）</li><li>游离二氧化硫（free sulfur dioxide）</li><li>二氧化硫总量（total sulfur dioxide）</li><li>密度（density）</li><li>PH 值（pH）</li><li>硫酸盐（sulphates）</li><li>酒精（alcohol）</li></ul><p>根据这些特征，现在需要预测红葡萄酒的质量，质量值介于 0 到 10 之间。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;winequality-red.csv&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以将这个问题视为 分类问题，也可以视为 回归问题</p><p>简单起见，选择分类</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个映射字典，用于将质量值从 0 到 5 进行映射</span></span><br><span class="line">quality_mapping = &#123;</span><br><span class="line"> <span class="number">3</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="number">4</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>: <span class="number">2</span>,</span><br><span class="line"> <span class="number">6</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="number">7</span>: <span class="number">4</span>,</span><br><span class="line"> <span class="number">8</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以使用 pandas 的 map 函数以及任何字典，</span></span><br><span class="line"><span class="comment"># 来转换给定列中的值为字典中的值</span></span><br><span class="line">df.loc[:, <span class="string">&quot;quality&quot;</span>] = df.quality.<span class="built_in">map</span>(quality_mapping)</span><br></pre></td></tr></table></figure><h4 id="分类变量"><a href="#分类变量" class="headerlink" title="分类变量"></a>分类变量</h4><p>两种类型</p><ul><li>无序变量(名义变量)<ul><li>它们的不同取值之间没有没有顺序或等级，例如 <code>性别（男性、女性）</code></li></ul></li><li>有序变量<ul><li>它们的不同取值之间存在一定的顺序关系，例如 <code>教育水平（小学、初中、高中、大学）</code> <code>周数（周一、周二、周三、周四、周五、周六、周日）</code></li></ul></li></ul><p>数据集由各种分类变量组成</p><ul><li>无序</li><li>有序</li><li>循环</li><li>二元</li></ul><blockquote><p>下载 数据集 <a href="https://www.kaggle.com/competitions/cat-in-the-dat-ii/data" target="_blank" rel="noopener">https://www.kaggle.com/competitions/cat-in-the-dat-ii/data</a> </p></blockquote><p>该数据集中总体而言，有：</p><ul><li>5个二元变量</li><li>10个无序变量</li><li>6个有序变量</li><li>2个循环变量</li><li>1个目标变量</li></ul><h5 id="标签编码"><a href="#标签编码" class="headerlink" title="标签编码"></a>标签编码</h5><blockquote><p>将类别型数据转换为整数型数据</p></blockquote><p>计算机无法理解文本数据，所以需要将这些类别转换为数字，简单的办法是转换为字典</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 映射字典</span></span><br><span class="line">mapping = &#123;</span><br><span class="line"><span class="string">&quot;Freezing&quot;</span>: <span class="number">0</span>, </span><br><span class="line"><span class="string">&quot;Warm&quot;</span>: <span class="number">1</span>, </span><br><span class="line"><span class="string">&quot;Cold&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">&quot;Boiling Hot&quot;</span>: <span class="number">3</span>, </span><br><span class="line"><span class="string">&quot;Hot&quot;</span>: <span class="number">4</span>,</span><br><span class="line"><span class="string">&quot;Lava Hot&quot;</span>: <span class="number">5</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;../input/cat_train.csv&quot;</span>) </span><br><span class="line"><span class="comment"># 取ord_2列，并使用映射将类别转换为数字</span></span><br><span class="line">df.loc[:, <span class="string">&quot;ord_2&quot;</span>] = df.ord_2.<span class="built_in">map</span>(mapping)</span><br></pre></td></tr></table></figure><p>使用 scikit-learn 中的 LabelEncoder 进行编码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing </span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;../input/cat_train.csv&quot;</span>) </span><br><span class="line"><span class="comment"># 将缺失值填充为&quot;NONE&quot;</span></span><br><span class="line">df.loc[:, <span class="string">&quot;ord_2&quot;</span>] = df.ord_2.fillna(<span class="string">&quot;NONE&quot;</span>) </span><br><span class="line"><span class="comment"># LabelEncoder编码</span></span><br><span class="line">lbl_enc = preprocessing.LabelEncoder()</span><br><span class="line"><span class="comment"># 转换数据</span></span><br><span class="line">df.loc[:, <span class="string">&quot;ord_2&quot;</span>] = lbl_enc.fit_transform(df.ord_2.values)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于这些类型的模型，可以对数据进行二值化处理</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Freezing    --&gt; <span class="number">0</span> --&gt; <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">Warm        --&gt; <span class="number">1</span> --&gt; <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line">Cold        --&gt; <span class="number">2</span> --&gt; <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line">Boiling Hot --&gt; <span class="number">3</span> --&gt; <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line">Hot         --&gt; <span class="number">4</span> --&gt; <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line">Lava Hot    --&gt; <span class="number">5</span> --&gt; <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这只是将类别转换为数字，然后再转换为二值化表示。</p><p>但是如果用稀疏格式存储大量二值化变量，就可以轻松存储</p><h5 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h5><blockquote><p>只是一种存储方式，它并不会对数据的类型进行转换或处理，用于表示大多数元素为零的矩阵，能够有效地节省内存空间。它只包含非零元素，而其他元素为零。</p></blockquote><p>我们将数据进行数值化步骤：</p><ul><li>定义特征</li><li>对数据二值化处理 01存储</li><li>稀疏矩阵转矩阵 只存储<code>非零元素的位置</code>和<code>值</code></li></ul><p>numpy数组简单实现</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> sparse</span><br><span class="line"></span><br><span class="line">example = np.array(</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], </span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    ] </span><br><span class="line">)</span><br><span class="line">sparse_example = sparse.csr_matrix(example)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sparse_example.data.nbytes)</span><br><span class="line"><span class="comment"># Out: 32字节</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 稀疏 csr 矩阵的总大小是三个值的总和</span></span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    sparse_example.data.nbytes +</span><br><span class="line">    sparse_example.indptr.nbytes +</span><br><span class="line">    sparse_example.indices.nbytes </span><br><span class="line">)</span><br><span class="line"><span class="comment"># Out:64</span></span><br></pre></td></tr></table></figure><p>当我们有更大的数组，差异会很大，例子：基于计数特征的文本数据集</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> sparse</span><br><span class="line">n_rows = <span class="number">10000</span></span><br><span class="line">n_cols = <span class="number">100000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成符合伯努利分布的随机数组，维度为[10000, 100000]</span></span><br><span class="line">example = np.random.binomial(<span class="number">1</span>, p=<span class="number">0.05</span>, size=(n_rows, n_cols))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Size of dense array: <span class="subst">&#123;example.nbytes&#125;</span>&quot;</span>) </span><br><span class="line"><span class="comment"># 将随机矩阵转换为稀疏矩阵</span></span><br><span class="line">sparse_example = sparse.csr_matrix(example)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Size of sparse array: <span class="subst">&#123;sparse_example.data.nbytes&#125;</span>&quot;</span>) </span><br><span class="line">full_size = (</span><br><span class="line">    sparse_example.data.nbytes +</span><br><span class="line">    sparse_example.indptr.nbytes +</span><br><span class="line">    sparse_example.indices.nbytes </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Full size of sparse array: <span class="subst">&#123;full_size&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out:</span></span><br><span class="line">Size of dense array: <span class="number">8000000000</span></span><br><span class="line">Size of sparse array: <span class="number">400050632</span></span><br><span class="line">Full size of sparse array: <span class="number">600115952</span></span><br><span class="line">密集阵列需要 ~8000MB 或大约 8GB 内存。而稀疏阵列只占用 399MB 内存。</span><br></pre></td></tr></table></figure><p>还有一种分类变量 可以进行转换，就是独热编码</p><h5 id="独热编码"><a href="#独热编码" class="headerlink" title="独热编码"></a>独热编码</h5><blockquote><p>将类别型数据转换为向量形式，包含0和1（只有对应类别的位置为1，其他位置都为0）<br>独热向量的数量&#x3D;样本特征的数量</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> sparse </span><br><span class="line">example = np.array( </span><br><span class="line">    [</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], </span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    ] </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Size of dense array: <span class="subst">&#123;example.nbytes&#125;</span>&quot;</span>) </span><br><span class="line">sparse_example = sparse.csr_matrix(example)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Size of sparse array: <span class="subst">&#123;sparse_example.data.nbytes&#125;</span>&quot;</span>) </span><br><span class="line">full_size = (</span><br><span class="line">    sparse_example.data.nbytes +</span><br><span class="line">    sparse_example.indptr.nbytes +</span><br><span class="line">    sparse_example.indices.nbytes </span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Full size of sparse array: <span class="subst">&#123;full_size&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Out:</span></span><br><span class="line">Size of dense array: <span class="number">144</span> <span class="comment"># 密集矩阵内存大小</span></span><br><span class="line">Size of sparse array: <span class="number">24</span> <span class="comment"># 稀疏矩阵data数组的大小</span></span><br><span class="line">Full size of sparse array: <span class="number">52</span> <span class="comment"># 稀疏数组完整内存大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结：密集矩阵内存大小 &gt; 稀疏数组完整内存大小</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 大数据集例子</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成符合均匀分布的随机整数，维度为[1000000, 10000000]</span></span><br><span class="line">example = np.random.randint(<span class="number">1000</span>, size=<span class="number">1000000</span>)</span><br><span class="line"><span class="comment"># 独热编码，非稀疏矩阵</span></span><br><span class="line">ohe = preprocessing.OneHotEncoder(sparse_output=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 将随机数组展平</span></span><br><span class="line">ohe_example = ohe.fit_transform(example.reshape(-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Size of dense array: <span class="subst">&#123;ohe_example.nbytes&#125;</span>&quot;</span>) </span><br><span class="line"><span class="comment"># 独热编码，稀疏矩阵</span></span><br><span class="line">ohe = preprocessing.OneHotEncoder(sparse_output=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 将随机数组展平</span></span><br><span class="line">ohe_example = ohe.fit_transform(example.reshape(-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Size of sparse array: <span class="subst">&#123;ohe_example.data.nbytes&#125;</span>&quot;</span>) </span><br><span class="line">full_size = (</span><br><span class="line">    ohe_example.data.nbytes +</span><br><span class="line">    ohe_example.indptr.nbytes + </span><br><span class="line">    ohe_example.indices.nbytes </span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Full size of sparse array: <span class="subst">&#123;full_size&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out:</span></span><br><span class="line">Size of dense array: <span class="number">8000000000</span> <span class="comment"># 密集矩阵内存大小</span></span><br><span class="line">Size of sparse array: <span class="number">8000000</span> <span class="comment"># 稀疏矩阵data数组的大小</span></span><br><span class="line">Full size of sparse array: <span class="number">16000004</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 密集矩阵内存大小 &gt;  稀疏数组完整内存大小</span></span><br></pre></td></tr></table></figure><p>要处理NaN值</p><ul><li>丢弃</li><li>作为全新的类别</li></ul><p>作为全新的类别代码填充 df.ord_2.fillna(“NONE”)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing </span><br><span class="line"><span class="comment"># 读取训练集</span></span><br><span class="line">train = pd.read_csv(<span class="string">&quot;../input/cat_train.csv&quot;</span>) </span><br><span class="line"><span class="comment"># 读取测试集</span></span><br><span class="line">test = pd.read_csv(<span class="string">&quot;../input/cat_test.csv&quot;</span>) </span><br><span class="line"><span class="comment"># 将测试集&quot;target&quot;列全部置为-1</span></span><br><span class="line">test.loc[:, <span class="string">&quot;target&quot;</span>] = -<span class="number">1</span></span><br><span class="line"><span class="comment"># 将训练集、测试集沿行拼接</span></span><br><span class="line">data = pd.concat([train, test]).reset_index(drop=<span class="literal">True</span>) </span><br><span class="line"><span class="comment"># 将除&quot;id&quot;和&quot;target&quot;列的其他特征列名取出</span></span><br><span class="line">features = [x <span class="keyword">for</span> x <span class="keyword">in</span> train.columns <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;target&quot;</span>]] </span><br><span class="line"><span class="comment"># 遍历特征</span></span><br><span class="line"><span class="keyword">for</span> feat <span class="keyword">in</span> features:</span><br><span class="line">    <span class="comment"># 标签编码</span></span><br><span class="line">    lbl_enc = preprocessing.LabelEncoder()</span><br><span class="line">    <span class="comment"># 将空值替换为&quot;NONE&quot;,并将该列格式变为str</span></span><br><span class="line">    temp_col = data[feat].fillna(<span class="string">&quot;NONE&quot;</span>).astype(<span class="built_in">str</span>).values </span><br><span class="line">    <span class="comment"># 转换数值</span></span><br><span class="line">    data.loc[:, feat] = lbl_enc.fit_transform(temp_col)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据&quot;target&quot;列将训练集与测试集分开</span></span><br><span class="line">train = data[data.target != -<span class="number">1</span>].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">test = data[data.target == -<span class="number">1</span>].reset_index(drop=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>如果在生产环境中，会出现偶发性的 没有任何值的 NaN，模型管道会抛出错误。</p><p>解决方案：创建 罕见类别<br>定义一个稀有值的要求：计数&lt;2000</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df.ord_4 = df.ord_4.fillna(<span class="string">&quot;NONE&quot;</span>)</span><br><span class="line">df.loc[</span><br><span class="line">  df[<span class="string">&quot;ord_4&quot;</span>].value_counts()[df[<span class="string">&quot;ord_4&quot;</span>]].values &lt; <span class="number">2000</span>,</span><br><span class="line">  <span class="string">&quot;ord_4&quot;</span></span><br><span class="line">] = <span class="string">&quot;RARE&quot;</span></span><br><span class="line"><span class="built_in">print</span>(df.ord_4.value_counts())</span><br></pre></td></tr></table></figure><p>构建任何类型的模型之前，交叉检验至关重要，已经观察到 <code>标签/目标分布</code>,，这是一个目标偏斜的二元分类问题，so，使用 StratifiedKFold 分割数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 读取数据文件</span></span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;../input/cat_train.csv&quot;</span>)</span><br><span class="line">    <span class="comment"># 添加&quot;kfold&quot;列，并置为-1</span></span><br><span class="line">    df[<span class="string">&quot;kfold&quot;</span>] = -<span class="number">1</span></span><br><span class="line">    <span class="comment"># 打乱数据顺序，重置索引</span></span><br><span class="line">    df = df.sample(frac=<span class="number">1</span>).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 将目标列取出</span></span><br><span class="line">    y = df.target.values</span><br><span class="line">    <span class="comment"># 分层k折交叉检验</span></span><br><span class="line">    kf = model_selection.StratifiedKFold(n_splits=<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> f, (t_, v_) <span class="keyword">in</span> <span class="built_in">enumerate</span>(kf.split(X=df, y=y)): </span><br><span class="line">        <span class="comment"># 区分折叠</span></span><br><span class="line">        df.loc[v_, <span class="string">&#x27;kfold&#x27;</span>] = f</span><br><span class="line">    <span class="comment"># 保存文件</span></span><br><span class="line">    df.to_csv(<span class="string">&quot;../input/cat_train_folds.csv&quot;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>检查新的折叠 csv，查看每个折叠的样本数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">&quot;../input/cat_train_folds.csv&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(df.kfold.value_counts())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out[X]:  所有折叠都有 120000 个样本。因为训练数据有 600000 个样本，而我们做了5次折叠。</span></span><br><span class="line"><span class="number">4</span>   <span class="number">120000</span></span><br><span class="line"><span class="number">3</span>   <span class="number">120000</span></span><br><span class="line"><span class="number">2</span>   <span class="number">120000</span></span><br><span class="line"><span class="number">1</span>   <span class="number">120000</span></span><br><span class="line"><span class="number">0</span>   <span class="number">120000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以检查每个折叠的目标分布</span></span><br><span class="line"><span class="built_in">print</span>(df[df.kfold==<span class="number">0</span>].target.value_counts())</span><br><span class="line"><span class="comment"># Out[X]:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[df.kfold==<span class="number">1</span>].target.value_counts())</span><br><span class="line"><span class="comment"># Out[X]:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[df.kfold==<span class="number">2</span>].target.value_counts())</span><br><span class="line"><span class="comment"># Out[X]:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[df.kfold==<span class="number">3</span>].target.value_counts())</span><br><span class="line"><span class="comment"># Out[X]:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[df.kfold==<span class="number">4</span>].target.value_counts())</span><br><span class="line"><span class="comment"># Out[X]:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，在每个折叠后，目标的分布都是一样的，可以是相似，并不一定要相同。<br>现在建立模型时，每个折叠中的标签分布都会相同</p><p>建立最简单的模型之一 对所有数据进行 独热编码 并使用 <code>逻辑回归</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">fold</span>):</span><br><span class="line">    <span class="comment"># 读取分层k折交叉检验数据</span></span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;../input/cat_train_folds.csv&quot;</span>)</span><br><span class="line">    <span class="comment"># 取除&quot;id&quot;, &quot;target&quot;, &quot;kfold&quot;外的其他特征列</span></span><br><span class="line">    features = [</span><br><span class="line">        f <span class="keyword">for</span> f <span class="keyword">in</span> df.columns <span class="keyword">if</span> f <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;id&quot;</span>, <span class="string">&quot;target&quot;</span>, <span class="string">&quot;kfold&quot;</span>) </span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># 遍历特征列表</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">        <span class="comment"># 将空值置为&quot;NONE&quot;</span></span><br><span class="line">        df.loc[:, col] = df[col].astype(<span class="built_in">str</span>).fillna(<span class="string">&quot;NONE&quot;</span>)</span><br><span class="line">    <span class="comment"># 取训练集（kfold列中不为fold的样本，重置索引）</span></span><br><span class="line">    df_train = df[df.kfold != fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    <span class="comment"># 取验证集（kfold列中为fold的样本，重置索引）</span></span><br><span class="line">    df_valid = df[df.kfold == fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    <span class="comment"># 独热编码</span></span><br><span class="line">    ohe = preprocessing.OneHotEncoder()</span><br><span class="line">    <span class="comment"># 将训练集、验证集沿行合并</span></span><br><span class="line">    full_data = pd.concat([df_train[features], df_valid[features]], axis=<span class="number">0</span>)</span><br><span class="line">    ohe.fit(full_data[features])</span><br><span class="line">    <span class="comment"># 转换训练集</span></span><br><span class="line">    x_train = ohe.transform(df_train[features])</span><br><span class="line">    <span class="comment"># 转换测试集</span></span><br><span class="line">    x_valid = ohe.transform(df_valid[features])</span><br><span class="line">    <span class="comment"># 逻辑回归</span></span><br><span class="line">    model = linear_model.LogisticRegression()</span><br><span class="line">    <span class="comment"># 使用训练集训练模型</span></span><br><span class="line">    model.fit(x_train, df_train.target.values)</span><br><span class="line">    <span class="comment"># 使用验证集得到预测标签</span></span><br><span class="line">    valid_preds = model.predict_proba(x_valid)[:, <span class="number">1</span>] </span><br><span class="line">    <span class="comment"># 计算auc指标</span></span><br><span class="line">    auc = metrics.roc_auc_score(df_valid.target.values, valid_preds)</span><br><span class="line">    <span class="built_in">print</span>(auc)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 运行折叠0</span></span><br><span class="line">    run(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>上面创建了函数，将数据分为 <code>训练</code> 和 <code>验证</code> 两部分，给定折叠数，处理 NaN 值，对所有数据进行单次编码，并训练一个简单的逻辑回归模型。</p><p>运行代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">❯ python ohe_logres.py</span><br><span class="line">/home/abhishek/miniconda3/envs/ml/lib/python3<span class="number">.7</span>/site-</span><br><span class="line">packages/sklearn/linear_model/_logistic.py:<span class="number">939</span>: ConvergenceWarning: lbfgs </span><br><span class="line">failed to converge (status=<span class="number">1</span>):</span><br><span class="line">STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.</span><br><span class="line">Increase the number of iterations (max_iter) <span class="keyword">or</span> scale the data <span class="keyword">as</span> shown </span><br><span class="line"><span class="keyword">in</span>:</span><br><span class="line">    https://scikit-learn.org/stable/modules/preprocessing.html.</span><br><span class="line">Please also refer to the documentation <span class="keyword">for</span> alternative solver options: </span><br><span class="line">    https://scikit-learn.org/stable/modules/linear_model.html<span class="comment">#logistic-</span></span><br><span class="line">regression</span><br><span class="line">extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)</span><br><span class="line"><span class="number">0.7847865042255127</span></span><br></pre></td></tr></table></figure><p>有一些警告，<code>逻辑回归</code> 似乎没有 <code>收敛到最大迭代次数</code>，因为还没有调整参数，可以看到 AUC 是0.785</p><p>fix 代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">#...</span></span><br><span class="line">    model = linear_model.LogisticRegression()</span><br><span class="line">    model.fit(x_train, df_train.target.values)</span><br><span class="line">    valid_preds = model.predict_proba(x_valid)[:, <span class="number">1</span>] </span><br><span class="line">    auc = metrics.roc_auc_score(df_valid.target.values, valid_preds)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Fold = <span class="subst">&#123;fold&#125;</span>, AUC = <span class="subst">&#123;auc&#125;</span>&quot;</span>) </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 循环运行0~4折</span></span><br><span class="line">    <span class="keyword">for</span> fold_ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>): </span><br><span class="line">        run(fold_)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行代码 -W 忽略警告</span></span><br><span class="line">python -W ignore ohe_logres.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Result</span></span><br><span class="line">Fold = 0, AUC = 0.7847865042255127</span><br><span class="line">Fold = 1, AUC = 0.7853553605899214</span><br><span class="line">Fold = 2, AUC = 0.7879321942914885</span><br><span class="line">Fold = 3, AUC = 0.7870315929550808 </span><br><span class="line">Fold = 4, AUC = 0.7864668243125608</span><br></pre></td></tr></table></figure><p>开始使用 基于 树的模型，比如随机森林。</p><p>应用随机森林时，可以使用标签编码，将每一列中的每个特征都转换为整数，而不是独热编码，因为没太大区别</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> ensemble</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">fold</span>):</span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;../input/cat_train_folds.csv&quot;</span>)</span><br><span class="line">    features = [f <span class="keyword">for</span> f <span class="keyword">in</span> df.columns <span class="keyword">if</span> f <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;id&quot;</span>, <span class="string">&quot;target&quot;</span>, <span class="string">&quot;kfold&quot;</span>) ]</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">        df.loc[:, col] = df[col].astype(<span class="built_in">str</span>).fillna(<span class="string">&quot;NONE&quot;</span>) </span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">        <span class="comment"># 标签编码</span></span><br><span class="line">        lbl = preprocessing.LabelEncoder()</span><br><span class="line">        lbl.fit(df[col])</span><br><span class="line">        df.loc[:, col] = lbl.transform(df[col])</span><br><span class="line">    df_train = df[df.kfold != fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    df_valid = df[df.kfold == fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    x_train = df_train[features].values</span><br><span class="line">    x_valid = df_valid[features].values</span><br><span class="line">    <span class="comment"># 随机森林模型</span></span><br><span class="line">    model = ensemble.RandomForestClassifier(n_jobs=-<span class="number">1</span>) </span><br><span class="line">    model.fit(x_train, df_train.target.values)</span><br><span class="line">    valid_preds = model.predict_proba(x_valid)[:, <span class="number">1</span>] </span><br><span class="line">    auc = metrics.roc_auc_score(df_valid.target.values, valid_preds)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Fold = <span class="subst">&#123;fold&#125;</span>, AUC = <span class="subst">&#123;auc&#125;</span>&quot;</span>) </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> fold_ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>): </span><br><span class="line">        run(fold_)</span><br></pre></td></tr></table></figure><p>使用 scikit-learn 中的随机森林，并取消了独热编码。使用标签编码代替独热编码。得分如下</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ python lbl_rf.py</span><br><span class="line">Fold = <span class="number">0</span>, AUC = <span class="number">0.7167390828113697</span></span><br><span class="line">Fold = <span class="number">1</span>, AUC = <span class="number">0.7165459672958506</span></span><br><span class="line">Fold = <span class="number">2</span>, AUC = <span class="number">0.7159709909587376</span></span><br><span class="line">Fold = <span class="number">3</span>, AUC = <span class="number">0.7161589664189556</span></span><br><span class="line">Fold = <span class="number">4</span>, AUC = <span class="number">0.7156020216155978</span></span><br></pre></td></tr></table></figure><p>在不需要任何超参数调整的情况下，表现比简单的逻辑回归差很多</p><p>现在尝试在稀疏的独热编码数据上运行随机森林，此时还可以尝试使用 <code>奇异值分解</code> 来 <code>减少稀疏的独热编码矩阵</code>。这是自然语言处理中提取主题的常用方法。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> sparse</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> decomposition</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> ensemble</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">fold</span>):</span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;../input/cat_train_folds.csv&quot;</span>)</span><br><span class="line">    features = [f <span class="keyword">for</span> f <span class="keyword">in</span> df.columns <span class="keyword">if</span> f <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;id&quot;</span>, <span class="string">&quot;target&quot;</span>, <span class="string">&quot;kfold&quot;</span>)]</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">        df.loc[:, col] = df[col].astype(<span class="built_in">str</span>).fillna(<span class="string">&quot;NONE&quot;</span>) </span><br><span class="line">    df_train = df[df.kfold != fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    df_valid = df[df.kfold == fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    <span class="comment"># 独热编码</span></span><br><span class="line">    ohe = preprocessing.OneHotEncoder()</span><br><span class="line">    full_data = pd.concat([df_train[features], df_valid[features]], axis=<span class="number">0</span>)</span><br><span class="line">    ohe.fit(full_data[features])</span><br><span class="line"></span><br><span class="line">    x_train = ohe.transform(df_train[features])</span><br><span class="line">    x_valid = ohe.transform(df_valid[features])</span><br><span class="line">    <span class="comment"># 奇异值分解</span></span><br><span class="line">    svd = decomposition.TruncatedSVD(n_components=<span class="number">120</span>) </span><br><span class="line">    full_sparse = sparse.vstack((x_train, x_valid)) </span><br><span class="line">    svd.fit(full_sparse)</span><br><span class="line">    x_train = svd.transform(x_train)</span><br><span class="line">    x_valid = svd.transform(x_valid)</span><br><span class="line">    model = ensemble.RandomForestClassifier(n_jobs=-<span class="number">1</span>)</span><br><span class="line">    model.fit(x_train, df_train.target.values)</span><br><span class="line">    valid_preds = model.predict_proba(x_valid)[:, <span class="number">1</span>] </span><br><span class="line">    auc = metrics.roc_auc_score(df_valid.target.values, valid_preds)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Fold = <span class="subst">&#123;fold&#125;</span>, AUC = <span class="subst">&#123;auc&#125;</span>&quot;</span>) </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> fold_ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>): </span><br><span class="line">        run(fold_)</span><br></pre></td></tr></table></figure><p>对全部数据进行独热编码，然后用训练数据和验证数据在稀疏矩阵上拟合scikit-learn 的 TruncatedSVD。 这样就可以将高维稀疏矩阵减少到120个特征</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">❯ python ohe_svd_rf.py</span><br><span class="line">Fold = <span class="number">0</span>, AUC = <span class="number">0.7064863038754249</span></span><br><span class="line">Fold = <span class="number">1</span>, AUC = <span class="number">0.706050102937374</span></span><br><span class="line">Fold = <span class="number">2</span>, AUC = <span class="number">0.7086069243167242</span></span><br><span class="line">Fold = <span class="number">3</span>, AUC = <span class="number">0.7066819080085971</span></span><br><span class="line">Fold = <span class="number">4</span>, AUC = <span class="number">0.7058154015055585</span></span><br></pre></td></tr></table></figure><p>情况更糟，看来解决这个问题的最佳方法是使用 逻辑回归和独热编码。随机深林似乎耗时太多</p><p>现在试试 XGBoost(最流行的梯度提升算法之一，基于树算法)，使用标签编码数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">fold</span>):</span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;../input/cat_train_folds.csv&quot;</span>)</span><br><span class="line">    features = [f <span class="keyword">for</span> f <span class="keyword">in</span> df.columns <span class="keyword">if</span> f <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;id&quot;</span>, <span class="string">&quot;target&quot;</span>, <span class="string">&quot;kfold&quot;</span>) ]</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">        df.loc[:, col] = df[col].astype(<span class="built_in">str</span>).fillna(<span class="string">&quot;NONE&quot;</span>) </span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">        <span class="comment"># 标签编码</span></span><br><span class="line">        lbl = preprocessing.LabelEncoder()</span><br><span class="line">        lbl.fit(df[col])</span><br><span class="line">        df.loc[:, col] = lbl.transform(df[col])</span><br><span class="line"></span><br><span class="line">    df_train = df[df.kfold != fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    df_valid = df[df.kfold == fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    x_train = df_train[features].values</span><br><span class="line">    x_valid = df_valid[features].values</span><br><span class="line">    <span class="comment"># XGBoost模型，最大深度从3改成了7，将估计器数量从100改成了200</span></span><br><span class="line">    model = xgb.XGBClassifier(</span><br><span class="line">        n_jobs=-<span class="number">1</span>, </span><br><span class="line">        max_depth=<span class="number">7</span>, </span><br><span class="line">        n_estimators=<span class="number">200</span>)</span><br><span class="line">    model.fit(x_train, df_train.target.values)</span><br><span class="line">    valid_preds = model.predict_proba(x_valid)[:, <span class="number">1</span>] </span><br><span class="line">    auc = metrics.roc_auc_score(df_valid.target.values, valid_preds)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Fold = <span class="subst">&#123;fold&#125;</span>, AUC = <span class="subst">&#123;auc&#125;</span>&quot;</span>) </span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        <span class="keyword">for</span> fold_ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>): </span><br><span class="line">            run(fold_)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该模型的 5 折交叉检验得分如下：</span></span><br><span class="line">❯ python lbl_xgb.py</span><br><span class="line">Fold = <span class="number">0</span>, AUC = <span class="number">0.7656768851999011</span></span><br><span class="line">Fold = <span class="number">1</span>, AUC = <span class="number">0.7633006564148015</span></span><br><span class="line">Fold = <span class="number">2</span>, AUC = <span class="number">0.7654277821434345</span></span><br><span class="line">Fold = <span class="number">3</span>, AUC = <span class="number">0.7663609758878182</span></span><br><span class="line">Fold = <span class="number">4</span>, AUC = <span class="number">0.764914671468069</span></span><br></pre></td></tr></table></figure><p>还可以观察到，再不做任何调整的情况下，得分会比普通随机森林高得多。</p><p>现在将数据集换成另外一个有大量分类变量的数据集， 美国成人人口普查数据（US adult census data）。<br>这个数据集中包含一些特征，我们的任务是预测工资等级。</p><p>数据集目前没找到</p><p>该数据集有以下几列： </p><ul><li>年龄（age）</li><li>工作类别（workclass）</li><li>学历（fnlwgt）</li><li>教育程度（education）</li><li>教育程度（education.num）</li><li>婚姻状况（marital.status）</li><li>职业（occupation）</li><li>关系（relationship）</li><li>种族（race）</li><li>性别（sex）</li><li>资本收益（capital.gain）</li><li>资本损失（capital.loss）</li><li>每周小时数（hours.per.week）</li><li>原籍国（native.country）</li><li>收入（income）</li></ul><p>尝试建立一个模型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 收入列是一个字符串。让我们对这一列进行数值统计。</span></span><br><span class="line">In [X]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">In [X]: df = pd.read_csv(<span class="string">&quot;../input/adult.csv&quot;</span>) </span><br><span class="line">In [X]: df.income.value_counts()</span><br><span class="line">Out[X]:</span><br><span class="line">&lt;=50K   <span class="number">24720</span></span><br><span class="line">&gt;50K     <span class="number">7841</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有 7841 个实例的收入超过 5 万美元。这占样本总数的 24%</span></span><br></pre></td></tr></table></figure><p>再开始建模之前，去掉几列特征</p><ul><li>学历（fnlwgt）</li><li>年龄（age）</li><li>资本收益（capital.gain）</li><li>资本损失（capital.loss）</li><li>每周小时数（hours.per.week）</li></ul><p>尝试用逻辑回归和独热编码器，第一步总是要进行交叉验证</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">fold</span>):</span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;../input/adult_folds.csv&quot;</span>)</span><br><span class="line">    <span class="comment"># 需要删除的列</span></span><br><span class="line">    num_cols = [ </span><br><span class="line">        <span class="string">&quot;fnlwgt&quot;</span>, </span><br><span class="line">        <span class="string">&quot;age&quot;</span>,</span><br><span class="line">        <span class="string">&quot;capital.gain&quot;</span>, </span><br><span class="line">        <span class="string">&quot;capital.loss&quot;</span>, </span><br><span class="line">        <span class="string">&quot;hours.per.week&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    df = df.drop(num_cols, axis=<span class="number">1</span>) </span><br><span class="line">    <span class="comment"># 映射</span></span><br><span class="line">    target_mapping = &#123; </span><br><span class="line">        <span class="string">&quot;&lt;=50K&quot;</span>: <span class="number">0</span>, </span><br><span class="line">        <span class="string">&quot;&gt;50K&quot;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 使用映射替换</span></span><br><span class="line">    df.loc[:, <span class="string">&quot;income&quot;</span>] = df.income.<span class="built_in">map</span>(target_mapping)</span><br><span class="line">    <span class="comment"># 取除&quot;kfold&quot;, &quot;income&quot;列的其他列名</span></span><br><span class="line">    features = [f <span class="keyword">for</span> f <span class="keyword">in</span> df.columns <span class="keyword">if</span> f <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;kfold&quot;</span>, <span class="string">&quot;income&quot;</span>) ]</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">        <span class="comment"># 将空值替换为&quot;NONE&quot;</span></span><br><span class="line">        df.loc[:, col] = df[col].astype(<span class="built_in">str</span>).fillna(<span class="string">&quot;NONE&quot;</span>) </span><br><span class="line">    <span class="comment"># 取训练集（kfold列中不为fold的样本，重置索引）</span></span><br><span class="line">    df_train = df[df.kfold != fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    <span class="comment"># 取验证集（kfold列中为fold的样本，重置索引）</span></span><br><span class="line">    df_valid = df[df.kfold == fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    <span class="comment"># 独热编码</span></span><br><span class="line">    ohe = preprocessing.OneHotEncoder()</span><br><span class="line">    <span class="comment"># 将训练集、测试集沿行合并</span></span><br><span class="line">    full_data = pd.concat([df_train[features], df_valid[features]], axis=<span class="number">0</span>)</span><br><span class="line">    ohe.fit(full_data[features])</span><br><span class="line">    <span class="comment"># 转换训练集</span></span><br><span class="line">    x_train = ohe.transform(df_train[features])</span><br><span class="line">    <span class="comment"># 转换验证集</span></span><br><span class="line">    x_valid = ohe.transform(df_valid[features])</span><br><span class="line">    <span class="comment"># 构建逻辑回归模型</span></span><br><span class="line">    model = linear_model.LogisticRegression()</span><br><span class="line">    <span class="comment"># 使用训练集训练模型</span></span><br><span class="line">    model.fit(x_train, df_train.income.values)</span><br><span class="line">    <span class="comment"># 使用验证集得到预测标签</span></span><br><span class="line">    valid_preds = model.predict_proba(x_valid)[:, <span class="number">1</span>] </span><br><span class="line">    <span class="comment"># 计算auc指标</span></span><br><span class="line">    auc = metrics.roc_auc_score(df_valid.income.values, valid_preds)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Fold = <span class="subst">&#123;fold&#125;</span>, AUC = <span class="subst">&#123;auc&#125;</span>&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 运行0~4折</span></span><br><span class="line">    <span class="keyword">for</span> fold_ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>): </span><br><span class="line">        run(fold_)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ python -W ignore ohe_logres.py</span><br><span class="line">Fold = <span class="number">0</span>, AUC = <span class="number">0.8794809708119079</span></span><br><span class="line">Fold = <span class="number">1</span>, AUC = <span class="number">0.8875785068274882</span></span><br><span class="line">Fold = <span class="number">2</span>, AUC = <span class="number">0.8852609687685753</span></span><br><span class="line">Fold = <span class="number">3</span>, AUC = <span class="number">0.8681236223251438</span></span><br><span class="line">Fold = <span class="number">4</span>, AUC = <span class="number">0.8728581541840037</span></span><br></pre></td></tr></table></figure><p>对于一个简单的模型来讲，AUC的值很不错，现在，在不调整任何超参数的情况下尝试一下标签编码的XGBoost</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">fold</span>):</span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;../input/adult_folds.csv&quot;</span>)</span><br><span class="line">    num_cols = [ <span class="string">&quot;fnlwgt&quot;</span>, </span><br><span class="line">                <span class="string">&quot;age&quot;</span>,</span><br><span class="line">                <span class="string">&quot;capital.gain&quot;</span>, </span><br><span class="line">                <span class="string">&quot;capital.loss&quot;</span>, </span><br><span class="line">                <span class="string">&quot;hours.per.week&quot;</span></span><br><span class="line">               ]</span><br><span class="line">    df = df.drop(num_cols, axis=<span class="number">1</span>) </span><br><span class="line">    target_mapping = &#123; </span><br><span class="line">        <span class="string">&quot;&lt;=50K&quot;</span>: <span class="number">0</span>, </span><br><span class="line">        <span class="string">&quot;&gt;50K&quot;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    df.loc[:, <span class="string">&quot;income&quot;</span>] = df.income.<span class="built_in">map</span>(target_mapping)</span><br><span class="line">    features = [f <span class="keyword">for</span> f <span class="keyword">in</span> df.columns <span class="keyword">if</span> f <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;kfold&quot;</span>, <span class="string">&quot;income&quot;</span>) ]</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">        df.loc[:, col] = df[col].astype(<span class="built_in">str</span>).fillna(<span class="string">&quot;NONE&quot;</span>) </span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">        <span class="comment"># 标签编码</span></span><br><span class="line">        lbl = preprocessing.LabelEncoder()</span><br><span class="line">        lbl.fit(df[col])</span><br><span class="line">        df.loc[:, col] = lbl.transform(df[col])</span><br><span class="line"></span><br><span class="line">    df_train = df[df.kfold != fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    df_valid = df[df.kfold == fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    x_train = df_train[features].values</span><br><span class="line">    x_valid = df_valid[features].values</span><br><span class="line">    <span class="comment"># XGBoost模型</span></span><br><span class="line">    model = xgb.XGBClassifier(n_jobs=-<span class="number">1</span>)</span><br><span class="line">    model.fit(x_train, df_train.income.values)</span><br><span class="line">    valid_preds = model.predict_proba(x_valid)[:, <span class="number">1</span>] </span><br><span class="line">    auc = metrics.roc_auc_score(df_valid.income.values, valid_preds)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Fold = <span class="subst">&#123;fold&#125;</span>, AUC = <span class="subst">&#123;auc&#125;</span>&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 运行0~4折</span></span><br><span class="line">    <span class="keyword">for</span> fold_ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>): </span><br><span class="line">        run(fold_)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ python lbl_xgb.py</span><br><span class="line">Fold = <span class="number">0</span>, AUC = <span class="number">0.8800810634234078</span></span><br><span class="line">Fold = <span class="number">1</span>, AUC = <span class="number">0.886811884948154</span></span><br><span class="line">Fold = <span class="number">2</span>, AUC = <span class="number">0.8854421433318472</span></span><br><span class="line">Fold = <span class="number">3</span>, AUC = <span class="number">0.8676319549361007</span></span><br><span class="line">Fold = <span class="number">4</span>, AUC = <span class="number">0.8714450054900602</span></span><br></pre></td></tr></table></figure><p>效果很不错，观察将max_depth 增加到 7 和 n_estimators 增加到 200 时的得分</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ python lbl_xgb.py</span><br><span class="line">Fold = <span class="number">0</span>, AUC = <span class="number">0.8764108944332032</span></span><br><span class="line">Fold = <span class="number">1</span>, AUC = <span class="number">0.8840708537662638</span></span><br><span class="line">Fold = <span class="number">2</span>, AUC = <span class="number">0.8816601162613102</span></span><br><span class="line">Fold = <span class="number">3</span>, AUC = <span class="number">0.8662335762581732</span></span><br><span class="line">Fold = <span class="number">4</span>, AUC = <span class="number">0.8698983461709926</span></span><br></pre></td></tr></table></figure><p>并没有改善，一个数据集的参数不能移植到另一个数据集，我们必须再次尝试调整参数</p><p>现在，在不调整参数的情况下将数值特征纳入XGBoost模型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">fold</span>):</span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;../input/adult_folds.csv&quot;</span>)</span><br><span class="line">    <span class="comment"># 加入数值特征</span></span><br><span class="line">    num_cols = [ </span><br><span class="line">        <span class="string">&quot;fnlwgt&quot;</span>, </span><br><span class="line">        <span class="string">&quot;age&quot;</span>,</span><br><span class="line">        <span class="string">&quot;capital.gain&quot;</span>, </span><br><span class="line">        <span class="string">&quot;capital.loss&quot;</span>, </span><br><span class="line">        <span class="string">&quot;hours.per.week&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    target_mapping = &#123; </span><br><span class="line">        <span class="string">&quot;&lt;=50K&quot;</span>: <span class="number">0</span>, </span><br><span class="line">        <span class="string">&quot;&gt;50K&quot;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    df.loc[:, <span class="string">&quot;income&quot;</span>] = df.income.<span class="built_in">map</span>(target_mapping)</span><br><span class="line">    features = [f <span class="keyword">for</span> f <span class="keyword">in</span> df.columns <span class="keyword">if</span> f <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;kfold&quot;</span>, <span class="string">&quot;income&quot;</span>) ]</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> features: </span><br><span class="line">        <span class="keyword">if</span> col <span class="keyword">not</span> <span class="keyword">in</span> num_cols:</span><br><span class="line">            <span class="comment"># 将空值置为&quot;NONE&quot;</span></span><br><span class="line">            df.loc[:, col] = df[col].astype(<span class="built_in">str</span>).fillna(<span class="string">&quot;NONE&quot;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">        <span class="keyword">if</span> col <span class="keyword">not</span> <span class="keyword">in</span> num_cols:</span><br><span class="line">            <span class="comment"># 标签编码</span></span><br><span class="line">            lbl = preprocessing.LabelEncoder()</span><br><span class="line">            lbl.fit(df[col])</span><br><span class="line">            df.loc[:, col] = lbl.transform(df[col])</span><br><span class="line"></span><br><span class="line">    df_train = df[df.kfold != fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    df_valid = df[df.kfold == fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    x_train = df_train[features].values</span><br><span class="line">    x_valid = df_valid[features].values</span><br><span class="line">    <span class="comment"># XGBoost模型</span></span><br><span class="line">    model = xgb.XGBClassifier(n_jobs=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    model.fit(x_train, df_train.income.values)</span><br><span class="line">    valid_preds = model.predict_proba(x_valid)[:, <span class="number">1</span>] </span><br><span class="line">    auc = metrics.roc_auc_score(df_valid.income.values, valid_preds)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Fold = <span class="subst">&#123;fold&#125;</span>, AUC = <span class="subst">&#123;auc&#125;</span>&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> fold_ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>): </span><br><span class="line">        run(fold_)</span><br></pre></td></tr></table></figure><p>保留数字列，只是不对其进行标签编码，这样 最终特征矩阵就由 <code>数字列（原样）</code> 和 <code>编码分类列</code> 组成了.任何基于树的算法都能轻松处理这种混合。</p><blockquote><p>tips: 在使用基于树的模型时，不需要对数据进行归一化处理。</p></blockquote><p>运行结果：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ python lbl_xgb_num.py</span><br><span class="line">Fold = <span class="number">0</span>, AUC = <span class="number">0.9209790185449889</span> </span><br><span class="line">Fold = <span class="number">1</span>, AUC = <span class="number">0.9247157449144706</span></span><br><span class="line">Fold = <span class="number">2</span>, AUC = <span class="number">0.9269329887598243</span></span><br><span class="line">Fold = <span class="number">3</span>, AUC = <span class="number">0.9119349082169275</span></span><br><span class="line">Fold = <span class="number">4</span>, AUC = <span class="number">0.9166408030141667</span></span><br></pre></td></tr></table></figure><p>分数提高了，现在尝试添加一些功能，将提取所有分类列，并创建所有二度组合。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">feature_engineering</span>(<span class="params">df, cat_cols</span>):</span><br><span class="line">    <span class="comment"># 生成两个特征的组合</span></span><br><span class="line">    combi = <span class="built_in">list</span>(itertools.combinations(cat_cols, <span class="number">2</span>)) </span><br><span class="line">    <span class="keyword">for</span> c1, c2 <span class="keyword">in</span> combi:</span><br><span class="line">        df.loc[:, c1 + <span class="string">&quot;_&quot;</span> + c2] = df[c1].astype(<span class="built_in">str</span>) + <span class="string">&quot;_&quot;</span> + df[c2].astype(<span class="built_in">str</span>) </span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">fold</span>):</span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;../input/adult_folds.csv&quot;</span>) </span><br><span class="line">    num_cols = [ <span class="string">&quot;fnlwgt&quot;</span>, </span><br><span class="line">                <span class="string">&quot;age&quot;</span>,</span><br><span class="line">                <span class="string">&quot;capital.gain&quot;</span>, </span><br><span class="line">                <span class="string">&quot;capital.loss&quot;</span>, </span><br><span class="line">                <span class="string">&quot;hours.per.week&quot;</span></span><br><span class="line">               ]</span><br><span class="line">    target_mapping = &#123; </span><br><span class="line">        <span class="string">&quot;&lt;=50K&quot;</span>: <span class="number">0</span>, </span><br><span class="line">        <span class="string">&quot;&gt;50K&quot;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    df.loc[:, <span class="string">&quot;income&quot;</span>] = df.income.<span class="built_in">map</span>(target_mapping) </span><br><span class="line">    cat_cols = [c <span class="keyword">for</span> c <span class="keyword">in</span> df.columns <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> num_cols <span class="keyword">and</span> c <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;kfold&quot;</span>, <span class="string">&quot;income&quot;</span>)]</span><br><span class="line">    <span class="comment"># 特征工程</span></span><br><span class="line">    df = feature_engineering(df, cat_cols)</span><br><span class="line">    features = [f <span class="keyword">for</span> f <span class="keyword">in</span> df.columns <span class="keyword">if</span> f <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;kfold&quot;</span>, <span class="string">&quot;income&quot;</span>)]</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">        <span class="keyword">if</span> col <span class="keyword">not</span> <span class="keyword">in</span> num_cols:</span><br><span class="line">            df.loc[:, col] = df[col].astype(<span class="built_in">str</span>).fillna(<span class="string">&quot;NONE&quot;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> features:</span><br><span class="line">        <span class="keyword">if</span> col <span class="keyword">not</span> <span class="keyword">in</span> num_cols:</span><br><span class="line">            lbl = preprocessing.LabelEncoder()</span><br><span class="line">            lbl.fit(df[col])</span><br><span class="line">            df.loc[:, col] = lbl.transform(df[col])</span><br><span class="line"></span><br><span class="line">    df_train = df[df.kfold != fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    df_valid = df[df.kfold == fold].reset_index(drop=<span class="literal">True</span>) </span><br><span class="line">    x_train = df_train[features].values</span><br><span class="line">    x_valid = df_valid[features].values</span><br><span class="line">    model = xgb.XGBClassifier(n_jobs=-<span class="number">1</span>)</span><br><span class="line">    model.fit(x_train, df_train.income.values)</span><br><span class="line">    valid_preds = model.predict_proba(x_valid)[:, <span class="number">1</span>] </span><br><span class="line">    auc = metrics.roc_auc_score(df_valid.income.values, valid_preds)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Fold = <span class="subst">&#123;fold&#125;</span>, AUC = <span class="subst">&#123;auc&#125;</span>&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> fold_ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>): </span><br><span class="line">        run(fold_)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样的话，最终可能会创建大量特征，此时，就需要使用某种特征选择来选出最佳特征，现在看看分数</p><p>运行结果：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ python lbl_xgb_num_feat.py</span><br><span class="line">Fold = <span class="number">0</span>, AUC = <span class="number">0.9211483465031423</span></span><br><span class="line">Fold = <span class="number">1</span>, AUC = <span class="number">0.9251499446866125</span></span><br><span class="line">Fold = <span class="number">2</span>, AUC = <span class="number">0.9262344766486692</span></span><br><span class="line">Fold = <span class="number">3</span>, AUC = <span class="number">0.9114264068794995</span></span><br><span class="line">Fold = <span class="number">4</span>, AUC = <span class="number">0.9177914453099201</span></span><br></pre></td></tr></table></figure><p>及时不改变任何超参数，只增加一些特征，也能提高折叠得分，将 max_depth 调整为 7 试试是否有帮助。<br>运行结果：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ python lbl_xgb_num_feat.py</span><br><span class="line">Fold = <span class="number">0</span>, AUC = <span class="number">0.9286668430204137</span></span><br><span class="line">Fold = <span class="number">1</span>, AUC = <span class="number">0.9329340656165378</span></span><br><span class="line">Fold = <span class="number">2</span>, AUC = <span class="number">0.9319817543218744</span></span><br><span class="line">Fold = <span class="number">3</span>, AUC = <span class="number">0.919046187194538</span></span><br><span class="line">Fold = <span class="number">4</span>, AUC = <span class="number">0.9245692057162671</span></span><br></pre></td></tr></table></figure><p>再次改进了模型</p><blockquote><p>tips：请注意，此时还没有使用稀有值、二值化、独热编码和标签编码特征的组合以及其他几种方法。</p></blockquote><h4 id="设置环境"><a href="#设置环境" class="headerlink" title="设置环境"></a>设置环境</h4><ul><li>安装 MiniConda3<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">conda create -n ai python=<span class="number">3</span>.<span class="number">8</span></span><br><span class="line">conda activate ai</span><br><span class="line"></span><br><span class="line">conda env create -f env.yml</span><br><span class="line">conda install x</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="动手学深度学习v2"><a href="#动手学深度学习v2" class="headerlink" title="动手学深度学习v2"></a>动手学深度学习v2</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>查询aws最优惠的配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">https://instances.vantage.sh/?selected=g4dn.xlarge</span><br><span class="line"></span><br><span class="line">ssh ubunto@ip</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install build-essential</span><br><span class="line"></span><br><span class="line">sudo apt install python3<span class="number">.8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装 miniconda docs.conda.io 找到python3<span class="number">.8</span>的包</span><br><span class="line"></span><br><span class="line">wget x86_64.sh</span><br><span class="line"></span><br><span class="line">bash x  壮哉根目录下 初始化 conda</span><br><span class="line"></span><br><span class="line">bash 进入 conda 环境</span><br><span class="line"></span><br><span class="line">pip install jupyter d2l torch torchvision</span><br><span class="line"></span><br><span class="line">记事本 zh-v2.d2l.ai</span><br><span class="line"></span><br><span class="line">wget d2l-zh.<span class="built_in">zip</span></span><br><span class="line"></span><br><span class="line">sudo apt install <span class="built_in">zip</span></span><br><span class="line"></span><br><span class="line">unzip d2l-zh</span><br><span class="line"></span><br><span class="line">cd pytorch</span><br><span class="line"></span><br><span class="line">git clone d2l-ai/d2l-zh-pytorch-sli-des 克隆课件</span><br><span class="line"></span><br><span class="line">jupyter notebook 出现一个link 绑定本地端口 可以进行访问link</span><br><span class="line"></span><br><span class="line">ssh -L8888:localhost:<span class="number">8888</span> ubuntu@ip</span><br><span class="line"></span><br><span class="line">安装插件 幻灯片 rise</span><br><span class="line"></span><br><span class="line">pip install rise</span><br><span class="line"></span><br><span class="line">OPEN notebooks/pytorch/chapter_linear-networks/linear-regression-scratch.ipynb  有个按钮</span><br></pre></td></tr></table></figure><h4 id="下載安裝服務器"><a href="#下載安裝服務器" class="headerlink" title="下載安裝服務器"></a>下載安裝服務器</h4><blockquote><p><a href="https://www.bilibili.com/video/BV18p4y1h7Dr/?spm_id_from=333.999.0.0&amp;vd_source=508e069b09636e2f68f3ef05a2868539" target="_blank" rel="noopener">https://www.bilibili.com/video/BV18p4y1h7Dr/?spm_id_from=333.999.0.0&amp;vd_source=508e069b09636e2f68f3ef05a2868539</a></p></blockquote><h4 id="04-数据操作-数据预处理"><a href="#04-数据操作-数据预处理" class="headerlink" title="04 数据操作 + 数据预处理"></a>04 数据操作 + 数据预处理</h4><p>常见的操作</p><ul><li>N维数组<ul><li>0维：0-d 标量 一个类别</li><li>1维：1-d 向量 一个特征向量</li><li>2维：2-d 矩阵 一个样本-特征矩阵</li><li>3维：3-d 一个RGB图片（宽x高x通道）</li><li>4维：4-d 一个RGB图片批量（批量大下x宽x高x通道）</li><li>5维：4-d 一个视频批量（批量大小x时间x宽x高x通道）</li></ul></li><li>创建数组<ul><li>形状：3x4矩阵</li><li>数据类型：32位浮点数</li><li>每个元素的值 例如都是0，或者随机数<ul><li>正态分布</li><li>均匀分布</li></ul></li></ul></li><li>访问元素<ul><li>一个元素 [1,2]</li><li>一行[1,:] 第一行所有</li><li>一列[:,1] 第一列所有</li><li>子区域[1:3,1:] 1-2行，不包括3（因为python中切片不包含终止索引），第一列-最后一列</li><li>子区域[::3,::2] 从第0行开始，每隔3行选取一个元素，同时从第0列开始，每隔2列选取一个元素。</li></ul></li></ul><p>使用方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">x = torch.arange(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过shape属性来访问张量的形状</span></span><br><span class="line">In: x.shape</span><br><span class="line">Out: torch.Size([<span class="number">12</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过size()函数来访问张量的形状</span></span><br><span class="line">In: x.size()</span><br><span class="line">Out: torch.Size([<span class="number">12</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过numel()函数来访问张量的元素总数</span></span><br><span class="line">In: x.numel()</span><br><span class="line">Out: <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过reshape()函数来改变张量的形状,不改变张量的元素数量和元素值</span></span><br><span class="line">In: X = x.reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">Out: tensor([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">             [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">             [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br><span class="line">             </span><br><span class="line"><span class="comment"># 通过全0张量和全1张量来创建张量</span></span><br><span class="line">In: torch.zeros((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">Out: tensor([[[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">             [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">             [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]],</span><br><span class="line">            [[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">             [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">             [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]]])</span><br><span class="line">             </span><br><span class="line"><span class="comment"># 通过提供包含元素值的Python列表（或嵌套列表）来为所需张量的每个元素赋予确定值</span></span><br><span class="line">In: torch.tensor([[<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line">Out: tensor([[<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>],</span><br><span class="line">             [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">             [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 常见的标准算术运算符（+、-、*、/ 和 **）都可以被升级为按元素运算</span></span><br><span class="line">In: x = torch.tensor([<span class="number">1.0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>])</span><br><span class="line">In: y = torch.tensor([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">In: x + y, x - y, x * y, x / y, x**y</span><br><span class="line">Out: (tensor([ <span class="number">3.</span>,  <span class="number">4.</span>,  <span class="number">6.</span>, <span class="number">10.</span>]), </span><br><span class="line">      tensor([-<span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">2.</span>,  <span class="number">6.</span>]), </span><br><span class="line">      tensor([ <span class="number">2.</span>,  <span class="number">4.</span>,  <span class="number">8.</span>, <span class="number">16.</span>]), </span><br><span class="line">      tensor([<span class="number">0.5000</span>, <span class="number">1.0000</span>, <span class="number">2.0000</span>, <span class="number">4.0000</span>]),</span><br><span class="line">      tensor([ <span class="number">1.</span>,  <span class="number">4.</span>, <span class="number">16.</span>, <span class="number">64.</span>]))</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 按照元素级别应用更多的计算</span></span><br><span class="line">In: torch.exp(x)</span><br><span class="line">Out: tensor([<span class="number">2.7183</span>, <span class="number">7.3891</span>, <span class="number">54.5982</span>, <span class="number">2980.9580</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接多个张量</span></span><br><span class="line">In: X = torch.arange(<span class="number">12</span>, dtype=torch.float32).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">In: Y = torch.tensor([[<span class="number">2.0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line">In: torch.cat((X, Y), dim=<span class="number">0</span>), torch.cat((X, Y), dim=<span class="number">1</span>)</span><br><span class="line">Out: (tensor([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">              [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">              [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">              [ <span class="number">2.</span>,  <span class="number">1.</span>,  <span class="number">4.</span>,  <span class="number">3.</span>],</span><br><span class="line">              [ <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>,  <span class="number">4.</span>],</span><br><span class="line">              [ <span class="number">4.</span>,  <span class="number">3.</span>,  <span class="number">2.</span>,  <span class="number">1.</span>]]),</span><br><span class="line">      tensor([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>,  <span class="number">2.</span>,  <span class="number">1.</span>,  <span class="number">4.</span>,  <span class="number">3.</span>],</span><br><span class="line">              [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>,  <span class="number">4.</span>],</span><br><span class="line">              [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>,  <span class="number">4.</span>,  <span class="number">3.</span>,  <span class="number">2.</span>,  <span class="number">1.</span>]]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑运算符</span></span><br><span class="line">In: X == Y</span><br><span class="line">Out: tensor([[<span class="literal">False</span>,  <span class="literal">True</span>, <span class="literal">False</span>,  <span class="literal">True</span>],</span><br><span class="line">             [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>],</span><br><span class="line">             [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>]])</span><br><span class="line">             </span><br><span class="line"><span class="comment"># 对张量中的所有元素进行求和得到只有一个元素的张量</span></span><br><span class="line">In: X.<span class="built_in">sum</span>()</span><br><span class="line">Out: tensor(<span class="number">66.</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即使形状不同，我们仍然可以通过调用广播机制来执行按元素操作</span></span><br><span class="line">In: a = torch.arange(<span class="number">3</span>).reshape((<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">In: b = torch.arange(<span class="number">2</span>).reshape((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">In: a, b</span><br><span class="line">Out: (tensor([[<span class="number">0</span>],</span><br><span class="line">              [<span class="number">1</span>],</span><br><span class="line">              [<span class="number">2</span>]]),</span><br><span class="line">      tensor([[<span class="number">0</span>, <span class="number">1</span>]]))</span><br><span class="line">      </span><br><span class="line">In: a + b</span><br><span class="line">Out: tensor([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">             [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">             [<span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line">             </span><br><span class="line"><span class="comment"># 可以用[-1]选择最后一个元素，可以用[1:3]选择第二个和第三个元素</span></span><br><span class="line">In: X[-<span class="number">1</span>], X[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">Out: (tensor([ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>]), </span><br><span class="line">        tensor([[ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">                [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>]]))</span><br><span class="line">                                         </span><br><span class="line"><span class="comment"># 执行原地操作</span></span><br><span class="line">In: Z = torch.zeros_like(Y)</span><br><span class="line">In: Z[:] = X + Y</span><br><span class="line">Out: tensor([[ <span class="number">2.</span>,  <span class="number">2.</span>,  <span class="number">6.</span>,  <span class="number">6.</span>],</span><br><span class="line">             [ <span class="number">5.</span>,  <span class="number">7.</span>,  <span class="number">9.</span>, <span class="number">11.</span>],</span><br><span class="line">             [<span class="number">12.</span>, <span class="number">12.</span>, <span class="number">12.</span>, <span class="number">12.</span>]])</span><br><span class="line">             </span><br><span class="line"><span class="comment"># 如果在后续计算中没有重复使用X，我们也可以使用X[:] = X + Y或X += Y来减少操作的内存开销</span></span><br><span class="line">In: before = <span class="built_in">id</span>(Y)</span><br><span class="line">In: Y = Y + X</span><br><span class="line">In: <span class="built_in">id</span>(Y) == before</span><br><span class="line">Out: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为NumPy张量</span></span><br><span class="line">In: A = X.numpy()</span><br><span class="line">In: B = torch.tensor(A)</span><br><span class="line">Out: (A, B)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将大小为1的张量转换为Python标量</span></span><br><span class="line">In: a = torch.tensor([<span class="number">3.5</span>])</span><br><span class="line">In: a, a.item(), <span class="built_in">float</span>(a), <span class="built_in">int</span>(a)</span><br><span class="line">Out: (tensor([<span class="number">3.5000</span>]), <span class="number">3.5</span>, <span class="number">3.5</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>数据预处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.makedirs(os.path.join(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;data&#x27;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">data_file = os.path.join(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;house_tiny.csv&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(data_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;NumRooms,Alley,Price\n&#x27;</span>)  <span class="comment"># 列名</span></span><br><span class="line">    f.write(<span class="string">&#x27;NA,Pave,127500\n&#x27;</span>)  <span class="comment"># 每行表示一个数据样本</span></span><br><span class="line">    f.write(<span class="string">&#x27;2,NA,106000\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;4,NA,178100\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;NA,NA,140000\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">Out: <span class="string">&#x27;..\\data\\house_tiny.csv&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从csv文件中加载数据集 </span></span><br><span class="line"><span class="comment">## !pip install pandas</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(data_file)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理缺失值，使用插值、删除、填充等方法，下面使用插值</span></span><br><span class="line">inputs, outputs = data.iloc[:, <span class="number">0</span>:<span class="number">2</span>], data.iloc[:, <span class="number">2</span>]</span><br><span class="line">inputs = inputs.fillna(inputs.mean())</span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于Inputs中的类别值或离散值，我们将“NaN”视为一个类别</span></span><br><span class="line">inputs = pd.get_dummies(inputs, dummy_na=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在所有的输入和输出都是数值类型，它们可以转换为张量格式</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">X, y = torch.tensor(inputs.values), torch.tensor(outputs.values)</span><br><span class="line">X, y</span><br><span class="line">Out: (tensor([[<span class="number">2.0000</span>, <span class="number">1.0000</span>, <span class="number">0.0000</span>, <span class="number">0.0000</span>],</span><br><span class="line">              [<span class="number">4.0000</span>, <span class="number">1.0000</span>, <span class="number">0.0000</span>, <span class="number">0.0000</span>],</span><br><span class="line">              [<span class="number">3.0000</span>, <span class="number">1.0000</span>, <span class="number">0.0000</span>, <span class="number">0.0000</span>],</span><br><span class="line">              [<span class="number">3.0000</span>, <span class="number">1.0000</span>, <span class="number">0.0000</span>, <span class="number">0.0000</span>]], dtype=torch.float64),</span><br><span class="line">      tensor([<span class="number">127500</span>, <span class="number">106000</span>, <span class="number">178100</span>, <span class="number">140000</span>], dtype=torch.int64))</span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="05-线性代数"><a href="#05-线性代数" class="headerlink" title="05 线性代数"></a>05 线性代数</h4><blockquote><p>数学的一个分支，研究向量空间和线性映射的理论和运算方法</p></blockquote><p>标量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单操作</span></span><br><span class="line">c = a + b</span><br><span class="line">c = a * b</span><br><span class="line">c = sina</span><br><span class="line"></span><br><span class="line"><span class="comment"># 长度 绝对值</span></span><br><span class="line">~~~python</span><br><span class="line"><span class="comment">#### 向量</span></span><br><span class="line">~~~python</span><br><span class="line"><span class="comment"># 简单操作</span></span><br><span class="line">c = a + b</span><br><span class="line">c = a * b</span><br><span class="line">c = sina</span><br><span class="line"></span><br><span class="line"><span class="comment"># 长度 每个元素的平方和 再开根号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 点积</span></span><br><span class="line">c = a * b</span><br><span class="line">c = a.dot(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正交 垂直</span></span><br><span class="line">c = a.dot(b) == <span class="number">0</span></span><br></pre></td></tr></table></figure><p>矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单操作</span></span><br><span class="line">c = a + b</span><br><span class="line">c = a * b</span><br><span class="line">c = sina</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法 矩阵x向量</span></span><br><span class="line">中文含义：矩阵A的第i行与向量x的点积</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法 矩阵x矩阵</span></span><br><span class="line">中文含义：矩阵A的第i行与矩阵B的第j列的点积</span><br><span class="line"></span><br><span class="line"><span class="comment"># 范数</span></span><br><span class="line">中文含义：矩阵A的第i行与矩阵B的第j列的点积</span><br><span class="line">取决于如何衡量b和c的长度</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见范数</span></span><br><span class="line"><span class="comment">## 矩阵范数</span></span><br><span class="line"><span class="comment">## Frobenius范数</span></span><br></pre></td></tr></table></figure><p>特殊矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对称和反对称矩阵</span></span><br><span class="line">Aij = Aji 和 Aij = -Aji</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正定矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正交矩阵 所有行向量和列向量都是单位向量 互相正交</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 置换矩阵 每行每列只有一个1，其他都是0  = 正交矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征向量和特征值</span></span><br><span class="line"><span class="comment">## 不被矩阵变换方向改变的向量</span></span><br><span class="line"><span class="comment">## 对称矩阵总是可以找到特征向量</span></span><br></pre></td></tr></table></figure><p>…</p><h4 id="10-感知机SNP-和-多层感知机-MLP"><a href="#10-感知机SNP-和-多层感知机-MLP" class="headerlink" title="10 感知机SNP 和 多层感知机 MLP"></a>10 感知机SNP 和 多层感知机 MLP</h4><h5 id="感知机（模型）"><a href="#感知机（模型）" class="headerlink" title="感知机（模型）"></a>感知机（模型）</h5><blockquote><p>一个简单的人工神经元模型，是一种线性分类模型</p></blockquote><p>感知机(二分类)</p><ul><li>模型：输入 向量x 向量权重w 标量偏移b 输出是个二分类问题：1或-1 这个值是可以随便改的<div>              <img src="/blog/p/614a8113/感知机（二分类）模型.png" alt="感知机(二分类)模型"></img>              <p style="              display: flex;              color: #999;              justify-content: center;              font-size: 0.8rem;              position: relative;              top: -1rem;              right: 50%;              left: 50%;              transform: translateX(-50%);              ">[感知机(二分类)模型]</p>          </div></li></ul><p>线性回归 输出 一个实数<br>感知机 输出 一个1或-1<br>Softmax回归 输出概率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练感知机</span></span><br><span class="line">init w=<span class="number">0</span>,b=<span class="number">0</span> <span class="comment">#w是权重，b是偏差</span></span><br><span class="line">repeat</span><br><span class="line">  <span class="keyword">if</span> &lt;=<span class="number">0</span>(有误分类点)  <span class="comment"># 如果是 &gt;0 则是正确分类点</span></span><br><span class="line">    w=w+学习率*误分类点x <span class="comment"># 当前权重和样品分类错误，权重进行梯度下降算法进行，不一定是增加，只是更接近正确的方向</span></span><br><span class="line">    b=b+学习率*误分类点 <span class="comment"># 标号b也增加</span></span><br><span class="line">  end <span class="keyword">if</span></span><br><span class="line">until 没有误分类点</span><br><span class="line"></span><br><span class="line">等价于使用批量大小为<span class="number">1</span>的梯度下降，并使用如下的损失函数：</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结：感知机是一个简单的线性分类模型，它可以用于二分类和回归问题。感知机的训练算法是简单的梯度下降算法，它可以用于训练线性模型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 收敛定理</span></span><br><span class="line">如果数据集是线性可分的，那么感知机算法在有限次迭代后收敛，此时感知机算法找到一个能够完美分类训练数据集的模型参数。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 感知机的问题</span></span><br><span class="line">不能解决 XOR 问题，因为 XOR 问题的训练数据集是线性不可分的。</span><br><span class="line">所以要解决这个问题，需要引入新的概念，非线性分类问题。也就是使用多层感知机来处理非线性函数。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多层感知机（解决多线性分类问题）</span></span><br><span class="line">- 模型：</span><br><span class="line">  -  单隐藏层做单分类：输入x1-n(n维向量) 隐藏层h1-n(隐藏层数量n x 输入n的 矩阵，偏移=隐藏层的数量的向量) 输出O1-n(如果是分类问题，一般是指类别的数量) </span><br><span class="line">  - </span><br><span class="line"></span><br><span class="line">隐藏层大小是超参数，需要根据数据集的大小来选择。一般来讲，隐藏层大小应该在 <span class="number">1</span> 到 <span class="number">10</span> 之间。</span><br><span class="line">每个隐藏层的大小是超参数，</span><br><span class="line"></span><br><span class="line">激活函数非必要使用，但是必须是非线性函数</span><br></pre></td></tr></table></figure><table><thead><tr><th>激活函数</th><th>使用场景</th></tr></thead><tbody><tr><td>Sigmoid</td><td>二分类问题，输出范围需要在0和1之间</td></tr><tr><td>Softmax</td><td>多类别分类问题的输出层激活函数，将输出转化为概率分布</td></tr><tr><td>Tanh</td><td>隐藏层激活函数，能够将数据归一化到[-1, 1]范围</td></tr><tr><td>ReLU</td><td>隐藏层激活函数，用于减少梯度消失问题，通常表现良好</td></tr><tr><td>Leaky ReLU</td><td>隐藏层激活函数，用于解决ReLU中的”死亡神经元”问题</td></tr><tr><td>Linear&#x2F;Identity</td><td>回归问题的输出层激活函数，直接输出网络的原始值</td></tr></tbody></table><p>多隐藏层，每一个隐藏层都有自己的权重和偏移量，每个隐藏层都可以独立地学习到不同的特征。</p><p>总结：</p><ul><li>感知机SNP，多层感知机MLP。</li><li>感知机主要用于二元分类任务，即将数据划分为两个类别。</li><li>感知机的训练过程达到了一个稳定状态，模型参数不再发生显著变化，则停止训练。</li><li>感知机无法解决 XOR 非线性分类问题，所以引入多层感知机。</li><li>多层感知机的 隐藏层数量 和 大小 都是超参数，需要根据数据集的大小来选择。<ul><li>数据复杂，维度高的数据集，需要更多的隐藏层和神经元，但是隐藏层的数量和神经元的数量要逐步增加或减少。</li></ul></li></ul><p>实际代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line">batct_size=<span class="number">256</span></span><br><span class="line"><span class="comment"># 训练集 测试集</span></span><br><span class="line">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入，输出，隐藏层</span></span><br><span class="line">num_inputs, num_outputs,num_hiddens=<span class="number">784</span>，<span class="number">10</span>，<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 梯度</span></span><br><span class="line">W1 = nn.Parameter(torch.randn(num_inputs, num_hiddens, requires_grad=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 偏差</span></span><br><span class="line">b1 = nn,Parameter(torch.zeros(num_hiddens, requires_grad=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">W2 = nn.Parameter(torch,randn(num_hiddens, num_outputs,reguires_grad=<span class="literal">True</span>))</span><br><span class="line">b2 = nn.Parameter(torch.zeros(num_outputs, requires_grad=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">params =[W1，b1，w2，b2]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现 ReLU激活函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">relu</span>(<span class="params">X</span>):</span><br><span class="line">  a = torch.zeros_like(X)</span><br><span class="line">  <span class="keyword">return</span> torch.<span class="built_in">max</span>(X, a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现 模型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">net</span>(<span class="params">X</span>):</span><br><span class="line">  X = X.reshape((-<span class="number">1</span>, num_inputs))</span><br><span class="line">  H = relu(X@W1 + b1)</span><br><span class="line">  <span class="keyword">return</span> (H@W2 + b2)</span><br><span class="line"></span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">num_epochs, lr = <span class="number">10</span>, <span class="number">0.1</span></span><br><span class="line">updater = torch.optim.SGD(params, lr=lr)</span><br><span class="line">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, updater)</span><br></pre></td></tr></table></figure><p>简洁实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line">num_inputs, num_outputs,num_hiddens=<span class="number">784</span>，<span class="number">10</span>，<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">net = nn.Sequential(</span><br><span class="line">  nn.Flatten(),</span><br><span class="line">  nn.Linear(num_inputs, num_hiddens), <span class="comment"># 线性层</span></span><br><span class="line">  nn.ReLU(),</span><br><span class="line">  nn.Linear(num_hiddens, num_outputs)) <span class="comment"># 输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_weights</span>(<span class="params">m</span>):</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">    nn.init.normal_(m.weight, std=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">net.apply(init_weights)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">batch_size, lr, num_epochs = <span class="number">256</span>, <span class="number">0.1</span>, <span class="number">10</span></span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line">trainer = torch.optim.SGD(net.parameters(), lr=lr)</span><br><span class="line"></span><br><span class="line">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br><span class="line"></span><br><span class="line">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)</span><br></pre></td></tr></table></figure><h5 id="多层感知机"><a href="#多层感知机" class="headerlink" title="多层感知机"></a>多层感知机</h5><p>隐藏层 超参数<br>输出层数量 根据数据决定</p><p>激活函数：</p><ul><li>按元素的激活函数</li><li>Sigmoid激活函数</li><li>Tanh激活函数</li></ul><h4 id="15-实战-Kaggle-房价预测"><a href="#15-实战-Kaggle-房价预测" class="headerlink" title="15 实战 Kaggle 房价预测"></a>15 实战 Kaggle 房价预测</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@matplotlib inline</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line">DATA_HUB[<span class="string">&#x27;kaggle_house_train&#x27;</span>] = (DATA_URL + <span class="string">&#x27;kaggle_house_pred_train.csv&#x27;</span>,</span><br><span class="line">                                  <span class="string">&#x27;585e9cc93e70b39160e7921475f9bcd7d31219ce&#x27;</span>)</span><br><span class="line">DATA_HUB[<span class="string">&#x27;kaggle_house_test&#x27;</span>] = (DATA_URL + <span class="string">&#x27;kaggle_house_pred_test.csv&#x27;</span>,</span><br><span class="line">                                 <span class="string">&#x27;fa19780a7b011d9b009e8bff8e99922a8ee2eb90&#x27;</span>)</span><br><span class="line">train_data = pd.read_csv(d2l.download(<span class="string">&#x27;kaggle_house_train&#x27;</span>))</span><br><span class="line">test_data = pd.read_csv(d2l.download(<span class="string">&#x27;kaggle_house_test&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(train_data.shape)</span><br><span class="line"><span class="built_in">print</span>(test_data.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前四个和最后两个特征，以及相应的标签（房价）</span></span><br><span class="line"><span class="built_in">print</span>(train_data.iloc[<span class="number">0</span>:<span class="number">4</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, -<span class="number">3</span>, -<span class="number">2</span>, -<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个样本中，第一个特征是ID，将其从数据集中删除</span></span><br><span class="line">all_features = pd.concat((train_data.iloc[:, <span class="number">1</span>:-<span class="number">1</span>], test_data.iloc[:, <span class="number">1</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有缺失的值替换为相应特征的平均值。通过将特征重新缩放到零均值和单位方差来标准化数据</span></span><br><span class="line"><span class="comment">## 每一列，均值为0，方差为1</span></span><br><span class="line">numeric_features = all_features.dtypes[all_features.dtypes != <span class="string">&#x27;object&#x27;</span>].index</span><br><span class="line">all_features[numeric_features] = all_features[numeric_features].apply(</span><br><span class="line">    <span class="keyword">lambda</span> x: (x - x.mean()) / (x.std()))</span><br><span class="line">all_features[numeric_features] = all_features[numeric_features].fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理离散值（字符串），用一次独热编码替换</span></span><br><span class="line">all_features = pd.get_dummies(all_features, dummy_na=<span class="literal">True</span>)</span><br><span class="line">all_features.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 pandas 格式中提取 numpy 格式，将其转换为张量格式</span></span><br><span class="line">n_train = train_data.shape[<span class="number">0</span>]</span><br><span class="line">train_features = torch.tensor(all_features[:n_train].values, dtype=torch.float32)</span><br><span class="line">test_features = torch.tensor(all_features[n_train:].values, dtype=torch.float32)</span><br><span class="line">train_labels = torch.tensor(train_data.SalePrice.values, dtype=torch.float32).view(-<span class="number">1</span>, <span class="number">1</span>), dtype=torch.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">loss = nn.MSELoss()</span><br><span class="line">in_features = train_features.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_net</span>():</span><br><span class="line">    net = nn.Sequential(nn.Linear(in_features, <span class="number">1</span>)) <span class="comment"># 单层线性回归模型</span></span><br><span class="line">    <span class="keyword">return</span> net </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 更关心相对误差，解决这个问题的一种方式 用价格预测的对数来衡量差异 (计算回归模型的对数均方根误差)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_rmse</span>(<span class="params">net, features, labels</span>):</span><br><span class="line">    clipped_preds = torch.clamp(net(features), <span class="number">1</span>, <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>))</span><br><span class="line">    rmse = torch.sqrt(loss(torch.log(clipped_preds), torch.log(labels)))</span><br><span class="line">    <span class="keyword">return</span> rmse.item()</span><br><span class="line"></span><br><span class="line">torch.clamp: 这个方法用于将输入张量中的元素限制在指定范围内。在这里，它被用来将神经网络的预测值限制在<span class="number">1</span>到正无穷之间，因为对数函数的定义域是大于<span class="number">0</span>的实数。</span><br><span class="line">net(features): 这一步是将输入特征通过神经网络模型进行前向传播，得到模型的预测值。</span><br><span class="line">torch.log: 这个方法是求取张量的自然对数。在这里，它被用来对神经网络的预测值和真实标签值取对数，以便将回归问题转化为对数空间中的线性问题。</span><br><span class="line">loss: 这个变量代表了损失函数，它用来计算模型预测值与真实标签值之间的差异。</span><br><span class="line">torch.sqrt: 这个方法是求取张量的平方根。在这里，它被用来将均方误差（MSE）转化为均方根误差（RMSE）。</span><br><span class="line">rmse.item(): 这一步是将计算得到的 RMSE 值转化为 Python 标量值，并返回给调用者。</span><br><span class="line">综合起来，这段代码的作用是计算神经网络模型在给定输入特征和真实标签下的对数均方根误差。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练函数将借助 Adam 优化器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">net, train_features, train_labels, test_features, test_labels, num_epochs, learning_rate, weight_decay, batch_size</span>):</span><br><span class="line">    train_ls, test_ls = [], []</span><br><span class="line">    train_iter = d2l.load_array((train_features, train_labels), batch_size)</span><br><span class="line">    optimizer = torch.optim.Adam(net.parameters(), lr=learning_rate, weight_decay=weight_decay)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">        <span class="keyword">for</span> X, y <span class="keyword">in</span> train_iter:</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            l = loss(net(X), y)</span><br><span class="line">            l.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">        train_ls.append(log_rmse(net, train_features, train_labels))</span><br><span class="line">        <span class="keyword">if</span> test_labels <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            test_ls.append(log_rmse(net, test_features, test_labels))</span><br><span class="line">    <span class="keyword">return</span> train_ls, test_ls</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># K折交叉验证</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_k_fold_data</span>(<span class="params">k, i, X, y</span>):</span><br><span class="line">    <span class="keyword">assert</span> k &gt; <span class="number">1</span></span><br><span class="line">    fold_size = X.shape[<span class="number">0</span>] // k</span><br><span class="line">    X_train, y_train = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        idx = <span class="built_in">slice</span>(j * fold_size, (j + <span class="number">1</span>) * fold_size)</span><br><span class="line">        X_part, y_part = X[idx, :], y[idx]</span><br><span class="line">        <span class="keyword">if</span> j == i:</span><br><span class="line">            X_valid, y_valid = X_part, y_part</span><br><span class="line">        <span class="keyword">elif</span> X_train <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            X_train, y_train = X_part, y_part</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X_train = torch.cat([X_train, X_part], <span class="number">0</span>)</span><br><span class="line">            y_train = torch.cat([y_train, y_part], <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> X_train, y_train, X_valid, y_valid <span class="comment"># 返回训练集和验证集</span></span><br></pre></td></tr></table></figure><div>                <img src="/blog/p/614a8113/K折交叉验证.png" alt="K折交叉验证.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[K折交叉验证.png]</p>            </div><p>返回训练和验证误差的平均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">k_fold</span>(<span class="params">k, X_train, num_epochs, learning_rate, weight_decay, batch_size</span>):</span><br><span class="line">    train_l_sum, valid_l_sum = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        data = get_k_fold_data(k, i, X_train, y_train)</span><br><span class="line">        net = get_net()</span><br><span class="line">        train_ls, valid_ls = train(net, *data, num_epochs, learning_rate, weight_decay, batch_size)</span><br><span class="line">        train_l_sum += train_ls[-<span class="number">1</span>]</span><br><span class="line">        valid_l_sum += valid_ls[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            d2l.plot(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, num_epochs + <span class="number">1</span>)), [train_ls, valid_ls], xlabel=<span class="string">&#x27;epoch&#x27;</span>, ylabel=<span class="string">&#x27;rmse&#x27;</span>, xlim=[<span class="number">1</span>, num_epochs], legend=[<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid&#x27;</span>], yscale=<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;fold <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>, train log rmse <span class="subst">&#123;<span class="built_in">float</span>(train_ls[-<span class="number">1</span>]):f&#125;</span>, valid log rmse <span class="subst">&#123;<span class="built_in">float</span>(valid_ls[-<span class="number">1</span>]):f&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> train_l_sum / k, valid_l_sum / k</span><br></pre></td></tr></table></figure><p>模型选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">k, num_epochs, lr, weight_decay, batch_size = <span class="number">5</span>, <span class="number">100</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">64</span></span><br><span class="line">train_l, valid_l = k_fold(k, train_features, num_epochs, lr, weight_decay, batch_size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;k&#125;</span>-折验证: 平均训练log rmse: <span class="subst">&#123;<span class="built_in">float</span>(train_l):f&#125;</span>, 平均验证log rmse: <span class="subst">&#123;<span class="built_in">float</span>(valid_l):f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>提交Kaggle预测结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train_and_pred</span>(<span class="params">train_features, test_features, train_labels, test_data, num_epochs, lr, weight_decay, batch_size</span>):</span><br><span class="line">    net = get_net()</span><br><span class="line">    train_ls, _ = train(net, train_features, train_labels, <span class="literal">None</span>, <span class="literal">None</span>, num_epochs, lr, weight_decay, batch_size)</span><br><span class="line">    d2l.plot(np.arange(<span class="number">1</span>, num_epochs + <span class="number">1</span>), [train_ls], xlabel=<span class="string">&#x27;epoch&#x27;</span>, ylabel=<span class="string">&#x27;log rmse&#x27;</span>, xlim=[<span class="number">1</span>, num_epochs], yscale=<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;train log rmse <span class="subst">&#123;<span class="built_in">float</span>(train_ls[-<span class="number">1</span>]):f&#125;</span>&#x27;</span>)</span><br><span class="line">    preds = net(test_features).detach().numpy()</span><br><span class="line">    test_data[<span class="string">&#x27;SalePrice&#x27;</span>] = pd.Series(preds.reshape(<span class="number">1</span>, -<span class="number">1</span>)[<span class="number">0</span>])</span><br><span class="line">    submission = pd.concat([test_data[<span class="string">&#x27;Id&#x27;</span>], test_data[<span class="string">&#x27;SalePrice&#x27;</span>]], axis=<span class="number">1</span>)</span><br><span class="line">    submission.to_csv(<span class="string">&#x27;submission.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">train_and_pred(train_features, test_features, train_labels, test_data, num_epochs, lr, weight_decay, batch_size)</span><br></pre></td></tr></table></figure><h4 id="19-卷积层"><a href="#19-卷积层" class="headerlink" title="19 卷积层"></a>19 卷积层</h4><blockquote><p>深度学习中常用的一种层类型，用于处理具有空间结构的数据，如图像、音频和视频</p></blockquote><p>卷积神经网络（CNN）的两个原则</p><ul><li>平移不变性：无论物品在图像中哪个位置，都能够识别到它</li><li>局部性：在局部内提取特征，也就是相邻位置的像素或样本之间存在相关性</li></ul><table><thead><tr><th>特点</th><th>全连接层</th><th>卷积层</th><th>池化层</th></tr></thead><tbody><tr><td><strong>相同点</strong></td><td></td><td></td><td></td></tr><tr><td>连接方式</td><td>全连接</td><td>局部连接</td><td>无连接</td></tr><tr><td>激活方式</td><td>有</td><td>有</td><td>无</td></tr><tr><td><strong>不同点</strong></td><td></td><td></td><td></td></tr><tr><td>连接方式</td><td>全连接</td><td>局部连接和权值共享</td><td>无连接</td></tr><tr><td>参数数量</td><td>大</td><td>较小</td><td>无</td></tr><tr><td>处理方式</td><td>全局处理</td><td>局部特征提取</td><td>特征降维</td></tr></tbody></table><p>全连接层流程</p><ul><li>输入 and 输出 变形为 矩阵 宽度,高度 类似excel表</li><li>将权重 变形为 4-D 张量(h,w) 到 (h’,w’)<ul><li>权重 存储的是 矩阵，可能会占内存很多(根据神经元数量和特征数量)，但是实际上表示的是一个数值</li></ul></li></ul><p>原则#1-平移不变性</p><ul><li>x的平移导致h的平移</li><li>v不应该依赖于(i,j)</li><li>解决方案 v(i,j,a,b) &#x3D; v(a,b)</li><li>这就是2维 交叉相关</li></ul><p>解释：</p><ul><li>x的平移导致h的平移：平移不变性意味着输入数据（通常表示为x）的平移不应该影响神经网络的输出。换句话说，如果输入数据x在空间中平移了一段距离，那么网络的输出应该保持不变，或者说输出也会相应地平移。</li><li>v不应该依赖于(i,j)：这意味着网络的输出v不应该依赖于输入数据的位置(i, j)。无论输入数据在空间中的具体位置如何，网络的输出都应该保持不变。</li><li>解决方案 v(i,j,a,b) &#x3D; v(a,b)：为了满足平移不变性的要求，作者提出了一种解决方案，即通过二维的交叉相关（cross-correlation）操作来实现。这种操作使得网络的输出v在输入数据的不同位置（i, j）之间保持不变。</li></ul><p>具体地说，v(i,j,a,b) &#x3D; v(a,b) 意味着输出v在空间中的某个位置(i, j)上的值等于在另一个位置(a, b)上的值，这种情况下，网络的输出在空间平移上是不变的。交叉相关操作是一种滤波操作，可以提取图像中的特征，并且保持输入数据在空间平移上的不变性，因此非常适合应用在具有平移不变性要求的任务中，比如图像识别任务。</p><p>原则#2-局部性(只看局部，排除其他部分)</p><ul><li>当评估h(i,j)时，不应该用远离x(i,j)的参数</li><li>解决方案：当 |a| or |b| &gt; U 时，使得v(a,b) &#x3D; 0</li></ul><p>深度学习中的卷积层 &#x3D; 二维交叉相关</p><p>二维交叉相关</p><ul><li>输入X</li><li>核W：可以学习的参数，不同的核可以达到不同的效果：图片高斯模糊、图片边缘检测、图片锐化</li><li>偏差b</li><li>输出Y： Y&#x3D;X*W + b</li></ul><p>二维卷积 和 二维交叉相关 是对称的，实际上没区别</p><p>一维和三维交叉相关</p><ul><li>一维<ul><li>文本</li><li>语言</li><li>时间序列</li></ul></li><li>三维<ul><li>视频</li><li>医学图像</li><li>气象地图</li></ul></li></ul><p>总结：</p><ol><li>对全连接层 使用 平移不变性 和 局部性 得到卷积层</li><li>卷积层 将输入和核矩阵进行交叉相关，加上偏移后得到输出</li><li>核矩阵和偏移是可学习的参数</li><li>核矩阵的大小是超参数</li></ol><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图像卷积  使用 互相关运算</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入X，核矩阵K</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">corr2d</span>(<span class="params">X, K</span>):</span><br><span class="line">  <span class="comment"># 计算二维互相关运算</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 行数 和 列数</span></span><br><span class="line">  h, w = K.shape</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 输出Y(高宽) = 输入的高-核高+1  输如的宽-核宽+1</span></span><br><span class="line">  Y = torch.zeros((X.shape[<span class="number">0</span>] - h + <span class="number">1</span>, X.shape[<span class="number">1</span>] - w + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Y.shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(Y.shape[<span class="number">1</span>]):</span><br><span class="line">      Y[i, j] = (X[i: i + h, j: j + w] * K).<span class="built_in">sum</span>()</span><br><span class="line">  <span class="keyword">return</span> Y</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>检验上述二维互相关运算的输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">X = = torch.tensor([[<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>],[<span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>]，[<span class="number">6.0</span>, <span class="number">7.0</span>, <span class="number">8.0</span>]])</span><br><span class="line"></span><br><span class="line">K = torch.tensor([[<span class="number">0.0</span>, <span class="number">1.0</span>]，[<span class="number">2.0</span>, <span class="number">3.0</span>]])</span><br><span class="line"></span><br><span class="line">corr2d(X, K)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">2</span>]: tensor(</span><br><span class="line">  [<span class="number">19.</span>, <span class="number">25.</span>],</span><br><span class="line">  [<span class="number">37.</span>, <span class="number">43.</span>],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>实现二维卷积层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Conv2D</span>(nn.Module):</span><br><span class="line">  <span class="comment"># kernel_size 超参数</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, kernel_size</span>):</span><br><span class="line">    <span class="built_in">super</span>().__init__()</span><br><span class="line">    <span class="comment"># 随机值</span></span><br><span class="line">    self.weight = nn.Parameter(torch.rand(kernel_size))</span><br><span class="line">    <span class="comment"># 偏移 标量</span></span><br><span class="line">    self.bias = nn.Parameter(torch.zeros(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">    <span class="comment"># 互相关运算 + 偏移</span></span><br><span class="line">    <span class="keyword">return</span> corr2d(x, self.weight) + self.bias</span><br></pre></td></tr></table></figure><p>卷积层简单应用：检测图像中不同颜色的边缘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">X = trouch.ones((<span class="number">6</span>,<span class="number">8</span>))</span><br><span class="line">X[: <span class="number">2</span>:<span class="number">6</span>] = <span class="number">0</span></span><br><span class="line">X</span><br><span class="line"></span><br><span class="line">K = torch.tensor([[<span class="number">1.0</span>, -<span class="number">1.0</span>]])</span><br><span class="line"></span><br><span class="line">Y = corr2d(X, K)</span><br><span class="line">Y</span><br><span class="line">Out[<span class="number">6</span>]: tensor([<span class="number">0.</span>,  ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卷积核K只能检测垂直边缘</span></span><br><span class="line">corr2d(X.t(), K)</span><br><span class="line">Out[<span class="number">7</span>]: tensor(...</span><br></pre></td></tr></table></figure><p>学习由X生成Y的卷积核</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入的通道1 输出的通道也是1 卷积核尺寸1*2</span></span><br><span class="line">conv2d = nn.Conv2d(<span class="number">1</span>, <span class="number">1</span>, kernel_size=(<span class="number">1</span>, <span class="number">2</span>), bias=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">X = X.reshape((<span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>))</span><br><span class="line">Y = Y.reshape((<span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">  Y_hat = conv2d(X)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 损失函数</span></span><br><span class="line">  l = (Y_hat - Y) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  conv2d.zero_grad()</span><br><span class="line">  l.<span class="built_in">sum</span>().backward()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 梯度下降 -= 学习率3e-2  * 梯度</span></span><br><span class="line">  conv2d.weight.data[:] -= <span class="number">3e-2</span> * conv2d.weight.grad</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 每两次 打印一次损失函数</span></span><br><span class="line">  <span class="keyword">if</span>(i+<span class="number">1</span>)%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;epoch <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>, loss <span class="subst">&#123;l.<span class="built_in">sum</span>():<span class="number">.3</span>f&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 学习的卷积核的权重张量</span></span><br><span class="line">conv2d.weight.data.reshape((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">Out[<span class="number">9</span>]: tensor([[ <span class="number">0.9186</span>, -<span class="number">1.0584</span>]])</span><br></pre></td></tr></table></figure><h4 id="22-池化层"><a href="#22-池化层" class="headerlink" title="22 池化层"></a>22 池化层</h4><blockquote><p>池化层是卷积神经网络CNN的常见层次，作用是通过减小特征图的空间尺寸来降低网络的计算复杂度，并且提取特征的不变性。 降维、特征不变性、提取主要特征</p></blockquote><ul><li>积对位置敏感<ul><li>检测垂直边缘</li></ul></li><li>需要一定程度的平移不变性<ul><li>照明，物体位置，比例，外观等因图像而已</li></ul></li></ul><p>二维最大池化</p><ul><li>返回滑动窗口中的最大值，而不是返回和<ul><li>核尺寸内选中的所有数值 返回最大的</li></ul></li></ul><p>填充，步幅和多个通道</p><ul><li>池化层和卷积层一样，都是使用滑动窗口，但是池化层没有偏移，没有可学习的参数，没有激活函数</li><li>在每个输入通道应用池化层 以获得相应的输出通道</li><li>输出通道数&#x3D;输入通道数 每个输入通道都做一次池化层</li></ul><p>最大池化层：每个窗口中最强的模式信号<br>平均池化层：将最大池化层中 最大操作 替换成 平均</p><p>总结：</p><ul><li>池化层返回窗口中最大或平均值</li><li>作用：缓解卷积层对位置的敏感性（通常池化层在卷积层后）</li><li>同样有 窗口大小、填充、步幅 作为超参数</li></ul><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pool2d</span>(<span class="params">X, pool_size, mode=<span class="string">&#x27;max&#x27;</span></span>):</span><br><span class="line">    <span class="comment"># 池化层窗口 高宽</span></span><br><span class="line">    p_h, p_w = pool_size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出Y(高宽)这里假设单通道 = 输入的高-池化层窗口高+1  输如的宽-池化层窗口宽+1</span></span><br><span class="line">    Y = torch.zeros((X.shape[<span class="number">0</span>] - p_h + <span class="number">1</span>, X.shape[<span class="number">1</span>] - p_w + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Y.shape[<span class="number">0</span>]):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(Y.shape[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">if</span> mode == <span class="string">&#x27;max&#x27;</span>:</span><br><span class="line">          Y[i, j] = X[i: i + p_h, j: j + p_w].<span class="built_in">max</span>()</span><br><span class="line">        <span class="keyword">elif</span> mode == <span class="string">&#x27;avg&#x27;</span>:</span><br><span class="line">          Y[i, j] = X[i: i + p_h, j: j + p_w].mean()</span><br><span class="line">    <span class="keyword">return</span> Y</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证二维最大池化层的输出</span></span><br><span class="line">X = torch.tensor([[<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>], [<span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>], [<span class="number">6.0</span>, <span class="number">7.0</span>, <span class="number">8.0</span>]])</span><br><span class="line">pool2d(X, (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">Out[<span class="number">3</span>]: tensor([[<span class="number">4.</span>, <span class="number">5.</span>], [<span class="number">7.</span>, <span class="number">8.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证二维平均池化层的输出</span></span><br><span class="line">pool2d(X, (<span class="number">2</span>, <span class="number">2</span>), mode=<span class="string">&#x27;avg&#x27;</span>)</span><br><span class="line">Out[<span class="number">4</span>]: tensor([[<span class="number">2.</span>, <span class="number">3.</span>], [<span class="number">5.</span>, <span class="number">6.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充和步幅</span></span><br><span class="line">X = torch.arange(<span class="number">16</span>, dtype=torch.float32).reshape((<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line">Out[<span class="number">5</span>]: tensor([[[ <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>] [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>, <span class="number">7.</span>][<span class="number">8.</span>, <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>][[<span class="number">12.</span>, <span class="number">13.</span>, <span class="number">14.</span>, <span class="number">15.</span>]]]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 深度学习框架中的步幅和池化窗口的大小相同</span></span><br><span class="line">pool2d = nn.MaxPool2d(<span class="number">3</span>)</span><br><span class="line">pool2d(X)</span><br><span class="line">Out[<span class="number">6</span>]: tensor([[[[ <span class="number">10.</span>]]]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充和步幅可以手动设定</span></span><br><span class="line">pool2d = nn.MaxPool2d(<span class="number">3</span>, padding=<span class="number">1</span>, stride=<span class="number">2</span>)</span><br><span class="line">pool2d(X)</span><br><span class="line">Out[<span class="number">7</span>]: tensor([[[[ <span class="number">5.</span>, <span class="number">7.</span>], [<span class="number">13.</span>, <span class="number">15.</span>]]]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定一个任意大小的矩阵池化窗口，并分别设定填充和步幅的高度和宽度</span></span><br><span class="line">pool2d = nn.MaxPool2d((<span class="number">2</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">pool2d(X)</span><br><span class="line">Out[<span class="number">8</span>]: tensor([[[[ <span class="number">1.</span>, <span class="number">3.</span>], [ <span class="number">9.</span>, <span class="number">11.</span>], [<span class="number">13.</span>, <span class="number">15.</span>]]]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 池化层在每个通道上单独运算</span></span><br><span class="line">X = torch.cat([X, X+<span class="number">1</span>], <span class="number">1</span>)</span><br><span class="line">X</span><br><span class="line">Out[<span class="number">9</span>]: tensor([[[[ <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], [ <span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>, <span class="number">7.</span>], [ <span class="number">8.</span>, <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>], [<span class="number">12.</span>, <span class="number">13.</span>, <span class="number">14.</span>, <span class="number">15.</span>]]]])</span><br><span class="line"></span><br><span class="line">pool2d = nn.MaxPool2d(<span class="number">3</span>, padding=<span class="number">1</span>, stride=<span class="number">2</span>)</span><br><span class="line">pool2d(X)</span><br><span class="line">Out[<span class="number">10</span>]: tensor([[[[ <span class="number">5.</span>, <span class="number">7.</span>], [<span class="number">13.</span>, <span class="number">15.</span>], [<span class="number">6.</span>, <span class="number">8.</span>], [<span class="number">14.</span>, <span class="number">16.</span>]]]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="33-单机多卡并行"><a href="#33-单机多卡并行" class="headerlink" title="33 单机多卡并行"></a>33 单机多卡并行</h4><blockquote><p>在<code>训练和预测</code>过程中，将一个<code>小批量计算</code>切分到多个GPU加速计算</p></blockquote><p>数据并行：将数据分成n块，每个GPU拿到完整的参数计算一块数据的梯度，然后将梯度合并</p><ul><li>性能好，用于小模型<div>              <img src="/blog/p/614a8113/数据并行.png" alt="数据并行.png"></img>              <p style="              display: flex;              color: #999;              justify-content: center;              font-size: 0.8rem;              position: relative;              top: -1rem;              right: 50%;              left: 50%;              transform: translateX(-50%);              ">[数据并行.png]</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 读一个数据块</span><br><span class="line"><span class="number">2.</span> 拿到参数</span><br><span class="line"><span class="number">3.</span> 计算梯度</span><br><span class="line"><span class="number">4.</span> 发出梯度</span><br><span class="line"><span class="number">5.</span> 合并梯度</span><br></pre></td></tr></table></figure></li></ul><p>模型并行：将模型分成n块，每个GPU计算模型的前向和方向结果</p><ul><li>用于模型大到单GPU无法容纳，用在超大模型上</li></ul><h4 id="35-分布式训练"><a href="#35-分布式训练" class="headerlink" title="35 分布式训练"></a>35 分布式训练</h4><h4 id="37-微调"><a href="#37-微调" class="headerlink" title="37 微调"></a>37 微调</h4><h4 id="64-注意力机制"><a href="#64-注意力机制" class="headerlink" title="64 注意力机制"></a>64 注意力机制</h4><blockquote><p>注意力机制是<code>一种模拟人类视觉或听觉系统的方法</code>，它允许神经网络在处理输入数据时集中关注重要的部分，并且动态地调整对不同部分的注意力。在深度学习中，其目的是使模型能够更加集中地关注输入数据的特定部分，从而提高模型的性能和泛化能力。</p></blockquote><blockquote><p>注意力机制的核心思想是在模型中引入<code>可学习的权重</code>，用来动态地调整不同输入的重要性，并且根据这些<code>权重</code>来<code>加权输入数据</code>，以产生输出。</p></blockquote><p>注意力机制通常包含一下几个组成部分</p><ol><li>注意力得分计算：根据某种方法(<code>根据输入数据和当前的任务的特性</code>)计算每个输入的注意力得分.</li><li>注意力权重计算：根据注意力得分计算每个输入的注意力权重，通常使用softmax函数来将<code>得分</code>归一化为<code>概率分布</code>.</li><li>加权求和：将<code>注意力权重</code>对<code>输入数据</code>进行加权求和，产生输出</li></ol><ul><li>卷积、全连接、池化层 都只考虑不随意线索<ul><li>卷积成 提取局部特征</li><li>全连接 提取特征映射到输出层</li><li>池化层 减少特征图的维度和计算量</li></ul></li><li>注意力机制 则显示的考虑随意线索<ul><li>随意线索被称为 查询 query</li><li>每个输入是一个值 value 和 不随意线索 key 的对</li><li>通过注意力池化层来由偏向性的选择某些输入</li></ul></li></ul><p>实现：<br>非参注意力池化层</p><ul><li>给定数据(xi,yi),i &#x3D; 1,…n</li><li>平均池化是最简单的方案</li><li>更好的方案是 60年代提出的 Nadaraya-Watson 核回归</li></ul><p>Nadaraya-Watson 核回归</p><blockquote><p>一种非参数的回归方法，用于估计输入变量（自变量）和输出变量（因变量）之间的关系，特别是在处理非线性数据时很有用。该方法通常用于回归问题，尤其是在样本量较小或数据结构复杂的情况下。</p></blockquote><ul><li>使用高斯核 K(u)&#x3D;1&#x2F;sqrt(2π)exp(-u²&#x2F;2)</li></ul><p>参数化的注意力机制</p><ul><li>在之前基础上引入可以学习的w</li></ul><p>总结：</p><ul><li>心理学认为 人通过随意线索和不随意线索 选择注意点</li><li>注意力机制中，通过query(随意线索)和key(不随意线索)来有偏向性的选择输入</li></ul><p>下面是多个不同的权重设计</p><p>代码实现<br>注意力汇聚：Nadaraya-Watson 核回归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据集</span></span><br><span class="line">n_train = <span class="number">50</span></span><br><span class="line">x_train, _ = torch.sort(torch.rand(n_train) * <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * torch.sin(x) + x**<span class="number">0.8</span></span><br><span class="line"></span><br><span class="line">y_train = f(x_train) + torch.normal(<span class="number">0.0</span>, <span class="number">0.5</span>, (n_train,))</span><br><span class="line">x_test = torch.arange(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0.1</span>)</span><br><span class="line">y_truth = f(x_test)</span><br><span class="line">n_test = <span class="built_in">len</span>(x_test)</span><br><span class="line">n_test</span><br><span class="line"></span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_kernel_reg</span>(<span class="params">y_hat</span>):</span><br><span class="line">  d2l.plot(x_test, [y_truth, y_hat], <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, legend=[<span class="string">&#x27;Truth&#x27;</span>, xlim=[<span class="number">0</span>, <span class="number">5</span>], ylim=[-<span class="number">1</span>, <span class="number">5</span>])</span><br><span class="line">  d2l.plt.plot(x_train, y_train, <span class="string">&#x27;o&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">y_hat = torch.repeat_interleave(y_train.mean(), n_test)</span><br><span class="line">plot_kernel_reg(y_hat)</span><br></pre></td></tr></table></figure><p>非参数注意力汇聚</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X_repeat = x_test.repeat_interleave(n_train).reshape((-<span class="number">1</span>, n_train))</span><br><span class="line"></span><br><span class="line">attention_weights = nn.functional.softmax(-(X_repeat - x_train) ** <span class="number">2</span>)</span><br><span class="line">y_hat = torch.matmul(attention_weights, y_train)</span><br><span class="line">plot_kernel_reg(y_hat)</span><br></pre></td></tr></table></figure><h4 id="68-Transformer"><a href="#68-Transformer" class="headerlink" title="68 Transformer"></a>68 Transformer</h4><blockquote><p>一个基于注意力机制的序列到序列模型，用于处理序列数据</p></blockquote><ul><li>基于<code>编码器-解码器 架构</code>处理序列对</li><li>跟使用注意力的 seq2seq 不同， Tf 纯基于注意力</li></ul><div>                <img src="/blog/p/614a8113/Transformer.png" alt="Transformer.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[Transformer.png]</p>            </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Sources</span><br><span class="line">Embedding</span><br><span class="line">Positional encoding</span><br><span class="line">执行n次 Transformer块</span><br><span class="line">Encoder</span><br><span class="line">信息传递 给 每一个 Transformer块</span><br></pre></td></tr></table></figure><p>多头注意力 Multi-Head Attention</p><ul><li>对统一key,value,query 希望抽取不同的信息<ul><li>例如短距离关系和长距离关系</li></ul></li><li>多头注意力使用h个独立的注意力池化<ul><li>合并各个头 输出得到最终输出</li></ul></li></ul><p>结果是多头 n×x的 多头</p><p>有掩码的多头注意力 Masked Multi-Head Attention</p><ul><li>解码器对序列中的一个元素输出时，不应该考虑该元素之后的元素</li><li>可以通过掩码来实现 Valid lens<ul><li>也就是计算 xi 输出时，假装当前序列长度为xi， 把合法长度设置成i(Valid lens),在算Softmax的时候，不算它的权重，不会对后面的key v 进行权重</li></ul></li></ul><p>基于位置的前馈网络 Position-wise Feed-Forward Networks(FFN)</p><ul><li>输入形状由三维(b,n,d) 变换成二维(bn,d)，因为n是序列的长度，会变，不能当成特征</li><li>作用两个全连接层</li><li>输出形状由二维(bn,d) 变换成三维(b,n,d)</li><li>等价于两层核窗口为1的一维卷积层</li></ul><p>层归一化 Add &amp; norm</p><ul><li>批量归一化对每个特征&#x2F;通道里元素进行归一化<ul><li>不适合序列长度会变的NLP应用</li></ul></li><li>层归一化对每个样本里的免俗进行归一化</li></ul><div>                <img src="/blog/p/614a8113/层归一化.png" alt="层归一化.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[层归一化.png]</p>            </div><h3 id="斯坦福21秋季：实用机器学习"><a href="#斯坦福21秋季：实用机器学习" class="headerlink" title="斯坦福21秋季：实用机器学习"></a>斯坦福21秋季：实用机器学习</h3><h4 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h4><div>                <img src="/blog/p/614a8113/斯坦福21秋季：实用机器学习-例如：预测房屋销售价格.png" alt="斯坦福21秋季：实用机器学习-例如：预测房屋销售价格.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[斯坦福21秋季：实用机器学习-例如：预测房屋销售价格.png]</p>            </div><h4 id="1-2-数据获取"><a href="#1-2-数据获取" class="headerlink" title="1.2 数据获取"></a>1.2 数据获取</h4><ul><li>现有数据集<ul><li>Paerswithcodes Datasets <a href="https://paperswithcode.com/datasets" target="_blank" rel="noopener">https://paperswithcode.com/datasets</a></li><li>Kaggle Datasets <a href="https://www.kaggle.com/datasets" target="_blank" rel="noopener">https://www.kaggle.com/datasets</a></li><li>Google Dataset search <a href="https://datasetsearch.research.google.com/" target="_blank" rel="noopener">https://datasetsearch.research.google.com/</a></li><li>Various toolkits datasets: tensorflow,huggingface</li><li>OpenData on Aws(100+ large-scale raw data批级别) 例如：整个气象数据集，需要自己处理数据</li></ul></li><li>python爬取</li></ul><p>找不到数据集</p><ul><li>生成数据集 GANs</li><li>数据增强 图片</li><li>文本 通过翻译成多国语言并且翻译回来 可以获取多个 不同语义相同意思的数据集</li></ul><h4 id="1-3-网页的数据抓取"><a href="#1-3-网页的数据抓取" class="headerlink" title="1.3 网页的数据抓取"></a>1.3 网页的数据抓取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># selenium 抓取数据</span></span><br><span class="line"><span class="keyword">import</span> selenium <span class="keyword">from</span> webdriver</span><br><span class="line">chrome_options = webdriver.ChromeOPtions()</span><br><span class="line">chrome_options.headless = <span class="literal">True</span></span><br><span class="line">chrome = webdriver.Chrome(Chrome_options=chrome_options)</span><br><span class="line">page = chrome.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理数据</span></span><br><span class="line">page = BeautifulSoup(<span class="built_in">open</span>(html_path, <span class="string">&#x27;r&#x27;</span>))</span><br><span class="line">links = [a[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">for</span> a <span class="keyword">in</span> page.find_all(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;list-card-link&#x27;</span>)]</span><br><span class="line">ids = [l.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">2</span>]].split(<span class="string">&#x27;_&#x27;</span>)(<span class="number">0</span>) <span class="keyword">for</span> l <span class="keyword">in</span> links]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整理并导出数据</span></span><br><span class="line">sold_items = [a.text <span class="keyword">for</span> a <span class="keyword">in</span> page.find(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;ds-home-details-chip&#x27;</span>).find(<span class="string">&#x27;p&#x27;</span>).find_all(<span class="string">&#x27;span&#x27;</span>)]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sold_items:</span><br><span class="line">  <span class="keyword">if</span> <span class="string">&#x27;Sold&#x27;</span>:<span class="string">&#x27; in item:</span></span><br><span class="line"><span class="string">    result[&#x27;</span>Sold Price<span class="string">&#x27;] = item.split(&#x27;</span> <span class="string">&#x27;)[1]</span></span><br><span class="line"><span class="string">  if &#x27;</span>Sold on<span class="string">&#x27;:&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">    result[<span class="string">&#x27;Sold On&#x27;</span>] = item.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 获取所有图片url</span></span><br><span class="line">p = <span class="string">r&#x27;https:\\/\\/photos.zillowstatic.com\\/fp\\/([\d\w\-\_]+).jpg&#x27;</span></span><br><span class="line">ids = [a.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>] <span class="keyword">for</span> a <span class="keyword">in</span> re.findall(p,html)]</span><br><span class="line">urls = [<span class="string">f&#x27;https://photos.zillowstatic.com/fp/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>-uncropped_scaled_within_1536_1152.jpg&#x27;</span> <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> ids]</span><br></pre></td></tr></table></figure><h4 id="1-4-数据标注"><a href="#1-4-数据标注" class="headerlink" title="1.4 数据标注"></a>1.4 数据标注</h4><p>手动标注 费时<br>众包标注 费钱<br>半监督学习</p><p>策略1：将数据标注方式简单化<br>策略2：半监督学习，利用少量标记数据和大量未标记数据进行训练<br>策略3：主动学习，人干预，手动标记重要或明确的数据</p><ul><li>在已有的数据集中，找到最不确定的数据，让人标注</li><li>从模型的不同版本中找到最不确定的数据</li></ul><div>                <img src="/blog/p/614a8113/半监督学习.png" alt="半监督学习"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[半监督学习]</p>            </div><p>主动学习+自学习</p><h4 id="3-1-8分钟机器学习介绍"><a href="#3-1-8分钟机器学习介绍" class="headerlink" title="3.1 8分钟机器学习介绍"></a>3.1 8分钟机器学习介绍</h4><p>机器学习算法</p><ul><li>监督学习 Supervised Learning 在有标号的数据上训练模型，任务就是预测标号<ul><li>重要<ul><li>训练<ul><li>损失函数 Loss Function</li></ul></li><li>模型<ul><li>输入</li><li>输出</li></ul></li></ul></li><li>预测房子的价格</li><li>预测图片的类别</li><li>自监督学习 Self-Supervised Learning 标号来自于数据本身</li></ul></li><li>无监督学习 Unsupervised Learning 在没有标号的数据上训练模型，任务也不是预测标号<ul><li>GAN 生成对抗模型</li></ul></li><li>强化学习 Reinforcement Learning 通过与环境的交互学习，任务是找到最优策略<ul><li>机器人学习走路</li><li>游戏AI</li></ul></li></ul><h4 id="3-2-最简单也最常用的决策树-Decision-Tree"><a href="#3-2-最简单也最常用的决策树-Decision-Tree" class="headerlink" title="3.2 最简单也最常用的决策树 Decision Tree"></a>3.2 最简单也最常用的决策树 Decision Tree</h4><p>分类树 Classification Tree</p><ul><li>节点判断 是or不是<ul><li>不是 break</li><li>是 是否要对标号进行提升<ul><li>是 标注数据 break</li><li>不是 执行类别判断<ul><li>…</li></ul></li></ul></li></ul></li></ul><p>回归树 Regression Tree</p><ul><li>1级分类判断<ul><li>不是 break</li><li>是 2级分类判断<ul><li>…</li></ul></li></ul></li></ul><h3 id="从0入门人工智能"><a href="#从0入门人工智能" class="headerlink" title="从0入门人工智能"></a>从0入门人工智能</h3><h4 id="介绍以及环境配置"><a href="#介绍以及环境配置" class="headerlink" title="介绍以及环境配置"></a>介绍以及环境配置</h4><h5 id="基础工具包"><a href="#基础工具包" class="headerlink" title="基础工具包"></a>基础工具包</h5><p>matplotlib</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">y = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(x,y)</span><br><span class="line">fig1 = plt.figure(figsize=(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment"># plt.plot(x,y) # 折线图</span></span><br><span class="line">plt.scatter(x,y) <span class="comment"># 散点图</span></span><br><span class="line">plt.title(<span class="string">&#x27;y vs x&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>numpy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 生成矩阵：对角线是1 其他位置都是0</span></span><br><span class="line">a = np.eye(<span class="number">5</span>)</span><br><span class="line">b = np.ones([<span class="number">5</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a),a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b),b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看维度</span></span><br><span class="line"><span class="built_in">print</span>(a.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组加法</span></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c),c)</span><br></pre></td></tr></table></figure><p>pandas</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对本地的csv进行加载</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data), data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位，获取第x行所有列</span></span><br><span class="line">x = data.loc[:,<span class="string">&#x27;x&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位，获取第x行所有列,并且y&gt;50</span></span><br><span class="line">c = data.loc[:,<span class="string">&#x27;x&#x27;</span>][y&gt;<span class="number">50</span>]</span><br><span class="line"></span><br><span class="line">data_array = np.array(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data_array), data_array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">data_new = data + <span class="number">10</span></span><br><span class="line">data_new.head()</span><br><span class="line">data_new.to_csv(<span class="string">&#x27;data_new.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="机器学习介绍"><a href="#机器学习介绍" class="headerlink" title="机器学习介绍"></a>机器学习介绍</h5><p>什么是机器学习？</p><p>小明1月工资1000，每月增长10%，第10月是多少？<br>y &#x3D; 1000 x 1.1^x</p><p>符号：输入第x月 得出结果<br>机器学习：训练数据喂给计算机，计算机自动求解数据关系，在新的数据上做出预测和给出建议。</p><h5 id="机器学习-线性回归"><a href="#机器学习-线性回归" class="headerlink" title="机器学习-线性回归"></a>机器学习-线性回归</h5><p>回归分析：根据数据，确定两种或两种以上变量 之间 互相依赖的定量关系</p><p>线性回归：回归分析中，变量和因变量存在线性关系<br>函数表达式：</p><ul><li>线性回归<ul><li>距离S &#x3D; 速度 x t + S0</li></ul></li><li>非线性回归<ul><li>距离S &#x3D; 加速度 x T^2 + S0</li></ul></li></ul><p>问题：面积110平米售价150万是否值得投资？</p><ol><li>确定 面积 和 售价 的定量关系<ul><li>售价P &#x3D; f(面积 a)</li></ul></li><li>根据关系预测合理价格<ul><li>P(a&#x3D;110) &#x3D; f(110)</li></ul></li><li>做出判断</li></ol><p>线性模型： y &#x3D; ax+b</p><p>如何寻找最合适的a、b？<br>问题转换：假设x为变量，y是对应的结果  y’是模型输出结果，目标变为 y’ 尽可能接近y</p><div>                <img src="/blog/p/614a8113/如何寻找最合适的a、b.png" alt="如何寻找最合适的a、b.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[如何寻找最合适的a、b.png]</p>            </div>公式：m为样本数；y'i预测值和yi实际值之间的距离<p>求导之后 变成了</p><div>                <img src="/blog/p/614a8113/如何寻找最合适的a、b_转化.png" alt="如何寻找最合适的a、b_转化.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[如何寻找最合适的a、b_转化.png]</p>            </div>尽可能找到a和b，让损失函数J最小（最小值）<p>如何求解找a</p><p>Scikit-learn <a href="https://scikit-learn.org/" target="_blank" rel="noopener">https://scikit-learn.org/</a></p><ul><li>继承了机器学习中各类成熟的算法</li><li>不支持Python之外的语言，不支持深度学习和强化学习</li></ul><p>使用 Scikit-learn 解决线性回归问题</p><blockquote><p><a href="https://scikit-learn.org/stable/modules/linear_model.html#ordinary-least-squares" target="_blank" rel="noopener">https://scikit-learn.org/stable/modules/linear_model.html#ordinary-least-squares</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> slearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">lr_model = LLinearRegression()</span><br><span class="line">lr_model.fit(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示a和b</span></span><br><span class="line">a = lr_model.coef_</span><br><span class="line">b = lr_model.intercept_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对新数据做预测</span></span><br><span class="line">prodictions = lr_model.predict(x_new)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试数据 y = 2x + 5</span></span><br><span class="line">x y</span><br><span class="line"><span class="number">1</span> <span class="number">7</span></span><br><span class="line"><span class="number">2</span> <span class="number">9</span></span><br><span class="line"><span class="number">3</span> <span class="number">11</span></span><br><span class="line"><span class="number">4</span> <span class="number">13</span></span><br><span class="line"><span class="number">5</span> <span class="number">15</span></span><br><span class="line"><span class="number">6</span> <span class="number">17</span></span><br><span class="line"><span class="number">7</span> <span class="number">19</span></span><br><span class="line"><span class="number">8</span> <span class="number">21</span></span><br><span class="line"><span class="number">9</span> <span class="number">23</span></span><br><span class="line"><span class="number">10</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line">均方误差(MSE)</span><br><span class="line">- 越小越好</span><br><span class="line"><span class="keyword">from</span> s</span><br><span class="line"></span><br><span class="line">R方值(R^<span class="number">2</span>) = <span class="number">1</span> - MSE/方差</span><br><span class="line">- 越接近<span class="number">1</span>越好</span><br><span class="line"></span><br><span class="line">y和y<span class="string">&#x27;的集中度越高越好（越接近直线分布）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">实现方法1</span></span><br><span class="line"><span class="string">from sklearn.metrics import mean_squared_error, r2_score</span></span><br><span class="line"><span class="string">MSE = mean_squared_error(y, y_predict)</span></span><br><span class="line"><span class="string">R2 = r2_score(y, y_predict)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">实现方法2 画图对比</span></span><br><span class="line"><span class="string">from matplotlib import pyplot as plt</span></span><br><span class="line"><span class="string">plt.scatter(y, y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多张图 同时展示</span></span><br><span class="line">fig1 = plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.scatter(x1, y1)</span><br><span class="line"></span><br><span class="line">fig2 = plt.subplot(<span class="number">212</span>)</span><br><span class="line">plt.scatter(x2, y2)</span><br></pre></td></tr></table></figure><p>LR实现线性预测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load the data</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;week2/generated_data.csv&#x27;</span>)</span><br><span class="line">data.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印 类型 维度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data), data.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># data 赋值</span></span><br><span class="line">x = data.loc[:, <span class="string">&#x27;x&#x27;</span>]</span><br><span class="line">y = data.loc[:, <span class="string">&#x27;y&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示 数据</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt </span><br><span class="line">plt.figure()</span><br><span class="line"><span class="comment"># 创建散点图</span></span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立 linear regression 模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">lr_model = LinearRegression()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array(x)</span><br><span class="line">x = x.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">y = np.array(y)</span><br><span class="line">y = y.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">lr_model.fit(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测 y</span></span><br><span class="line">y_predict = lr_model.predict(x)</span><br><span class="line"><span class="built_in">print</span>(y_predict)</span><br><span class="line"></span><br><span class="line">y3 = lr_model.predict([[<span class="number">3.5</span>]])</span><br><span class="line"><span class="built_in">print</span>(y3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示a和b y=ax+b的值</span></span><br><span class="line">a = lr_model.coef_</span><br><span class="line">b = lr_model.intercept_</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2 获取ab的值</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score</span><br><span class="line">MSE = mean_squared_error(y, y_predict)</span><br><span class="line">R2 = r2_score(y, y_predict)</span><br><span class="line"><span class="built_in">print</span>(MSE, R2)</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.scatter(y, y_predict)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的结果差距太大，不适用</p><p>增加多因子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_mu</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-5-多因子线性回归实战"><a href="#2-5-多因子线性回归实战" class="headerlink" title="2-5 多因子线性回归实战"></a>2-5 多因子线性回归实战</h4><p>多因子房价预测</p><ol><li>以面积作为输入变量，建立单因子模型，评估模型表现，可视化线性回归预测结果</li><li>以income&#x2F;house_age&#x2F;numbers of rooms&#x2F;population&#x2F;area为输入变量，建立多因子模型，评估模型表现</li><li>预测 Income&#x3D;65000, House Age&#x3D;5, Number of Rooms&#x3D;5,population&#x3D;30000,size&#x3D;200的合理房价</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load the data</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;week2/usa_housing_price.csv&#x27;</span>)</span><br><span class="line">data.head()</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">30</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">fig1 = plt.subplot(<span class="number">231</span>)</span><br><span class="line">plt.scatter(data.loc[:, <span class="string">&#x27;Avg. Area Income&#x27;</span>], data.loc[:, <span class="string">&#x27;Price&#x27;</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Price VS Income&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">fig2 = plt.subplot(<span class="number">232</span>)</span><br><span class="line">plt.scatter(data.loc[:, <span class="string">&#x27;Avg. Area House Age&#x27;</span>], data.loc[:, <span class="string">&#x27;Price&#x27;</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Price VS House Age&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">fig3 = plt.subplot(<span class="number">233</span>)</span><br><span class="line">plt.scatter(data.loc[:, <span class="string">&#x27;Avg. Area Number of Rooms&#x27;</span>], data.loc[:, <span class="string">&#x27;Price&#x27;</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Price VS Number of Rooms&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">fig4 = plt.subplot(<span class="number">234</span>)</span><br><span class="line">plt.scatter(data.loc[:, <span class="string">&#x27;Area Population&#x27;</span>], data.loc[:, <span class="string">&#x27;Price&#x27;</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Price VS Population&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">fig5 = plt.subplot(<span class="number">235</span>)</span><br><span class="line">plt.scatter(data.loc[:, <span class="string">&#x27;size&#x27;</span>], data.loc[:, <span class="string">&#x27;Price&#x27;</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Price VS size&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 单因子</span></span><br><span class="line">x = data.loc[:, <span class="string">&#x27;size&#x27;</span>]</span><br><span class="line">y = data.loc[:, <span class="string">&#x27;Price&#x27;</span>]</span><br><span class="line">y.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立 单因子 模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">lr_model = LinearRegression()</span><br><span class="line"></span><br><span class="line">x = np.array(x)</span><br><span class="line">x = x.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">y = np.array(y)</span><br><span class="line">y = y.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">lr_model.fit(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 price vs size</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对新数据做预测</span></span><br><span class="line">y_prodict_1 = lr_model.predict(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评估模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># mean_squared_error(实际结果, 预测结果)</span></span><br><span class="line">MSE = mean_squared_error(y, y_prodict_1)</span><br><span class="line">R2 = r2_score(y, y_prodict_1)</span><br><span class="line"><span class="built_in">print</span>(MSE, R2)</span><br><span class="line"></span><br><span class="line">fig6 = plt.figure()</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.plot(X, y_prodict_1, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">x_multi = data.drop([<span class="string">&#x27;Price&#x27;</span>], axis=<span class="number">1</span>)</span><br><span class="line">x_multi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立 多因子 模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">lr_model_multi = LinearRegression()</span><br><span class="line"></span><br><span class="line">lr_model_multi.fit(x_multi,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对新数据做预测</span></span><br><span class="line">y_prodict_multi = lr_model_multi.predict(x_multi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评估模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># mean_squared_error(实际结果, 预测结果)</span></span><br><span class="line">MSE = mean_squared_error(y, y_prodict_multi)</span><br><span class="line">R2 = r2_score(y, y_prodict_multi)</span><br><span class="line"><span class="built_in">print</span>(MSE, R2)</span><br><span class="line"></span><br><span class="line">fig8 = plt.figure()</span><br><span class="line">plt.scatter(y, y_prodict_multi)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对具体的需求 进行预测</span></span><br><span class="line">x_test = [<span class="number">65000</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">30000</span>, <span class="number">200</span>]</span><br><span class="line">x_test = np.array(x_test).reshape(<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x_test)</span><br><span class="line">y_test_predict = lr_model_multi.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y_test_predict)</span><br></pre></td></tr></table></figure><h4 id="3-1-机器学习-逻辑回归"><a href="#3-1-机器学习-逻辑回归" class="headerlink" title="3-1 机器学习-逻辑回归"></a>3-1 机器学习-逻辑回归</h4><p>解决分类问题</p><p>什么是分类问题？</p><p>垃圾邮件检测</p><ul><li>输入：电子邮件</li><li>输出：是否是垃圾邮件</li></ul><p>流程：</p><ul><li>打标签</li><li>根据批量的样本和标签，学习特征<ul><li>发件人包含 字符 ！￥！@</li><li>正文包含：现金、领取等等</li></ul></li><li>针对新的样本，进行预测</li></ul><p>特点：</p><ol><li>样本越多，准确率会下降</li></ol><p>基本框架：</p><ul><li>y&#x3D;f(x1,x2,…,xn) 众多个特征</li><li>判断为类别N，如果y&#x3D;n<ul><li>y&#x3D;0 就是垃圾邮件</li></ul></li></ul><p>用什么方法？</p><ul><li>逻辑回归</li><li>KNN近邻算法<ul><li>通过计算不同特征之间的距离，来判断新的样本属于哪个类别</li></ul></li><li>决策树<ul><li>不停地问n个问题，最后得到结果</li></ul></li><li>神经网络<ul><li>通过多层神经网络，来学习特征之间的关系</li></ul></li></ul><p>分类任务和回归任务的区别</p><ul><li>分类目标：判断类别<ul><li>模型输出：非连续性标签 （passed&#x2F;failed;0&#x2F;1&#x2F;2…）</li></ul></li><li>回归目标：建立函数关系<ul><li>模型输出：连续性数值</li></ul></li></ul><p>问题：根据余额，判断小明是否会去看电影<br>训练数据</p><ul><li>余额为 1,2,3,4,5,<ul><li>看电影 正样本</li></ul></li><li>余额为 -1 -2 -3 -4 -5<ul><li>不看电影 负样本</li></ul></li></ul><p>寻找f(x)</p><p>样本量变大之后，准确率会下降</p><p>解决办法<br>逻辑回归</p><ul><li>用于解决分类问题的一种模型，根据数据特征，计算其归属于某一类别的概率P(x)，根据概率数值判断其所属类别</li><li>主要应用场景：二分类问题</li></ul><p>方程变成了<br>Y &#x3D; 1&#x2F;(1+e^(-x))</p><p>y是识别效果,P是概率分布</p><ul><li>1 P(x) &gt;&#x3D; 0.5</li><li>0 P(x) &lt; 0.5</li></ul><h4 id="3-3"><a href="#3-3" class="headerlink" title="3-3"></a>3-3</h4><p>无论是多少维度的分类任务，找出决策边界最重要</p><ul><li>g(x) &#x3D; xxx 也就是 xxx &#x3D; 0<ul><li>得出 &gt; 0 和 &lt; 0 的两个区域</li></ul></li></ul><h4 id="3-4"><a href="#3-4" class="headerlink" title="3-4"></a>3-4</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分类散点图可视化</span></span><br><span class="line"><span class="comment">## 未区分类别散点图</span></span><br><span class="line">plt.scatter(x1,x2)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 区分类别散点图</span></span><br><span class="line">mask = y == <span class="number">1</span></span><br><span class="line">passed = plt.scatter(x1[mask], x2[mask])</span><br><span class="line">failed = plt.scatter(x1[~mask], x2[~mask], marker=<span class="string">&#x27;^&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑回归模型使用</span></span><br><span class="line"><span class="comment">## 模型训练</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">LR = LogisticRegression()</span><br><span class="line">LR.fit(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 边界函数系数</span></span><br><span class="line">theta1 = LR.coef_[<span class="number">0</span>][<span class="number">0</span>],LR.coef_[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">theta0 = LR.intercept_[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 对新数据做预测</span></span><br><span class="line">predictions = LR.predict(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立新数据集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型评估</span></span><br><span class="line"><span class="comment">## 准确率（类别正确预测的臂力）,越接近1越好</span></span><br><span class="line"><span class="comment">### Accuracy = 正确预测样本数量/总样本数量</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">y_predict = LR.predict(x)</span><br><span class="line">accuracy = accuracy_score(y, y_predict)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 画图看决策边界效果，可视化模型表现.蓝色线是边界函数，观察分类效果，分割效果越明显越好</span></span><br><span class="line">plt.plot(x, x_boundary)</span><br><span class="line">passed = plt.scatter(x1[mask], x2[mask])</span><br><span class="line">failed = plt.scatter(x1[~mask], x2[~mask], marker=<span class="string">&#x27;^&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-5-实战1-考试通过预测"><a href="#3-5-实战1-考试通过预测" class="headerlink" title="3-5 实战1 考试通过预测"></a>3-5 实战1 考试通过预测</h4><ol><li>给予 examdata.csv 数据，建立逻辑回归模型，评估模型表现</li><li>预测 Exam1&#x3D;70,Exam2&#x3D;65 该同学是否能通过Exam3</li><li>建立二阶边界函数，重复步骤1和2<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load the data</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;week3/examdata.csv&#x27;</span>)</span><br><span class="line">data.head()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">fig1 = plt.figure()</span><br><span class="line">plt.scatter(data.loc[:, <span class="string">&#x27;Exam1&#x27;</span>], data.loc[:, <span class="string">&#x27;Exam2&#x27;</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Exam1 - Exam2&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Exam1&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Exam2&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区分 Exam1 和 Exam2</span></span><br><span class="line">mask = data.loc[:, <span class="string">&#x27;Pass&#x27;</span>] == <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(~mask)</span><br><span class="line"></span><br><span class="line">fig2 = plt.figure()</span><br><span class="line"><span class="comment"># 能通过的同学</span></span><br><span class="line">passed = plt.scatter(data.loc[:, <span class="string">&#x27;Exam1&#x27;</span>][mask], data.loc[:, <span class="string">&#x27;Exam2&#x27;</span>][mask])</span><br><span class="line"><span class="comment"># 不能通过的同学</span></span><br><span class="line">failed = plt.scatter(data.loc[:, <span class="string">&#x27;Exam1&#x27;</span>][~mask], data.loc[:, <span class="string">&#x27;Exam2&#x27;</span>][~mask])</span><br><span class="line">plt.title(<span class="string">&#x27;Exam1 - Exam2&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Exam1&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Exam2&#x27;</span>)</span><br><span class="line">plt.legend((passed, failed), (<span class="string">&#x27;passed&#x27;</span>, <span class="string">&#x27;failed&#x27;</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 Pass 列</span></span><br><span class="line">X = data.drop([<span class="string">&#x27;Pass&#x27;</span>], axis=<span class="number">1</span>)</span><br><span class="line">y = data.loc[:, <span class="string">&#x27;Pass&#x27;</span>]</span><br><span class="line">X1 = data.loc[:, <span class="string">&#x27;Exam1&#x27;</span>]</span><br><span class="line">X2 = data.loc[:, <span class="string">&#x27;Exam2&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立 逻辑回归 模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">LR = LogisticRegression()</span><br><span class="line">LR.fit(X, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果</span></span><br><span class="line">y_predict = LR.predict(X)</span><br><span class="line"><span class="built_in">print</span>(y_predict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型评估</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">accuracy = accuracy_score(y, y_predict)</span><br><span class="line"><span class="built_in">print</span>(accuracy)</span><br><span class="line"></span><br><span class="line">y_test = LR.predict([[<span class="number">70</span>, <span class="number">65</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;passed&#x27;</span> <span class="keyword">if</span> y_test == <span class="number">1</span> <span class="keyword">else</span> <span class="string">&#x27;failed&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LR.coef_, LR.intercept_</span><br><span class="line"></span><br><span class="line">theta0 = LR.intercept_</span><br><span class="line">theta1, theta2 = LR.coef_[<span class="number">0</span>][<span class="number">0</span>], LR.coef_[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(theta1, theta2)</span><br><span class="line"></span><br><span class="line">X2_new = -(theta0 + theta1 * X1) / theta2</span><br><span class="line"><span class="built_in">print</span>(X2_new)</span><br><span class="line"></span><br><span class="line">fig101 = plt.figure()</span><br><span class="line"><span class="comment"># 能通过的同学</span></span><br><span class="line">passed = plt.scatter(data.loc[:, <span class="string">&#x27;Exam1&#x27;</span>][mask], data.loc[:, <span class="string">&#x27;Exam2&#x27;</span>][mask])</span><br><span class="line"><span class="comment"># 不能通过的同学</span></span><br><span class="line">failed = plt.scatter(data.loc[:, <span class="string">&#x27;Exam1&#x27;</span>][~mask], data.loc[:, <span class="string">&#x27;Exam2&#x27;</span>][~mask])</span><br><span class="line">plt.plot(X1, X2_new)</span><br><span class="line">plt.title(<span class="string">&#x27;Exam1 - Exam2&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Exam1&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Exam2&#x27;</span>)</span><br><span class="line">plt.legend((passed, failed), (<span class="string">&#x27;passed&#x27;</span>, <span class="string">&#x27;failed&#x27;</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ol><p>得出的结果不是特别好，需要进行二阶边界函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 new data</span></span><br><span class="line">X1_2 = X1 * X1</span><br><span class="line">X2_2 = X2 * X2</span><br><span class="line">X1_X2 = X1 * X2</span><br><span class="line"></span><br><span class="line">X_new = &#123;<span class="string">&#x27;X1&#x27;</span>: X1, <span class="string">&#x27;X2&#x27;</span>: X2, <span class="string">&#x27;X1_2&#x27;</span>: X1_2, <span class="string">&#x27;X2_2&#x27;</span>: X2_2, <span class="string">&#x27;X1_X2&#x27;</span>: X1_X2&#125;</span><br><span class="line">X_new = pd.DataFrame(X_new)</span><br><span class="line"><span class="built_in">print</span>(X_new)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建型模型以及训练</span></span><br><span class="line">LR2 = LogisticRegression()</span><br><span class="line">LR2.fit(X_new, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果</span></span><br><span class="line">y2_predict = LR2.predict(X_new)</span><br><span class="line">accuracy2 = accuracy_score(y, y2_predict)</span><br><span class="line"><span class="built_in">print</span>(accuracy2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将结果可视化</span></span><br><span class="line">Lr2.coef_, LR2.intercept_</span><br><span class="line"></span><br><span class="line">theta0 = LR.intercept_</span><br><span class="line">theta1, theta2, theta3, theta4, theta5 = LR2.coef_[<span class="number">0</span>][<span class="number">0</span>], LR2.coef_[<span class="number">0</span>][<span class="number">1</span>], LR2.coef_[<span class="number">0</span>][<span class="number">2</span>], LR2.coef_[<span class="number">0</span>][<span class="number">3</span>], LR2.coef_[<span class="number">0</span>][<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(theta1, theta2, theta3, theta4, theta5)</span><br><span class="line"></span><br><span class="line">X2_new = -(theta0 + theta1 * X1) / theta2</span><br><span class="line"><span class="built_in">print</span>(X2_new)</span><br></pre></td></tr></table></figure><h4 id="4-机器学习-聚类"><a href="#4-机器学习-聚类" class="headerlink" title="4 机器学习-聚类"></a>4 机器学习-聚类</h4><h4 id="5-机器学习-其他"><a href="#5-机器学习-其他" class="headerlink" title="5 机器学习-其他"></a>5 机器学习-其他</h4><h4 id="6-模型评价和优化"><a href="#6-模型评价和优化" class="headerlink" title="6 模型评价和优化"></a>6 模型评价和优化</h4><h4 id="7-深度学习-多层感知机"><a href="#7-深度学习-多层感知机" class="headerlink" title="7 深度学习-多层感知机"></a>7 深度学习-多层感知机</h4><h4 id="7-1-多层感知机-MLP"><a href="#7-1-多层感知机-MLP" class="headerlink" title="7-1 多层感知机 MLP"></a>7-1 多层感知机 MLP</h4><p>模型二次项数量过多，计算量过大，而NLP在不增加高次项的情况下，可以实现复杂的非线性分类</p><p>人体神经结构</p><ul><li>树突<ul><li>接受上一个神经的轴突释放的化学物质</li></ul></li><li>几包和</li><li>细胞体</li><li>轴突<ul><li>释放递质给下一个神经元，实现信息传递</li></ul></li><li>轴突末端</li></ul><p>神经网络总结：</p><ul><li>由多个神经元组成</li><li>包含<ul><li>输入层</li><li>隐藏层</li><li>输出层</li></ul></li><li>多层感知机模型框架<ul><li>输入n个神经元 权值系数：θ1</li><li>隐含神经元 权值系数：θ2</li><li>隐含神经元 权值系数：θ3</li><li>…</li><li>输出神经元</li></ul></li></ul><p>NLP数学表达式： </p><ul><li>y &#x3D; g(z) &#x3D; 1&#x2F;(1+e^(-z)) -z其实是θx</li></ul><p>输入层 常数项 X0</p><h4 id="7-2-MLP-实现非线性分类"><a href="#7-2-MLP-实现非线性分类" class="headerlink" title="7-2 MLP 实现非线性分类"></a>7-2 MLP 实现非线性分类</h4><h4 id="7-3-Keras"><a href="#7-3-Keras" class="headerlink" title="7-3 Keras"></a>7-3 Keras</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立一个 sequential 顺序模型</span></span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line">model = Sequential()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过.add()方法叠加各层网络</span></span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line">model.add(Dense(units=<span class="number">3</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>, input_dim=<span class="number">3</span>))</span><br><span class="line">model.add(Dense(units=<span class="number">1</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看模型结构</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过.compile()方法配置模型求解过程参数</span></span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, optimizer=<span class="string">&#x27;sgd&#x27;</span>,metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model.fit(x_train, y_train, epochs=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="7-4-实战-1-建立MLP实现非线性二分类"><a href="#7-4-实战-1-建立MLP实现非线性二分类" class="headerlink" title="7-4 实战 1 建立MLP实现非线性二分类"></a>7-4 实战 1 建立MLP实现非线性二分类</h4><p>基于data.csv数据，建立mlp模型，计算其在测试数据上的准确率，可视化模型预测结果</p><ol><li>进行数据分离： test_size&#x3D;0.33, random_state&#x3D;10</li><li>模型结构：一层隐藏层，有20个神经元</li></ol><p>好坏质检二分类mlp实战summary：</p><ol><li>通过mlp模型，在不增加特征项的情况下，实现了非线性二分类任务</li><li>熟悉了mlp模型的建立、配置和训练方法，并实现基于新数据的预测</li><li>熟悉了mlp分类的预测数据格式，并实现格式转换</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load the data</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, Activation</span><br><span class="line"></span><br><span class="line">physical_devices = tf.config.list_physical_devices(<span class="string">&#x27;GPU&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(physical_devices) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;GPU is available!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No GPU detected. Training will use CPU.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;week7/data.csv&#x27;</span>)</span><br><span class="line">data.head()</span><br><span class="line">X = data.drop([<span class="string">&#x27;y&#x27;</span>], axis=<span class="number">1</span>)</span><br><span class="line">y = data.loc[:, <span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">X.head()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">fig1 = plt.figure()</span><br><span class="line">plt.scatter(X.loc[:, <span class="string">&#x27;x1&#x27;</span>], X.loc[:, <span class="string">&#x27;x2&#x27;</span>])</span><br><span class="line">passed = plt.scatter(X.loc[:, <span class="string">&#x27;x1&#x27;</span>][y==<span class="number">1</span>], X.loc[:, <span class="string">&#x27;x2&#x27;</span>][y==<span class="number">1</span>])</span><br><span class="line">failed = plt.scatter(X.loc[:, <span class="string">&#x27;x1&#x27;</span>][y==<span class="number">0</span>], X.loc[:, <span class="string">&#x27;x2&#x27;</span>][y==<span class="number">0</span>], marker=<span class="string">&#x27;^&#x27;</span>)</span><br><span class="line">plt.legend((passed, failed), (<span class="string">&#x27;passed&#x27;</span>, <span class="string">&#x27;failed&#x27;</span>))</span><br><span class="line">plt.title(<span class="string">&#x27;row data&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x1&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;x2&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据分离</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.33</span>, random_state=<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(X_train.shape, X_test.shape, y_train.shape, y_test.shape, X.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置模型</span></span><br><span class="line">mlp = Sequential()</span><br><span class="line">mlp.add(Dense(units=<span class="number">20</span>, input_dim=<span class="number">2</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>))</span><br><span class="line">mlp.add(Dense(units=<span class="number">1</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>))</span><br><span class="line">mlp.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置模型 二分类是binary_crossentropy</span></span><br><span class="line">mlp.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;binary_crossentropy&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">mlp.fit(X_train, y_train, epochs=<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行预测并计算准确性 make prediction and calculate the accuracy</span></span><br><span class="line">y_train_predict = mlp.predict_classes(X_train)</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">accuracy_train = accuracy_score(y_train, y_train_predict)</span><br><span class="line"><span class="built_in">print</span>(accuracy_train)</span><br><span class="line"><span class="comment">## Out: 0.88363636</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行预测测试数据并计算准确性 make prediction and calculate the test data</span></span><br><span class="line">y_train_predict = mlp.predict_classes(X_test)</span><br><span class="line">accuracy_test = accuracy_score(y_test, y_train_predict)</span><br><span class="line"><span class="built_in">print</span>(accuracy_test)</span><br><span class="line"><span class="comment">## Out: 0.88970588</span></span><br><span class="line"></span><br><span class="line">y_train_predict_form = pd.Series(i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> y_train_predict)</span><br><span class="line"><span class="built_in">print</span>(y_train_predict_form )</span><br></pre></td></tr></table></figure><h4 id="8-深度学习-卷积神经网络"><a href="#8-深度学习-卷积神经网络" class="headerlink" title="8 深度学习-卷积神经网络"></a>8 深度学习-卷积神经网络</h4><h4 id="9-深度学习-循环神经网络"><a href="#9-深度学习-循环神经网络" class="headerlink" title="9 深度学习-循环神经网络"></a>9 深度学习-循环神经网络</h4><h4 id="10-迁移学习、混合算法"><a href="#10-迁移学习、混合算法" class="headerlink" title="10 迁移学习、混合算法"></a>10 迁移学习、混合算法</h4><p>迁移学习</p><ul><li>主要思想是将从一个任务中学到的知识迁移到另一个相关的任务中。<ul><li>模型迁移</li><li>数据迁移</li></ul></li></ul><h4 id="10-2-混合模型"><a href="#10-2-混合模型" class="headerlink" title="10-2 混合模型"></a>10-2 混合模型</h4><p>监督+无监督学习<br>实际上我们更偏向于使用监督学习</p><p>数据决定模型表现上限</p><ul><li>理想的训练情况（更多的高质量数据）<ul><li>正常数据</li><li>穷尽类别</li><li>标注正确</li></ul></li><li>现实的训练情况（普通数据）<ul><li>夹杂异常数据</li><li>包含部分类别</li><li>标注标准不一</li></ul></li></ul><p>工业检测案例</p><ul><li>划痕</li><li>缺角</li><li>普通斑痕</li><li>蓝色斑痕</li></ul><p>苹果检测案例</p><ul><li>样本总数30个，普通和其他苹果 大约各占一半<ul><li>有10个苹果已经标注(普通苹果)，其他样本无标签</li></ul></li><li>建立模型区分普通&#x2F;其他苹果</li></ul><p>采用半监督学习：利用标签数据提供的正确信息，提高准确性</p><ul><li>在标记想本优先的情况下，尽可能识别出总样本的共同特性</li><li>利用有标记和无标记样本一起学习</li><li>具体实现<ul><li>伪标签学习：用<code>有标签数据</code>训练一个<code>分类器</code>，对<code>无标签数据</code>进行分类，产生伪标签，按一定规则挑选认为分类正确的无标签样本，将其和有标签样本作为数据对分类器进行训练。</li></ul></li></ul><p>半监督学习例子</p><ul><li>基于确定标签的部分数据，对聚类模型结果进行分类矫正<ul><li>根据已经打了标签的数据(原始数据分布)进行 聚类</li><li>无监督聚类<ul><li>只知道根据少量标签分类后的数据</li></ul></li><li>正确标签矫正结果<ul><li>分类完成</li></ul></li></ul></li></ul><p>半监督学习例子2：有标签数据提取特征</p><ol><li>用有标签数据训练网络</li><li>通过隐藏层提取特征，基于<code>特征数据</code>对<code>无标签数据</code>进行建模预测</li><li>也可以用别人使用的类似数据甚至模型，例如VGG16提取图像特征</li></ol><p>机器学习和深度学习结合</p><p>数据预处理</p><ul><li>数据降维PCA</li><li>异常检测</li></ul><p>任务模型</p><ul><li>聚类 Kmeans&#x2F;Meanshift 等</li><li>分类 逻辑回归&#x2F;决策树等</li><li>回归 线性&#x2F;非线性</li></ul><p>深度学习</p><ul><li>多层感知机 MLP</li><li>卷积神经网络 CNN</li><li>循环神经网络 RNN</li></ul><h4 id="10-6-实战准备"><a href="#10-6-实战准备" class="headerlink" title="10-6 实战准备"></a>10-6 实战准备</h4><h5 id="实战1-准备"><a href="#实战1-准备" class="headerlink" title="实战1 准备"></a>实战1 准备</h5><p>任务：基于transfer_data.csv数据，建立迁移mlp模型，并且实现模型迁移学习</p><ul><li>实现x对y的预测，可视化效果</li><li>基于新数据transfer_data2.csv,对前模型进行二次训练，对比模型训练次数少的情况下的表现</li></ul><p>模型结构：mlp，两个隐藏层，每个隐藏层有50个神经元，激活函数relu，输出层激活函数linear，迭代次数：100次</p><p>上面是一道题目，对于模型结构的 隐藏层个数，有多少个神经元 激活函数 确定依据是什么？</p><ul><li>2个隐藏层 折中选择</li><li>每个隐藏层50个神经元 一般选择2的倍数 可以提供足够的模型复杂性，避免过拟合</li><li>隐藏层使用 ReLU 激活函数，可以提高模型的训练速度和准确性。</li><li>输出层使用 linear 激活函数，可以使模型输出与目标值保持一致。</li><li>由于数据集较小，选择100次迭代可以避免过拟合。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立mlp模型</span></span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line">model = Sequential()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个隐藏层</span></span><br><span class="line">model.add(Dense(units=<span class="number">50</span>, input_dim=<span class="number">1</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dense(units=<span class="number">50</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出层</span></span><br><span class="line">model.add(Dense(units=<span class="number">1</span>, activation=<span class="string">&#x27;linear&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 优化器和损失函数</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;mean_squared_error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印摘要信息</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型训练和二次训练</span></span><br><span class="line">model.fit(x,y)</span><br><span class="line">model.fit(x2,y2) <span class="comment"># 模型迁移学习</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型保存到本地</span></span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line">joblib.dump(model, <span class="string">&#x27;model1.m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型加载</span></span><br><span class="line">model2 = joblib.load(<span class="string">&#x27;model1.m&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="实战1-基于新数据的迁移学习"><a href="#实战1-基于新数据的迁移学习" class="headerlink" title="实战1 基于新数据的迁移学习"></a>实战1 基于新数据的迁移学习</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;week10/transfer_data.csv&#x27;</span>)</span><br><span class="line">data.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 x 和 y</span></span><br><span class="line">X = data.loc[:, <span class="string">&#x27;x&#x27;</span>]</span><br><span class="line">y = data.loc[:, <span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">X.head();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示 数据</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig1 = plt.figure(figsize=(<span class="number">7</span>,<span class="number">5</span>))</span><br><span class="line">plt.scatter(X,y)</span><br><span class="line">plt.title(<span class="string">&#x27;y - x&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show() <span class="comment"># 执行后发现是二次函数</span></span><br><span class="line"></span><br><span class="line">X = np.array(X).reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(X.shape, y.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 mlp 模型</span></span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"></span><br><span class="line">model1 = Sequential()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 输入层</span></span><br><span class="line">model1.add(Dense(units=<span class="number">50</span>, input_dim=<span class="number">1</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model1.add(Dense(units=<span class="number">50</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 输出层</span></span><br><span class="line">model1.add(Dense(units=<span class="number">1</span>, activation=<span class="string">&#x27;linear&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 优化器和损失函数</span></span><br><span class="line">model1.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;mean_squared_error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印摘要信息</span></span><br><span class="line">model1.summary()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练100次</span></span><br><span class="line"><span class="comment"># 模型训练和二次训练</span></span><br><span class="line">model1.fit(X,y,epochs=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果预测</span></span><br><span class="line">y_predict = model1.predict(X)</span><br><span class="line"></span><br><span class="line">fig100 = plt.figure(figsize=(<span class="number">7</span>,<span class="number">5</span>))</span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.plot(X, y_predict, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;y vs x(epochs=100)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次训练100次</span></span><br><span class="line"><span class="comment"># 模型训练和二次训练</span></span><br><span class="line">model1.fit(X,y,epochs=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果预测</span></span><br><span class="line">y_predict = model1.predict(X)</span><br><span class="line"></span><br><span class="line">fig200 = plt.figure(figsize=(<span class="number">7</span>,<span class="number">5</span>))</span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.plot(X, y_predict, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;y vs x(epochs=200)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次训练100次</span></span><br><span class="line"><span class="comment"># 模型训练和二次训练</span></span><br><span class="line">model1.fit(X,y,epochs=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果预测</span></span><br><span class="line">y_predict = model1.predict(X)</span><br><span class="line"></span><br><span class="line">fig300 = plt.figure(figsize=(<span class="number">7</span>,<span class="number">5</span>))</span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.plot(X, y_predict, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;y vs x(epochs=300)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型架构和权重</span></span><br><span class="line">model1.save(<span class="string">&#x27;week10/model1.keras&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型架构和权重</span></span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"></span><br><span class="line">model2 = load_model(<span class="string">&#x27;week10/model1.keras&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data2 = pd.read_csv(<span class="string">&#x27;week10/transfer_data2.csv&#x27;</span>)</span><br><span class="line">data2.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 x 和 y</span></span><br><span class="line">X2 = np.array(data2.loc[:, <span class="string">&#x27;x2&#x27;</span>]).reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">y2 = data2.loc[:, <span class="string">&#x27;y2&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(X2.shape, y2.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果预测</span></span><br><span class="line">y2_predict = model2.predict(X2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示 数据</span></span><br><span class="line">fig5 = plt.figure(figsize=(<span class="number">7</span>,<span class="number">5</span>))</span><br><span class="line">plt.scatter(X, y, label=<span class="string">&#x27;data1&#x27;</span>)</span><br><span class="line">plt.scatter(X2, y2, label=<span class="string">&#x27;data2&#x27;</span>)</span><br><span class="line">plt.plot(X, y2_predict, <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;predict2&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.title(<span class="string">&#x27;y - x&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 学习</span></span><br><span class="line">model2.fit(X2, y2, epochs=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line">y2_predict = model2.predict(X2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示 数据</span></span><br><span class="line">fig100 = plt.figure(figsize=(<span class="number">7</span>,<span class="number">5</span>))</span><br><span class="line">plt.scatter(X, y, label=<span class="string">&#x27;data1&#x27;</span>)</span><br><span class="line">plt.scatter(X2, y2, label=<span class="string">&#x27;data2&#x27;</span>)</span><br><span class="line">plt.plot(X, y2_predict, <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;predict2&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.title(<span class="string">&#x27;y - x(epochs=100)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">X = np.array(X).reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(X.shape, y.shape)</span><br></pre></td></tr></table></figure><h5 id="实战2-寻找普通苹果和其他苹果"><a href="#实战2-寻找普通苹果和其他苹果" class="headerlink" title="实战2 寻找普通苹果和其他苹果"></a>实战2 寻找普通苹果和其他苹果</h5><p>资源：30张苹果图片，13张普通苹果，10张带标签(4开头)，文件夹：origin_data</p><p>思路：根据 original_data 样本，建立模型,对test_data的图片进行普通&#x2F;其他苹果判断:</p><ul><li>数据增强，增加 普通苹果的样本数量</li><li>特征提取，使用VGG16模型提取图像特征（深度卷积神经网络模型，可以进行图像识别和特征提取）</li><li>图片批量处理</li><li>使用 Kmeans 模型 并且 基于标签数据矫正结果以及可视化，但是效果不是很好</li><li>进而使用 Meanshift 模型提升模型表现</li><li>数据降维PCA处理，因为特征太多，没有必要保存太多维度，留下主要信息，删除噪音</li></ul><p>K-均值聚类（中心）<br>算法：以空间中k个点位中心进行聚类，对最靠近他们的对象归类，是聚类算法中最为基础但也最为重要的算法</p><p>公式：</p><ul><li>数据点和各簇中心点距离：dist</li><li>根据距离归类：</li><li>中心更新</li></ul><p>均值漂移聚类（密度）<br>算法：一种基于密度梯度上升的聚类算法（沿着密度上升方向寻找聚类中心点）<br>公式：</p><ul><li>均值偏移: M(x) &#x3D; 1&#x2F;N * ΣK(u-xi)</li><li>中心更新：u^t+1 &#x3D; u^t + m^t<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据增强</span></span><br><span class="line"><span class="keyword">from</span> keras_preprocessing.image <span class="keyword">import</span> ImageDataGenerator, array_to_img, img_to_array, load_img</span><br><span class="line">path = <span class="string">&#x27;week10/original_data&#x27;</span> <span class="comment"># 原始数据文件夹</span></span><br><span class="line">dst_path = <span class="string">&#x27;week10/gen_data&#x27;</span> <span class="comment"># 图片增强后的文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例、配置图片增强参数 # 参考连接：https://keras.io/zh/preprocessing/image/</span></span><br><span class="line">datagen = ImageDataGenerator(</span><br><span class="line">    rotation_range=<span class="number">10</span>, <span class="comment"># 旋转角度</span></span><br><span class="line">    width_shift_range=<span class="number">0.1</span>, <span class="comment"># 宽度偏移</span></span><br><span class="line">    height_shift_range=<span class="number">0.02</span>, <span class="comment"># 高度偏移</span></span><br><span class="line">    horizontal_flip=<span class="literal">True</span>, <span class="comment"># 水平翻转</span></span><br><span class="line">    vertical_flip=<span class="literal">True</span>, <span class="comment"># 垂直翻转</span></span><br><span class="line">    <span class="comment"># shear_range=0.2, # 剪切强度</span></span><br><span class="line">    <span class="comment"># zoom_range=0.2, # 缩放强度</span></span><br><span class="line">    <span class="comment"># fill_mode=&#x27;nearest&#x27; # 填充模式</span></span><br><span class="line">)</span><br><span class="line">gen = datagen.flow_from_directory(</span><br><span class="line">    path, <span class="comment"># 原始数据文件夹</span></span><br><span class="line">    target_size=(<span class="number">224</span>,<span class="number">224</span>), <span class="comment"># 图片大小</span></span><br><span class="line">    batch_size=<span class="number">2</span>, <span class="comment"># 批量大小</span></span><br><span class="line">    save_to_dir=dst_path, <span class="comment"># 图片增强后的文件夹</span></span><br><span class="line">    save_prefix=<span class="string">&#x27;gen&#x27;</span>, <span class="comment"># 图片增强后的文件名前缀</span></span><br><span class="line">    save_format=<span class="string">&#x27;jpg&#x27;</span> <span class="comment"># 图片增强后的文件格式</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    gen.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单张图片载入</span></span><br><span class="line">img_path = <span class="string">&#x27;week10/1.jpg&#x27;</span></span><br><span class="line">img = load_img(img_path, target_size=(<span class="number">224</span>,<span class="number">224</span>))</span><br><span class="line"><span class="built_in">type</span>(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单张图片可视化</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">plt.imshow(img)</span><br><span class="line"></span><br><span class="line">img_array = img_to_array(img)</span><br><span class="line"><span class="built_in">type</span>(img_array)</span><br><span class="line"><span class="built_in">print</span>(img_array.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单张图片特征提取</span></span><br><span class="line"><span class="comment">## 模型加载、图像矩阵预处理</span></span><br><span class="line"><span class="keyword">from</span> keras.applications.vgg16 <span class="keyword">import</span> VGG16</span><br><span class="line"><span class="keyword">from</span> keras.applications.vgg16 <span class="keyword">import</span> preprocess_input</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 国内无法下载，可以先下载，放入C:\Users\li\.keras\models文件夹内执行</span></span><br><span class="line">model_vgg = VGG16(weights=<span class="string">&#x27;imagenet&#x27;</span>, include_top=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加维度</span></span><br><span class="line">x = np.expand_dims(img_array, axis=<span class="number">0</span>)</span><br><span class="line">x = preprocess_input(x)</span><br><span class="line"><span class="built_in">print</span>(x.shape)  <span class="comment"># 结果是 (1, 224, 224, 3)</span></span><br><span class="line"> </span><br><span class="line">x = preprocess_input(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征提取</span></span><br><span class="line">features = model_vgg.predict(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征数据格式预处理</span></span><br><span class="line">features = features.reshape(<span class="number">1</span>,<span class="number">7</span>*<span class="number">7</span>*<span class="number">512</span>)</span><br><span class="line"><span class="built_in">print</span>(features.shape)  <span class="comment"># 结果是 (1, 25088)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量图片路径加载</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">folder = <span class="string">&#x27;week10/train_data&#x27;</span> <span class="comment"># 训练数据文件夹名称</span></span><br><span class="line">dirs = os.listdir(folder) <span class="comment"># 获取文件夹下所有文件名称</span></span><br><span class="line"><span class="built_in">print</span>(dirs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片路径合成</span></span><br><span class="line">img_path = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dirs:</span><br><span class="line">  <span class="keyword">if</span> os.path.splitext(i)[<span class="number">1</span>] == <span class="string">&#x27;.jpg&#x27;</span>:</span><br><span class="line">    img_path.append(i)</span><br><span class="line">img_path = [folder + <span class="string">&#x27;//&#x27;</span> + i <span class="keyword">for</span> i <span class="keyword">in</span> img_path]</span><br><span class="line"><span class="built_in">print</span>(img_path)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个提取图片特征的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modelProcess</span>(<span class="params">img_path, model</span>):</span><br><span class="line">    img = load_img(img_path, target_size=(<span class="number">224</span>,<span class="number">224</span>))</span><br><span class="line">    img_array = img_to_array(img)</span><br><span class="line">    x = np.expand_dims(img_array, axis=<span class="number">0</span>)</span><br><span class="line">    x = preprocess_input(x)</span><br><span class="line">    features = model.predict(x)</span><br><span class="line">    features = features.reshape(<span class="number">1</span>,<span class="number">7</span>*<span class="number">7</span>*<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">return</span> features</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量提取图片特征</span></span><br><span class="line">features_train = np.zeros((<span class="built_in">len</span>(img_path), <span class="number">7</span>*<span class="number">7</span>*<span class="number">512</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img_path)):</span><br><span class="line">    features_i = modelProcess(img_path[i], model_vgg)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;preprocessed: &#x27;</span>, img_path[i])</span><br><span class="line">    features_train[i] = features_i</span><br><span class="line"><span class="built_in">print</span>(features_train.shape) <span class="comment"># (230, 25088) 230张图片，每张图片有25088个特征</span></span><br></pre></td></tr></table></figure>无监督学习 KMeans 聚类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"><span class="comment"># 报错：Anaconda3\lib\site-packages\sklearn\cluster\_kmeans.py:881: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.</span></span><br><span class="line"></span><br><span class="line">x = features_train</span><br><span class="line"><span class="comment"># 无监督学习 KMeans 聚类</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line">cnn_kmeans = KMeans(n_clusters=<span class="number">2</span>, max_iter=<span class="number">2000</span>) <span class="comment"># 两个类别，苹果和生成的200个特征</span></span><br><span class="line">cnn_kmeans.fit(x)</span><br><span class="line">y_pred_kmeans = cnn_kmeans.predict(x)</span><br><span class="line"><span class="built_in">print</span>(y_pred_kmeans)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果统计</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="built_in">print</span>(Counter(y_pred_kmeans)) <span class="comment"># 如果两个类别相近，则有问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量可视化结果</span></span><br><span class="line">normal_apple_id = <span class="number">1</span></span><br><span class="line">fig2 = plt.figure(figsize=(<span class="number">10</span>,<span class="number">40</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">45</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        img = load_img(img_path[i*<span class="number">5</span>+j])</span><br><span class="line">        plt.subplot(<span class="number">45</span>,<span class="number">5</span>,i*<span class="number">5</span>+j+<span class="number">1</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;apple&#x27;</span> <span class="keyword">if</span> y_pred_kmeans[i*<span class="number">5</span>+j] == normal_apple_id <span class="keyword">else</span> <span class="string">&#x27;others&#x27;</span>)</span><br><span class="line">        plt.imshow(img), plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">folder_test = <span class="string">&#x27;week10/test_data&#x27;</span> <span class="comment"># 测试数据文件夹名称</span></span><br><span class="line">dirs_test = os.listdir(folder_test) <span class="comment"># 获取文件夹下所有文件名称</span></span><br><span class="line"><span class="comment"># 图片路径合成</span></span><br><span class="line">img_path_test = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dirs_test:</span><br><span class="line">  <span class="keyword">if</span> os.path.splitext(i)[<span class="number">1</span>] == <span class="string">&#x27;.jpg&#x27;</span>:</span><br><span class="line">    img_path_test.append(i)</span><br><span class="line">img_path_test = [folder_test + <span class="string">&#x27;//&#x27;</span> + i <span class="keyword">for</span> i <span class="keyword">in</span> img_path_test]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(img_path_test), img_path_test)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量提取图片特征</span></span><br><span class="line">features_test = np.zeros((<span class="built_in">len</span>(img_path_test), <span class="number">7</span>*<span class="number">7</span>*<span class="number">512</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img_path_test)):</span><br><span class="line">    features_i = modelProcess(img_path_test[i], model_vgg)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;preprocessed: &#x27;</span>, img_path_test[i])</span><br><span class="line">    features_test[i] = features_i</span><br><span class="line">x_test = features_test</span><br><span class="line"><span class="built_in">print</span>(x_test.shape) <span class="comment"># (12, 25088) 12张图片，每张图片有25088个特征</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果</span></span><br><span class="line">y_pred_kmeans_test = cnn_kmeans.predict(x_test)</span><br><span class="line"><span class="built_in">print</span>(y_pred_kmeans_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量可视化结果</span></span><br><span class="line">normal_apple_id = <span class="number">1</span></span><br><span class="line">fig3 = plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        img = load_img(img_path_test[i*<span class="number">4</span>+j])</span><br><span class="line">        plt.subplot(<span class="number">3</span>,<span class="number">4</span>,i*<span class="number">4</span>+j+<span class="number">1</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;apple&#x27;</span> <span class="keyword">if</span> y_pred_kmeans_test[i*<span class="number">4</span>+j] == normal_apple_id <span class="keyword">else</span> <span class="string">&#x27;others&#x27;</span>)</span><br><span class="line">        plt.imshow(img), plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果统计</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="built_in">print</span>(Counter(y_pred_kmeans_test)) <span class="comment"># 如果两个类别相近，则有问题</span></span><br></pre></td></tr></table></figure></li></ul><p>Meanshift 聚类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Meanshift 聚类</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> MeanShift, estimate_bandwidth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动获取区域宽度 140个样本进行评估</span></span><br><span class="line">bw = estimate_bandwidth(x, n_samples=<span class="number">140</span>)</span><br><span class="line"><span class="built_in">print</span>(bw)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立模型</span></span><br><span class="line">cnn_ms = MeanShift(bandwidth=bw)</span><br><span class="line">cnn_ms.fit(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果</span></span><br><span class="line">y_predict_ms = ms.predict(x)</span><br><span class="line"><span class="built_in">print</span>(y_predict_ms)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量可视化结果</span></span><br><span class="line">normal_apple_id = <span class="number">0</span></span><br><span class="line">fig4 = plt.figure(figsize=(<span class="number">10</span>,<span class="number">40</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">45</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        img = load_img(img_path[i*<span class="number">5</span>+j])</span><br><span class="line">        plt.subplot(<span class="number">45</span>,<span class="number">5</span>,i*<span class="number">5</span>+j+<span class="number">1</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;apple&#x27;</span> <span class="keyword">if</span> y_predict_ms[i*<span class="number">5</span>+j] == normal_apple_id <span class="keyword">else</span> <span class="string">&#x27;others&#x27;</span>)</span><br><span class="line">        plt.imshow(img), plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果统计</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="built_in">print</span>(Counter(y_predict_ms)) <span class="comment"># 如果两个类别相近，则有问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测 cnn_ms test 的 结果</span></span><br><span class="line">y_predict_ms_test = cnn_ms.predict(x_test)</span><br><span class="line"><span class="built_in">print</span>(y_predict_ms_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量可视化结果</span></span><br><span class="line">fig5 = plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        img = load_img(img_path_test[i*<span class="number">4</span>+j])</span><br><span class="line">        plt.subplot(<span class="number">3</span>,<span class="number">4</span>,i*<span class="number">4</span>+j+<span class="number">1</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;apple&#x27;</span> <span class="keyword">if</span> y_predict_ms_test[i*<span class="number">4</span>+j] == normal_apple_id <span class="keyword">else</span> <span class="string">&#x27;others&#x27;</span>)</span><br><span class="line">        plt.imshow(img), plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果统计</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="built_in">print</span>(Counter(y_predict_ms_test)) <span class="comment"># 如果两个类别相近，则有问题</span></span><br></pre></td></tr></table></figure><p>主成分分析PCA降维</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PCA 降维</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">stds = StandardScaler()</span><br><span class="line">X_norm = stds.fit_transform(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PCA analysis</span></span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line">pca = PCA(n_components=<span class="number">200</span>) <span class="comment"># 200维 效果比较好 原来是224</span></span><br><span class="line">X_pca = pca.fit_transform(X_norm)</span><br><span class="line"><span class="built_in">print</span>(X_pca)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算主成分方法比例</span></span><br><span class="line">var_ratio = pca.explained_variance_ratio_</span><br><span class="line"><span class="built_in">print</span>(var_ratio) <span class="comment"># 方差比例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看主成分方差比之和</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(var_ratio))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建模之前查看X_pca和原来x的的shape</span></span><br><span class="line"><span class="built_in">print</span>(X_pca.shape, x.shape) <span class="comment"># 样本数一样，但是维度改成了200</span></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次进行 Meanshift聚类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Meanshift 聚类</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> MeanShift, estimate_bandwidth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动获取区域宽度 140个样本进行评估</span></span><br><span class="line">bw = estimate_bandwidth(X_pca, n_samples=<span class="number">140</span>)</span><br><span class="line"><span class="built_in">print</span>(bw)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立模型</span></span><br><span class="line">cnn_pca_ms = MeanShift(bandwidth=bw)</span><br><span class="line">cnn_pca_ms.fit(X_pca)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预测结果</span></span><br><span class="line">y_predict_pca_ms = cnn_pca_ms.predict(X_pca)</span><br><span class="line"><span class="built_in">print</span>(y_predict_pca_ms)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量可视化结果</span></span><br><span class="line">normal_apple_id = <span class="number">0</span></span><br><span class="line">fig6 = plt.figure(figsize=(<span class="number">10</span>,<span class="number">40</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">45</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        img = load_img(img_path[i*<span class="number">5</span>+j])</span><br><span class="line">        plt.subplot(<span class="number">45</span>,<span class="number">5</span>,i*<span class="number">5</span>+j+<span class="number">1</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;apple&#x27;</span> <span class="keyword">if</span> y_predict_pca_ms[i*<span class="number">5</span>+j] == normal_apple_id <span class="keyword">else</span> <span class="string">&#x27;others&#x27;</span>)</span><br><span class="line">        plt.imshow(img), plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果统计</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="built_in">print</span>(Counter(y_predict_pca_ms)) <span class="comment"># 如果两个类别相近，则有问题</span></span><br><span class="line"></span><br><span class="line">X_norm_test = stds.transform(x_test) <span class="comment"># 标准化</span></span><br><span class="line">X_pca_test = pca.transform(X_norm_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测 cnn_ms test 的 结果</span></span><br><span class="line">y_predict_pca_ms_test = cnn_pca_ms.predict(X_pca_test)</span><br><span class="line"><span class="built_in">print</span>(y_predict_pca_ms_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量可视化结果</span></span><br><span class="line">fig7 = plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        img = load_img(img_path_test[i*<span class="number">4</span>+j])</span><br><span class="line">        plt.subplot(<span class="number">3</span>,<span class="number">4</span>,i*<span class="number">4</span>+j+<span class="number">1</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;apple&#x27;</span> <span class="keyword">if</span> y_predict_pca_ms_test[i*<span class="number">4</span>+j] == normal_apple_id <span class="keyword">else</span> <span class="string">&#x27;others&#x27;</span>)</span><br><span class="line">        plt.imshow(img), plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果统计</span></span><br><span class="line"><span class="keyword">from</span> coll</span><br></pre></td></tr></table></figure><h3 id="微软生成式AI-generative-ai-for-beginners"><a href="#微软生成式AI-generative-ai-for-beginners" class="headerlink" title="微软生成式AI generative-ai-for-beginners"></a>微软生成式AI generative-ai-for-beginners</h3><p>能够生成文本、图像、其他类型内容的AI</p><p>新算法的开发——被称为机器学习——能够从数据中学习模式，而无需显式编程。<br>这种方法允许<code>机器</code>模拟<code>人类</code>语言理解：统计模型在<code>文本标签配对</code>上进行训练，使模型能够使用代表消息意图的预定义标签对未知输入文本进行分类。</p><p>神经网络（特别是循环神经网络 - RNN）显着增强了自然语言处理，能够以更有意义的方式表示文本含义，并重视句子中单词的上下文。</p><ul><li>人工智能<ul><li>机器学习<ul><li>深度学习<ul><li>生成性AI</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;暂无描述&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://ayou129.github.io/blog/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>UE游戏开发</title>
    <link href="https://ayou129.github.io/blog/p/614a8811/"/>
    <id>https://ayou129.github.io/blog/p/614a8811/</id>
    <published>2023-11-08T19:08:49.000Z</published>
    <updated>2023-11-08T19:08:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂无描述</p><span id="more"></span><p>惠普提：<a href="https://www.alibabafonts.com/#/home" target="_blank" rel="noopener">https://www.alibabafonts.com/#/home</a></p><h2 id="UExz"><a href="#UExz" class="headerlink" title="UExz"></a>UExz</h2><p>教程开发版本 4.16.2</p><p>Marketplace下载<br>Animation Starter Pack</p><ul><li>reloading</li><li>射击</li><li>移动</li><li>动画</li></ul><p>创建项目</p><ul><li>First Person</li></ul><h3 id="调整摄像头的位置，将摄像头绑定到头部"><a href="#调整摄像头的位置，将摄像头绑定到头部" class="headerlink" title="调整摄像头的位置，将摄像头绑定到头部"></a>调整摄像头的位置，将摄像头绑定到头部</h3><p>Follow Camera -&gt; Socket -&gt; Head<br>将摄像头调整进入头前方</p><h3 id="增加-鼠标控制器旋转功能"><a href="#增加-鼠标控制器旋转功能" class="headerlink" title="增加 鼠标控制器旋转功能"></a>增加 鼠标控制器旋转功能</h3><p>Follow Camera： Setting -&gt; Use Controller Rotation Yaw<br>角色： Pawn -&gt; Use Controller Rotation Yaw</p><p>添加项目 FPS Tutorial</p><h3 id="添加血条和护甲"><a href="#添加血条和护甲" class="headerlink" title="添加血条和护甲"></a>添加血条和护甲</h3><p>添加血条和护甲 变量 float</p><h2 id="Unreal-Engine-5-tutorial"><a href="#Unreal-Engine-5-tutorial" class="headerlink" title="Unreal Engine 5 tutorial"></a>Unreal Engine 5 tutorial</h2><p>鼠标右键 按住，wsad 移动方向</p><p>鼠标左键 选择对象</p><h2 id="Lyra-Cross-platform-UI-framework"><a href="#Lyra-Cross-platform-UI-framework" class="headerlink" title="Lyra Cross-platform UI framework"></a>Lyra Cross-platform UI framework</h2><p>核心游戏驱动 Actors<br>Character&#x2F;Pawn 控制的游戏对象<br>Controller 控制游戏对象、客户端向服务器发送请求的通道<br>Player State 其他玩家需要知道的信息</p><ul><li>当前得分<br>Game State 游戏的综合信息</li><li>当前的游戏阶段</li><li>剩余时间</li></ul><p>模块化</p><p>Lura UI</p><p>游戏模式</p><ul><li>占点模式</li><li>爆破模式</li></ul><h3 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h3><p>和平精英手游 使用什么配置的电脑进行开发的 普通的mac可以开发吗？<br>我用的macbook pro 2020年 apple M1芯片 16GB内存 1TB硬盘 8核心GPU可以进行开发吗？<br>台式机需要什么配置才能进行开发？</p><p>知识点：</p><ol><li>快捷键 快速取消 链接  alt+左键</li></ol><p>Event BeginPlay<br>print String<br>hello world<br>10s</p><p>变量<br>isDead?<br>boolean<br>details &#x3D;&gt; default value<br>变量拖进 事件图标中，isDead?false红色<br>new branch</p><ul><li>print string 角色已死亡</li><li>print string 角色正常</li></ul><div>                <img src="/blog/p/614a8811/isDead.png" alt="isDead.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[isDead.png]</p>            </div><p>增加整型类型血量变量health</p><div>                <img src="/blog/p/614a8811/根据R_key保存用户当前在世界中的向量.png" alt="根据R_key保存用户当前在世界中的向量.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[根据R_key保存用户当前在世界中的向量.png]</p>            </div><p>创建可以开关的门<br>要点：</p><ol><li>碰撞重叠，弹出按键</li></ol><p>blueprints -&gt; 01_door_bp -&gt; BP_door（蓝图 ）<br>门框door frame：static mesh</p><p>碰撞要点：</p><ul><li>Box 碰撞盒体</li><li>Graph<ul><li>Box组件右下角 事件中添加：On Component Begin Overlap 内容开始重叠 actor &#x3D;&gt; 下方 cast</li><li>Box组件右下角 事件中添加：On Component End Overlap 内容结束重叠 actor &#x3D;&gt; 下方 cast</li><li>Cast to …  (third person character) 转换为第三人称角色</li><li>f Get Player Controller<ul><li>Enable Input</li><li>Disable Input</li></ul></li><li>E key</li><li>Flip Flop</li><li>Set Relative Rotation 设置相对旋转 z 90°   x2</li><li>Door组件-&gt;根据Flip Flop的值设置相对旋转</li></ul></li></ul><div>                <img src="/blog/p/614a8811/门增加开关.png" alt="门增加开关.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[门增加开关.png]</p>            </div><p>设置门无法穿越</p><ul><li>打开门的材质</li><li>Collision -&gt; add box simplified collision 简单碰撞<div>              <img src="/blog/p/614a8811/门增加碰撞.png" alt="门增加碰撞.png"></img>              <p style="              display: flex;              color: #999;              justify-content: center;              font-size: 0.8rem;              position: relative;              top: -1rem;              right: 50%;              left: 50%;              transform: translateX(-50%);              ">[门增加碰撞.png]</p>          </div></li></ul><p>将门打开地缓慢一些<br>要点：</p><ol><li>timeline<ol start="2"><li>两个关键帧，且自动<div>          <img src="/blog/p/614a8811/两个关键帧.png" alt="两个关键帧.png"></img>          <p style="          display: flex;          color: #999;          justify-content: center;          font-size: 0.8rem;          position: relative;          top: -1rem;          right: 50%;          left: 50%;          transform: translateX(-50%);          ">[两个关键帧.png]</p>      </div></li></ol></li><li>make rotator 创建 自旋转<div>             <img src="/blog/p/614a8811/将门打开地缓慢一些.png" alt="将门打开地缓慢一些.png"></img>             <p style="             display: flex;             color: #999;             justify-content: center;             font-size: 0.8rem;             position: relative;             top: -1rem;             right: 50%;             left: 50%;             transform: translateX(-50%);             ">[将门打开地缓慢一些.png]</p>         </div></li></ol><p>相关介绍<br>选取父类：<br>Actor：基本的游戏对象，如灯光、摄像机、触发器、门、帽子等<br>Pawn：可以被控制的游戏对象，如玩家、敌人、车辆等<br>Character：Pawn的子类，可以移动、跳跃、攻击等<br>PlayerController：玩家控制器，如玩家输入、控制角色等<br>PlayerState：玩家状态，如玩家得分、玩家队伍等<br>PlayerCameraManager：玩家摄像机管理器，如玩家视角、镜头抖动等<br>GameModeBase：游戏模式，如占点模式、爆破模式等<br>GameInstance：游戏实例，如游戏设置、玩家信息等<br>GameSession：游戏会话，如玩家列表、游戏状态等<br>GameStateBase：游戏状态，如游戏阶段、剩余时间等</p><h3 id="拾取物品-模型带帽子"><a href="#拾取物品-模型带帽子" class="headerlink" title="拾取物品+模型带帽子"></a>拾取物品+模型带帽子</h3><p>导入包</p><p>BluePrints-&gt;02_HatPickup_BP-&gt;BP_HatPickup Actor</p><p>增加 静态网格HatMesh<br>增加 材质SM_Hat</p><ul><li>增加 碰撞球体 Sphere 放大：半径65<ul><li>事件图标中添加：On Component Begin Overlap</li><li>事件图标中添加：On Component End Overlap<br>增加 文字【E】拾取 躺着</li></ul></li><li>设置文字 Press [E] to Pickup 碰撞了 person 才显示</li></ul><p>Person</p><ul><li>创建 自定义事件 EquipHat 装备帽子</li><li>增加 静态网格 HatMesh，并且等待穿戴<ul><li>增加 事件 f set static Mesh<ul><li>new Mesh 从 事件 装备帽子中获取</li></ul></li><li>拖动 HatMesh 到 Target</li></ul></li><li>增加 事件 Attach Component to Component<ul><li>绑定父组件<ul><li>Mesh (CharacterMesh)</li></ul></li><li>绑定子组件<ul><li>HatMesh</li></ul></li><li>对齐到目标<ul><li>三个全部对齐到目标</li></ul></li></ul></li></ul><p>角色-帽子 碰撞后 &amp; 按e键 触发 EquipHat</p><ul><li>E key</li><li>Flip Flop</li><li>Cast to BP 角色<ul><li>As 要 绑定Event， 也就是 EquipHat 装备帽子事件</li></ul></li><li>bind 区域的 begin overlap -&gt; other actor</li></ul><p>写好Event后测试</p><p>绑定帽子的位置<br>打开person的骨骼设置<br>person -&gt; 网格体 -&gt; 打开文件夹 -&gt; 打开网格体 -&gt; 打开骨骼<br>找到头部骨骼 search head</p><ul><li>创建 附加 插槽 Hat Socket 绑定帽子Event的socketName</li><li>预览帽子资源，调整位置</li></ul><p>装备帽子后删除帽子</p><div>                <img src="/blog/p/614a8811/BP_hat.png" alt="BP_hat.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[BP_hat.png]</p>            </div><div>                <img src="/blog/p/614a8811/BP_third_person.png" alt="BP_third_person.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[BP_third_person.png]</p>            </div><div>                <img src="/blog/p/614a8811/网格骨骼.png" alt="网格骨骼.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[网格骨骼.png]</p>            </div><p>创建一个 扣减角色生命值的 Actor<br>03_damage_box -&gt; BP_damage_box -&gt; actor</p><p>玩家</p><ul><li>增加 Health float 属性</li><li>增加 Health 损耗 Event</li></ul><p>物体</p><ul><li>增加碰撞体</li><li>Set</li><li>Set Timer By Event</li><li>扣减玩家生命值 Event</li><li>Apply Damage</li></ul><div>                <img src="/blog/p/614a8811/扣减角色生命值01.png" alt="扣减角色生命值01.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[扣减角色生命值01.png]</p>            </div>要点：1. 将 角色 提升为变量2. Set Timer By Event & sub3. Event 执向自定义Event -> ApplyDamage   - 循环 lopping = true4. 角色 蓝图 -> Event AnyDamage<p>完整版：</p><ul><li>碰撞体蓝图：<div>              <img src="/blog/p/614a8811/扣减角色生命值完整版01.png" alt="扣减角色生命值完整版01.png"></img>              <p style="              display: flex;              color: #999;              justify-content: center;              font-size: 0.8rem;              position: relative;              top: -1rem;              right: 50%;              left: 50%;              transform: translateX(-50%);              ">[扣减角色生命值完整版01.png]</p>          </div></li><li>角色蓝图：<div>              <img src="/blog/p/614a8811/扣减角色生命值完整版02.png" alt="扣减角色生命值完整版02.png"></img>              <p style="              display: flex;              color: #999;              justify-content: center;              font-size: 0.8rem;              position: relative;              top: -1rem;              right: 50%;              left: 50%;              transform: translateX(-50%);              ">[扣减角色生命值完整版02.png]</p>          </div></li></ul><p>增加生命值UI<br>目录：03_damage_box</p><ul><li>用户页面 -&gt; 空间蓝图 -&gt; 用户控件<ul><li>Canvas Panel &amp; ProgressBar</li><li>name：WBP_health_bar<br>Canvas Panel</li></ul></li><li>ProgressBar<ul><li>Percent 进度条数值 可以进行bind<ul><li>要点：从其他蓝图中bind<ol><li>get player pawn 获取与此UI关联的角色</li><li>cast to third person character 将角色转换为第三人称角色</li><li>get health</li><li>*100 mul</li><li>bind<div>       <img src="/blog/p/614a8811/WBP_health_bar.png" alt="WBP_health_bar.png"></img>       <p style="       display: flex;       color: #999;       justify-content: center;       font-size: 0.8rem;       position: relative;       top: -1rem;       right: 50%;       left: 50%;       transform: translateX(-50%);       ">[WBP_health_bar.png]</p>   </div></li></ol></li></ul></li></ul></li></ul><div>                <img src="/blog/p/614a8811/ThirdPerson.png" alt="ThirdPerson.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[ThirdPerson.png]</p>            </div><div>                <img src="/blog/p/614a8811/ThirdPerson_CreateHealthBarEvent.png" alt="ThirdPerson_CreateHealthBarEvent.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[ThirdPerson_CreateHealthBarEvent.png]</p>            </div><div>                <img src="/blog/p/614a8811/WBP_health_bar_bind.png" alt="WBP_health_bar_bind.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[WBP_health_bar_bind.png]</p>            </div><p>添加 角色血条 到角色画布视图上 Event</p><ul><li>打开蓝图</li><li>添加Event CreateHealthBarEvent<ul><li>create widget -&gt; user interface -&gt; Create Widget<ul><li>绑定角色 Get Player Controller</li></ul></li><li>add to viewport</li></ul></li></ul><p>触发 角色血条 Event<br>当比赛开始时增加血条UI<br>Add Input Mapping的Event BeginPlay事件增加</p><ul><li>add sequence 在原有的基play础上，顺序执行<ul><li>CreateHealthBarEvent 触发上面创建的血条UI事件</li></ul></li></ul><p>玩家离开 则不扣血<br>要点：</p><ol><li>定时器不断触发，将计数器的返回值 存储为变量TimerReference 为定时器句柄</li><li>定时器句柄中 get后，方法：Clear and Invalidate Timer Handle 可以停止定时功能。<br>碰撞体 end overload</li></ol><p>增加特效：粒子系统<br>包：FX Variety Pack</p><p>导入特效包</p><p>扣血碰撞体 增加组件</p><ul><li>粒子发射器 cascade particle system component</li></ul><p>恢复血量碰撞体</p><div>                <img src="/blog/p/614a8811/BP_repair_box.png" alt="BP_repair_box.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[BP_repair_box.png]</p>            </div><h2 id="UE5-课程-第一人称-多人生存游戏"><a href="#UE5-课程-第一人称-多人生存游戏" class="headerlink" title="UE5 课程 第一人称 多人生存游戏"></a>UE5 课程 第一人称 多人生存游戏</h2><h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><h4 id="安装插件-Adventure-Character"><a href="#安装插件-Adventure-Character" class="headerlink" title="安装插件 Adventure Character"></a>安装插件 Adventure Character</h4><p>一定要先着色，再打开</p><div>                <img src="/blog/p/614a8811/AdventureCharacter.png" alt="AdventureCharacter.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[AdventureCharacter.png]</p>            </div><p>安装完成之后会多一个Man文件夹 </p><h4 id="构建目录"><a href="#构建目录" class="headerlink" title="构建目录"></a>构建目录</h4><ul><li>Man 设置颜色<ul><li>Animations 动画，导入除了Arms.FBX以外的FBX(骨骼选择 UE4_Mannequin_Skeleton)</li><li>Arms 手臂，导入Arms.FBX(骨骼选择UE4_Mannequin_Skeleton)<ul><li>Arms 骨骼网格体 设置材质 M_Man_Body</li></ul></li></ul></li><li>Main<ul><li>复制 [第一人称的 Character BP] 到该文件夹中</li></ul></li></ul><p>注意事项：</p><ol><li>文件夹 Content 属性 修复重定向</li></ol><h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><p>FirstPersonMap<br>BP_FirstPersonCharacter 第一人称角色</p><p>FirstPersonBP 第一人称蓝图<br>FirstPerson_AnimBP 第一人称动画 蓝图<br>FirstPersonBS 第三人称 (1 D)混合空间</p><ul><li>assets details 轴设置 -&gt; 水平轴 name：speed 800</li><li>Idle stan —- Jog 0 600 —- running2 800</li><li>骨骼 SK_Man_Full_01</li></ul><p>Event Blueprint Update时间 每一帧更新</p><div>                <img src="/blog/p/614a8811/FirstPerson_AnimBP.png" alt="FirstPerson_AnimBP.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[FirstPerson_AnimBP.png]</p>            </div><div>                <img src="/blog/p/614a8811/FirstPerson_AnimBP事件蓝图更新动画.png" alt="FirstPerson_AnimBP事件蓝图更新动画.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[FirstPerson_AnimBP事件蓝图更新动画.png]</p>            </div><div>                <img src="/blog/p/614a8811/walk_run.png" alt="walk_run.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[walk_run.png]</p>            </div><div>                <img src="/blog/p/614a8811/walk_run_view.png" alt="walk_run_view.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[walk_run_view.png]</p>            </div><p>补充：</p><ol><li>角色BP，替换Arms</li><li>如果不显示手臂，则需要设置动画蓝图 FirstPerson_AnimBP</li><li>词汇：Idle&#x2F;Walk&#x2F;Run</li></ol><h4 id="9-增加第三人称"><a href="#9-增加第三人称" class="headerlink" title="9 增加第三人称"></a>9 增加第三人称</h4><p>增加蓝图<br>ThirdPerson_AnimBP 第一人称动画 蓝图<br>ThirdPersonBS 第三人称 (1 D)混合空间</p><ul><li>assets details 轴设置 -&gt; 水平轴 name：speed 800</li><li>Idle —- running1 0 600 —- running2 800</li><li>骨骼 SK_Man_Full_01</li></ul><p>第三人称蓝图 搞定后，角色蓝图中添加 Skeletal Mesh<br>角色</p><ul><li>第一人称</li><li>第三人称 SK_Man_Full_01</li></ul><ol><li>调整好位置</li><li>增加动画类 ThirdPersonAnimBP</li><li>摄像头不可见，Mesh setting  Owner No See</li></ol><p>补充：</p><ol><li>视图中 透视 功能 可以更方便的调整角色的位置</li><li>Play 按钮 可以设置多个玩家，模式为 as Client</li></ol><h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><p>如何在编辑器中测试多人游戏<br>两种不同的游戏服务器</p><ul><li>Listen 本地服务器</li><li>Client 专用服务器</li></ul><h4 id="11-概念"><a href="#11-概念" class="headerlink" title="11 概念"></a>11 概念</h4><p>继承<br>蓝图基类 Actor</p><ul><li>墙壁</li></ul><p>Pawn 可以随时拥有或取消</p><ul><li>汽车</li><li>马</li><li>坐骑</li><li>飞机</li></ul><p>Character<br>运动组件 步行、跑步、跳跃、爬行</p><p>Player Controller<br>存储逻辑的蓝图类</p><p>Game Model Base<br>游戏规则<br>分数<br>生成位置</p><p>Actor Component<br>可以添加到蓝图中的组件<br>背包组件<br>建筑组件</p><p>Scene Component</p><p>BP物品基类<br>BP装备基类</p><ul><li>斧头</li><li>镐</li></ul><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><p>Inventory：建筑物品(家具)清单，财产清单</p><p>主背包组件 or 主项目容器 蓝图容器</p><ul><li>背包相关的功能<ul><li>堆叠物品</li><li>增加</li><li>删除</li></ul></li></ul><p>玩家 快捷栏 组件播放器<br>玩家 物品栏组件<br>存储容器</p><ul><li>锻造工具台</li><li>死去的玩家</li><li>掉在地上的袋子</li></ul><div>                <img src="/blog/p/614a8811/组件蓝图继承关系.png" alt="组件蓝图继承关系.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[组件蓝图继承关系.png]</p>            </div><p>thing：</p><ol><li>打开直接在编辑器中，不重新打开标签页<br>编辑 首选项 assets editor open location Default改成 Main Window</li></ol><h4 id="14"><a href="#14" class="headerlink" title="14"></a>14</h4><p>_Main BluePrints Enums<br>创建枚举类型</p><p>E_ItemType</p><ul><li>Resource 资源</li><li>Equipment 装备</li><li>Armor 盔甲</li><li>Consumable 消耗品</li><li>Buildable 建筑物品</li></ul><p>BP_第一人称Character 增加变量 选择枚举类型 test_menu E_ItemType</p><p>E_ItemRarity 稀有类型</p><ul><li>Common</li><li>Uncommon</li><li>Rare 稀有</li><li>Epic 史诗</li><li>Legendary 传奇</li></ul><p>E_ArmorType 盔甲类型</p><ul><li>Helmet 头盔</li><li>Chest 胸</li><li>Pants 裤子</li><li>Boots 靴子</li></ul><p>创建 BluePrints Structures 文件夹<br>创建 蓝图-结构 S_ItemInfo</p><ul><li>ItemId int</li><li>ItemQuantity int 数量</li><li>ItemIcon Texture 2D</li><li>ItemName Text</li><li>ItemDesc Text</li><li>ItemDamage int 损害值</li><li>ItemRarity E_ItemRarity 稀有</li><li>ItemCurHp int 物品当前血量</li><li>ItemMaxHp int 物品最大血量</li><li>IsStackable bool 是否可堆叠</li><li>StackSize int 堆叠大小</li><li>ItemType E_ItemType 物品类型</li><li>ItemClassRef 创建下方BP_ItemMaster 类class引用</li><li>ArmorType E_ArmorType 盔甲类型</li><li>UseAmmo? bool 是否使用弹药</li><li>CurrAmmo int 当前弹药</li><li>MaxAmmo int 最大弹药</li></ul><p>创建 BluePrints Items 文件夹<br>创建 蓝图-Class Actor  BP_ItemMaster</p><div>                <img src="/blog/p/614a8811/S_ItemInfo.png" alt="S_ItemInfo.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[S_ItemInfo.png]</p>            </div><p>安装库 [Craft Resources Icons]  会增加文件夹 CraftResourcesIcons</p><p>创建 BluePrints DataTables 文件夹<br>创建 其他-数据表-选择S_ItemInfo DT_Items<br>木头 0 0 wood_10_b 木头 用于制作各种物品的资源 0 Common 0 0 可堆叠100 Resource Helmet </p><div>                <img src="/blog/p/614a8811/DT_Items_0001.png" alt="DT_Items_0001.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[DT_Items_0001.png]</p>            </div><h4 id="15-背包"><a href="#15-背包" class="headerlink" title="15 背包"></a>15 背包</h4><p>核心：</p><ol><li>角色蓝图中 按键1触发事件 BPC_PlayerInventory 继承的 BPC_ItemsContainer 中的 AddItemOnServer 事件</li><li>BPC_ItemsContainer<ul><li>AddItem 增加物品</li><li>FindEmptySlot 找到空的槽位</li></ul></li></ol><p>创建文件夹 Inventory 修改为蓝色颜色<br>创建蓝图类 Actor Component BPC_ItemsContainer</p><ul><li>创建变量 Items S_ItemInfo <ul><li>修改类型为 Array</li><li>创建 方法 FindEmptySlot <ul><li>Items<ul><li>[For Each Loop with Break] &#x3D;&gt; [Break S_ItemInfo 中断]<ul><li>Equals ItemId &#x3D;&#x3D; 0 &#x3D;&gt; [Branch] 分支判断</li><li>Outputs<ul><li>Success? bool</li><li>EmptyIndex int</li></ul></li><li>Completed<ul><li>ReturnNode Out生成的节点<ul><li>FoundEmptySlot? true</li><li>EmptySlotIndex</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>创建方法 AddItem，item 来源通过 Inputs 传入<ul><li>增加本地变量 LocalItemInfo S_ItemInfo</li><li>增加本地变量 LocalEmptyIndex int</li><li>set LocalItemInfo</li><li>通过 FindEmptySlot 找到空的槽位<ul><li>Branch<ul><li>True<ul><li>LocalEmptyIndex</li><li>变量Items &#x3D;&gt; Set Array Elem 设置Item，索引值为 LocalEmptyIndex，值为 LocalItemInfo</li></ul></li></ul></li></ul></li><li>Outputs<ul><li>Success? bool 勾选</li></ul></li></ul></li></ul></li><li>创建 子蓝图类 BPC_PlayerInventory 继承 BPC_ItemsContainer</li></ul><p>移动角色蓝图到 _Main 的 BluePrints 文件夹中</p><ul><li>增加组件 BPC_PlayerInventory<ul><li>Details 设定 30个空的槽位</li></ul></li><li>事件图 中 增加 按键1<ul><li>获取数据表行 Get Data Table Row &#x3D;&gt; DT_Items<ul><li>Data Table DT_Items</li><li>Row Name 1 [要先设置数据表的name才能同步1]</li></ul></li></ul></li></ul><p>蓝图类 Actor Component BPC_ItemsContainer</p><ul><li>创建 自定义事件 AddItemOnServer<ul><li>详情 Graph 设置 Replicates &#x3D;&gt; Run On Server </li><li>增加 Item S_ItemInfo</li></ul></li><li>增加 AddItem 方法</li></ul><p>调试</p><ul><li>BPC_ItemsContainer 的 set Array Elem 的Item 右键 watch</li><li>BPC_PlayerInventory in BP_FirstPersonCharacter(Server,spawned)</li><li>点击绿色三角形运行，按1键，可以看到物品的变化</li><li>尝试按30次1键，可以看到物品的变化，最后会提示没有空的槽位</li></ul><p>tips:增加路由节点，控制流程更好展示</p><h4 id="16"><a href="#16" class="headerlink" title="16"></a>16</h4><p>小控件</p><ul><li>小地图</li><li>跨界蓝</li><li>背包等</li></ul><p>创建文件夹 _Main&#x2F;Widgets<br>创建文件 UserInterface -&gt; W_MainWidget[Widget Blueprint -&gt; User Widget]<br>创建按钮<br>创建 Canvas Panel</p><ul><li>TextBlock Main HUD<div>              <img src="/blog/p/614a8811/CanvasPanelMainHUD.png" alt="CanvasPanelMainHUD.png"></img>              <p style="              display: flex;              color: #999;              justify-content: center;              font-size: 0.8rem;              position: relative;              top: -1rem;              right: 50%;              left: 50%;              transform: translateX(-50%);              ">[CanvasPanelMainHUD.png]</p>          </div></li></ul><p>创建蓝图类 SurvivalGamePC[PlayerController]</p><ul><li>Event BeginPlay</li><li>Switch Has Authority</li><li>Create Widget[Construct None] &#x3D;&gt; W_MainWidget,Owning Player &#x3D;&gt; self</li><li>set[创建变量 MainWidgetRef]</li><li>add to viewport<div>              <img src="/blog/p/614a8811/SurvivalGamePC_add_to_viewport.png" alt="SurvivalGamePC_add_to_viewport.png"></img>              <p style="              display: flex;              color: #999;              justify-content: center;              font-size: 0.8rem;              position: relative;              top: -1rem;              right: 50%;              left: 50%;              transform: translateX(-50%);              ">[SurvivalGamePC_add_to_viewport.png]</p>          </div></li></ul><p>创建文件夹 Blueprints GameModes<br>创建蓝图类 Blueprints GameModes GM_SurvivalGame[Game Mode Base]<br>第一人称Map 窗口 世界场景设置</p><ul><li>设置游戏模式为 GM_SurvivalGame</li><li>默认 Pawn Class 为 BP_FirstPersonCharacter</li><li>默认 PlayerControllerClass 为 SurvivalGamePC<div>              <img src="/blog/p/614a8811/GM_SurvivalGame世界场景设置.png" alt="GM_SurvivalGame世界场景设置.png"></img>              <p style="              display: flex;              color: #999;              justify-content: center;              font-size: 0.8rem;              position: relative;              top: -1rem;              right: 50%;              left: 50%;              transform: translateX(-50%);              ">[GM_SurvivalGame世界场景设置.png]</p>          </div></li></ul><h4 id="17-玩家统计数据UI"><a href="#17-玩家统计数据UI" class="headerlink" title="17 玩家统计数据UI"></a>17 玩家统计数据UI</h4><p>new f _Main&#x2F;Widgets&#x2F;Textures 并导入文件<br>new f _Main&#x2F;Widgets InventoryWidgets 背包控件文件夹</p><ul><li>new UserInterface -&gt; W_Inventory[Widget Blueprint -&gt; User Widget]</li><li>Size Box<ul><li>详情 Child Layout：Width Override 1650，Height Override 880</li><li>垂直框[Vertical Box]<ul><li>间隔区[Spacer]：详情 Size 80</li><li>水平框[Horizontal Box]：详情 Size &#x3D; Fill<ul><li>垂直框[Vertical Box] ： padding 15 20 15 20 Size &#x3D; Fill<ul><li>间隔区[Spacer]：详情 Size 80 </li><li>水平框[Horizontal Box]：详情 Size &#x3D; Fill<ul><li>边界[Border] ：详情 Size &#x3D; Fill ，Brush Image 选择 InventoryBack<ul><li>垂直框[Vertical Box]<ul><li>水平框[Horizontal Box]：详情 Size &#x3D; Fill<ul><li>Button 透明度0 Rename:InventoryButton 是变量 水平居中<ul><li>Text Inventory size28 样式 颜色</li></ul></li><li>Button 透明度0 Rename:CraftingButton 是变量 水平居中<ul><li>Text Crafting size28 样式 颜色</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>间隔区[Spacer]：详情 Size 30</li></ul></li><li>垂直框[Vertical Box] ： padding 20 0 20 0 Size &#x3D; Fill<ul><li>边界[Border] ：详情 Size &#x3D; Fill ，Brush Image 选择 PlayerStatsBack<ul><li>垂直框[Vertical Box]<ul><li>水平框[Horizontal Box]：详情 Size &#x3D; Fill<ul><li>Text Player Name 居中 padding-top 20</li></ul></li></ul></li></ul></li></ul></li><li>边界[Border] ：padding 20  ，Size &#x3D; Fill Brush Image 选择 PlayerStatsBack</li></ul></li><li>间隔区[Spacer]：详情 Size 80-90</li></ul></li></ul></li></ul><p>open W_MainWidget</p><ul><li>UserCreated 导入 W_Inventory，设置为不可见，<b>通过图表中的按钮触发可见性</b><ul><li>设置 描点[Size To Content] 居中 &amp; 自动调整大小<ul><li>Position 0 0，设置为居中0.5 0.5</li></ul></li><li>行为：Visibility 可视</li></ul></li><li>图表[Graph] 右上角<ul><li>自定义事件 SetInventoryVisibility 设置背包可见性<ul><li>Inputs<ul><li>Visibility? bool</li></ul></li><li>Branch<ul><li>True<ul><li>Set Visibility[Target W_Inventory] 设置可见性<ul><li>New Visibility Visibility</li></ul></li></ul></li><li>False<ul><li>Set Visibility[Target W_Inventory] 设置可见性<ul><li>New Visibility Hidden</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>open SurvivalGamePC</p><ul><li>add v InventoryShown? bool</li><li>i 键</li><li>Tab 键</li><li>自定义事件 InventoryOnClient<ul><li>判断 InventoryShown? bool<ul><li>True<ul><li>Set Inventory Visibility FORM MainWidget<ul><li>Visibility? bool false</li><li>Show Mouse Cursor false 含义：隐藏鼠标光标</li><li>Set Input Mode Game Only FROM self 含义：只能在游戏中使用</li><li>InventoryShown? bool false</li></ul></li></ul></li><li>False<ul><li>Set InventoryVisibility<ul><li>Visibility? bool true</li><li>Show Mouse Cursor true 含义：显示鼠标光标</li><li>Set Input Mode Game And UI FROM self</li><li>InventoryShown? bool true</li></ul></li></ul></li></ul></li></ul></li></ul><div>                <img src="/blog/p/614a8811/W_MainWidget.png" alt="W_MainWidget.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[W_MainWidget.png]</p>            </div><h4 id="18-创建实际的背包UI"><a href="#18-创建实际的背包UI" class="headerlink" title="18 创建实际的背包UI"></a>18 创建实际的背包UI</h4><p>将下载好的纹理 放入 _Main&#x2F;Widgets&#x2F;Textures 文件夹中</p><p>new W_InventorySlot[用户-Wid] _Main&#x2F;Widgets InventoryWidgets</p><ul><li>尺寸框 [Size Box] 详情 Child Layout：Width Override 75，Height Override 75<ul><li>覆层 [Overlay]<ul><li>[Borer] 重命名 SlotStyle 详情 Image Brush 选择 InventorySlot 居中[水平填充]？</li><li>[Borer] Tex_wood_05_b padding 4</li><li>TopText[TextBlock] 内容DMG100%,是变量 size9 顶部对齐 padding 7 5 5 5，引用 透明度100 </li><li>BottomText[TextBlock] 内容30&#x2F;30,是变量 size13 底部对齐 padding 5 5 5 10，引用 透明度100</li><li>尺寸框 [Size Box] Fill Color 绿色 padding 5，Height Override 7<ul><li>Item HP[Progress Bar]</li></ul></li><li>QuantityText[TextBlock] 内容x100,是变量 size13 详情 Text 0 居中 padding 5 5 5 10，引用 透明度100</li></ul></li></ul></li></ul><p>tips:</p><ul><li>填充屏幕，要选择屏幕上所需，这样宽度就正常显示</li></ul><h4 id="19-实现-背包联动UI"><a href="#19-实现-背包联动UI" class="headerlink" title="19 实现 背包联动UI"></a>19 实现 背包联动UI</h4><p>new W_ItemContainerGrid [用户-Wid] _Main&#x2F;Widgets InventoryWidgets目录</p><ul><li><p>滚动框 [Scroll Box]</p><ul><li>Grid [Uniform Grid Panel] 是变量</li></ul></li><li><p>图表 生成</p></li><li><p>add var SlotsPerRow int，可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</p></li><li><p>add var 总槽数TotalSlots int，可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</p></li><li><p>add var ContainerType 下方创建 E_ContainerType，可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</p></li><li><p>add var Slots W_InventorySlot Array</p></li><li><p>add fun AddSlots 增加槽位</p><ul><li>Inputs<ul><li>Amount int 数量</li></ul></li><li>add local var LocalLoopIndex int</li><li>For Loop<ul><li>First Index <code>一定是1，不然会多一个卡槽</code></li><li>Loop Body<ul><li>Create Widget</li></ul></li><li>增加到 Slots Array 中 [Slots数组的add方法]</li></ul></li></ul></li><li><p>add fun AddSlotToGrid</p><ul><li>Inputs<ul><li>Index int</li><li>Slot W_InventorySlot</li></ul></li><li>add local var LocalSlotIndex int</li><li>add local var LocalSlot W_InventorySlot</li><li>将子项添加到统一网格 [add Child to Uniform Grid]<ul><li>set Row by Slot Index &#x2F; Slots Per Row 向下取整</li><li>set Column</li></ul></li></ul></li></ul><p>new 枚举 E_ContainerType</p><ul><li>PlayerInventory 玩家背包</li><li>PlayerHotbar 玩家快捷栏</li><li>PlayerStorage 玩家存储</li><li>PlayerArmor 玩家护甲</li></ul><p>写完事件图[核心事件启动逻辑、AddSlot、AddSlotToGrid]后，打开 W_Inventory，导入 W_ItemContainerGrid by User Created中。</p><ul><li>详情：填充Fill，padding20<ul><li>Slots Per Row 5</li><li>Total Slots 30</li><li>Container Type Player Inventory</li></ul></li></ul><p>隐藏 W_InventorySlot hidden</p><ul><li>SlotStyle 可见</li><li>ItemIcon 可见</li><li>TopText</li><li>BottomText</li><li>Item HP</li></ul><h4 id="20"><a href="#20" class="headerlink" title="20"></a>20</h4><p>open BPC_ItemsContainer</p><ul><li><p>Add Fun UpdateUI</p><ul><li>add Var ContainerType E_ContainerType ，可编辑实例[Instance Editable]</li><li>Inputs<ul><li>Index Ing</li><li>ItemInfo S_ItemInfo</li><li>ResetSlot? bool</li></ul></li><li>判断是否 ResetSlot? bool<ul><li>True<ul><li>Set Array Elem<ul><li>Index</li><li>ItemInfo</li></ul></li></ul></li><li>False<ul><li>切换 ContainerType 枚举使用 Switch on Enum</li></ul></li></ul></li></ul></li><li><p>AddItem</p><ul><li>更新Node时，同时更新UI</li></ul></li></ul><p>add Interfaces 文件夹 [_Main&#x2F;Blueprints 目录]<br>add BPI_SurvivalCharacter 蓝图接口 文件 [_Main&#x2F;Blueprints&#x2F;Interfaces 目录]</p><ul><li>创建 方法 GetControllerFromChar<ul><li>Return Node</li><li>ControllerRef [SurvivalGamePC 对象引用]</li></ul></li></ul><p>add BPI_SurvivalGamePC 蓝图接口 文件 [_Main&#x2F;Blueprints Interface 目录]</p><ul><li>创建 方法 SurvivalGamePCRef<ul><li>Return Node</li><li>PlayerControllerRef [SurvivalGamePC 对象引用]</li></ul></li></ul><p>SurvivalGamePC 类设置 蓝图接口 增加 BPI_SurvivalGamePC<br>左边总览可以看到 SurvivalGamePCRef</p><p>BP_FirstPersonCharacter 类设置 接口 增加 BPI_SurvivalCharacter<br>左边总览可以看到 GetControllerFromChar</p><ul><li>Get Controller From Char</li><li>SurvivalGamePCRef<ul><li>FROM GET Controller</li></ul></li><li>Return Node<ul><li>ControllerRef</li></ul></li></ul><p>open BPC_ItemsContainer</p><ul><li>Get Controller From Char<ul><li>FROM Get Owner</li></ul></li><li>Update Item Slot<ul><li>FORM 下方的事件</li></ul></li></ul><p>open SurvivalGamePC</p><ul><li>add 自定义事件 UpdateItemSlot 重点 <strong>在其拥有的客户端上运行</strong><ul><li>Inputs<ul><li>ContainerType E_ContainerType</li><li>Index int</li><li>ItemInfo S_ItemInfo</li></ul></li><li>更新的是 MainWidgetRef 中的 W_Inventory 的 W_ItemContainerGrid 的 Slots，通过变量 Slots 的 Get</li><li>Is Valid? 判断是否有效<ul><li>有效 执行 W_InventorySlot 的 UpdateSlot</li></ul></li></ul></li></ul><p>Open W_InventorySlot</p><ul><li>add 自定义事件 UpdateSlot<ul><li>Inputs<ul><li>ItemInfo S_ItemInfo 设置变量 ItemInfo</li><li>Break S_ItemInfo 指定元素可见<ul><li>ItemIcon<ul><li>设置来自纹理的笔刷 [Set Brush From Texture]</li><li>设置可见性 [Set Visibility]</li></ul></li></ul></li></ul></li></ul></li></ul><p>总结：<br>UpdateUI 方法：<br>传递 索引 ItemInfo 是否重置<br>如果重置，就直接设置<br>执行 UpdateItemSlot 方法，传递 容器、索引和ItemInfo</p><p>检查点：</p><ol><li>BP_FirstPersonCharacter 1key 触发事件，背包UI显示</li><li>BPC_ItemsContainer</li><li>SurvivalGamePC</li><li>W_InventorySlot UpdateSlot</li><li>BP_FirstPersonCharacter GetControllerFromChar</li></ol><ul><li>PlayerControllerRef<ul><li>FROM Get Controller</li></ul></li></ul><h4 id="21-amp-22-能够将物品-使用鼠标左键-滑动"><a href="#21-amp-22-能够将物品-使用鼠标左键-滑动" class="headerlink" title="21 &amp; 22 能够将物品 使用鼠标左键 滑动"></a>21 &amp; 22 能够将物品 使用鼠标左键 滑动</h4><p>open W_InventorySlot<br>重写父级方法<br>按下鼠标按钮 [On Mouse Button Down]</p><ul><li>Mouse Event 按下时侦测拖动 [Detect Drag if Pressed]</li><li>Drag Key 鼠标左键</li><li>return node</li></ul><p>open W_InventorySlot Graph</p><ul><li>add var HasItemInSlot? bool</li><li>UpdateSlot 事件 第三个 Set HasItemInSlot? bool &#x3D; true</li></ul><p>copy W_InventorySlot rename W_DraggedItem<br>open W_DraggedItem 增加变量 下面变量全部 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</p><ul><li>add var ImageIcon Texture 2D</li><li>add var TextTop Text</li><li>add var ItemType E_ItemType</li><li>add var Quantity Int</li><li>add var UserAmmo? bool</li><li>add var CurrAmmo int</li><li>add var MaxAmmo int</li><li>add var CurrHP int</li><li>add var MaxHP int </li><li>删除 变量 HasItemInSlot? bool</li></ul><p>创建蓝图类 ItemDrag _Main&#x2F;Blueprints Widgets InventoryWidgets 目录 DragDropOperation 类型</p><ul><li>创建变量 并且全部 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]<ul><li>add var SlotIndex int</li><li>add var FromContainerType E_ContainerType</li><li>add var ItemType E_ItemType</li><li>add var ArmorType E_ArmorType</li></ul></li></ul><p>open W_InventorySlot 重写父类方法 发现拖动时 [On Drag Detected] 方法</p><ul><li>判断 变量 HasItemInSlot?</li><li>True<ul><li>创建控件 [Create Widget] W_Dragged<ul><li>W_DraggedItem</li><li>Owning Player ?????</li><li>其他成员使用 ItemInfo Break S_ItemInfo 进行赋值<ul><li>直接拖动，自动会转换格式</li><li>特殊的：ItemDamage &#x3D;&#x3D;&#x3D; TextTop</li></ul></li></ul></li><li>创建拖放操作 [Create Drag] Item</li><li>设置拖放操作 [Set Drag] Item<ul><li>上控件 &#x3D;&gt; 本拖放的 Default Drag Visual</li><li>class ItemDrag</li><li>Slot Index 提升变量 ItemIndex</li><li>FromContainer 提升变量 FromContainerType E_ContainerType</li><li>Item Type 使用Break的ItemInfo的 ItemType</li><li>Armor Type 使用Break的ItemInfo的 ArmorType</li><li>return node</li></ul></li></ul></li></ul><p>open W_DraggedItem</p><ol><li>删除事件 UpdateSlot</li><li>重写事件 Event Construct</li></ol><ul><li>获取 ItemIcon 设置来自纹理的笔刷 [Set Brush From Texture] <ul><li>ItemIcon 目标</li><li>ImageIcon 纹理资产</li></ul></li><li>ItemType [Selection] 切换枚举使用 [Switch on Enum]<ul><li>Resource<ul><li>Quantity Text &#x3D;&gt; 设置文本 [Set Text(Text)] <ul><li>Quantity &#x3D;&gt; Format Text x{quantity} &#x3D;&gt; [In text]</li></ul></li><li>Quantity Text &#x3D;&gt; Set Visibility</li></ul></li></ul></li></ul><p>松开鼠标按钮</p><h4 id="23-处理后端-能够将物品鼠标左键从一个插槽转移到另一个插槽"><a href="#23-处理后端-能够将物品鼠标左键从一个插槽转移到另一个插槽" class="headerlink" title="23 处理后端 能够将物品鼠标左键从一个插槽转移到另一个插槽"></a>23 处理后端 能够将物品鼠标左键从一个插槽转移到另一个插槽</h4><p>open W_InventorySlot<br>重写 放置时[On Drop] 方法</p><p>open BP_FirstPersonCharacter</p><ul><li>圈 1Key 触发事件 Rename 增加物品Debug</li><li>add 自定义事件 OnSlotDropOnServer 运行在服务器中，防止作弊  实际的物品放置逻辑<ul><li>Inputs<ul><li>TargetContainerType E_ContainerType</li><li>ContainerType E_ContainerType</li><li>FromIndex int</li><li>DroppedIndex int 落下位置的索引</li><li>ArmorType E_ArmorType</li></ul></li></ul></li></ul><p>open BPI_SurvivalCharacter</p><ul><li>add fun GetSurvivalCharacterRef<ul><li>Output<ul><li>SurvivalCharacterRef [BP_FirstPersonCharacter 对象引用]</li></ul></li></ul></li></ul><p>open BP_FirstPersonCharacter 左下方出现 GetSurvivalCharacterRef &amp;&amp; open</p><ul><li>self</li></ul><p>open W_InventorySlot &amp;&amp; open On Drop 方法</p><ul><li>Operator &#x3D;&gt; To Cast To ItemDrag 防止蓝图总是被加载<ul><li>As Item Drag<ul><li>As Item Drag 的 SlotIndex &#x3D;&gt; set LocalSlotIndex</li><li>As Item Drag 的 ContainerType &#x3D;&gt; set LocalFromContainerType</li></ul></li><li>Get Survival Character Ref<ul><li>目标 获取 玩家 角色</li></ul></li><li>On Slot Drop On Server<ul><li>Target Container &#x3D;&gt; FormContainerType</li><li>From Target Container &#x3D;&gt; LocalFromContainerType</li><li>From Index &#x3D;&gt; SlotIndex</li><li>Dropped Index<ul><li>FROM Item Index</li></ul></li><li>Armor Type<ul><li>FROM Cast To ItemDrag 的 Armor Type</li></ul></li></ul></li></ul></li><li>Return</li></ul><p>open BPC_ItemsContainer<br>创建 自定义事件 OnSlotDrop 放置物品 在服务器上运行</p><ul><li>Inputs<ul><li>FromContainer BPC_ItemsContainer</li><li>FromIndex int</li><li>DroppedIndex int</li></ul></li><li>Replicates Run On Server</li></ul><p>增加 方法 HandleSlotDrop 增加描述 在子类重写 红色</p><ul><li>Inputs<ul><li>FromContainerType BPC_ItemsContainer</li><li>FromIndex int</li><li>DroppedIndex int</li></ul></li></ul><p>图表中 OnSlotDrop &#x3D;&gt; HandleSlotDrop ，并连接三个参数</p><p>open BP_FirstPersonCharacter 的 自定义事件 OnSlotDropOnServer<br>放置物品，执行 OnSlotDrop方法，目标和来源都是 BPC_PlayerInventory，相当于从背包中换了一个位置<br>OnSlotDropOnServer &#x3D;&gt; OnSlotDrop<br>BPC_PlayerInventory -&gt; 选择 select PlayerInventory 是来源也是目标</p><h4 id="24-完成-背包物品拖放-逻辑"><a href="#24-完成-背包物品拖放-逻辑" class="headerlink" title="24 完成 背包物品拖放 逻辑"></a>24 完成 背包物品拖放 逻辑</h4><p>open BPC_ItemsContainer 创建 方法 TransferItem</p><ul><li>Inputs<ul><li>ToComponent BPC_ItemsContainer</li><li>ToSpecificIndex int</li><li>ItemIndexToTransfer int</li></ul></li></ul><p>open BPC_PlayerInventory<br>重写 方法 HandleSlotDrop</p><ul><li>全部提升为 局部变量 Local开头</li><li>LocalFromContainerType 的 ContainerType 的 Switch On E_ContainerType<ul><li>PlayerInventory</li><li>Transfer Item<ul><li>目标 &#x3D;&gt; LocalFromContainerType</li><li>To Component &#x3D;&gt; self</li><li>To Specific Index &#x3D;&gt; LocalDroppedIndex</li><li>Item Index To Transfer &#x3D;&gt; LocalFromIndex</li></ul></li></ul></li><li>return node</li></ul><p>open BPC_ItemsContainer 的 TransferItem</p><ul><li>删除调用父类的方法</li><li>全部提升为 局部变量 Local开头<ul><li>特殊：ToComponent &#x3D;&gt; 存为 LocalReceiverComponent</li><li>特殊：ItemIndexToTransfer &#x3D;&gt; 存为 LocalItemIndex</li></ul></li><li>Is Valid 检查 LocalReceivedItemInfo 检查传入的组件，是否有效<ul><li>True<ul><li>GetItemAtIndex by LocalItemIndex item的值 设置局部变量 LocalItemToTransfer</li><li>AddItemToIndex<ul><li>目标 &#x3D;&gt; LocalReceiverComponent</li><li>Item &#x3D;&gt; LocalItemToTransfer</li><li>LocalSpecificIndex &#x3D;&gt; LocalToSpecificIndex</li><li>FromIndex &#x3D;&gt; LocalItemIndex</li></ul></li></ul></li></ul></li><li>创建 方法 FindItemByIndex<ul><li>思路：遍历所有的物品，找到对应的物品，返回索引。<ul><li>Items 是否为有效索引[Is Valid Index]</li><li>Items GET方法 By Index</li><li>判断失败 也返回空</li><li>Set Index 为 LocalIndex</li><li>方法设置为 纯函数[Pure] 不会引入任何副作用，确保某些函数不会修改任何状态 高效</li></ul></li><li>Inputs<ul><li>Index int</li></ul></li></ul></li><li>创建 方法 AddItemToIndex<ul><li>思路：<ul><li>先判断 槽位是否是空的 下方 IsSlotEmpty?</li></ul></li><li>Inputs<ul><li>Item S_ItemInfo</li><li>SpecificIndex int</li><li>FromIndex int</li></ul></li><li>全部提升为 局部变量 Local开头</li><li>判断<ul><li>false return Success? false</li></ul></li><li>Items 的 设置阵列元素 [Set Array Elem]<ul><li>Index &#x3D; LocalIndex</li><li>Item &#x3D; LocalItem</li></ul></li><li>Return Success? true</li><li>Outputs<ul><li>Success? bool</li></ul></li></ul></li><li>add fun IsSlotEmpty?<ul><li>Inputs<ul><li>Index int</li></ul></li><li>Items GET方法 By Index</li><li>判断是否有效 Break S_ItemInfo <ul><li>True<ul><li>ItemId &#x3D;&#x3D; 0 槽位是空</li><li>return node SlotEmpty? true</li></ul></li><li>False<ul><li>return node SlotEmpty? false</li></ul></li></ul></li><li>Outputs<ul><li>SlotEmpty? bool</li></ul></li></ul></li></ul><p>open BPC_PlayerInventory<br>重写 方法 AddItemToIndex ，增加 更新UI逻辑</p><ul><li>Get Owner 的 Get Controller From Char</li><li>Update Item Slot 运行在客户端上<ul><li>目标 上方char的 Controller ref</li><li>ContainerType 是 父类的 ContainerType，可以直接获取</li><li>Index 是 LocalToSpecificIndex</li><li>ItemInfo 是 父类的 FindItemByIndex By SpecificIndex</li></ul></li><li>Return Node Success? bool</li></ul><p>open W_ItemContainerGrid 图表 AddSlots 方法，Create Widget 后面 Return Value</p><ul><li>Set ItemIndex<ul><li>ItemIndex &#x3D; Slots-&gt;add 返回的值</li></ul></li></ul><p>然后就可以拖动复制了。</p><p>接下来新增 BPC_ItemsContainer 的 RemoveItemByIndex 方法，用于删除移动前的物品</p><ul><li>Inputs<ul><li>Index int</li></ul></li><li>Items 的 设置阵列元素 [Set Array Elem]<ul><li>Index &#x3D; LocalIndex</li><li>Item &#x3D; 留空即可</li></ul></li><li>Return Node Success? true</li></ul><p>什么时候调用呢？BPC_ItemsContainer 的 TransferItem 方法中</p><ul><li>AddItemToIndex 后 判断Success? bool</li><li>True<ul><li>RemoveItemByIndex<ul><li>Index &#x3D; LocalItemIndex</li></ul></li></ul></li></ul><p>W_InventorySlot 中 新增 自定义 方法 ResetSlot</p><ul><li>隐藏所有的元素 Set Visibility Hidden<ul><li>ItemIcon</li><li>TopText</li><li>BottomText</li><li>Item HP</li><li>Quantity Text</li></ul></li><li>Set HasItemInSlot? bool &#x3D; false</li></ul><p>SurvivalGamePC 中的 事件图中</p><ul><li>复制 UpdateItemSlot 重命名为 ResetItemSlot</li><li>设置 运行在客户端</li><li>Update Slot Event 换成 ResetSlot</li></ul><p>open BPC_PlayerInventory 重写 RemoveItemByIndex 方法<br>增加 更新UI逻辑</p><ul><li>Get Owner 的 Get Controller From Char</li><li>Reset Item Slot 运行在客户端上<ul><li>目标 上方char的 Controller ref</li><li>ContainerType 是 父类的 ContainerType，可以直接获取</li><li>Index 是 Input Index</li></ul></li></ul><p>整体思路：</p><ol><li>第一人称角色蓝图 [BP_FirstPersonCharacter] 中 添加了蓝图组件 玩家背包组件 [BPC_PlayerInventory]</li><li>玩家背包组件 [BPC_PlayerInventory] 继承了 父类 物品容器蓝图 [BPC_ItemsContainer]<ul><li>物品蓝图中有如下方法：<ul><li>AddItem 增加物品</li><li>FindEmptySlot 找到空的槽位</li><li>UpdateUI 更新UI</li><li>UpdateItemSlot 更新物品槽位</li><li>HandleSlotDrop 处理物品槽位</li><li>TransferItem 转移物品</li><li>FindItemByIndex 通过索引查找物品</li><li>AddItemToIndex 增加物品到指定的索引</li><li>IsSlotEmpty? 判断槽位是否为空</li><li>ResetItemSlot 重置物品槽位</li><li>RemoveItemByIndex 删除物品</li></ul></li></ul></li><li><code>角色蓝图</code> [BP_FirstPersonCharacter] 1 key 触发 <code>玩家背包组件</code> [BPC_PlayerInventory] 中的 <code>AddItemOnServer</code> 事件<ul><li><code>AddItemOnServer</code> 事件中调用了 <code>AddItem</code> 方法<ul><li>先看 index 是否是空槽位</li><li>设置 item 进入 Items 指定 Index 的位置</li><li>更新UI事件<ul><li>执行 <code>拥有者</code> 的 <code>Get Controller From Char</code> 方法 的 SurvivalGamePC 中的 <code>UpdateItemSlot</code> 事件<ul><li>执行 W_Inventory 的 <code>UpdateSlot</code> 方法<ul><li>设置 不是空槽位</li><li>设置 多个参数可见</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>附加：W_InventorySlot 中的 已有鼠标按键被按下事件 [On Mouse Button Down] 方法<ul><li>监听鼠标左键</li></ul></li><li>附加：W_InventorySlot 中的 控件开始拖动事件 [OnDropDetected] 方法</li><li>附加：W_InventorySlot 中的 控件拖动放下事件 [OnDrop] 方法</li></ol><ul><li>获取玩家角色 Get Survival Character Ref</li><li>执行 插槽放置事件 [On Slot Drop On Server] <ul><li>执行 BPC_ItemsContainer 的 [Handle Slot Drop] 自定义事件<ul><li>执行 Handle Slot Drop 方法，由 玩家背包组件 [BPC_PlayerInventory] 重写<ul><li>判断来源是玩家背包组件</li></ul></li></ul></li></ul></li></ul><p>调试 BPC_ItemsContainer 的 AddItem 观察Items的变化</p><h4 id="25-amp-26-创建快捷栏"><a href="#25-amp-26-创建快捷栏" class="headerlink" title="25 &amp; 26 创建快捷栏"></a>25 &amp; 26 创建快捷栏</h4><p>快捷栏 砍树 收集木头</p><p>下载并导入资源 Hotbar.TGA、BoxButton.TGA 安装在 _Main&#x2F;Widgets&#x2F;Textures 文件夹中<br>new UserInterface -&gt; W_Hotbar [Widget Blueprint -&gt; User Widget] 在 _Main&#x2F;Widgets InventoryWidgets 目录<br>size box </p><ul><li>详情 Child Layout：Width Override 740，Height Override 100</li><li>Desired on Screen</li><li>Border  0.7 透明度  Brush Image 选择 Hotbar 居中<ul><li>垂直框[Vertical Box]：Size &#x3D; Fill<ul><li>间隔区[Spacer]：Size 10</li><li>水平框[Horizontal Box]：<ul><li>用户 创建 W_ItemContainerGrid<ul><li>Size &#x3D; Fill</li><li>Slots Per Row 9</li><li>Total Slots 8</li><li>Container Type Player Hotbar</li></ul></li></ul></li><li>水平框[Horizontal Box]<ul><li>统一网格 [Uniform Grid Panel] Size &#x3D; Fill<ul><li>边界 [Border] Brush Image 选择 BoxButton 居中<ul><li>文本块 [Text Block]：Size &#x3D; Fill<ul><li>Text 1<ul><li>设置文本 [Set Text(Text)] <ul><li>1</li></ul></li><li>设置字体 [Set Font] <ul><li>Size 9</li><li>Column 0</li></ul></li></ul></li></ul></li></ul></li><li>边界 [Border]：Size &#x3D; Fill Brush Image 选择 BoxButton 居中<ul><li>文本块 [Text Block]：Size &#x3D; Fill<ul><li>Text 2<ul><li>设置文本 [Set Text(Text)]<ul><li>2</li></ul></li><li>设置字体 [Set Font]<ul><li>Size 9</li><li>Column 1</li></ul></li></ul></li></ul></li></ul></li><li>… 8个</li></ul></li></ul></li></ul></li></ul></li></ul><p>open W_MainWidget 添加 W_Hotbar <code>注意不要拖进左下角层级中，拖到右边的屏幕中，不然会缩放</code></p><ul><li>底部居中</li><li>设置 描点[Size To Content] 居中 &amp; 自动调整大小<ul><li>Position 0 0，设置为居中0.5 1.2</li></ul></li></ul><h4 id="27-创建快捷栏背包蓝图子类"><a href="#27-创建快捷栏背包蓝图子类" class="headerlink" title="27 创建快捷栏背包蓝图子类"></a>27 创建快捷栏背包蓝图子类</h4><p>创建 蓝图类 BPC_PlayerHotbar 继承 BPC_ItemsContainer 在 _Main&#x2F;Blueprints Inventory 目录</p><p>open BP_FirstPersonCharacter 添加组件 BPC_PlayerHotbar</p><ul><li>设置 Items 为 8个空的槽位</li><li>设置 ContainerType 为 PlayerHotbar</li></ul><h4 id="28-创建可装备的物品-相关的文件：蓝图、枚举、结构、接口"><a href="#28-创建可装备的物品-相关的文件：蓝图、枚举、结构、接口" class="headerlink" title="28 创建可装备的物品 相关的文件：蓝图、枚举、结构、接口"></a>28 创建可装备的物品 相关的文件：蓝图、枚举、结构、接口</h4><p>根据 ItemMaster 父类蓝图 在 _Main&#x2F;Blueprints&#x2F;Items 目录 创建子类 BP_EquipableMaster 可装备的类</p><p>创建 Equipable 文件夹 在 _Main&#x2F;Blueprints&#x2F;Items 目录<br>创建 第一人称文件：根据 EquipableMaster 父类蓝图 在 Equipable 目录 创建子类 BP_FirstPersonEquipable<br>创建 第三人称文件：复制 BP_FirstPersonEquipable 重命名为 BP_ThirdPersonEquipable</p><p>创建蓝图枚举 E_EquipableState 可装备状态 在 _Main&#x2F;Blueprints Enums 目录</p><ul><li>Hatchet 斧头</li><li>Bow 弓</li><li>Rock 石头</li><li>Rifle 步枪</li><li>RocketLauncher 火箭发射器</li><li>Default 默认</li><li>Spear 矛</li><li>Swimming 游泳</li></ul><p>创建蓝图结构 S_EquipableInfo 在 _Main&#x2F;Blueprints&#x2F;Structures 目录</p><ul><li>SocketName Name </li><li>AnimationState E_EquipableState</li><li>FirstPersonEquipableClass BP_FirstPersonEquipable 类引用 不然子类无法设置</li></ul><p>创建 蓝图接口 BPI_EquipableItem 在 _Main&#x2F;Blueprints&#x2F;Interfaces 目录</p><ul><li>add fun GetEquipableRef<ul><li>Outputs<ul><li>EquipableRef [BP_EquipableMaster 对象引用]</li></ul></li></ul></li></ul><p>Open BP_EquipableMaster</p><ul><li>add var EquipableInfo S_EquipableInfo</li><li>默认类 禁用 [Start with Tick Enabled] 提高性能和优化游戏，不用每一帧都执行</li><li>类设置 增加 接口 BPI_EquipableItem</li><li>编译保存后 打开 GetEquipableRef<ul><li>增加对自身的引用</li></ul></li></ul><h4 id="29-创建-工具、斧头-的相关文件"><a href="#29-创建-工具、斧头-的相关文件" class="headerlink" title="29 创建 工具、斧头 的相关文件"></a>29 创建 工具、斧头 的相关文件</h4><p>创建文件夹 _Main&#x2F;Meshes<br>创建文件夹 _Main&#x2F;Meshes&#x2F;Equipables<br>创建文件夹 _Main&#x2F;Widgets&#x2F;Textures&#x2F;ItemIcon<br>下载并导入资源 StoneHatchet.TGA 安装在 _Main&#x2F;Widgets&#x2F;Textures&#x2F;ItemIcon 文件夹中<br>下载并导入资源 SM_Hatchet.fbx 安装在 _Main&#x2F;Meshes&#x2F;Equipables 文件夹中</p><p>创建文件夹 _Main Materials Equipables Materials<br>将资源文件 Material_001 移动到新建的文件夹 _Main Materials Equipables Materials 中<br>将 axe_low_Material.001开头的四个文件 移动到新建的文件夹 _Main&#x2F;Meshes&#x2F;Equipables&#x2F;Materials 中</p><p>打开 Material_001 将四个文件拖入到 Material_001 中</p><ul><li>浅黄色 BaseColor</li><li>黑白色 Metallic 金属色</li><li>全白色 Roughness 粗糙度</li><li>蓝色 Normal 普通的</li></ul><p>保存退出后 Open SM_Hatchet 可以看到效果</p><p>创建文件夹 Tools、Tools&#x2F;Hatchet 在 _Main&#x2F;Blueprints&#x2F;Items&#x2F;Equipable 目录中<br>创建 BP_FirstPersonEquipable 的子类 BP_FP_Hatchet[第一人称] 进入 Tools<br>创建 BP_ThirdPersonEquipable 的子类 BP_TP_Hatchet[第三人称] 进入 Tools<br>创建 BP_FP_Hatchet 的子类 BP_FP_StoneHatchet 进入 Tools&#x2F;Hatchet<br>创建 BP_TP_Hatchet 的子类 BP_TP_StoneHatchet 进入 Tools&#x2F;Hatchet</p><p>Open BP_FP_Hatchet 增加 静态网格 来放置斧头</p><ul><li>静态网格 选择 SM_Hatchet<br>Open BP_FP_Hatchet 增加 静态网格 来放置斧头</li><li>静态网格 选择 SM_Hatchet</li></ul><p>Open DT_Items 数据表 添加一行，并且设置行命名为 2</p><ul><li>ItemId 2</li><li>ItemQuantity 1 数量</li><li>ItemIcon 选择 StoneHatchet</li><li>ItemName 石斧</li><li>ItemDescription 石斧</li><li>ItemDamage 100</li><li>ItemRarity Common</li><li>ItemCurHP 100</li><li>ItemMaxHP 100</li><li>IsStackable? 不可堆叠</li><li>StackSize 1</li><li>ItemType Equipable 可装备的</li><li>ItemClassRef BP_TP_StoneHatchet</li><li>ArmorType Helmet 头盔</li></ul><h4 id="30-创建工具、斧头的UI-以及快捷栏逻辑"><a href="#30-创建工具、斧头的UI-以及快捷栏逻辑" class="headerlink" title="30 创建工具、斧头的UI 以及快捷栏逻辑"></a>30 创建工具、斧头的UI 以及快捷栏逻辑</h4><p>补充：使用快捷栏中的物品 设置斧头</p><p>下载并导入资源 HatchetIdleTP.FBX 和 Hatchet_Idle.FBX 安装在 Man Animations 文件夹中<br>骨骼选择 UE4_Mannequin_Skeleton</p><p>创建 拿着斧头的 动画混合空间 在 _Main Animations，复制 FirstPersonBS 重命名为 HatchetBS_FP 这是第一人称的<br>open this<br>动画编辑</p><ul><li>Hatchet_Idle 0</li><li>Hatchet_Walk 600</li><li>Hatchet_Run 800</li></ul><p>创建 拿着斧头的 动画混合空间 在 _Main Animations，复制 ThirdPersonBS 重命名为 HatchetBS_TP 这是第三人称的<br>open this<br>动画编辑</p><ul><li>HatchetIdleTP 0</li><li>Running1 600</li><li>Running2 800</li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>add var EquippedState E_EquipableState</li><li>修改 详情 EquippedState 为 Hatchet</li></ul><p>OPEN FirstPerson_AnimBP </p><ul><li>增加变量 EquippedItem E_EquipableState 默认值设置为 Default</li><li>找到 Idle&#x2F;Walk&#x2F;Run<ul><li>Speed 先设置变量 默认值是800</li><li>FirstPersonBS_FP</li><li>[Blend Poses (E_EquipableState)] 根据不同的装备状态，播放不同的动画<ul><li>增加 添加元素引脚 Hatchet [Pose]<ul><li>HatchetBS_FP<ul><li>Speed 是当前的 Speed</li></ul></li></ul></li><li>Active Enum Item &lt;&#x3D;&gt; 变量 EquippedItem</li><li>Default Blend Time 0.1</li><li>Hatchet Blend Time 0.1</li></ul></li></ul></li></ul><p>事件蓝图更新动画 [EventBlueprintUpdateAnimation]</p><ul><li>增加 Get Survival Character Ref<ul><li>目标 Get Owner 的 Return Value</li></ul></li><li>设置变量 EquippedState [Set Equipped State]<ul><li>目标 SurvivalCharacterRef</li></ul></li></ul><p>OPEN ThirdPerson_AnimBP</p><ul><li>增加变量 EquippedItem E_EquipableState 默认值设置为 Default</li><li>找到 Idle&#x2F;Walk&#x2F;Run<ul><li>Speed 先设置变量 默认值是800</li><li>ThirdPersonBS</li><li>[Blend Poses (E_EquipableState)] 根据不同的装备状态，播放不同的动画<ul><li>增加 添加元素引脚 Hatchet [Pose]<ul><li>HatchetBS_TP<ul><li>Speed 是当前的 Speed</li></ul></li></ul></li><li>Active Enum Item &lt;&#x3D;&gt; 变量 EquippedItem</li><li>Default Blend Time 0.1</li><li>Hatchet Blend Time 0.1</li></ul></li></ul></li></ul><p>事件蓝图更新动画 [EventBlueprintUpdateAnimation]</p><ul><li>增加 Get Survival Character Ref<ul><li>目标 Get Owner 的 Return Value</li></ul></li><li>设置变量 EquippedState [Set Equipped State]<ul><li>目标 SurvivalCharacterRef</li></ul></li></ul><p>增加跳跃栏键 time：11.27<br>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>创建 方法 UseHotbarFunction<ul><li>Inputs<ul><li>Index int</li></ul></li><li>设置变量 HotbarIndex &#x3D; Index</li></ul></li><li>创建 自定义事件 HotBarOnServer 运行在服务器中，防止作弊<ul><li>Inputs<ul><li>Index int</li></ul></li></ul></li><li>增加 1-8 Key 都对应 HotBarOnServer 并且修改 Index 的值<ul><li>Index 1  - Index 0</li><li>Index 2   …</li><li>Index 3</li><li>Index 4</li><li>Index 5</li><li>Index 6</li><li>Index 7</li><li>Index 8  - Index 7</li><li>增加 Comment 注释 [快捷键 HotBarKeys]</li></ul></li></ul><p>OPEN BPC_PlayerHotbar 中</p><ul><li>创建 方法 CheckHotbar 检查快捷栏是否为空</li><li>Inputs<ul><li>Index int</li></ul></li><li>Outputs<ul><li>HasItemInSlot? bool</li><li>ItemType ItemType</li></ul></li><li>判断 Items &#x3D;&gt; Get &#x3D;&gt; Break S_ItemInfo ?&#x3D; 0</li><li>Return Node <ul><li>HasItemInSlot? bool</li><li>ItemType &#x3D;&#x3D; Break S_ItemInfo &#x3D;&gt; ItemType</li></ul></li></ul><p>OPEN BP_FirstPersonCharacter 事件图 </p><ul><li>创建 变量 ThirdPersonEquippedItem Actors 对象引用</li><li>OPEN 方法 UseHotbarFunction<ul><li>Set Hotbar Index</li><li>判断 BPC_PlayerHotbar 的 CheckHotbar<ul><li>Index &#x3D;&gt; HotbarIndex</li></ul></li><li>切换枚举 [Switch on E_ItemType]<ul><li>处理 可装备的 类型</li></ul></li><li>ThirdPersonEquippedItem 为了避免潜在的异常情况 <code>右键</code>转换为 Validated Get，检查 第三人称装备的物品是否有效<ul><li>true 角色已经装备了物品<ul><li>print string “角色已经装备了物品”</li></ul></li><li>false 角色没有装备物品<ul><li>执行下方的 SpawnEquipaableThirdPerson<ul><li>这行好像没有用… Class &#x3D;&gt; Actor Class &#x3D;&gt; ThirdPersonEquipableClass</li><li>ItemInfo &#x3D;&gt; PlayerHotbar 的 Items 的 Get(通过 HotbarIndex 获取) </li><li>Class &#x3D;&gt; PlayerHotbar 的 Items 的 Get(通过 HotbarIndex 获取) &#x3D;&gt; Break S_ItemInfo 的 ItemClassRef</li><li>ItemIndex &#x3D;&gt; HotbarIndex</li></ul></li></ul></li></ul></li></ul></li><li>新增 自定义事件 SpawnEquipaableThirdPerson 运行在服务器中，防止作弊<ul><li>Inputs<ul><li>Class Actor 类</li><li>ItemInfo S_ItemInfo</li><li>EquippedIndex int</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter 自定义事件 HotBarOnServer</p><ul><li>Use Hotbar Function<ul><li>Index &#x3D;&gt; Index</li></ul></li></ul><h4 id="31-继续完成-快捷栏-逻辑"><a href="#31-继续完成-快捷栏-逻辑" class="headerlink" title="31 继续完成 快捷栏 逻辑"></a>31 继续完成 快捷栏 逻辑</h4><p>OPEN BP_FirstPersonCharacter 事件图 </p><ul><li>OPEN SpawnEquipaableThirdPerson 自定义事件<ul><li>EquippedIndex 提升为变量 EquippedIndex</li></ul></li><li>[SpawnActor]<ul><li>Class &#x3D;&gt; Class</li><li>Spawn Transform 右键 分割结构体引脚</li></ul></li><li>Set ThirdPersonEquippedItem<ul><li>目标 Spawn Actor 的 Return Value</li></ul></li><li>Get Equipable Ref<ul><li>Ref &#x3D;&gt; EquipableInfo &#x3D;&gt; Break S_EquipableInfo<ul><li>目标 ThirdPersonEquippedItem</li><li>Socket Name &#x3D;&gt; 下方的 ToolSocket</li></ul></li></ul></li><li>下方的 MulticastWeaponEquip<ul><li>Target &#x3D;&gt; ThirdPersonEquippedItem</li><li>Socket Name &#x3D;&gt; Break S_EquipableInfo 的 SocketName</li><li>EquippedState &#x3D;&gt; Break S_EquipableInfo 的 AnimationState</li></ul></li></ul><p>OPEN SK_Man_Full_01</p><ul><li>hand_r <ul><li>右键 add socket添加插槽<ul><li>rename ToolSocket</li><li>右键ToolSocket 增加预览资源 SM_Hatchet</li><li>预览动画 - HatchetIdle</li><li>详情 调整位置 <ul><li>Location：-4.57 1.66 -17</li><li>Rotation：19.9 -0(这里可以更斜一些) 70</li></ul></li></ul></li></ul></li></ul><p>OPEN BP_TP_StoneHatchet 类默认值 </p><ul><li>SocketName ToolSocket</li><li>AnimationState Hatchet</li><li>FirstPersonEquipClass BP_FP_StoneHatchet</li></ul><p>OPEN BP_FirstPersonCharacter 事件图 </p><ul><li>新增 自定义事件 MulticastWeaponEquip 运行在组播中，防止作弊<ul><li>Inputs<ul><li>Target Actor 对象引用</li><li>SocketName Name</li><li>EquippedState E_EquipableState</li></ul></li><li>? Is Valid<ul><li>False<ul><li>组件中的 ThirdPersonMesh 右键 转换成有效的 GET</li><li>Attach Actor To Component<ul><li>Target &#x3D;&#x3D; Inputs Target </li><li>Parent &#x3D;&#x3D; 第三人称网格 </li><li>Socket Name 事件的 Input</li><li>Location Snap to Target</li><li>Rotation Snap to Target</li><li>Scale Rule Snap to Target</li></ul></li><li>Set EquippedState<ul><li>EquippedState 事件的 Input</li></ul></li></ul></li></ul></li></ul></li><li>增加物品Debug<ul><li>取消1 key 使用 R key</li><li>添加第二个数据表中 也就是斧头</li><li>添加到 快捷栏中 BPC Player Hotbar</li></ul></li></ul><p>增加 装备可装备的物品 的更新UI逻辑<br>OPEN SurvivalGamePC</p><ul><li>add 方法 GetInventoryWidget 替换 UpdateItemSlot 和 ResetItemSlot 的 ?IsValid 前的获取逻辑<ul><li>Inputs<ul><li>ContainerType E_ContainerType</li><li>SlotIndex int</li></ul></li><li>ContainerType &#x3D;&gt; Select 返回索引处的选项</li><li>Outputs<ul><li>Widget W_InventorySlot 对象引用<div>          <img src="/blog/p/614a8811/GetInventoryWidget.png" alt="GetInventoryWidget.png"></img>          <p style="          display: flex;          color: #999;          justify-content: center;          font-size: 0.8rem;          position: relative;          top: -1rem;          right: 50%;          left: 50%;          transform: translateX(-50%);          ">[GetInventoryWidget.png]</p>      </div></li></ul></li></ul></li></ul><p>OPEN BPC_ItemsContainer</p><ul><li>UpdateUI 增加 Player HotBar 连接</li></ul><p>2玩家，运行后发现 默认是手持空物体，设置 BP_FirstPersonCharacter 的 EquipableState 默认值 Default</p><p>运行后还是发现走动会有bug<br>OPEN BP_ItemMaster</p><ul><li>类默认 Replicates 勾选，能够复制或在多人游戏中使用</li></ul><p>运行后按R能出现斧头，但是第一人称看不到动画<br>OPEN BP_TP_Hatchet</p><ul><li>StaticMesh 设置 Owner No See &#x3D; true</li></ul><p>再次运行，发现第一人称的斧头出现了，但是第三人称的没有出现<br>设置 BP_FP_Hatchet、BP_TP_Hatchet 中的 Static Mesh</p><ul><li>碰撞预设 Collision Presets 选择 NoCollision</li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>增加 Set Owner<ul><li>New Owner &#x3D; self</li></ul></li></ul><p>改完之后，其他玩家能看到，自己看不到斧头<br>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>创建 自定义事件 SpawnEquipaableFirstPerson 运行在客户端中，防止作弊<ul><li>Inputs<ul><li>Class Actor 类引用</li><li>SocketName Name</li></ul></li></ul></li><li>SpawnActor<ul><li>Return Value 设置变量 FirstPersonEquippedItem</li></ul></li><li>Attach Actor To Component<ul><li>Target FirstPersonEquippedItem</li><li>Socket Name &#x3D;&gt; SocketName</li><li>Location Snap to Target</li><li>Rotation Snap to Target</li><li>Scale Rule Snap to Target</li></ul></li></ul><p>在 SpawnEquipaableThirdPerson 的 MulticastWeaponEquip 最后增加 SpawnEquipaableFirstPerson</p><p>思路：</p><ol><li>1-8快捷键 触发 HotBarOnServer 事件，传递 指定的插槽 Index &#x3D;&gt; UseHotbarFunction</li><li>UseHotbarFunction</li></ol><ul><li>检查 Hotbar 指定Index 是否有物品</li><li>Switch 快捷键类型 只处理 Equipable</li><li>SpawnEquipaableThirdPerson 生成第三人称的物品<ul><li>SpawnActor 生成物品</li><li>通过 FirstPersonEquippedItem 以及 Get Equipable Ref 获取物品的信息 得到 EquipableInfo 进行 Break 得到具体信息</li><li>设置所有者 斧头 不是第一人称可见 ?这里有疑问</li><li>MulticastWeaponEquip 组播给所有客户端<ul><li>先验证 ? is vali</li><li>Attack Actor To Component 附加到第三人称网格</li><li>Set EquippedState 设置第三人称网格的装备状态</li></ul></li><li>SpawnEquipaableFirstPerson 生成第一人称的物品<ul><li>SpawnActor 生成物品</li><li>Attach Actor To Component 附加到第一人称网格</li></ul></li></ul></li></ul><h4 id="32-重复按下快捷键，如果物品已经装备，就卸下物品"><a href="#32-重复按下快捷键，如果物品已经装备，就卸下物品" class="headerlink" title="32 重复按下快捷键，如果物品已经装备，就卸下物品"></a>32 重复按下快捷键，如果物品已经装备，就卸下物品</h4><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>创建 自定义事件 DequipWeaponThirdPerson 组播运行<ul><li>Inputs<ul><li>EquippedState E_EquipableState</li></ul></li><li>设置变量 EquippedState &#x3D; default</li></ul></li><li>创建 自定义事件 DequipWeaponFirstPerson 客户端运行<ul><li>FirstPersonEquippedItem 进行销毁 Destory Actor</li></ul></li><li>在 UseHotbar 的 判断玩家是否已经装备了物品的分支中<ul><li>True<ul><li>ThirdPersonEquippedItem 销毁 进行销毁 Destory Actor</li><li>组播 DequipWeaponThirdPerson 通知该用户卸下物品</li><li>客户端执行 DequipWeaponFirstPerson</li></ul></li></ul></li></ul><p>增加 描述文本</p><ul><li>装备物品</li><li>卸下物品</li></ul><h4 id="33-装备斧头后，左键挥动"><a href="#33-装备斧头后，左键挥动" class="headerlink" title="33 装备斧头后，左键挥动"></a>33 装备斧头后，左键挥动</h4><p>OPEN BPI_SurvivalCharacter</p><ul><li>add fun ThirdPersonMontage<ul><li>Inputs<ul><li>ThirdPersonMontage Montage Object 对象引用</li></ul></li></ul></li><li>add fun FirstPersonMontage<ul><li>Inputs<ul><li>FirstPersonMontage Montage Object 对象引用</li></ul></li></ul></li></ul><p>OPEN BPI_EquipableItem</p><ul><li>add fun UseItemInterface<ul><li>Inputs<ul><li>CharRef BP_FirstPersonCharacter 对象引用</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>创建 自定义事件 LeftMouseOnServer 运行在服务器中，防止作弊<ul><li>获取 ThirdPersonEquippedItem 转为有效的 GET<ul><li>执行 Interface 中的 Use Item Interface<ul><li>CharRef &#x3D;&gt; self</li></ul></li></ul></li></ul></li><li>增加 鼠标左键按下事件 left mouse<ul><li>LeftMouseOnServer</li></ul></li></ul><p>OPEN BP_TP_Hatchet 事件图 </p><ul><li>删除 方法 GetEquipableRef</li><li>开始写Interface规范的 UseItemInterface，双击它</li><li>EventUseItemInterface<ul><li>增加 变量 IsSwinging? bool </li><li>Inputs<ul><li>CharRef BP_FirstPersonCharacter 对象引用</li></ul></li><li>判断 IsSwinging? bool<ul><li>False<ul><li>Set IsSwinging? bool &#x3D; true</li></ul></li><li>True<ul><li>提升变量 CharRef </li><li>FirstPersonMontage(message)<ul><li>Hatchet_Chop_Montage Montage 选择的是 Hatchet_Chop 文件 右键创建 AnimMontage</li></ul></li><li>ThirdPersonMontage(message)<ul><li>选择的是 Hatchet_Chop 文件 右键创建 AnimMontage</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>创建 自定义事件 MontageMulticast 组播运行<ul><li>Inputs<ul><li>ThirdPersonMontage &#x3D; Anim Montage Object 对象引用</li></ul></li><li>Play Montage<ul><li>骨骼网格组件 &#x3D; ThirdPersonMesh</li><li>Montage To Play &#x3D; ThirdPersonMontage</li></ul></li></ul></li><li>创建 自定义事件 MontageOnClient 客户端运行<ul><li>Inputs<ul><li>FirstPersonMontage &#x3D; Anim Montage Object 对象引用</li></ul></li><li>Play Montage<ul><li>骨骼网格组件 &#x3D; FirstPersonMesh</li><li>Montage To Play &#x3D; FirstPersonMontage</li></ul></li></ul></li><li>开始写 Interface 规范的 FirstPersonMontage，双击它<ul><li>MontageOnClient 客户端运行</li></ul></li><li>开始写 Interface 规范的 ThirdPersonMontage，双击它<ul><li>MontageMulticast 组播运行</li></ul></li></ul><p>OPEN FirstPerson_AnimBP</p><ul><li>new State Machine</li><li>增加一个 Slot DefaultSlot</li></ul><p>OPEN ThirdPerson_AnimBP</p><ul><li>new State Machine</li><li>增加一个 Slot DefaultSlot</li></ul><p>运行之后，可以左键挥动斧头了，但是只能挥动一次</p><p>OPEN BPI_EquipableItem</p><ul><li>创建 方法 NotifyInterface</li><li>创建 方法 EndAnimation</li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>MontageMulticast 方法<ul><li>Play Montage 的 完成事件<ul><li>获取 ThirdPersonEquippedItem 转为有效的 GET</li><li>End Animation</li></ul></li><li>Play Montage 的 通知开始事件<ul><li>获取 ThirdPersonEquippedItem 转为有效的 GET</li><li>NotifyInterface</li></ul></li></ul></li></ul><p>OPEN BP_TP_Hatchet 事件图</p><ul><li>双击 NotifyInterface</li><li>双击 End Animation<ul><li>设置 IsSwinging? bool &#x3D; false</li></ul></li></ul><p>运行后就可以一直挥动斧头了</p><p>增加</p><p>OPEN Hatchet_Chop_Montage</p><ul><li>在‘1’行右键 Add Notify<ul><li>声音</li><li>粒子效果</li><li>12的位置 增加 蒙太奇通知 [MontageNotify]</li></ul></li></ul><h4 id="34"><a href="#34" class="headerlink" title="34"></a>34</h4><p>下载资源文件<br>创建文件夹</p><ul><li>_Main&#x2F;Meshes PalmTrees 并且导入所有 Palm 开头的 .fpx 文件<ul><li>可以删除 Tree 开头的白色材料 文件</li></ul></li><li>_Main&#x2F;Meshes Materials 并且导入所有 .TGA 文件<ul><li>创建 材质 M_PalmMaster<ul><li>Base Color 创建 TextureSampleParameter2D 命名 BaseColor<ul><li>Texture 是默认的 DefaultTexture</li></ul></li><li>Normal 创建 TextureSampleParameter2D 命名 NormalMap<ul><li>Texture 选择 palm02_normal</li></ul></li></ul></li><li>为 M_PalmMaster 右键 创建 材质实例 M_Palm01<ul><li>详情 勾选 Global 的 BaseColor、NormalMap<ul><li>BaseColor 设置为 palm02</li><li>NormalMap 设置为 palm02_normal</li></ul></li></ul></li><li>复制 M_Palm01 重命名为 M_Palm02<ul><li>BaseColor 设置为 coconut</li><li>NormalMap 设置为 coconut_normal</li></ul></li><li>复制 M_Palm02 重命名为 M_Palm03<ul><li>BaseColor 设置为 stem</li><li>NormalMap 设置为 stem_normal</li></ul></li><li>复制 M_Palm03 重命名为 M_Palm04<ul><li>BaseColor 设置为 palm_top</li><li>NormalMap 设置为 palm_top_normal</li></ul></li><li>创建 材质 M_PalmLeaf<ul><li>复制下列三个文件，到 M_PalmLeaf 中<ul><li>coconut_palm_leaf</li><li>coconut_palm_leaf_alpha</li><li>coconut_palm_leaf_Normal</li></ul></li><li>设置 M_PalmLeaf<ul><li>材质 Blend Mode 为 Masked 遮罩</li><li>材质 Two Sided 勾选 双面</li></ul></li><li>连接<ul><li>绿色 设置为 BaseColor</li><li>白色 设置为 透明度遮罩 Opacity Mask </li><li>蓝紫色 设置为 Normal</li></ul></li></ul></li></ul></li></ul><p>OPEN Palm_01&#x2F;02&#x2F;03&#x2F;04&#x2F;05 都设置</p><ul><li>元素0 材质插槽 M_Palm01</li><li>元素1 材质插槽 M_Palm02</li><li>元素2 材质插槽 M_Palm03</li><li>元素3 材质插槽 M_Palm03</li><li>元素4 材质插槽 M_PalmLeaf</li><li>元素5 材质插槽 M_Palm04</li></ul><p>将5中树 放到 Map中</p><p>创建 下列文件夹 在 _Main&#x2F;Blueprints 目录中</p><ul><li>HarvestingSystem</li><li>HarvestingSystem&#x2F;ChildClasses</li><li>HarvestingSystem&#x2F;ChildClasses&#x2F;LargeItemCLasses</li><li>HarvestingSystem&#x2F;ChildClasses&#x2F;LargeItemCLasses&#x2F;PalmTress</li></ul><p>创建蓝图类[Actor]  BP_HarvestableMaster _Main&#x2F;Blueprints&#x2F;HarvestingSystem 目录中<br>并且打开 HarvestableMaster</p><ul><li>默认类设置 <ul><li>Actor Tick 的 Start with Tick Enabled 取消勾选</li><li>可复制 Replicates 勾选</li></ul></li></ul><p>创建 BP_HarvestableMaster 的蓝图子类 BP_LargeItemMaster<br>创建 BP_HarvestableMaster 的蓝图子类 BP_GroundItemMaster</p><p>创建 BPI_LargeItem 的蓝图接口 在 _Main&#x2F;Blueprints&#x2F;Interfaces 目录中</p><ul><li>add fun GetLargeItemRef<ul><li>Outputs<ul><li>Ref BP_LargeItemMaster 对象引用</li></ul></li></ul></li></ul><p>OPEN BP_LargeItemMaster </p><ul><li>添加接口 BPI_LargeItem</li><li>设置 接口的 GetLargeItemRef<ul><li>Ref &#x3D;&gt; self</li></ul></li><li>设置变量 Health float 默认值50</li><li>(？这里有疑问) 增加静态网格 Static Mesh 让子类可以设置</li></ul><p>为 BP_LargeItemMaster 添加蓝图子类 <code>BP_Tree</code> 移动到 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;ChildClasses&#x2F;LargeItemCLasses 目录中</p><ul><li>设置 静态网格 Static Mesh 为 SM_Tree ?????</li></ul><p>为 BP_Tree 添加蓝图子类 BP_Palm01 移动到 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;ChildClasses&#x2F;LargeItemCLasses&#x2F;PalmTress 目录中</p><ul><li>静态网格 改变材质 Palm_01</li></ul><p>复制 BP_Palm01 重命名为 BP_Palm02</p><ul><li>静态网格 改变材质 Palm_02</li></ul><p>复制 BP_Palm01 重命名为 BP_Palm03</p><ul><li>静态网格 改变材质 Palm_03</li></ul><p>复制 BP_Palm01 重命名为 BP_Palm04</p><ul><li>静态网格 改变材质 Palm_04</li></ul><p>复制 BP_Palm01 重命名为 BP_Palm05</p><ul><li>静态网格 改变材质 Palm_05</li></ul><p>如果设置了 BP_Tree 的 静态网格 改变材质 Mobility Static 静态，在Map拖动物体的时候不会出现材质</p><h4 id="35-创建收获-砍树掉木头-系统-挥动斧头砍树，能够收获木头"><a href="#35-创建收获-砍树掉木头-系统-挥动斧头砍树，能够收获木头" class="headerlink" title="35 创建收获(砍树掉木头)系统 挥动斧头砍树，能够收获木头"></a>35 创建收获(砍树掉木头)系统 挥动斧头砍树，能够收获木头</h4><p>编辑-项目设置-碰撞-创建对象通道</p><ul><li>Structure Ignore</li></ul><p>OPEN BPI_SurvivalCharacter</p><ul><li>add fun GetArrowLocation<ul><li>Outputs<ul><li>Location Vector</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>视图 移动 第三人称+第一人称摄像机+第一人称 到胶囊中间</li><li>为 胶囊体组件 增加 箭头组件[Arrow] 在 第一人称摄像机下 位置在 胶囊前方 人物胸前</li><li>双击 GetArrowLocation 方法<ul><li>Location &#x3D;&gt; Arrow1 的 Get World Location</li></ul></li></ul><p>OPEN BP_TP_Hatchet 事件图</p><ul><li>创建 自定义事件 ServerOverlap 运行在服务器中，防止作弊<ul><li>Inputs<ul><li>SpherePos Vector</li></ul></li><li>Sphere Overlap Actors<ul><li>Radius 60</li><li>Object Types &#x3D;&#x3D; Make array &#x3D;&#x3D; [0]Structure</li><li>Actors to Ignore &#x3D;&#x3D; Make array &#x3D;&#x3D; [0] &#x3D;&#x3D; CharRef</li></ul></li><li>Draw Debug Sphere<ul><li>Location &#x3D;&gt; 方法参数 SpherePos</li><li>Radius 60</li><li>Segments 12</li><li>Color 红色</li><li>Duration 10</li><li>Thickness 2</li></ul></li></ul></li><li>创建 自定义事件 GetRotationClient 运行在客户端中，防止作弊<ul><li>Get Arrow Location<ul><li>目标 Get Owner 的 Return Value</li></ul></li><li>Server Overlap<ul><li>SpherePos &#x3D;&gt; Get Arrow Location 的 Location</li></ul></li></ul></li><li>Event Notify Interface<ul><li>Get Rotation Client</li></ul></li></ul><p>OPEN BP_Tree</p><ul><li>设置静态网格 碰撞 Presets 为 Custom<ul><li>Object Type Structure</li></ul></li></ul><p>运行后 就可以命中树了</p><p>OPEN BP_TP_Hatchet 事件图</p><ul><li>方法 ServerOverlap<ul><li>绘制调试球体后<ul><li>判断 球体重叠[Sphere Overlap Actors] 的 Return Value<ul><li>True<ul><li>print string “击中了 树”</li><li>For Each Loop</li><li>收获叶子[HarvestFoliage]方法 For 的 Loop Body<ul><li>Ref 连接 Array Element</li><li>设置伤害固定 15</li></ul></li></ul></li><li>False<ul><li>print string “没有击中任何东西”</li></ul></li></ul></li></ul></li><li>创建 方法 收获叶子[HarvestFoliage]<ul><li>Inputs<ul><li>Damage float</li><li>Ref Actor 对象引用</li></ul></li><li>Damage 设置本地变量 LocalDamage</li><li>Get Large Item Ref<ul><li>思路：获取物品的当前血量，减去伤害，如果血量小于等于0，就销毁物品</li><li>减去后的血量 小于等于 0</li></ul></li></ul></li></ul></li></ul><p>创建文件夹 Destructables 在 _Main&#x2F;Blueprints&#x2F;HarvestingSystem 目录中<br>创建蓝图类Actor BP_DestructableHarvestable _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;Destructables 目录中</p><p>创建 蓝图结构 S_ResourceStructure 在 _Main&#x2F;Blueprints&#x2F;Structures 目录</p><ul><li>ResourceId Name</li><li>Quantity int 这里临时用了 float</li></ul><p>创建 蓝图结构 S_LargeItem 在 _Main&#x2F;Blueprints&#x2F;Structures 目录</p><ul><li>Class BP_DestructableHarvestable 类引用</li><li>GivenItems S_ResourceStructure 数组</li></ul><p>创建 其他-数据表[Miscellaneous Data Table] DT_LargeItemResources 在 _Main&#x2F;DataTables 目录</p><ul><li>创建文件时的 行结构 S_LargeItem</li><li>newRow 重命名 BP_Palm02_C<ul><li>ResourceId 1</li><li>Quantity 3</li></ul></li></ul><p>OPEN BP_TP_Hatchet 事件图</p><ul><li>收获叶子[HarvestFoliage]<ul><li><code>&gt;=</code> 0的判断后</li><li>Get Data Table Row<ul><li>Data Table &#x3D;&gt; DT_LargeItemResources</li><li>Row Name &#x3D;&gt; Get Large Item Ref 的 Get Class 的 Get Class Name</li><li>Output Row &#x3D;&gt; Break S_LargeItem<ul><li>设置本地变量 GivenResources</li></ul></li></ul></li><li>For Each Loop  GivenResources</li><li>CharRef 的 Get Survival Character Ref(Message)</li><li>Survival Character Ref 的 Harvest Item On Server 下方需要创建<ul><li>Resource &#x3D;&gt; For 的 Array Element</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>创建 方法 HarvestItemFunction<ul><li>Inputs<ul><li>Resource S_ResourceStructure</li></ul></li><li>Break S_ResourceStructure FROM 参数 Resource</li><li>Get Data Table Row None<ul><li>Data Table &#x3D;&gt; DT_Items</li><li>Row Name &#x3D;&gt; Break S_ResourceStructure 的 ResourceId</li></ul></li><li>设置 局部变量 LocalQuantity<ul><li>Quantity &#x3D;&gt; Break S_ResourceStructure 的 Quantity</li></ul></li><li>设置局部变量 LocalOutRow<ul><li>Output Row &#x3D;&gt; Get Data Table Row None 的 Output Row</li></ul></li><li>Set Member In S_ItemInfo<ul><li>勾选 Quantity 并且设置 &#x3D;&#x3D; LocalQuantity</li></ul></li><li>BPC_PlayerInventory 的 Add Item On Server<ul><li>Item &#x3D;&#x3D; 上一个 Struct Out</li></ul></li></ul></li><li>创建 自定义事件 收获物品 HarvestItemOnServer 运行在服务器中，防止作弊<ul><li>Inputs<ul><li>Resource S_ResourceStructure</li></ul></li><li>调用 方法 HarvestItemFunction</li></ul></li></ul><p>运行 R 左键 瞄准 Palm02 树木，发现收获了 3个 木头，除了Palm02其他的收获不到</p><h4 id="36-使用斧头砍树收获木头，显示收获的物品"><a href="#36-使用斧头砍树收获木头，显示收获的物品" class="headerlink" title="36 使用斧头砍树收获木头，显示收获的物品"></a>36 使用斧头砍树收获木头，显示收获的物品</h4><p>创建 控件 W_ItemAdded _Main&#x2F;Widgets&#x2F;InventoryWidgets 目录中</p><ul><li>添加 变量 ResourceImage Texture2D 对象引用<ul><li>勾选 Instance Editable&#x2F;Expose On Spawn</li></ul></li><li>添加 变量 ResourceQuantity int<ul><li>勾选 Instance Editable&#x2F;Expose On Spawn</li></ul></li><li>添加 变量 ResourceName Text<ul><li>勾选 Instance Editable&#x2F;Expose On Spawn</li></ul></li><li>ResourceWindow[size box]  W300 H45<ul><li>水平Box<ul><li>边界 Brush Color 黑色 透明度 0.5<ul><li>水平Box<ul><li>size box W40<ul><li>Resourceicon [iamge] <code>Padding 5</code>  <code>是变量</code> Brush绑定 ResourceImage</li></ul></li><li>Text Size20 <code>垂直居中</code> <code>获得了</code>   <code>Color And Opacity 蓝色</code></li><li>ResourceText Text <code>Size16</code> <code>FIll</code> <code>水平居中</code> <code>x44 石头</code>   <code>Color And Opacity 蓝色</code>  <code>是变量</code> Text绑定 创建 ResourceText 通过 数量和名称拼接<ul><li>FormatText<ul><li>Format String <code>x&#123;0&#125; &#123;1&#125;</code></li><li>Argument 0 <code>是变量</code> 数量</li><li>Argument 1 <code>是变量</code> 名称</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN W_MainWidget</p><ul><li>创建 垂直框 ResourceCollected  <code>布局 左中</code>，并且 Is Variable  W250 H380</li><li>创建 自定义事件 ShowItemCollected<ul><li>Inputs<ul><li>ResourceImage Texture2D 对象引用</li><li>ResourceQuantity int</li><li>ResourceName Text</li></ul></li><li>Create Widget [construct None]<ul><li>Class &#x3D;&gt; W_ItemAdded</li><li>ResourceImage &#x3D;&gt; ResourceImage</li><li>ResourceQuantity &#x3D;&gt; ResourceQuantity</li><li>ResourceName &#x3D;&gt; ResourceName</li></ul></li><li>Resource Collected 的 Add Child<ul><li>Content &#x3D;&gt; Create Widget 的 Return Value</li></ul></li></ul></li></ul><p>OPEN SurvivalGamePC</p><ul><li>创建 自定义事件 ShowItemWidget 运行在客户端中，防止作弊<ul><li>Inputs<ul><li>ResourceImage Texture2D 对象引用</li><li>ResourceQuantity int</li><li>ResourceName Text</li></ul></li><li>Main Widget Ref 的 Show Item Collected<ul><li>ResourceImage &#x3D;&gt; ResourceImage</li><li>ResourceQuantity &#x3D;&gt; ResourceQuantity</li><li>ResourceName &#x3D;&gt; ResourceName</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>HarvestItemFunction 中 AddItemOnServer 后<ul><li>获取 控制器 的 SurvivalGamePCRef<ul><li>Show Item Widget<ul><li>ResourceImage &#x3D;&gt; LocalOutRow 的 ItemImage</li><li>ResourceQuantity &#x3D;&gt; LocalQuantity</li><li>ResourceName &#x3D;&gt; LocalOutRow 的 ItemName</li></ul></li></ul></li></ul></li></ul><p>运行后 砍树收获木头，会在右上角显示收获的物品，但是控件没有自动消失<br>OPEN W_ItemAdded</p><ul><li>增加 动画 Animations FadeOut <ul><li>增加 轨道 Track ResourceWindow<ul><li>增加 Track Render Opacity 渲染不透明度<ul><li>增加 关键帧 0s 2s 3s</li><li>在第三帧 3s 的时候 透明度 0</li></ul></li><li>打开 图示<ul><li>Event Construct 创建控件之后<ul><li>Fade Out 的 播放动画 Play Animation<ul><li>Num Loops To Play 1</li><li>Playback Speed 1</li></ul></li><li>绑定到完成的动画 [Bind To Animation Finished] <ul><li>Delegate 绑定 创建 自定义事件 DestroySelf<ul><li>Remove from Parent</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>检查 W_MainWidget 中 Resourceicon 要绑定 ResourceImage</li></ul><p>运行测试</p><p><strong>整体思路</strong><br>鼠标左键</p><ul><li>BP_FirstPersonCharacter 事件 LeftMouseOnServer 在服务器中运行<ul><li>处理 第三人称 可装备的物品<ul><li>通过 Char Ref 获取 第三人称装备的物品 并且执行 对应的 UseItemInterface</li></ul></li></ul></li><li>BP_TP_Hatchet 事件 UseItemInterface<ul><li>处理正在挥手</li><li>第一人称蒙太奇动画<ul><li>BP_FirstPersonCharacter 事件 MontageOnClient 播放蒙太奇，结束</li></ul></li><li>第三人称蒙太奇动画<ul><li>BP_FirstPersonCharacter 事件 ThirdPersonMontage</li><li>BP_FirstPersonCharacter 事件 MontageMulticast 所有机器上执行</li><li>BP_FirstPersonCharacter 事件 NotifyInterface<ul><li>BP_TP_Hatchet 事件 NotifyInterface 客户端中运行</li><li>BP_TP_Hatchet 事件 GetRotationClient 客户端中运行</li><li>BP_TP_Hatchet 事件 ServerOverlap 服务器中运行</li><li>BP_TP_Hatchet 事件 Harvest Foliage<ul><li>判断血量</li><li>指定收货物品 DT_LargeItemResources 木头 数量 3</li><li>BP_FirstPersonCharacter 事件 HarvestItemOnServer 收获物品 <ul><li>BP_FirstPersonCharacter 事件 HarvestItemFunction 收获物品<ul><li>BPC_ItemsContainer 事件 AddItemOnServer 添加物品</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="37-使用斧头砍树，当树木被砍倒时，树木消失，显示树木的倒下动画"><a href="#37-使用斧头砍树，当树木被砍倒时，树木消失，显示树木的倒下动画" class="headerlink" title="37 使用斧头砍树，当树木被砍倒时，树木消失，显示树木的倒下动画"></a>37 使用斧头砍树，当树木被砍倒时，树木消失，显示树木的倒下动画</h4><p>OPEN FirstPersonMap</p><ul><li>删除 不相关的东西</li></ul><p>OPEN BP_DestructableHarvestable 事件图</p><ul><li>类默认设置 关闭 Tick,启用复制</li><li>增加 变量 Direction Vector<ul><li>勾选 Instance Editable&#x2F;Expose On Spawn</li></ul></li></ul><p>为 BP_DestructableHarvestable 添加蓝图子类 BP_DestroyableTree 移动到 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;Destructables 目录中<br>OPEN BP_DestroyableTree 事件图</p><ul><li>增加 胶囊碰撞[Capsule Collision]<ul><li>增加静态网格 下面在添加资源</li><li>Scale 1 1 9</li><li>物理 Physics<ul><li>模拟物理 Simulate Physics 开启</li><li>Mass in KG 2000</li></ul></li><li>Location 0 0 402 跟树一样的高度<ul><li>1 <ul><li>位置 -0.000005 60 40</li><li>旋转 -70 0 0</li><li>缩放 1 1 0.1</li></ul></li><li>2<ul><li>位置 -0.000005 -60 40</li><li>旋转 70 0 0</li><li>缩放 1 1 0.1</li></ul></li><li>3….. 手动调整，数值算不过来</li></ul></li><li>在树顶部 创建四个 胶囊碰撞，分布四周，尾部低一些</li></ul></li><li>静态网格<ul><li>资源 Palm_02</li></ul></li><li>事件图<ul><li>Event Begin Play<ul><li>Switch Has Authority</li><li>AddForce 方法</li></ul></li><li>增加局部变量 Force float 1500</li><li>增加 方法 AddForce 增加一些力，让树倒在角色对面<ul><li>指向 Add Force(Capsule)<ul><li>目标是 Capsule</li><li>Force &#x3D;&gt; Direction * Force</li><li>勾选 Accel Change</li></ul></li></ul></li></ul></li></ul><p>OPEN BP_TP_Hatchet 事件图</p><ul><li>在方法 收获树叶 HarvestFoliage 的 判断 当前血量 &lt;&#x3D; 0 时，调用<ul><li>获取数据表行 Get Data Table Row DT_largeItemResources<ul><li>Data Table &#x3D;&gt; DT_LargeItemResources</li><li>Row Name &#x3D;&gt; Get Large Item Ref 的 Get Class 的 Get Class Name</li><li>Output Row<ul><li>设置本地变量 LocalDestructClass 类引用</li><li>Break S_LargeItem<ul><li>Class &#x3D;&gt; 设置局部变量 LocalDestructClass</li></ul></li></ul></li></ul></li><li>Get Large Item Ref 的 Get Actor Transform</li><li>Return Value 设置局部变量 LocalTransform</li><li>Get Large Item Ref 的 Destroy Actor</li><li>SpawnActor<ul><li>Class &#x3D;&gt; LocalDestructClass Break S_LargeItem 的 Class</li><li>Transform &#x3D;&gt; LocalTransform</li><li>Direction &#x3D;&gt; Char Ref &#x3D;&gt; Get Actor Forward Vector</li></ul></li></ul></li></ul><p>创建文件夹</p><ul><li>PalmTress 目录 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;Destructables 下</li></ul><p>为 BP_DestroyableTree 添加蓝图子类 BP_PalmDestMaster 移动到 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;Destructables 目录中<br>为 BP_PalmDestMaster 添加蓝图子类 BP_PalmDest02 移动到 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;Destructables&#x2F;PalmTress 目录中<br>OPEN DT_LargeItemResources 修改 BP_PalmDest02_C 的 Class 为 BP_PalmDest02</p><p>运行后 可以砍树 倒树了，但是倒树后，树还在</p><p>OPEN Palm_02</p><ul><li>设置 Collision Presets &#x3D; NoCollision</li></ul><p>OPEN BP_DestroyableTree 事件图</p><ul><li>设置 <code>静态网格</code> Collision Presets &#x3D; NoCollision</li><li>设置 <code>所有的 碰撞体</code> Collision Presets &#x3D; BlockALl</li><li>设置 <code>所有的 碰撞体</code> 物理 Mass 400，营造出头重脚轻</li></ul><p>OPEN Palm_02</p><ul><li>查看角度 Simple 碰撞</li><li>remove 碰撞</li><li>增加 胶囊简化碰撞<ul><li>R 键 缩小</li><li>移动</li><li>调整角度</li></ul></li></ul><p>OPEN BP_DestroyableTree 事件图</p><ul><li>设置 <code>静态网格</code> Collision Presets &#x3D; BlockAllDynamic</li></ul><p>下面设置可以穿过这棵树<br>OPEN BP_DestroyableTree 事件图</p><ul><li>设置 <code>所有的 碰撞体</code> 碰撞预设 自定义 Pawn Overlap 勾选</li><li>设置 <code>静态网格</code> 碰撞预设 自定义 Pawn Overlap 勾选</li></ul><p>设置树倒下的动画和延时销毁效果<br>OPEN BP_DestroyableTree 事件图</p><ul><li>确保 <code>所有的 碰撞体</code> Object Type &#x3D; PhysicsBody</li></ul><p>OPEN BP_DestructableHarvestable 事件图</p><ul><li>设置 Direction 变量 复制为 Replicated</li></ul><p>OPEN BP_DestroyableTree 事件图</p><ul><li>Authority 和 Remote 都链接 Add Force</li><li>事件开始运行 方法 的 AddForce后</li><li>Delay 3s<ul><li>完成后 Destroy Actor</li></ul></li></ul><h4 id="38-相互移动-快捷栏和背包的物品"><a href="#38-相互移动-快捷栏和背包的物品" class="headerlink" title="38 相互移动 快捷栏和背包的物品"></a>38 相互移动 快捷栏和背包的物品</h4><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>OnSlotDropOnServer 方法 兼容一下 BPC_Player_Hotbar<ul><li>换掉 <code>2个 Select</code>， 之前的select是 BPC_Player_Inventory 对象引用</li><li>从 参数 拉取 TargetContainerType 的 Select 并且<code>先连接Select的Return Value==OnSlotDrop的目标</code><ul><li>就会变成 BPC_ItemsContainer 对象引用</li></ul></li><li>增加 BPC_Player_Hotbar 对象引用</li></ul></li></ul><p>OPEN BPC_PlayerHotbar 事件图</p><ul><li>重写方法 HandleSlotDrop<ul><li>删除父类方法</li><li>参数 FromContainer 提升为 局部变量 LocalFromContainer</li><li>参数 FromIndex 提升为 局部变量 LocalFromIndex</li><li>参数 DroppedIndex 提升为 局部变量 LocalDroppedIndex</li><li>LocalFromContainer 的 ContainerType -&gt; Switch</li><li>LocalFromContainer 的 Transform Item<ul><li>接受 Switch 的 PlayerInventory和PlayerHotbar</li><li>Target -&gt; LocalFromContainer</li><li>To Component -&gt; self</li><li>To Specific Index -&gt; LocalDroppedIndex</li><li>ItemIndexToTranfser -&gt; LocalFromIndex</li></ul></li><li>Return Node</li></ul></li><li>重写方法 AddItemToIndex<ul><li>继承父类方法，继续往下处理</li><li>拥有者的 Get Controller from Char</li><li>上一个的 Controller Ref 的 UpdateItemSlot<ul><li>Target -&gt; Controller Ref</li><li>ContainerType -&gt; ContainerType</li><li>Index 参数的 Index</li><li>ItemInfo？？？？</li></ul></li><li>Return Node</li></ul></li><li>重写方法 RemoveItemByIndex<ul><li>和上面一样</li></ul></li></ul><p>OPEN BPC_PlayerInventory 事件图</p><ul><li>HandleSlotDrop<ul><li>Transfer Item 中接受多一个 PlayerHotbar</li></ul></li></ul><p>OPEN W_ItemContainerGrid</p><ul><li>方法 AddSlots 中 要区分一下 ContainerType，然后传递给后方<ul><li>末尾(Add Slot To Grid方法后) 设置 变量 ContainerType<ul><li>设置 新增网格内布的 Item 的 ContainerType</li></ul></li></ul></li></ul><p>OPEN W_InventorySlot </p><ul><li>On Drop 方法，将TargetContainer 用 ContainerType动态替换，之前是写死的</li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>可装备的物品Comment</li><li>创建 自定义事件 DequipCurrentItemOnServer<ul><li>Inputs<ul><li>Index int</li></ul></li><li>判断 Index &#x3D;&#x3D; 变量 EquippedIndex<ul><li>ThirdPersonEquippedItem 右键 获取有效的第三人称装备物品</li><li>销毁 Actor 连接 ThirdPersonEquippedItem</li><li>DequipWeaponThirdPerson</li><li>DequipWeaponFirstPerson</li></ul></li></ul></li></ul><p>OPEN BPC_PlayerHotbar</p><ul><li>方法 RemoveItemByIndex 后面跟</li><li>拥有者的 Get Controller from Char<ul><li>执行 Controller Ref 的 RemoveItemFromHotbar<ul><li>Index &#x3D;&gt; 参数 Index</li><li>ContainerType &#x3D;&gt; 参数 ContainerType</li></ul></li></ul></li><li>拥有者的 Get Survival Char Ref<ul><li>执行 Survival Char Ref 的 DequipCurrentItemOnServer<ul><li>Index &#x3D;&gt; 参数 Index</li></ul></li></ul></li><li>Return Node</li></ul><p>运行 测试 拖动物品从快捷栏到背包，可以卸下物品了</p><h3 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h3><h4 id="39-amp-40-树倒下后延时溶解销毁"><a href="#39-amp-40-树倒下后延时溶解销毁" class="headerlink" title="39 &amp; 40 树倒下后延时溶解销毁"></a>39 &amp; 40 树倒下后延时溶解销毁</h4><p>OPEN M_PalmMaster</p><ul><li>M_PalmMaster<ul><li>选中 M_PalmMaster 混合模式 Blend Mode 为 Masked 遮罩</li></ul></li><li>创建 Texture Sample<ul><li>Texture 纹理设置 T_noise01 如果没有，因为是引擎的，所以需要在 <code>文件夹视图中 点击 设置 显示引擎内容</code></li><li>RGB <ul><li>Add <ul><li>B <ul><li>创建 Constant<ul><li>转换为参数 Convert to Parameter</li><li>Rename Dissolve</li><li>Default 1</li></ul></li></ul></li><li>A<ul><li>创建 Constant<ul><li>转换为参数 Convert to Parameter</li><li>Rename Contrast</li><li>Default 50</li></ul></li></ul></li></ul></li><li>A连接 创建 CheapContrast<ul><li>连接两个 Contrast</li><li>Result 连接到 M_PalmMaster 的 Opacity Mask</li></ul></li></ul></li></ul></li></ul><p>OPEN M_Palm01</p><ul><li>Global Scalar Parameter Values<ul><li>Dissolve </li><li>Contrast 会用到它</li></ul></li></ul><p>OPEN M_PalmLeaf</p><ul><li>创建 Texture Sample<ul><li>原来的(黑白的、连接了不透明蒙版) Texture Sample RGB 指向创建<ul><li>创建 Lerp[LinearInterpolate]</li></ul></li><li>RGB再指向 Leap 的 B<ul><li>最后输出到 M_PalmLeaf 的 Opacity Mask</li></ul></li></ul></li><li>Texture 纹理设置 T_Noise01<ul><li>RGB <ul><li>Add<ul><li>A<ul><li>连接 RGB</li></ul></li><li>B <ul><li>创建 Constant<ul><li>转换为参数 Convert to Parameter</li><li>Rename Dissolve</li><li>Default 1</li><li>连接第二条线到 Lerp 的 Alpha</li></ul></li></ul></li><li>Return 连接到 Lerp 的 A</li></ul></li></ul></li></ul></li></ul><p>右键文件 M_PalmLeaf 创建 材质实例</p><ul><li>Rename M_PalmLeaf_Inst</li></ul><p>选中 P_Palm01&#x2F;02&#x2F;03&#x2F;04&#x2F;05 右键 编辑</p><ul><li>全部修改 Element4 为 M_PalmLeaf_Inst</li></ul><p>开始写溶解的逻辑</p><p>OPEN BP_PalmDestMaster 事件图</p><ul><li>Event 开始播放 - Parent BeginPlay</li><li>Delay 10s</li><li>将组件的 静态网格 拖入事件图 创建动态材料 Create Dynamic Material Instance<ul><li>Target &#x3D;&gt; 静态网格</li><li>Material &#x3D;&gt; M_Palm01</li><li>因为 静态网格材料有多个，所以需要 循环多次</li><li>Return Value 设置静态变量 Mat0</li></ul></li><li>再次 Static Mesh</li><li>再次 创建动态材料 Create Dynamic Material Instance<ul><li>Target &#x3D;&gt; 静态网格</li><li>Material &#x3D;&gt; M_Palm02</li><li>因为 静态网格材料有多个，所以需要 For</li><li>Return Value 设置静态变量 Mat2</li></ul></li><li>再次 Static Mesh</li><li>再次 创建动态材料 Create Dynamic Material Instance<ul><li>…</li></ul></li><li>再次 Static Mesh</li><li>再次 创建动态材料 Create Dynamic Material Instance<ul><li>…</li></ul></li><li>再次 Static Mesh</li><li>再次 创建动态材料 Create Dynamic Material Instance<ul><li>… 6个，第四个材质选择 M_PalmLeaf_Inst</li></ul></li><li>add Timeline<ul><li>取消 Play 接线，使用<code>Play from start</code>接线</li><li>Rename FadeWay</li><li>Length 5s</li><li>增加浮点型轨道 rename float_0<ul><li>t0 1</li><li>t5 -1 </li><li>选中两个关键帧，右键设置为自动</li></ul></li></ul></li><li>Timeline 的 update &#x3D;&gt; Mat0 然后 设置标量参数值[Set scalar parameter value]<ul><li>Target &#x3D;&gt; 变量 Mat0&#x2F;1&#x2F;2&#x2F;3&#x2F;4&#x2F;5</li><li>Timeline &lt;&#x3D;&gt; float_0 </li><li>Parameter Name &#x3D; Dissolve</li></ul></li><li>Timeline 的 Finished &#x3D;&gt; Static Mesh 的 Set Visibility</li></ul><p>可以通过如下设置树的销毁时间<br>OPEN BP_DestroyableTree 事件图</p><ul><li>事件图 的 Delay 10s </li><li>类默认设置 初始寿命 Initial Life Span 0</li></ul><h4 id="41-创建石镐以及相关文件"><a href="#41-创建石镐以及相关文件" class="headerlink" title="41 创建石镐以及相关文件"></a>41 创建石镐以及相关文件</h4><p>下载资源 </p><ul><li>导入 .jpg 石镐贴图 到 _Main&#x2F;Widgets&#x2F;Textures&#x2F;ItemIcons 目录中</li><li>导入 .FBX 文件 <code>材质导入方式 设置为 不创建材料</code> 到 _Main&#x2F;Meshes&#x2F;Equipables 目录中</li><li>导入 .png 文件 到 _Main&#x2F;Meshes&#x2F;Equipables&#x2F;Materials 目录中<ul><li>创建材质<ul><li>Rename M_StonePickMaster<ul><li>双击进入编辑</li><li>创建 Texture Sample Parameter2D<ul><li>Rename BaseColor</li><li>RGB 创建 Multiply<ul><li>Return Value 连接到 核心的 Base Color</li><li>B 创建 Vector Parameter<ul><li>Rename Tint 0 0 0 0</li></ul></li></ul></li></ul></li><li>创建 Texture Sample Parameter2D<ul><li>Rename NormalMap</li><li>设置材质文件 DefaultNormal</li><li>连接到 核心的 Normal</li></ul></li></ul></li><li>右键文件 M_StonePickMaster 创建材质实例 M_StonePick01</li><li>右键文件 M_StonePickMaster 创建材质实例 M_StonePick02</li><li>右键文件 M_StonePickMaster 创建材质实例 M_StonePick03</li><li>编辑三个实例文件<ul><li>第一个实例文件 参数<ul><li>BaseColor 设置为 pickaxe_lowpoly_002_Material_001_BaseMap</li><li>NormalMap 设置为 pickaxe_lowpoly_002_Material_001_NorMal</li><li>Tint 中间偏上左一点点的灰色 1&#x2F;12 1&#x2F;2 处</li></ul></li><li>第二个实例文件 参数<ul><li>BaseColor 设置为 pickaxe_lowpoly_002_Material_002_BaseMap</li><li>NormalMap 设置为 pickaxe_lowpoly_002_Material_002_NorMal</li><li>Tint 正中间的白色 通过右边直接划到最顶上</li></ul></li><li>第三个实例文件 参数<ul><li>BaseColor 设置为 pickaxe_lowpoly_002_Material_BaseMap</li><li>NormalMap 设置为 pickaxe_lowpoly_002_Material_NorMal</li><li>Tint 棕色 右上角滑块 第一个 2&#x2F;3处  第二个1&#x2F;8处</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN StonePickaxe 静态网格体</p><ul><li>设置三个材质元素<ul><li>0 M_StonePick02</li><li>0 M_StonePick03</li><li>0 M_StonePick01</li></ul></li></ul><p>创建文件夹 Pickaxe 目录 _Main&#x2F;Blueprints&#x2F;Items&#x2F;Equipables&#x2F;Tools 目录中<br>为 BP_TP_Hatchet 添加蓝图子类 BP_TP_StonePickaxe 移动到 _Main&#x2F;Blueprints&#x2F;Items&#x2F;Equipables&#x2F;Tools&#x2F;Pickaxe 目录中<br>为 BP_FP_Hatchet 添加蓝图子类 BP_FP_StonePickaxe 移动到 _Main&#x2F;Blueprints&#x2F;Items&#x2F;Equipables&#x2F;Tools&#x2F;Pickaxe 目录中</p><p>OPEN BP_TP_StonePickaxe</p><ul><li>设置 静态网格 Static Mesh 为 StonePickaxe</li></ul><p>OPEN BP_FP_StonePickaxe</p><ul><li>设置 静态网格 Static Mesh 为 StonePickaxe</li></ul><p>为 石镐 增加 数据表信息<br>OPEN DT_Items</p><ul><li>新增行<ul><li>ID 3</li><li>数量1</li><li>icon图 StonePickaxe</li><li>ItemName 石镐</li><li>ItemDescription 一把能够碎石的石镐</li><li>ItemClassRef BP_TP_StonePickaxe</li><li>ItemType Equipment</li><li>ItemCurHp 100</li><li>ItemMaxHp 100</li><li>伤害 100</li></ul></li></ul><p>增加R快捷键 添加一个石镐到快捷栏<br>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>Get Data Table Row<ul><li>Row Name 3</li></ul></li></ul><p>运行测试，可以在快捷栏中添加石镐了，但是 石镐没有图片 以及 手持的石镐没有显示</p><ul><li>没有设置图片是因为 图片没有保存，全部保存</li><li>手持的石镐没有显示是因为 没有设置 穿戴信息</li></ul><p>OPEN BP_TP_StonePickaxe</p><ul><li>类默认设置 穿戴信息<ul><li>SocketName 为 ToolSocket</li><li>ThirdPersonEquipClass BP_FP_StonePickaxe</li></ul></li></ul><p>OPEN BP_FP_StonePickaxe</p><ul><li>类默认设置 穿戴信息<ul><li>SocketName 为 ToolSocket</li><li>ThirdPersonEquipClass BP_FP_StonePickaxe</li></ul></li></ul><h4 id="42-重写石镐的收获逻辑"><a href="#42-重写石镐的收获逻辑" class="headerlink" title="42 重写石镐的收获逻辑"></a>42 重写石镐的收获逻辑</h4><p>创建 蓝图枚举 E_ToolTier 在 _Main&#x2F;Blueprints&#x2F;Enums 目录中</p><ul><li>Stone 含义：石头</li><li>Iron 含义：铁</li></ul><p>创建 蓝图枚举 E_HarvestingToolType 在 _Main&#x2F;Blueprints&#x2F;Enums 目录中</p><ul><li>Pickaxe 含义：石镐</li><li>Hatchet 含义：斧头</li></ul><p>使用枚举<br>OPEN S_ResourceStructure</p><ul><li>add PreferredToolType E_HarvestingToolType 首选工具类型</li></ul><p>这时 也需要修改 S_LargeItem 的 GivenItems<br>OPEN S_LargeItem</p><ul><li>设置 GivenItems S_ResourceStructure</li></ul><p>OPEN DT_LargeItemResources</p><ul><li>修改 BP_PalmDest02_C 的 <ul><li>ResourceId 为 1</li><li>Quantity 为 3</li><li>PreferredToolType 为 Hatchet</li></ul></li></ul><p>OPEN BP_TP_Hatchet 事件图</p><ul><li>增加 变量 ToolType E_HarvestingToolType</li><li>增加变量 ToolTier E_ToolTier</li><li>HarvestFoliage 方法<ul><li>For Each Loop 循环 的 Array Element 导出为 Break 拆分 S_ResourceStructure<ul><li>PreferredToolType 导出 相等（枚举） ToolType &#x3D;&#x3D; PreferredToolType 链接下方的 选择浮动的 Pick A</li><li>添加数学表达式 [Add Math Expression] (((BaseVar * Rate) * ToolTypeVar) * ToolTierVar) * DamageVar 描述：BaseVar数量 * Rate配置文件中的服务器速率<ul><li>BaseVar &#x3D;&gt; Break S_ResourceStructure 的 Quantity</li><li>Rate 配置文件中的服务器速率现在设置1</li><li>ToolTypeVar &#x3D;&gt; 拖动创建 范围内随机浮点  select flot<ul><li>范围内随机浮点 [Random float in range] 作为A<ul><li>Min 0.2</li><li>Max 0.4</li></ul></li><li>范围内随机浮点 [Random float in range] 作为B<ul><li>Min 0.01</li><li>Max 0.1</li></ul></li></ul></li><li>ToolTierVar &#x3D;&gt; 拖动创建 选择 select<ul><li>Index A 链接 变量 ToolTier</li><li>范围内随机浮点 [Random float in range] 作为 Stone<ul><li>Min 0.8</li><li>Max 1.2</li></ul></li><li>范围内随机浮点 [Random float in range] 作为 Lron<ul><li>Min 1.2</li><li>Max 1.6</li></ul></li></ul></li><li>DamageVar 链接 局部变量 LocalDamage</li><li>Return Value Truncate 作为整数</li><li>作为整数 并且 设置本地变量 LocalResourceQuantity</li></ul></li><li>HarvestItemOnServer 的 Resource 拖动创建资源结构 Make S_ResourceStructure<ul><li>ResourceId &#x3D;&gt; Break S_ResourceStructure 的 ResourceId</li><li>Quantity &#x3D;&gt; LocalResourceQuantity</li></ul></li></ul></li></ul></li></ul><p>增加斧头砍树能收货更多木头的逻辑<br>因为运算公式中包含了 首选工具类型，所以自动适配了斧头和石镐<br>OPEN BP_TP_StoneHatchet 事件图<br>可装备信息</p><ul><li>ToolType 为 Hatchet</li><li>ToolTier 为 Stone</li></ul><p>注意事项：</p><ul><li>梳理 斧头 和 石镐 的 首选武器类型，两个都应该在子类设置</li></ul><p>最后检查：<br>DT_Items</p><ul><li>斧头 视频是 BP_TP_StoneHatchet</li><li>石镐 视频是 BP_TP_StonePickaxe</li></ul><p>BP_EquipableMaster</p><ul><li>GetEquipableRef 对自身引用</li></ul><p>BP_FirstPersonCharacter</p><ul><li>第一人称静态网格 拥有者不可见</li><li>第三人称静态网格 仅拥有者可见</li><li>事件图<ul><li>生成 Actor 后 要设置拥有者为 self 也就是 BP_FirstPersonCharacter 这样网格设置的不可见才有效</li><li>第一人称生成Actor+</li><li>第三人称生成Actor+</li></ul></li></ul><p>斧头 和 石镐 的父类 BP_TP_Hatchet</p><ul><li>拥有者不可见</li></ul><p>斧头 和 石镐 的父类 BP_TP_Hatchet</p><ul><li>仅拥有者可见</li></ul><p>Hatchet</p><ul><li>BP_FP_StoneHatchet<ul><li>SocketName 为 ToolSocket</li><li>ThirdPersonEquipClass 不设置</li></ul></li><li>BP_TP_StoneHatchet 静态网格<ul><li>拥有者不可见</li><li>FirstPersonEquipClass  BP_FP_StoneHatchet</li></ul></li></ul><p>Pickaxe</p><ul><li>BP_FP_StonePickaxe<ul><li>SocketName 为 ToolSocket</li><li>ThirdPersonEquipClass 不设置</li></ul></li><li>BP_TP_StonePickaxe 静态网格<ul><li>拥有者不可见</li><li>FirstPersonEquipClass  BP_FP_StonePickaxe</li></ul></li></ul><h4 id="43-石头碎裂效果"><a href="#43-石头碎裂效果" class="headerlink" title="43 石头碎裂效果"></a>43 石头碎裂效果</h4><p>岩石可破坏类</p><p>创建目录 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;ChildClasses&#x2F;LargeItemClasses</p><p>为 BP_LargeItemMaster [搜索文件名] 创建蓝图子类 BP_Rock 移动到 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;ChildClasses&#x2F;LargeItemClasses 目录中</p><p>添加 虚幻引擎资源 Get Content &#x3D;&gt; Quixel Bridge &#x3D;&gt; 3D Assets ，下载完之后会出现文件夹</p><ul><li>关键词：beach bolder</li><li>中等质量下载</li></ul><p>OPEN BP_Rock</p><ul><li>设置 静态网格 S_Beach_Boulder_ukopeijs_lod3_Var1</li></ul><p>创建目录 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;ChildClasses&#x2F;LargeItemClasses&#x2F;Rocks<br>为 BP_Rock 创建蓝图子类 BP_BeachRock01 </p><ul><li>移动到 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;ChildClasses&#x2F;LargeItemClasses&#x2F;Rocks 目录中</li></ul><p>OPEN DT_LargeItemResources</p><ul><li>新增行<ul><li>Row Mame BP_BeachRock01_C</li><li>GivenItems<ul><li>Index[0]<ul><li>ResourceId 4</li><li>Quantity 3</li><li>PreferredToolType Pickaxe</li></ul></li><li>Index[1]<ul><li>ResourceId 5</li><li>Quantity 1</li><li>PreferredToolType Pickaxe</li></ul></li></ul></li></ul></li></ul><p>OPEN DT_Items</p><ul><li>新增行<ul><li>ID 4</li><li>数量1</li><li>icon图 tex_stone_09_b</li><li>ItemName 石头</li><li>ItemDescription 一块石头</li><li>ItemClassRef None</li><li>ItemType Resource</li><li>可堆叠</li><li>堆叠数量 100</li><li>ItemRarity Common</li></ul></li><li>新增行<ul><li>ID 5</li><li>数量1</li><li>icon图 tex_stone_07_b</li><li>ItemName 铁矿</li><li>ItemDescription  一块铁矿</li><li>ItemClassRef None</li><li>ItemType Resource</li><li>可堆叠</li><li>堆叠数量 100</li><li>ItemRarity Common</li></ul></li></ul><p>为 BP_DestructableHarvestable 添加蓝图子类 BP_DestructableRock<br>OPEN BP_DestructableRock</p><ul><li>添加组件 几何体集 [Geometry Collection]</li></ul><p>Map中 添加 S_Beach_Boulder_ukopeijs_lod3_Var1</p><ul><li>选择 爆裂模式 Fracture Shift+6</li><li>创建一个 几何集合<ul><li>目录：_Main&#x2F;Meshes&#x2F;DestructableMeshes 右键先创建</li></ul></li><li>点击统一<ul><li>Min Voronoi Sites 20</li><li>Max Voronoi Sites 20</li></ul></li><li>然后从map中删除，因为已经创建了几何集合文件</li></ul><p>OPEN BP_DestructableRock</p><ul><li>几何体集 [Geometry Collection]<ul><li>设置 混沌物理 其他集 S_Beach_Boulder_ukopeijs_lod3_Var1_GeometryCollection 几何体集文件</li></ul></li></ul><p>增加力量，让石头碎开</p><p>创建蓝图类 破坏类 fieldSystemActor BP_DestructionForce 移动到 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;Destructables 目录中<br>OPEN it 增加力量</p><ul><li>增加组件 径向衰减 [Radial Falloff]</li><li>增加组件 Sphere Collision</li><li>事件图 Event BeginPlay</li><li>Field System 组件的 添加临时场 [Add Transient Field]<ul><li>Enable Field 勾选</li><li>Physics Type &#x3D;&gt; 外部张力 [External Strain]</li><li>Field Node &#x3D;&gt; 组件 Radial Falloff 的 Set Radial Falloff 的 Return Value<ul><li>Field Magnitude &#x3D;&gt; 500000</li><li>Sphere Radius &#x3D;&gt; Sphere 的 Get Scaled Sphere Radius 的 Return Value</li><li>Center Position &#x3D;&gt; Sphere 的 Get World Location 的 Return Value</li></ul></li></ul></li><li>延迟 2s</li><li>Destroy Actor</li></ul><p>OPEN BP_DestructableRock</p><ul><li>Event BeginPlay</li><li>创建 Actor [Spawn Actor]<ul><li>Class &#x3D;&gt; BP_DestructionForce</li><li>Transform &#x3D;&gt; 右键 拆分引脚 后的 <code>Spawn Transform Location</code> FROM <code>Get Actor Location </code></li></ul></li><li>延迟 8s</li><li>Destroy Actor</li></ul><p>创建文件夹 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;Destructables&#x2F;Rocks<br>为 BP_DestructableRock 创建蓝图子类 BP_BeachRockDest01 移动到 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;Destructables&#x2F;Rocks 目录中</p><p>OPEN DT_LargeItemResources</p><ul><li>设置 BP_BeachRock01_C 的<ul><li>Class BP_BeachRockDest01</li></ul></li></ul><p>Map 中 拖入 BP_BeachRock01，石镐破坏石头，一直提示没有击中，因为没有设置碰撞</p><p>OPEN S_Beach_Boulder_ukopeijs_lod3_Var1  注意 <code>不是几何体集文件</code></p><ul><li>碰撞<ul><li>增加 26DOP 简单碰撞</li></ul></li></ul><p>OPEN BP_Rock</p><ul><li>静态网格 碰撞 </li><li>碰撞预设 自定义</li><li>Object Type Structure</li></ul><p>这里保存之后可能无法刷新map中石头的属性，所以需要重新打开一下map或者删除石头重新拖入</p><p>因为 BP_TP_Hatchet 中 ServerOverlap方法中 只重叠了 Structure 的碰撞，所以设置好之后 就可以重叠了</p><p>运行，重试，发现掉落的物品 有0数量的</p><p>OPEN BP_TP_Hatchet 收获逻辑中 加判断</p><ul><li>如果当前数量&lt;&#x3D; 0 则不收获</li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>发送石镐</li></ul><p>运行，重试，发现掉落的物品 会卡主角色</p><p>OPEN BP_DestructableRock</p><ul><li>碰撞 自定义碰撞<ul><li>Pawn 设置 Overlap 重叠</li></ul></li></ul><p>运行，重试，发现角色会穿过 树 和石头<br>OPEN BP_FirstPersonCharacter</p><ul><li>碰撞 自定义碰撞<ul><li>Structure 设置 Block 阻止</li></ul></li></ul><p>运行，重试，石头不碎了</p><p>OPEN BP_DestructableForce</p><ul><li>Sphere<ul><li>变换 Scale 缩放 2 2 2  <code>球体zxy方向放大2倍</code></li></ul></li></ul><p>OPEN BP_DestructableRock</p><ul><li>Geometry Collection<ul><li>混沌物理 [Chaos Physics]<ul><li>Clustering</li><li>集群分组损坏阈值 [Cluster GroupingDamage Threshold]<ul><li>5000</li><li>500</li><li>50</li></ul></li></ul></li><li>碰撞 自定义碰撞<ul><li>Pawn Overlap 重叠</li><li>Structure Ignore 忽略</li></ul></li></ul></li></ul><p>问题：<br>涉及到石头碎裂程度的地方有：</p><ul><li>BP_DestructableForce<ul><li>Sphere<ul><li>缩放</li></ul></li></ul></li><li>BP_DestructableRock<ul><li>Geometry Collection<ul><li>混沌物理 [Chaos Physics]<ul><li>Clustering</li><li>集群分组损坏阈值 [Cluster GroupingDamage Threshold] <code>这里还有问题，调大调小没有效果</code><ul><li>5000</li><li>500</li><li>50</li></ul></li></ul></li></ul></li><li>设置径向衰减 [Radial Falloff]<ul><li>Field Magnitude &#x3D;&gt; 500000</li></ul></li></ul></li></ul><p>但是修改了一些参数没效果，后期不上 TODO FIXME</p><h4 id="44-灌木丛UI、拾取逻辑以及拾取动作"><a href="#44-灌木丛UI、拾取逻辑以及拾取动作" class="headerlink" title="44 灌木丛UI、拾取逻辑以及拾取动作"></a>44 灌木丛UI、拾取逻辑以及拾取动作</h4><p>添加 虚幻引擎资源 Get Content &#x3D;&gt; Quixel Bridge &#x3D;&gt; 3D Plants ，下载完之后会出现文件夹</p><ul><li>关键词：tropical palm Fresh Healthy 灌木丛  特征：叶子最大 三个叶子</li><li>中等质量下载</li></ul><p>OPEN BP_FirstPersonCharacter 事件图<br>增加 E 键 拾取逻辑</p><ul><li>E key<ul><li>InteractOnServer</li></ul></li><li>创建 自定义事件 服务器上运行 InteractOnServer<ul><li>OverlapGroundItems(重叠地面上的物品)</li></ul></li><li>创建 自定义事件 服务器上运行 OverlapGroundItems<ul><li>球体 重叠 Actors [Sphere Overlap Actors]<ul><li>Sphere Pos &#x3D;&gt; Get Actor Location</li><li>Object Type &#x3D;&gt; Make Array [0] WorldStatic 只和 WorldStatic 的进行重叠</li><li>Actors to Ignore &#x3D;&gt; Make Array [0] self 忽略第三人称的 Actor</li></ul></li><li>Draw Debug Sphere<ul><li>Location &#x3D;&gt; Get Actor Location 在当前的Actor的位置</li><li>Radius &#x3D;&gt; 70</li><li>Line Color &#x3D;&gt; 红色</li><li>Duration &#x3D;&gt; 3</li><li>Thickness &#x3D;&gt; 2</li></ul></li><li>判断 球体重叠Actors 的 Return Value<ul><li>打印 重叠 &#x2F; 没有重叠</li></ul></li></ul></li></ul><p>创建 文件夹 GroundItemClasses 目录 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;ChildClasses 下 放置 岩石、地面</p><p>OPEN BP_GroundItemMaster</p><ul><li>创建 静态网格 <ul><li>设置 静态网格 S_Tropical_Palm_rkqjj_Var1_lod1</li></ul></li><li>增加变量 Health float <ul><li>默认值 50</li></ul></li><li>设置碰撞预设<ul><li>自定义</li><li>Object WorldStatic</li><li>Pawn Overlap 重叠</li></ul></li></ul><p>创建蓝图接口 BPI_GroundItem 目录 _Main&#x2F;Blueprints&#x2F;Interfaces 下<br>OPEN it</p><ul><li>创建方法 GetGroundItemRef<ul><li>Outputs<ul><li>Ref BP_Ground_Item_Master Object Reference</li></ul></li></ul></li></ul><p>OPEN BP_GroundItemMaster 增加接口</p><ul><li>类设置 BPI_GroundItem</li><li>双击 GetGroundItemRef<ul><li>对自身引用</li></ul></li></ul><p>为 BP_GroundItemMaster 创建子类 BP_TropicalBush01 移动到 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;ChildClasses&#x2F;GroundItemClasses 目录中</p><p>创建文件夹 TropicalBushes 目录 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;ChildClasses&#x2F;GroundItemClasses 目录中<br>移动 BP_TropicalBush01 到 TropicalBushes 目录中</p><p>为 资源 增加碰撞 S_Tropical_Palm_rkqjj_Var1_lod1  OPEN it</p><ul><li>碰撞 球体简单碰撞<ul><li>调小半径 tips:右上角小icon 选择 旋转右边的 缩放</li></ul></li></ul><p>Map 中 添加 BP_TropicalBush01 子类，运行测试，e键可以命中了</p><p>接下来，需要在地面上放置一些资源</p><p>OPEN DT_Items</p><ul><li>增加行 浆果<ul><li>RowName 6</li><li>ID 6</li><li>数量 1</li><li>icon图 tex_herbs_05_b</li><li>ItemName 浆果</li><li>ItemDescription 浆果，可以食用恢复血量</li><li>ItemClassRef None</li><li>可堆叠</li><li>堆叠数量 100</li></ul></li><li>增加行 叶子<ul><li>RowName 7</li><li>ID 7</li><li>数量 1</li><li>icon图 tex_herbs_06_b</li><li>ItemName 叶子</li><li>ItemDescription 一片叶子</li><li>ItemClassRef None</li><li>可堆叠</li><li>堆叠数量 100</li></ul></li></ul><p>创建 其他-数据表 PICK &#x3D;&gt; S_LargeItem 名字 DT_GroundResources  在 _Main&#x2F;DataTables 目录中</p><ul><li>新增行<ul><li>BP_TropicalBush01_C</li><li>GivenItems<ul><li>浆果<ul><li>ResourceId 6</li><li>Quantity 3</li><li>PreferredToolType Pickaxe</li></ul></li><li>叶子<ul><li>ResourceId 7</li><li>Quantity 1</li><li>PreferredToolType Pickaxe</li></ul></li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>创建 方法 HarvestGroundItem<ul><li>Inputs<ul><li>Ref Actor Object Reference</li></ul></li><li>GetGroundItemRef(Message) &#x3D;&gt; Ref</li><li>地面的物品 当前血量 扣减 15</li><li>判断 当前血量 &lt;&#x3D; 0<ul><li>false<ul><li>通过数据表 获取物品 Get Data Table Row<ul><li>Row Table &#x3D;&gt; DT_GroundResources</li><li>Row Name &#x3D;&gt; 物品的类名 [ Ref &#x3D;&gt; Get Class &#x3D;&gt; Get Class Display Name]</li><li>Out Row &#x3D;&gt; break 后 的 GivenItems(设置了两个物品) 设置局部变量 LocalGivenResources</li></ul></li><li>对GivenItems进行循环<ul><li>For Each Loop LocalGivenResources<ul><li>Array Element<ul><li>Break S_ResourceStructure<ul><li>ResourceId &#x3D;&gt; Array Element 的 ResourceId</li><li>Quantity &#x3D;&gt; Array Element 的 Quantity</li></ul></li></ul></li><li>数学表达式 [Math Expression] (BaseVar * RateVar) * RandomVar<ul><li>BaseVar &#x3D;&gt; Break S_ResourceStructure 的 Quantity</li><li>RateVar &#x3D;&gt; 1</li><li>RandomVar &#x3D;&gt; 范围内随机浮点 [Random float in range]<ul><li>Min 0.3</li><li>Max 1.2</li></ul></li><li>Return Value Truncate 作为整数</li><li>作为整数 并且 设置本地变量 LocalQuantity</li></ul></li></ul></li></ul></li><li>增加 LocalQuantity &lt;&#x3D;0 的判断</li><li>HarvestItemOnServer<ul><li>创建 S_ResourceStructure<ul><li>ResourceId &#x3D;&gt; Break S_ResourceStructure 的 ResourceId</li><li>Quantity &#x3D;&gt; LocalQuantity</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>角色 与 GroundItemMaster 重叠的灌木丛 Actor<ul><li>HarvestGroundItem <ul><li>Ref &#x3D; 重叠的 Actors &#x3D;&gt; copy</li></ul></li></ul></li></ul><p>OPEN FirstPersonMap 导入静态文件 S_Tropical_Palm_rkqjj_Var1_lod1</p><ul><li>选择 S_Tropical_Palm_rkqjj_Var1_lod1 后 Shift 6</li><li>创建几何集合<ul><li>目录：_Main&#x2F;Meshes&#x2F;DestructableMeshes 右键先创建</li><li>点击统一</li><li>生成后，右侧是 selected:100</li></ul></li><li>删除静态文件</li></ul><p>为 BP_DestructableHarvestable 添加蓝图子类 BP_GroundItemDestruct 在 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;Destructables 目录中</p><ul><li>增加组件 几何体集 [Geometry Collection]<ul><li>几何体 静态网格 S_Tropical_Palm_rkqjj_Var1_lod1_GeometryCollection</li><li>碰撞预设<ul><li>自定义<ul><li>Pawn Overlap 重叠 ,不然角色会卡住</li></ul></li></ul></li><li>集群分组损坏阈值 [Cluster GroupingDamage Threshold] 破坏值高的话 效果会差<ul><li>5000</li><li>500</li><li>50</li></ul></li></ul></li><li>事件图<ul><li>Event BeginPlay</li><li>Spawn Actor from Class BP_DestructionForce<ul><li>Class BP_DestructionForce</li><li>Spawn Transform &#x3D;&gt; 右键 拆分引脚 后的 <code>Spawn Transform Location</code> FROM <code>Get Actor Location</code></li></ul></li><li>Delay 5s</li><li>Destroy Actor</li></ul></li></ul><p>创建文件夹 _Main&#x2F;Blueprints&#x2F;HarvestingSystem&#x2F;Destructables&#x2F;Blushes<br>为 BP_GroundItemDestruct 创建蓝图子类 BP_TropicalBush01Dest 移动到 Blushes</p><p>设置数据表 DT_GroundResources</p><ul><li>Class<ul><li>增加破坏类 BP_TropicalBush01Dest_C</li></ul></li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>HarvestGroundItem<ul><li>如果当前的血量 &lt;&#x3D; 则销毁<ul><li>Get Data Table Row DT_GroundResources<ul><li>Row Name &#x3D;&gt; 物品的类名 [ Ref &#x3D;&gt; Get Class &#x3D;&gt; Get Class Display Name]</li><li>Out Row Break<ul><li>Class 设置局部变量 LocalDestructableClass</li><li>?Is Valid 物品的ref 是否有效<ul><li>设置局部变量 LocalTransform FROM 物品的ref &#x3D;&gt; Get Actor Transform</li></ul></li><li>Destroy Actor 物品的ref</li><li>Spawn Actor None 生成破坏类<ul><li>Class &#x3D;&gt; LocalDestructableClass</li><li>Spawn Transform &#x3D;&gt; LocalTransform</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>增加视觉提示UI，播放蒙太奇</p><ul><li>核心：</li></ul><p>创建蒙太奇文件 Pickup_Montage FROM 动画 Pickup</p><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>增加变量 ?IsHarvesting bool</li><li>创建 自定义事件 服务器上运行 HarvestMontageOnServer<ul><li>判断是否正在收获 ?IsHarvesting<ul><li>false<ul><li>设置 ?IsHarvesting 为 true</li><li>播放蒙太奇 Play Montage<ul><li>在 第三人称网格组件 ThirdPersonMesh 播放蒙太奇</li><li>Montage &#x3D;&gt; Pickup_Montage</li><li>Play Rate &#x3D;&gt; 1</li><li>播放完成后<ul><li>设置 ?IsHarvesting 为 false</li></ul></li></ul></li><li>MontageOnClient 在客户端上播放</li><li>MontageMulticast 在组播上播放</li></ul></li></ul></li></ul></li><li>事件 OverlapGroundItems 的 重叠 HarvestGroundItem 后<ul><li>HarvestMontageOnServer</li></ul></li><li>事件 MontageMulticast 的 EndAnimation 下方 第三人称持有武器物品 如果没有验证成功 将 ?IsHarvesting 设置为 false</li></ul><h4 id="45-修复动画蓝图下半身突兀的BUG"><a href="#45-修复动画蓝图下半身突兀的BUG" class="headerlink" title="45 修复动画蓝图下半身突兀的BUG"></a>45 修复动画蓝图下半身突兀的BUG</h4><p>动画中身体下半部分很突兀，设置只有身体上半部分动画</p><p>OPEN ThirdPerson_AnimBP</p><ul><li>状态引擎 [New State Machine] 拆分引脚<ul><li>连接 新保存的缓存姿势<ul><li>Rename Cache</li></ul></li></ul></li><li>拆分到了这 每个骨骼的分层混合 [Layered blend per bone]<ul><li>Base Pose &#x3D;&gt; 使用缓存姿势 [Use cached pose ‘Cache’]</li><li>Blend Poses 0 &#x3D;&gt; 使用缓存姿势 [Use cached pose ‘Cache’] 的 Slot ‘DefaultSlot’</li><li>Return 输出姿势</li></ul></li><li>点击 分层混合 详情<ul><li>层设置 [Layer Setup]<ul><li>创建元素<ul><li>分支过滤器 [Branch Filters]<ul><li>创建元素<ul><li>Bone Name &#x3D;&gt; spine_01(骨骼腰部) 选择的是骨骼的名称</li><li>Blend Depth &#x3D;&gt; 1</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN UE4_Mannequin_Skeleton 可以查看</p><div>                <img src="/blog/p/614a8811/ThirdPerson_AnimBP每个骨骼的分层混合.png" alt="ThirdPerson_AnimBP每个骨骼的分层混合.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[ThirdPerson_AnimBP每个骨骼的分层混合.png]</p>            </div><h4 id="46-背包物品堆叠功能"><a href="#46-背包物品堆叠功能" class="headerlink" title="46 背包物品堆叠功能"></a>46 背包物品堆叠功能</h4><p>物品堆叠功能</p><ul><li><p>加入物品时检测</p></li><li><p>检测物品是否可以堆叠</p><ul><li>While 循环 判断未添加的数量<ul><li>同类物品 &amp; 可堆叠数量</li><li>return<ul><li>?IsStackable bool</li><li>Index int</li></ul></li></ul></li></ul></li><li><p>堆叠物品</p><ul><li>增加数量</li><li>移除物品</li></ul></li><li><p>创建方法 HasItemsToStack</p><ul><li>Inputs<ul><li>ItemInfo S_ItemInfo</li></ul></li><li>Outputs<ul><li>?ItemExistsInInv bool</li></ul></li><li>设置局部变量 LocalItemInfo</li><li>For Each Loop with Break<ul><li>Array &#x3D;&gt; LocalItemInfo</li></ul></li><li>Break FROM Array Element<ul><li>判断 LocalItemInfo 和 循环体内的 ItemInfo id 是否相等<ul><li>false<ul><li>continue</li></ul></li><li>true<ul><li>判断 LocalItemInfo 和 循环体内的 ItemInfo 是否可堆叠<ul><li>false<ul><li>continue</li></ul></li><li>true<ul><li>?ItemExistsInInv 设置为 true</li><li>break</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>优化：</p><ul><li>Select Int</li><li>And Bool</li><li>Clamp(Integer) 限制最大值<ul><li>Mix</li><li>Max</li></ul></li></ul><p>用图表示</p><p><code>这里存在问题</code>，当一次获取很多个物品时，外部只是 增加了最多一个对象的UI展示，但是实际上增加了很多个对象，这里需要优化</p><h4 id="47-添加收获功能的视觉特效和声音"><a href="#47-添加收获功能的视觉特效和声音" class="headerlink" title="47 添加收获功能的视觉特效和声音"></a>47 添加收获功能的视觉特效和声音</h4><p>下载UE引擎资源 </p><ul><li>打开引擎市场 </li><li>search <ul><li>Starter VFX Pack</li></ul></li><li>安装</li></ul><p>下载 音效资源文件，导入 创建的文件夹 _Main&#x2F;Sounds&#x2F;Harvesting</p><p>创建 声音 声音CUE文件</p><ul><li>Rename SC_RockDestroy</li><li>OPEN it, 随机选择一个音效播放</li><li>Random<ul><li>in<ul><li>Wave Player：RockDestroy1</li><li>Wave Player：RockDestroy2</li><li>Wave Player：RockDestroy3</li></ul></li></ul></li><li>调制器 [Modulator]<ul><li>Pitch Min 0.95</li><li>Pitch Max 1.05</li><li>Volume Min 0.95</li><li>Volume Max 1.05</li></ul></li><li>Modulator 的 Output &#x3D;&gt; 喇叭</li></ul><p>复制 P_Destruction_Concrete 粒子效果</p><ul><li>Rename P_DestructionRock</li><li>OPEN it</li><li>双击删除 Emitters 中的 derbis_a</li><li>TIPS<ul><li>空格键能看到效果</li></ul></li></ul><p>复制 P_Ceramic 粒子效果</p><ul><li>Rename P_PickaxeHit</li><li>OPEN it</li><li>删除 Emitters 中的 sparks</li><li>删除 Emitters 中的 glow</li></ul><p>创建 声音衰减文件 HarvestingAtt 保存到 _Main&#x2F;Sounds&#x2F;Harvesting 目录中</p><p>OPEN BP_DestructableRock 事件图</p><ul><li>创建 自定义事件 组播运行 MulticastFX<ul><li>Spawn Emitter at Location<ul><li>Emitter Template &#x3D;&gt; P_DestructionRock</li><li>Location &#x3D;&gt; Get Actor Location</li><li>Rotation &#x3D;&gt; Get Actor Rotation</li></ul></li></ul></li><li>Event BeginPlay 创建破坏类后面<ul><li>MulticastFX</li><li>Play Sound at Location<ul><li>Sound &#x3D;&gt; SC_RockDestroy</li><li>Location &#x3D;&gt; Get Actor Location</li><li>Attenuation Settings &#x3D;&gt; HarvestingAtt</li></ul></li></ul></li></ul><p>运行测试石头，可以看到破碎云效果和声音.</p><p>将声音设置成</p><ul><li>指定半径内播放</li><li>距离衰减</li></ul><p>OPEN BP_TP_Hatchet</p><ul><li>创建 自定义事件 组播运行 HitFXMulticast<ul><li>Inputs<ul><li>Location Vector 位置</li><li>Rotation Rotator 旋转</li></ul></li><li>往上级找，发现也需要设置Interface文件，下面设置</li><li>增加变量 TraceDistance float<ul><li>默认值 100</li></ul></li><li>Line Trace By Channel<ul><li>Start &#x3D;&gt; 参数 Location</li><li>End &#x3D;&gt; 参数 Location + (参数 Rotation 的 Get Forward Vector * TraceDistance)</li><li>Draw Debug Type &#x3D;&gt; 持久 [Persistent]</li><li>Out Hit &#x3D;&gt; Break Hit Result</li></ul></li><li>Spawn Emitter at Location<ul><li>Emitter Template &#x3D;&gt; P_PickaxeHit</li><li>Location &#x3D;&gt; Break Hit Result 的 Impact Point</li></ul></li></ul></li><li>ServerOverlap 方法<ul><li>修改Inputs<ul><li>增加 Rotation Rotator 旋转</li></ul></li><li>在 收获方法 的后面 调用 HitFXMulticast<ul><li>Location &#x3D;&gt; 球体的 Pos</li><li>Rotation &#x3D;&gt; 球体的 Rotation</li></ul></li></ul></li><li>检测碰撞 不需要 DebugSphere</li></ul><p>OPEN BPI_SurvivalCharacter</p><ul><li>Get Arrow Location<ul><li>增加 Outputs<ul><li>Rotation Rotator 旋转</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>Get Arrow Location 方法<ul><li>Rotation &#x3D;&gt; Arrow1(前方的角度) 的 Get World Rotation</li></ul></li></ul><p>运行测试，敲碎石头也有效果和声音，石镐敲击石头有效果，但是没有声音</p><p>给石镐敲击增加声音</p><p>下载UE引擎资源</p><ul><li>打开引擎市场</li><li>search<ul><li>easy build system V…</li><li>free 免费的</li></ul></li><li>安装</li><li>但是文件太多太大了，选择文件夹 <ul><li>EasyBuildingSystem&#x2F;Audio&#x2F;Sounds&#x2F;Interactions 右键 迁移[Migrate] 弹出资源报告</li><li>选择当前项目路径的 ${项目路径}&#x2F;Content</li><li>保存后，项目会多出 EasyBuildingSystem 文件夹 包含了SC_Pickaxe_Hit、SC_Hatchet_Hit</li></ul></li></ul><p>OPEN BP_TP_Hatchet</p><ul><li>HitFXMulticast<ul><li>Spawn Emitter at Location 后</li><li>Play Sound at Location<ul><li>Sound &#x3D;&gt; 提升为变量 HitSound SoundBase</li><li>Location &#x3D;&gt; 参数 Location</li></ul></li></ul></li></ul><p>打开 BP_TP_StonePickaxe 设置变量 HitSound 为 SC_Pickaxe_Hit<br>打开 BP_TP_StoneHatchet 设置变量 HitSound 为 SC_Hatchet_Hit</p><p>OPEN BP_FirstPersonCharacter</p><ul><li>切换 斧头和石镐</li></ul><p>运行后 石镐和斧头挥动就可以听到声音了</p><h4 id="48-修复灌木丛的拾取逻辑，灌木丛拾取以及消失时有声音和视觉效果"><a href="#48-修复灌木丛的拾取逻辑，灌木丛拾取以及消失时有声音和视觉效果" class="headerlink" title="48 修复灌木丛的拾取逻辑，灌木丛拾取以及消失时有声音和视觉效果"></a>48 修复灌木丛的拾取逻辑，灌木丛<code>拾取</code>以及<code>消失时</code>有声音和视觉效果</h4><p>修复判断是否正在拾取逻辑的位置，提前判断</p><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>HarvestMontageOnServer 的 判断逻辑 放到 OverlapGroundItems 中</li><li>增加对持有物品的判断<ul><li>如果持有物品，则不能拾取</li></ul></li></ul><p>复制 P_PickaxeHit</p><ul><li>Rename P_BushHarvest</li><li>双击删除 wisp</li><li>编辑 impact的 必须<ul><li>更改材质 M_Leaves_A</li></ul></li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>创建 自定义事件 组播 BushMulticast</li><li>生成发射器 Spawn Emitter at Location 和粒子相关<ul><li>Emitter Template &#x3D;&gt; P_BushHarvest</li><li>Location &#x3D;&gt; Get Actor Location 的 Return Value</li></ul></li><li>HarvestMontageOnServer 方法的最后面调用 BushMulticast</li></ul><p>修改 粒子效果 让视觉体验更好</p><p>下载本地资源 BushSFX 的 三个 音频文件到 _Main&#x2F;Sounds&#x2F;Harvesting 目录中</p><ul><li>bush01.wav</li><li>bush02.wav</li><li>bush03.wav</li></ul><p>复制文件 SC_RockDestroy</p><ul><li>Rename SC_BushPick</li><li>OPEN it, 随机选择一个音效播放</li><li>Random<ul><li>in<ul><li>Wave Player：RockDestroy1</li><li>Wave Player：RockDestroy2</li><li>Wave Player：RockDestroy3</li></ul></li></ul></li><li>调制器 [Modulator]<ul><li>Pitch Min 0.95</li><li>Pitch Max 1.05</li><li>Volume Min 0.95</li><li>Volume Max 1.05</li></ul></li><li>Modulator 的 Output &#x3D;&gt; 喇叭</li></ul><p>OPEN BP_FirstPersonCharacter 事件图</p><ul><li>自定义事件 组播 BushMulticast 最后一个方法后面<ul><li>播放声音 Play Sound at Location<ul><li>Sound &#x3D;&gt; SC_BushPick</li><li>Location &#x3D;&gt; Get Actor Location</li><li>Attenuation Settings &#x3D;&gt; HarvestingAtt</li></ul></li></ul></li></ul><p>运行测试，灌木丛<code>拾取</code>以及<code>消失时</code>有声音和视觉效果。</p><h4 id="49-利用植物绘画-实现快速放置物体"><a href="#49-利用植物绘画-实现快速放置物体" class="headerlink" title="49 利用植物绘画 实现快速放置物体"></a>49 利用植物绘画 实现快速放置物体</h4><p>说明：</p><ul><li>Foliage[植物]</li></ul><p>创建文件夹 ActorFoliage 目录 _Main&#x2F;Blueprints&#x2F;HarvestingSystem 下<br>创建文件夹 LargeItems 目录 ActorFoliage 下<br>创建文件夹 PalmTree 目录 LargeItems 下</p><p>创建 Foliage - Actor Foliage 目录 PalmTree 下</p><ul><li>Rename AF_Palm02</li><li>OPEN it</li><li>Actor Class &#x3D;&gt; BP_Palm02</li></ul><p>OPEN Map</p><ul><li>切换 叶子 模式[Foliage Model]</li><li>增加叶子 SM_Cube 如果不行，可以打开浏览器拖动<ul><li>保存路径 LevelPrototyping&#x2F;Meshes</li></ul></li><li>将 AF_Palm02 拖入到 叶子 的白色cube中 or 点击白色cube 右键 替换 AF_Palm02<ul><li>勾选 cube</li></ul></li><li>点击绘画，可以放置多个cube，相当于快速放置物体</li></ul><div>                <img src="/blog/p/614a8811/ActorFoliage快速放置物体.png" alt="ActorFoliage快速放置物体.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[ActorFoliage快速放置物体.png]</p>            </div><p>总结：</p><ol><li>利用Map中的 植物绘画功能，可以快速放置多个物体</li></ol><h3 id="第五章-物品制作系统"><a href="#第五章-物品制作系统" class="headerlink" title="第五章 物品制作系统"></a>第五章 物品制作系统</h3><h4 id="50-amp-51-玩家制作系统"><a href="#50-amp-51-玩家制作系统" class="headerlink" title="50 &amp; 51 玩家制作系统"></a>50 &amp; 51 玩家制作系统</h4><p>创建文件夹 CraftingWidgets 目录 _Main&#x2F;Widgets 下<br>创建 用户组件 窗口控件 W_CraftingSlot 目录 CraftingWidgets 下</p><ul><li>size box 宽度 70 高度 70 切换模式<ul><li>border Image Inventory_Slot_Background<ul><li>按钮 Button<ul><li>样式<ul><li>Image tex_wood_05_b</li><li>Draw as Image 画成图像</li><li>悬停效果 复制 Normal Tint 改为 右下角的 黄色 E2B12BFF</li><li>按压效果 复制 Normal Tint 改为 浅绿色 3D7E1AFF</li><li>Button Rename SelectItemButton 是变量</li></ul></li></ul></li></ul></li></ul></li></ul><p>创建 蓝图枚举类 E_CraftingType 目录 _Main&#x2F;Blueprints&#x2F;Enums 下</p><ul><li>PlayerInventory 玩家背包</li><li>CookingPot 烹饪锅</li><li>CraftingBench 工作台</li><li>Forge 锻造台</li><li>AdvanceWorkbench 高级工作台</li><li>StorageBox 存储箱</li></ul><p>创建 蓝图枚举类 E_ItemCategory 目录 _Main&#x2F;Blueprints&#x2F;Enums 下</p><ul><li>Misc 杂项</li><li>Tools 工具</li><li>Armor 防具</li><li>Structures 建筑</li></ul><p>创建 蓝图结构 S_ItemStruct 目录 CraftingStructs 下</p><ul><li>ItemID int</li><li>ItemQuantity int</li></ul><p>创建 结构文件夹 CraftingStructs 目录 _Main&#x2F;Blueprints&#x2F;Structures 下<br>创建 蓝图结构 S_ItemRecipes 配方 目录 CraftingStructs 下</p><ul><li>ItemID int</li><li>ItemName Text</li><li>ItemDescription Text</li><li>RequiredLevel int</li><li>ItemIcon Texture 2D 对象引用</li><li>RequiredItems S_ItemStruct Array</li><li>ItemCategory E_ItemCategory </li><li>ItemExperience int 经验</li></ul><p>创建 数据表格 PICK S_ItemRecipes 名字 DT_PlayerItemRecipes 保存到 _Main&#x2F;DataTables 目录中</p><ul><li>增加行（先加石斧的配方）<ul><li>RowName 2</li><li>ItemID 2</li><li>ItemName 石斧</li><li>ItemDescription ..</li><li>ItemIcon StoneHatchet</li><li>RequiredLevel 1</li><li>ItemCategory Tools</li><li>RequiredItems 通过木头和石头制作<ul><li>Index0<ul><li>ItemId 1</li><li>ItemQuantity 3</li></ul></li><li>Index1<ul><li>ItemId 4</li><li>ItemQuantity 1</li></ul></li></ul></li><li>ItemExperience 10</li></ul></li></ul><p>OPEN W_CraftingSlot 事件图</p><ul><li>创建 变量 ItemID int 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li><li>创建 变量 ContainerType E_ContainerType 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li><li>创建 变量 ImageTexture Texture 2D 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li><li>创建 变量 CanCraftItem? bool</li><li>创建 变量 CraftingType E_CraftingType</li><li>创建 变量 ItemIndex Index</li></ul><p>创建 用户组件 窗口控件 W_CraftingContainerGrid 目录 CraftingWidgets 下</p><ul><li>Scroll Box<ul><li>统一 Uniform Grid Panel Rename:Grid 是变量</li></ul></li><li>事件图<ul><li>设置变量 SlotsPerRow Int 每行的数量 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li><li>创建变量 ContainerType E_ContainerType 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li><li>创建变量 CraftingType E_CraftingType 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li><li>创建变量 ItemCategory E_ItemCategory 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li><li>设置变量 Slots W_CraftingSlot Array 这个slots里面存的就是 所有 W_CraftingSlot</li><li>设置变量 ItemIndex Int</li><li>创建 方法 AddSlots<ul><li>核心：根据参数和数据表，创建 W_CraftingSlot 控件，放入到 Grid 中</li><li>Inputs<ul><li>CraftingType E_CraftingType</li></ul></li><li>Select 通过类型 选择对应的数据表<ul><li>PlayerInventory</li><li>CookingPot</li><li>CraftingBench DT_PlayerItemRecipes</li><li>Forge</li><li>AdvanceWorkbench</li><li>StorageBox</li><li>Return Value 设置本地变量 LocalDataTableRef [Data Table]</li></ul></li><li>Get Data Table Row Names<ul><li>table &#x3D;&gt; 本地变量 LocalDataTableRef</li></ul></li><li>For Each Loop<ul><li>Array &#x3D;&gt; Out Row Names</li></ul></li><li>获得数据表行 None[Get Data Table Row NONE]</li><li>Break S_ItemRecipe</li><li>两个判断<ul><li>参数容器类型 是否等于 玩家背包类型</li><li>参数建造类型 是否等于 配方中的建造类型</li></ul></li><li>创建 W_CraftingSlot 控件 [Create Widget]<ul><li>Class &#x3D;&gt; W_CraftingSlot</li><li>Owning Player &#x3D;&gt; Get Owning Player</li><li>Image Texture 表物品的 ItemIcon</li><li>ItemID &#x3D;&gt; 表物品的 ItemID</li><li>ContainerType &#x3D;&gt; 参数 ContainerType</li></ul></li><li>Slots Add 方法 &#x3D;&gt; 生成控件的 Return Value</li><li>生成控件的 Return Value 的 Set ItemIndex &#x3D;&gt; ItemIndex</li><li>AddSlotToGrid<ul><li>Index &#x3D;&gt; ItemIndex</li><li>Slot &#x3D;&gt; 生成控件的 Return Value</li></ul></li></ul></li></ul></li><li>事件图<ul><li>Event Construct<ul><li>AddSlotToGrid<ul><li>含义：</li><li>Inputs<ul><li>Index int</li><li>Slot W_CraftingSlot 对象引用</li></ul></li><li>设置 局部变量 LocalSlotIndex Int </li><li>设置 局部变量 LocalCraftingSlot W_CraftingSlot</li><li>Add Child to Uniform Grid<ul><li>目标 &#x3D;&gt; Grid </li><li>Content &#x3D;&gt; LocalCratingSlot</li><li>Set Row<ul><li>行判断依据：当前索引 除法[Division] 每行的数量 截断[Truncate] 舍弃小数 &#x3D; 行</li></ul></li><li>Set Column<ul><li>列判断依据：当前索引 除法（整数和余数）[Division(Whole and Remainder)] 每行的数量 取余数（Remainder） &#x3D; 列</li></ul></li></ul></li><li>Return Node</li></ul></li></ul></li></ul></li></ul><p>方法 AddSlotToGrid</p><ul><li>Inputs<ul><li>Index int</li><li>Slot W_CraftingSlot 对象引用</li></ul></li><li>设置局部变量 LocalSlotIndex</li><li>设置局部变量 LocalCratingSlot</li><li>Add Child to Uniform Grid<ul><li>目标 &#x3D;&gt; Grid </li><li>Content &#x3D;&gt; LocalCratingSlot</li><li>Slot Index &#x3D;&gt; LocalSlotIndex</li><li>创建 变量 SlotPreRow Int</li><li>Set Row<ul><li>行判断依据：</li></ul></li><li>Set Column<ul><li>列判断依据：</li></ul></li><li>Return Node</li></ul></li></ul><p>总结：</p><ol><li>创建了 W_CraftingSlot 控件，用于放入 CraftingContainerGrid 中</li><li>创建了 W_CraftingContainerGrid 控件，用于放入 CraftingContainer 中</li><li>创建了 CraftingContainerGrid 中的 AddSlots 方法，用于根据 CraftingType 类型，从数据表中获取数据，创建 W_CraftingSlot 控件，放入到 CraftingContainerGrid 中</li><li>创建了 CraftingContainerGrid 中的 AddSlotToGrid 方法，用于设置 W_CraftingSlot 控件的位置</li><li>创建了 蓝图枚举类 E_CraftingType，用于区分 CraftingContainerGrid 的类型</li><li>创建了 蓝图枚举类 E_ItemCategory，用于区分 Item 的类型</li><li>创建了 蓝图结构 S_ItemStruct，用于存储 Item 的信息</li><li>创建了 蓝图结构 S_ItemRecipe，用于存储 Item 的配方信息</li><li>创建了 数据表格 PICK S_ItemRecipes，用于存储 Item 的配方信息</li></ol><h4 id="52-制作系统的UI"><a href="#52-制作系统的UI" class="headerlink" title="52 制作系统的UI"></a>52 制作系统的UI</h4><p>下载 本地资源文件 6个.TGA文件 导入到 _Main&#x2F;Widgets&#x2F;Textures 目录中</p><p>OPEN W_CraftingSlot</p><ul><li>Event Construct<ul><li>参数 SelectItemButton</li><li>Set Style<ul><li>in Style<ul><li>Make ButtonStyle<ul><li>Normal 使用 Make SlateBrush 传入<ul><li>Image &#x3D;&gt; 变量 ImageTexture</li><li>SlateBrush &#x3D;&gt; 传给 Normal</li></ul></li><li>Hovered 使用 Make SlateBrush 传入<ul><li>Image &#x3D;&gt; 变量 ImageTexture</li><li>Tint &#x3D;&gt; 使用 Make SlateColor 传入<ul><li>黄色 E2B12BFF</li></ul></li></ul></li><li>Pressed 使用 Make SlateBrush 传入<ul><li>Image &#x3D;&gt; 变量 ImageTexture</li><li>Tint &#x3D;&gt; 使用 Make LinearColor 传入</li><li>绿色</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>创建控件 W_CraftingWindow 目录 CraftingWidgets 下</p><ul><li>size box 宽度 500 高度 500 切换模式<ul><li>水平<ul><li>垂直 将整个窗口移动到左外方 变换 -100<ul><li>size box 宽度 80 高度 80 padding-top:10<ul><li>Button Rename:MiscButton Image boxbutton Draw As Border Tint 白色<ul><li>样式<ul><li>悬停效果 复制 Normal Tint 改为 右下角的 黄色 E2B12BFF</li><li>按压效果 复制 Normal Tint 改为 浅绿色 3D7E1AFF</li><li>组件 Border<ul><li>样式<ul><li>padding 4 15 4 15</li><li>水平垂直拉伸 内容水平垂直拉伸</li><li>Image ropeicon(绳索)</li><li>Draw as Image 画成图像</li></ul></li></ul></li></ul></li></ul></li><li>——— Button 复制到一共4个button ————-</li></ul></li><li>复制 Box Size 第二个 Button Rename:ToolsButton Image:ToolsIcon</li><li>复制 Box Size 第三个 Button Rename:ArmorButton Image:armoricon</li><li>复制 Box Size 第四个 Button Rename:StructuresButton Image:structuresicon</li></ul></li><li>垂直 填充 变换:-50<ul><li>Widget Switcher 填充 Padding:10 Rename:CraftingGridSwitcher<ul><li>创建的组件 W_CraftingContainerGrid ActiveWidgetIndex:1 Rename MiscRecipes<ul><li>ItemCategory:Misc</li><li>SlotsPerRow:3</li></ul></li><li>创建的组件 W_CraftingContainerGrid ActiveWidgetIndex:1? Rename ToolsRecipes<ul><li>ItemCategory:Tools</li><li>SlotsPerRow:3</li></ul></li><li>创建的组件 W_CraftingContainerGrid Rename ArmorRecipes<ul><li>ItemCategory:Armor</li><li>SlotsPerRow:3</li></ul></li><li>创建的组件 W_CraftingContainerGrid Rename StructureRecipes<ul><li>ItemCategory:Structure</li><li>SlotsPerRow:3</li></ul></li></ul></li></ul></li><li>垂直 填充 变换:-50<ul><li>Widget Switcher 填充 Rename:CraftRecipeInfo<ul><li>border Image:craftoverlay Rename:SelectItemTipWindow<ul><li>垂直框 Padding:5 30 5 2 水平居中 垂直顶<ul><li>Text Block Text:选择一个物品</li><li>Text Block Text:建造 Size:20</li></ul></li></ul></li><li>border Image:craftoverlay Rename:CraftItemWindow color:褐色<ul><li>垂直 Padding:4 2 4 2 水平填充 垂直填充<ul><li>水平<ul><li>size box 填充 水平居中 垂直居中 宽度 80 高度 80 Padding-top:15<ul><li>Overlay<ul><li>Border 水平垂直拉伸 内容水平垂直拉伸 color:红色 FF0500FF <strong>Rename:CanCraftBorder 是变量</strong></li><li>Border 水平垂直拉伸 内容水平垂直拉伸 padding:4 color:黑色 000000FF</li><li>Image 水平垂直拉伸 Padding:5 Image:tex_wood_02 Rename:ItemImage 是变量</li></ul></li></ul></li></ul></li><li>水平 padding:0 10 0 5<ul><li>垂直 填充<ul><li>Text Block Text:物品名称 Size:15 Rename:ItemNameText 是变量</li><li>Text Block Text:RequiredLevel:1 Size:12 Rename:RequiredLevelText 是变量</li></ul></li></ul></li><li>水平<ul><li>border 填充 Tint：黑色，A0.8<ul><li>Editable Text(Multi-Line) Text:该项目的描述将位于此多行且可编辑的文本框中.文本框设置为只读<ul><li>样式补充：size:10 typeface:Italic 勾选isReadOnly Rename:ItemDescriptionText 是变量</li></ul></li></ul></li></ul></li><li>水平 padding: 0 10 0 5<ul><li>复制一个 ItemName Rename:Ingredients:</li></ul></li><li>水平 填充 padding:0 5 0 10<ul><li>Scroll Box Rename RequiredItemsWidget 填充 是变量</li></ul></li><li>水平 padding: 0 5 0 10<ul><li>Button Rename CraftItemButton<ul><li>样式<ul><li>填充</li><li>padding:4 2 4 2</li><li>Tint:白色</li><li>Image:button</li><li>Draw as Image 画成图像</li><li>悬停效果 复制 Normal Tint 改为 右下角的 黄色 E2B12BFF</li><li>按压效果 复制 Normal Tint 改为 浅绿色 3D7E1AFF</li></ul></li><li>Text Block<ul><li>Text:制作</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="53-制作控件切换不同窗口"><a href="#53-制作控件切换不同窗口" class="headerlink" title="53 制作控件切换不同窗口"></a>53 制作控件切换不同窗口</h4><p>OPEN W_Inventory</p><ul><li>增加 Widget Switcher 在 W_ItemContainerGrid 旁边 Fill Padding:20 Rename:InventoryWidgetSwitcher 是变量</li><li>将 W_ItemContainerGrid 控件 放入 Widget Switcher 中 并且删除 Padding SwitcherActiveIndex:0</li><li>将 W_CraftingWindow 控件 放入 Widget Switcher SwitcherActiveIndex:1</li></ul><h5 id="点击-Inventory-or-Crafting-切换组件"><a href="#点击-Inventory-or-Crafting-切换组件" class="headerlink" title="点击 Inventory or Crafting 切换组件"></a>点击 Inventory or Crafting 切换组件</h5><p>OPEN W_Inventory</p><ul><li>OnClicked(InventoryButton)<ul><li>设置激活的控件索引 InventoryWidgetSwitcher &#x3D;&gt; Set Active Widget Index<ul><li>Widget Switcher &#x3D;&gt; InventoryWidgetSwitcher</li><li>Index &#x3D;&gt; 0</li></ul></li></ul></li><li>OnClicked(CraftingButton)<ul><li>设置激活的控件索引 InventoryWidgetSwitcher &#x3D;&gt; Set Active Widget Index<ul><li>Widget Switcher &#x3D;&gt; InventoryWidgetSwitcher</li><li>Index &#x3D;&gt; 1</li></ul></li></ul></li></ul><h6 id="点击-Misc-or-Tools-or-Armor-or-Structures-切换组件"><a href="#点击-Misc-or-Tools-or-Armor-or-Structures-切换组件" class="headerlink" title="点击 Misc or Tools or Armor or Structures 切换组件"></a>点击 Misc or Tools or Armor or Structures 切换组件</h6><p>OPEN W_CraftingWindow</p><ul><li>OnClicked(MiscButton)<ul><li>设置激活的WidgetIndex Set Active Widget Index<ul><li>Widget Switcher &#x3D;&gt; CraftingGridSwitcher</li><li>Index &#x3D;&gt; 0</li></ul></li></ul></li><li>OnClicked(ToolsButton) <ul><li>设置激活的WidgetIndex Set Active Widget Index<ul><li>Widget Switcher &#x3D;&gt; CraftingGridSwitcher</li><li>Index &#x3D;&gt; 1</li></ul></li></ul></li><li>OnClicked(ArmorButton)<ul><li>设置激活的WidgetIndex Set Active Widget Index<ul><li>Widget Switcher &#x3D;&gt; CraftingGridSwitcher</li><li>Index &#x3D;&gt; 2</li></ul></li></ul></li><li>OnClicked(StructuresButton)<ul><li>设置激活的WidgetIndex Set Active Widget Index<ul><li>Widget Switcher &#x3D;&gt; CraftingGridSwitcher</li><li>Index &#x3D;&gt; 3</li></ul></li></ul></li></ul><p>思路：</p><ol><li>W_CraftingWindow 中的 CraftingGridSwitcher 组件，用于切换 CraftingContainerGrid 组件</li><li>W_CraftingWindow 中的 CraftingRecipeInfo 组件，用于显示 CraftingContainerGrid 组件中的 CraftingSlot 组件的信息</li></ol><p>OPEN DT_PlayerItemRecipes</p><ul><li>通过复制 新增行<ul><li>RowName 3</li><li>ItemID 3</li><li>ItemName 石镐</li><li>ItemDescription ..</li><li>ItemIcon StonePickaxe</li><li>其他一样</li></ul></li><li>复制上面新增的 什么都不变</li><li>通过复制 新增行<ul><li>RowName 4</li><li>ItemID 4</li><li>ItemName 绳子</li><li>ItemDescription ..</li><li>ItemIcon Tex_strings_05_b</li><li>ItemCategory Misc 杂项</li></ul></li></ul><p>运行，测试，可以看到对应的物品</p><h4 id="54-在制作窗口中点击某个物品，显示制作信息"><a href="#54-在制作窗口中点击某个物品，显示制作信息" class="headerlink" title="54 在制作窗口中点击某个物品，显示制作信息"></a>54 在制作窗口中点击某个物品，显示制作信息</h4><p>创建 用户控件 制作原料 W_CraftingIngredient 目录 _Main&#x2F;Widgets&#x2F;CraftingWidgets 下</p><ul><li>size box 宽度 130 高度 40 切换屏幕上所需模式<ul><li>Border 笔刷颜色:黑色0.5透明度 padding:1 5 1 1<ul><li>水平框 padding 0<ul><li>垂直框 垂直居中<ul><li>Image Rename:ResourceImage 是变量</li></ul></li><li>垂直框 填充<ul><li>Text Block Text:x10 木头 Size:10 垂直居中 填充 Rename:ResourceName 是变量 padding: 3 0 0 0</li></ul></li></ul></li></ul></li></ul></li><li>事件图<ul><li>创建变量 ItemSelectedID Int</li><li>创建变量 ResourceText Text 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li><li>创建变量 ResourceQuantity Int 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li><li>创建变量 ResourceIcon Texture 2D 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li><li>构造事件<ul><li>ResourceName -&gt; Set Text<ul><li>Format Text [x{Quantity} {Resource}]  传入 In Text<ul><li>变量 ResourceQuantity</li><li>变量 ResourceText</li></ul></li></ul></li><li>ResourceImage -&gt; 使用纹理设置笔刷 [Set Brush From Texture]<ul><li>Texture &#x3D;&gt; 变量 ResourceIcon</li></ul></li></ul></li></ul></li></ul><p>点击制作物品，展示制作信息</p><p>OPEN W_CraftingWindow</p><ul><li>创建 自定义事件 ShowItemRequirements COMMENT 展示用户制作TAB的信息<ul><li>Inputs<ul><li>ItemSelectedID int</li></ul></li><li>CraftRecipeInfo -&gt; Set Active Widget Index<ul><li>Index &#x3D;&gt; 1</li></ul></li><li>Get Data Table Row  去找数据表当中的配方<ul><li>Table &#x3D;&gt; DT_PlayerItemRecipes</li><li>Row Name &#x3D;&gt; ItemSelectedID -&gt; To Text (Integer)</li></ul></li><li>SetupCraftingInfoTab<ul><li>RecipeInfo &#x3D;&gt; Get Data Table Row 的 输出行</li></ul></li></ul></li><li>增加 方法 SetupCraftingInfoTab<ul><li>Inputs<ul><li>ItemRecipe S_ItemRecipe</li></ul></li><li>设置局部变量 LocalItemRecipe S_ItemRecipe</li><li>Break S_ItemRecipe<ul><li>设置需要同步的信息<ul><li>ID等等</li></ul></li><li>重点在 配方<ul><li>通过配方的ID 去DT_Items中找物品的详情</li><li>数量是配方的数量</li><li>循环体外部要提前清空 RequiredItemsWidget 的子控件 使用方法：Clear Children</li><li>添加子控件 使用方法：Add Child</li></ul></li></ul></li></ul></li></ul><h4 id="55-制作物品-1-检测是否有足够的原料"><a href="#55-制作物品-1-检测是否有足够的原料" class="headerlink" title="55 制作物品 1 检测是否有足够的原料"></a>55 制作物品 1 检测是否有足够的原料</h4><p>思路：</p><ol><li>用户点击 制作按钮</li><li>根据制作按钮 找到当前的RequiredItems物品 For Each Loop</li><li>根据 For Each Loop 中的物品ID 和 数量</li><li>去背包中查找是否有足够的物品</li></ol><ul><li>false print </li><li>true print</li></ul><p>OPEN W_CraftingWindow</p><ul><li>方法 ShowItemRequirements 展示用户制作TAB的信息后，还要展示配方进度</li><li>CheckIfCanCraftItemOnServer 通过 Get Player Character 的 Get Survival Char Ref <ul><li>Inputs<ul><li>ID int</li><li>Container E_ContainerType</li><li>TableType E_CraftingType</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>创建 自定义事件 CheckIfCanCraftItemOnServer[在服务器运行]<ul><li>Inputs<ul><li>ID int</li><li>Container E_ContainerType</li><li>TableType E_CraftingType</li></ul></li><li>调用 CanCraftItem</li><li>调用 UpdateCraftStatusOnClient 下面要创建 通过 Get Controller 的 Survival Game RCRef</li></ul></li><li>创建方法 CanCraftItem<ul><li>Inputs<ul><li>ID int</li><li>ContainerType E_ContainerType</li><li>TableType E_CraftingType</li></ul></li><li>通过数据表获取配方 传递给 背包组件 的 ContainerItems 方法</li><li>Outputs<ul><li>CanCraft? bool</li></ul></li><li>Return Node</li></ul></li></ul><p>OPEN BPC_ItemsContainer</p><ul><li>创建 方法 ContainerItems<ul><li>Inputs<ul><li>RequiredItems S_ItemStruct Array</li></ul></li><li>设置 局部变量 LocalRequiredItems S_ItemStruct Array</li><li>设置 局部变量 HasItem? S_ItemStruct Array</li><li>For Each Loop Break &#x3D;&gt; S_ItemStruct</li><li>For Each Loop Break &#x3D;&gt; Items</li><li>找对应id的物品</li><li>判断：拥有物品的数量 &gt;&#x3D; 配方的物品数量</li><li>HasItem? 这里使用数组包含不合格的成员，判定材料是否足够 <ul><li>Remove Index</li><li>Is Empty</li></ul></li><li>通过判断 HasItem 是否是空 Return Node<ul><li>Outputs<ul><li>CanCraft? bool<div>        <img src="/blog/p/614a8811/ContainerItems.png" alt="ContainerItems.png"></img>        <p style="        display: flex;        color: #999;        justify-content: center;        font-size: 0.8rem;        position: relative;        top: -1rem;        right: 50%;        left: 50%;        transform: translateX(-50%);        ">[ContainerItems.png]</p>    </div></li></ul></li></ul></li></ul></li></ul><p>OPEN SurvivalGamePC</p><ul><li>创建 自定义事件 UpdateCraftStatusOnClient<ul><li>Inputs<ul><li>CanCraft? bool</li></ul></li></ul></li><li>调用 MainWidgetRef 的 Target W_Inventory 的 W_CraftingWindow 的 UpdateCraftStatus<ul><li>CanCraft? &#x3D;&gt; CanCraft?</li></ul></li></ul><p>OPEN W_CraftingWindow</p><ul><li>创建 自定义事件 UpdateCraftStatus 根据 CanCraft? 是否可以制作 <ul><li>Inputs<ul><li>CanCraft? bool</li></ul></li><li>更改 border CanCraftBorder 的颜色 浅绿色 3D7E1AFF or 红色 FF0023FF</li><li>更改 CraftItemButton 的 Enable 是否可以点击<ul><li>set Enabled<ul><li>Enabled &#x3D;&gt; CanCraft?</li></ul></li></ul></li></ul></li></ul><p>运行测试，可以通过按制作按钮是否可以点击 来判断是否有足够的原料</p><h4 id="56-制作物品-2-制作出物品"><a href="#56-制作物品-2-制作出物品" class="headerlink" title="56 制作物品 2 制作出物品"></a>56 制作物品 2 制作出物品</h4><p>思路：</p><ul><li>用户点击 制作按钮</li><li>执行 第三人称角色 的 CraftItemOnServer 方法</li><li>执行 第三人称角色 的 CraftItemFunction 方法<ul><li>判断制作状态</li><li>判断材料是否足够 </li><li>扣减材料</li></ul></li><li>执行 AddCraftedItem<ul><li>增加物品</li></ul></li><li>播报 AddCraftedItem</li></ul><p>OPEN BPC_ItemsContainer</p><ul><li>创建 方法 RemoveItems 删除Items中的物品<ul><li>思路：<ul><li>从Items中找到对应的物品，通过方法 GetIndexesOfItems 通过物品ID获取Items中所有的索引</li><li>扣除中：<ul><li>如果物品数量大于等于扣除数量，直接扣除，扣完执行下一个配方进行扣除</li><li>如果物品数量小于扣除数量，记录剩余未扣除的数量，删除物品，继续循环扣除</li></ul></li></ul></li><li>Inputs<ul><li>ItemsToRemove S_ItemStruct Array</li></ul></li><li>创建本地变量 LocalItemsToRemove S_ItemStruct Array</li><li>创建本地变量 LocalItemsToRemoveList S_ItemStruct Array</li><li>后面省略 …</li></ul></li><li>创建方法 GetIndexesOfItems 通过物品ID获取Items中所有的索引<ul><li>创建本地变量 IndexesFound int Array</li><li>Inputs<ul><li>ItemsID int</li></ul></li><li>Outputs<ul><li>Indexes int Array</li></ul></li><li>设置本地变量 LocalID</li><li>For Each Loop Break &#x3D;&gt; Items</li><li>break<ul><li>branch and bool<ul><li>判断 id 是否等于 LocalID</li><li>判断 Quantity 是否大于 0</li><li>符合条件<ul><li>IndexesFound 添加 Index</li></ul></li></ul></li><li>IndexesFound add Break的Index</li><li>完成后<ul><li>Return Node<ul><li>Indexes &#x3D;&gt; IndexesFound</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>增加变量 ?IsCrafting bool 制作状态</li><li>创建 方法 CraftItemFunction 制作物品方法<ul><li>思路<ul><li>物品制作有状态，需要判断是否可以制作，是否正在制作，是否制作完成</li><li>根据物品配方ID 找到配方信息<ul><li>给予的数量</li><li>物品ID DT_Items 找到物品的信息，放入 Items 中<ul><li>找到的物品ID存入局部变量备用</li><li>要找出背包中相同的物品，合并</li></ul></li></ul></li></ul></li><li>Inputs<ul><li>ItemID int</li><li>ContainerType E_ContainerType</li><li>CraftingType E_CraftingType</li></ul></li><li>Outputs<ul><li>CanCraft? bool</li><li>ContainerTypeOut E_ContainerType</li></ul></li></ul></li><li>创建 播报方法 AddCraftedItemFunction<ul><li>思路<ul><li>通过被制造物品ID 也就是配方表中的RowName 找到 DT_Items 对应的物品信息，进行播报</li></ul></li><li>Inputs<ul><li>ItemID text</li></ul></li></ul></li><li>创建 方法 AddCraftedItem 增加物品<ul><li>思路<ul><li>通过物品ID 找到物品信息，放入 Items 中</li></ul></li><li>Inputs</li><li>Outputs<ul><li>ItemID Text</li><li>ContainerType E_ContainerType</li></ul></li></ul></li></ul><h4 id="57-制作物品-3-增加制作进度条"><a href="#57-制作物品-3-增加制作进度条" class="headerlink" title="57 制作物品 3 增加制作进度条"></a>57 制作物品 3 增加制作进度条</h4><p>思路：</p><ul><li>点击制作 扣除材料后 增加制作进度条</li><li>BP_FirstPersonCharacter 中 调用了 SurvivalGamePC 的 ShowCraftingProgressBarOnClient 方法</li><li>SurvivalGamePC 中 调用了 W_MainWidget 的 ShowCraftingBar 方法</li><li>W_MainWidget 中 调用了 W_CraftingProgressBar 的 PlayAnimation 方法</li></ul><p>创建 W_CraftingProgressBar 目录 _Main&#x2F;Widgets&#x2F;CraftingWidgets 下</p><ul><li>size box 宽度 470 高度 110 切换模式<ul><li>border Color:黑色0.5透明度<ul><li>垂直框<ul><li>水平框 垂直居中 水平居中<ul><li>Text Block Text:制作中… Size:24</li></ul></li><li>水平框 填充<ul><li>进度条 填充 P：10 15 10 25 Rename:CraftingProgressBar 是变量 Is<ul><li>增加动画 Track 增加轨道[CraftingProgressBar] 百分比[Percent] Rename:CraftItemAnimation<ul><li>关键帧 0s:0 3s:1</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>Event 构造方法<ul><li>CraftItemAnimation 的 Play Animation </li><li>CraftItemAnimation 的 Bind to Animation Finished<ul><li>Delegate &#x3D;&gt; 自定义事件<ul><li>RemoveWidget<ul><li>删除自己 Remove from Parent</li></ul></li></ul></li></ul></li></ul></li></ul><p>增加到屏幕中的方法<br>OPEN W_MainWidget</p><ul><li>增加 垂直框 CraftWindowBox 放入到 W_MainWidget 最下面</li><li>拖动 垂直框 放在左下角 锚点设置左下角 Rename:CraftWindowBox 是变量</li><li>大小至内容[Size to Content] 勾选<ul><li>下面自定义事件会将 W_CraftingProgressBar 放入到 CraftWindowBox 中</li></ul></li><li>创建 自定义事件 ShowCraftingBar<ul><li>Create Widget<ul><li>Class &#x3D;&gt; W_CraftingProgressBar</li><li>Craft Window Box -&gt; add Child<ul><li>Content &#x3D;&gt; W_CraftingProgressBar</li></ul></li></ul></li></ul></li></ul><p>OPEN SurvivalGamePC</p><ul><li>创建 自定义事件 ShowCraftingProgressBarOnClient<ul><li>MainWidgetRef -&gt; ShowCraftingBar</li></ul></li></ul><p>OPEN FirstPersonCharacter</p><ul><li>方法 CraftItemFunction 中 RemoveItems 后<ul><li>调用 Get Controller 的 Survival Game PC Ref 的 ShowCraftingProgressBarOnClient</li></ul></li></ul><h4 id="58-制作物品-4-修复BUG"><a href="#58-制作物品-4-修复BUG" class="headerlink" title="58 制作物品 4 修复BUG"></a>58 制作物品 4 修复BUG</h4><p>思路：</p><ul><li>将 制作状态 所有设置和判断 提取到外部 BP_FirstPersonCharacter 中 的 制作物品逻辑中设置</li><li>扣除材料方法 RemoveItems 如果 背包的某一个 item 数量为0，需要 ResetSlot 勾选，但还是 UpdateUI 内部逻辑中没有书写逻辑<ul><li>会导致 如果有 物品数量刚好是2个 则UI没有更新 在制作的时候图还在，但实际上Items中已经不存在了，拖动会变白色</li></ul></li></ul><h3 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h3><h4 id="59-统计控件介绍"><a href="#59-统计控件介绍" class="headerlink" title="59 统计控件介绍"></a>59 统计控件介绍</h4><p>统计数据<br>健康、食物、水、耐久度、经验值、等级</p><h4 id="60-统计控件UI"><a href="#60-统计控件UI" class="headerlink" title="60 统计控件UI"></a>60 统计控件UI</h4><p>下载资源文件 food&#x2F;stam&#x2F;water.TGA 到 _Main&#x2F;Widgets&#x2F;Textures 目录中</p><p>在 _Main&#x2F;Widgets 目录下 创建 文件夹 PlayerWidgets<br>在 _Main&#x2F;Widgets&#x2F;PlayerWidgets 目录下 创建 控件 W_PlayerStatsWindow</p><ul><li>Size box W300 H160 切换模式<ul><li>垂直框<ul><li>Size box H40<ul><li>水平框<ul><li>Overlay 填充<ul><li>Border 水平+垂直拉伸 透明0<ul><li>进度条 水平+垂直拉伸 填充颜色:FF0000FF Percent:1 Rename:HealthBar 是变量</li></ul></li><li>Text Block Padding:20 0 0 5 靠左 垂直居中 Text:+ Size:30 </li><li>Text Block Padding:0 0 30 0 靠右 垂直居中 Text:100 Size:24 Color:A0.8 Rename:HealthText 是变量</li></ul></li></ul></li></ul></li><li>Size box 可以复制上一个<ul><li>水平框<ul><li>Overlay Fill<ul><li>Border<ul><li>进度条 Rename:FoodBar 是变量 填充颜色:棕色 1C0E08FF</li></ul></li><li>Text Block Padding:20 0 0 5 靠左 Text:+ Size:30</li><li>Text Block Padding:0 0 30 0 靠右 垂直居中 Text:100 Size:24 Color:A0.8 Rename:FoodText 是变量</li><li>Image Padding:15 6 0 6 垂直居中 Image:food ImageSize:30x30</li></ul></li></ul></li></ul></li><li>Size box 可以复制上一个，记得要先创建Image<ul><li>水平框<ul><li>Overlay Fill<ul><li>Border<ul><li>进度条 Rename:WaterBar 是变量 填充颜色:棕色 蓝色 0088FFFF</li></ul></li><li>Text Block Padding:20 0 0 5 靠左 Text:+ Size:30</li><li>Text Block Padding:0 0 30 0 靠右 垂直居中 Text:100 Size:24 Color:A0.8 Rename:WaterText 是变量</li><li>Image Padding:15 6 0 6 垂直居中 Image:water ImageSize:30x30</li></ul></li></ul></li></ul></li><li>Size box 可以复制上一个<ul><li>水平框<ul><li>Overlay Fill<ul><li>Border<ul><li>进度条 Rename:StamBar 是变量 填充颜色:棕色 蓝色 00FF72FF</li></ul></li><li>Text Block Padding:20 0 0 5 靠左 Text:+ Size:30</li><li>Text Block Padding:0 0 30 0 靠右 垂直居中 Text:100 Size:24 Color:A0.8 Rename:StamText 是变量</li><li>Image Padding:15 6 0 6 垂直居中 Image:stam ImageSize:30x30</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN W_MainWidget</p><ul><li>将 W_PlayerStatsWindow <strong>拖进</strong> W_MainWidget 中，直接添加组件在层级中会尺寸不一</li><li>拖入右下角后，设置锚点也在右下角</li></ul><h4 id="61-统计控件结构文件，攻击其他玩家造成伤害"><a href="#61-统计控件结构文件，攻击其他玩家造成伤害" class="headerlink" title="61 统计控件结构文件，攻击其他玩家造成伤害"></a>61 统计控件结构文件，攻击其他玩家造成伤害</h4><p>创建 蓝图结构 S_PlayerStats</p><ul><li>CurrentHealth float</li><li>MaxHealth float</li><li>CurrentFood float</li><li>MaxFood float</li><li>CurrentWater float</li><li>MaxWater float</li><li>CurrentStamina float</li><li>MaxStamina float</li><li>CurrentLevel int</li><li>CurrentExp int</li><li>SkillPoints int</li></ul><p>创建 蓝图枚举 E_StatEnum</p><ul><li>Health 健康</li><li>Food 食物</li><li>Water 水</li><li>Stamina 耐力</li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>增加 变量 PlayerStats S_PlayerStats<ul><li>默认值<ul><li>CurrentHealth 100</li><li>MaxHealth 100</li><li>CurrentFood 100</li><li>MaxFood 100</li><li>CurrentWater 100</li><li>MaxWater 100</li><li>CurrentStamina 100</li><li>MaxStamina 100</li><li>CurrentLevel 1</li><li>CurrentExp 0</li><li>SkillPoints 0</li></ul></li></ul></li></ul><p>OPEN BP_TP_Hatchet 增加 物品 对玩家的碰撞，对其伤害</p><ul><li>思路<ul><li>Apply Damage</li><li>Does Implement Interface 查看某个对象是否实现了 某个接口</li></ul></li><li>ServerOverlap 方法</li><li>碰撞 对象类型 增加 Pawn</li><li>循环 收货 方法<ul><li>循环体内 Does Implement Interface <ul><li>Interface &#x3D;&gt; BPI_LargeItem</li><li>判断 击中 玩家 print</li><li>Apply Damage<ul><li>Damage 固定 15</li><li>Damage Type Class &#x3D;&gt; DmgType_Type</li><li>Instigated By &#x3D;&gt; 发起者 为 CharRef 斧头拥有者 的 Get Controller</li><li>Damage Causer &#x3D;&gt; get a reference to self</li><li>Damage Event Class &#x3D;&gt; 伤害类型</li></ul></li></ul></li></ul></li></ul><p>BP_FirstPersonCharacter</p><ul><li>Event AnyDamage <code>这个事件是UE引擎自带的，要配合 Switch Has Authority 使用</code><ul><li>打印一下受到的伤害</li><li>设置玩家当前的血量</li></ul></li><li>增加 方法 ApplyDamageToPlayer<ul><li>Inputs<ul><li>Damage float</li><li>DamageCauser Actor</li></ul></li><li>根据 PlayerStats的值选取当前的血量</li><li>PlayerStats -&gt; Set Member In Struct<ul><li>CurrentHealth &#x3D;&gt; CurrentHealth</li></ul></li><li>判断当前血量是否小于等于0<ul><li>true<ul><li>print 死亡</li></ul></li><li>false<ul><li>print 受到伤害</li></ul></li></ul></li><li>更新 UI，调用 W_PlayerStatsWindow 的 UpdateBar 方法<ul><li>Get Controller 的 Survival Game PC Ref 的 PlayerControllerRef 下</li></ul></li></ul></li></ul><p>OPEN W_PlayerStatsWindow</p><ul><li>新增 UpdateBar 方法<ul><li>Inputs<ul><li>stat &#x3D;&gt; E_StatEnum</li><li>Current float</li><li>max float</li></ul></li><li>修改进度条<ul><li>根据 stat 的类型，判断是哪个进度条<ul><li>Health</li><li>Food</li><li>Water</li><li>Stamina</li></ul></li><li>修改 进度条 的 进度 Set Percent</li></ul></li><li>修改进度条提示文本<ul><li>根据 stat 的类型，判断是哪个文本</li></ul></li></ul></li></ul><p>OPEN SurvivalGamePC</p><ul><li>创建 自定义事件 UpdateStatBarOnClient<ul><li>Inputs<ul><li>stat E_StatEnum</li><li>Current float</li><li>max float</li></ul></li><li>调用 MainWidgetRef 的 Target W_PlayerStatsWindow 的 UpdateBar<ul><li>stat &#x3D;&gt; stat</li><li>Current &#x3D;&gt; Current</li><li>max &#x3D;&gt; max</li></ul></li></ul></li></ul><h4 id="62-食物和水的消耗"><a href="#62-食物和水的消耗" class="headerlink" title="62 食物和水的消耗"></a>62 食物和水的消耗</h4><p>思路：</p><ul><li>角色蓝图中 事件 Event BeginPlay 中 调用自定义事件 DecreaseStatsOverTimeOnServer</li><li>每隔一段时间循环执行</li><li>减少食物和水的值</li><li>更新客户端的UI</li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>创建 自定义事件 DecreaseStatsOverTimeOnServer 在服务器中 每隔一段时间循环执行</li><li>Set Timer by Event<ul><li>Event &#x3D;&gt; 创建 自定义事件 PassiveStatDrain<ul><li>创建方法 FoodWaterDrain</li></ul></li><li>Time 10s</li><li>Looping 勾选</li></ul></li><li>创建 方法 FoodWaterDrain<ul><li>DecreaseFloat 减少食物<ul><li>FloatToDecrease &#x3D;&gt; PlayerStats -&gt; CurrentFood</li><li>Percentage &#x3D;&gt; 0.02</li><li>Max &#x3D;&gt; PlayerStats -&gt; MaxFood</li></ul></li><li>判断是否饿死</li><li>DecreaseFloat 减少水<ul><li>FloatToDecrease &#x3D;&gt; PlayerStats -&gt; CurrentWater</li><li>Percentage &#x3D;&gt; 0.04</li><li>Max &#x3D;&gt; PlayerStats -&gt; MaxWater</li></ul></li><li>判断是否渴死</li><li>更新UI<ul><li>调用 W_PlayerStatsWindow 的 UpdateBar</li></ul></li></ul></li><li>创建 方法 DecreaseFloat <ul><li>Inputs<ul><li>FloatToDecrease float 当前的值</li><li>Percentage float 减少的百分比</li><li>Max float 最大值</li></ul></li><li>Outputs<ul><li>Return float</li></ul></li><li>Clamp(Float) : FloatToDecrease - Percentage * Max, 0, Max</li></ul></li></ul><p>测试：</p><ul><li>是否正常衰减</li><li>衰减完的提示</li></ul><h4 id="63-自动扣减血量-amp-amp-饥饿和口渴，并且触发提示"><a href="#63-自动扣减血量-amp-amp-饥饿和口渴，并且触发提示" class="headerlink" title="63 自动扣减血量 &amp;&amp; 饥饿和口渴，并且触发提示"></a>63 自动扣减血量 &amp;&amp; 饥饿和口渴，并且触发提示</h4><p>OPEN BP_FirstPersonCharacter 降低血量逻辑</p><ul><li>创建 变量 isDead? bool</li><li>创建 变量 isStarving? bool 是否饿死</li><li>创建 变量 isDehydrated? bool 是否脱水</li><li>创建 自定义事件 DecreaseHealthOverTimeOnServer<ul><li>Set Timer by Event<ul><li>Event &#x3D;&gt; 自定义事件 DecreaseHealth<ul><li>创建方法 HealthDrain</li></ul></li><li>Time 10s</li><li>Looping 勾选</li><li>Return Value &#x3D;&gt; 设置 变量 HealthDecreaseTimerHandle</li></ul></li></ul></li><li>创建 自定义事件 DecreaseHealth<ul><li>判断是否死亡   <ul><li>true<ul><li>HealthDecreaseTimerHandle -&gt; Clear and Invalidate Timer by Handle</li></ul></li><li>false<ul><li>判断 and bool<ul><li>isStarving?</li><li>isDehydrated?</li><li>true<ul><li>RemoveHealth 每秒 加倍 掉血 4</li></ul></li><li>false<ul><li>RemoveHealth 每秒 基础 掉血 2</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>创建 方法 RemoveHealth<ul><li>Inputs<ul><li>Amount float</li></ul></li><li>Apply Damage<ul><li>Damage Actor &#x3D;&gt; self</li><li>Base Damage &#x3D;&gt; Amount</li><li>Damage Type Class &#x3D;&gt; 伤害类型</li><li>Instigated By &#x3D;&gt; 发起者 为 CharRef 斧头拥有者 的 Get Controller</li><li>Damage Causer &#x3D;&gt; get a reference to self</li></ul></li></ul></li><li>修改 方法 FoodWaterDrain<ul><li>判断是否饿死<ul><li>true<ul><li>isStarving? &#x3D;&gt; true</li><li>HealthDecreaseTimerHandle -&gt; Is Timer Active by Handle</li></ul></li><li>false<ul><li>isStarving? &#x3D;&gt; false</li></ul></li></ul></li><li>判断是否渴死<ul><li>true<ul><li>isDehydrated? &#x3D;&gt; true</li><li>HealthDecreaseTimerHandle -&gt; Is Timer Active by Handle</li></ul></li><li>false<ul><li>isDehydrated? &#x3D;&gt; false</li></ul></li></ul></li></ul></li><li>方法 ApplyDamageToPlayer<ul><li>判断是否死亡<ul><li>true<ul><li>isDead? &#x3D;&gt; true</li></ul></li></ul></li></ul></li></ul><p>思路：</p><ul><li>控制扣减生命值执行 在 FoodWaterDrain 的方法中<ul><li>如果死亡则停止扣减</li></ul></li><li>扣减食物和水时，如果当前角色已死亡，则销毁定时器句柄</li></ul><p>创建 控件 S_StatNotificationWidget 在 _Main&#x2F;Widgets&#x2F;PlayerWidgets 目录下</p><ul><li>水平框<ul><li>Text Block 居中 Text:饥饿，请吃点东西 Size:45 Rename NotificationText 是变量<ul><li>增加动画 FadeinOutAnimation &#x3D;&gt; add Track  &#x3D;&gt; Render Opacity <ul><li>关键帧 0s:1 2s:0 4s:1</li></ul></li></ul></li><li>Image Image:food ImageSize:100x100 Rename StatImage 是变量</li></ul></li><li>事件图<ul><li>增加 变量 IsStarvingOrDehydrated? bool</li><li>构造事件<ul><li>FadeinOutAnimation 的 Play Animation<ul><li>Num Loops to Play &#x3D;&gt; 0</li></ul></li><li>判断是否 挨饿or脱水<ul><li>true<ul><li>IsStarvingOrDehydrated? &#x3D;&gt; true</li><li>NotificationText &#x3D;&gt; <ul><li>Set Text &#x3D;&gt; 饥饿，请吃点东西吧</li><li>Set Color and Opacity &#x3D;&gt; make slate color 红色 FF0500FF</li></ul></li><li>StatImage &#x3D;&gt; 使用纹理设置笔刷 Image:food</li></ul></li><li>false<ul><li>IsStarvingOrDehydrated? &#x3D;&gt; false</li><li>NotificationText &#x3D;&gt; <ul><li>Set Text &#x3D;&gt; 口渴，请喝点水吧</li><li>Set Color and Opacity &#x3D;&gt; make slate color 蓝色 0088FFFF (00FF72FF备用)</li></ul></li><li>StatImage &#x3D;&gt; 使用纹理设置笔刷 Image:water</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN W_Inventory</p><ul><li>新建 垂直框<ul><li>放入 S_StatNotificationWidget 控件 先看一下大致位置效果，然后删除</li><li>调整 垂直框<ul><li>size to Context</li><li>对齐 0.5 0，PositionY:70</li><li>Rename:NotificationBox 是变量</li></ul></li><li>删除 控件</li></ul></li><li>事件图 在Event中 将 S_StatNotificationWidget 放入 NotificationBox 中</li></ul><p>OPEN W_MainWidget</p><ul><li>创建 变量 存储通知 控件 StarvingWidget S_StatNotificationWidget 存储控件</li><li>创建 变量 存储通知 控件 DehydratedWidget S_StatNotificationWidget 存储控件</li><li>要根据 控件的 IsStarvingOrDehydrated? bool 来判断是 挨饿 还是 脱水</li><li>各个方法<ul><li>方法 ShowStarvingNotification 展示 挨饿通知，要获取无效的控件操作，如果存在则不需要创建</li><li>方法 RemoveStarvingNotification 移除 挨饿通知，要获取有效的控件操作，如果不存在则不需要移除</li><li>方法 ShowDehydratedNotification 展示 脱水通知，要获取无效的控件操作，如果存在则不需要创建</li><li>方法 RemoveDehydratedNotification 移除 脱水通知，要获取有效的控件操作，如果不存在则不需要移除</li></ul></li></ul><p>OPEN SurvivalGamePC</p><ul><li>创建 自定义事件 ShowOrHideStarvingOnClient</li><li>创建 自定义事件 ShowOrHideDehydratedOnClient</li><li>共同<ul><li>Inputs<ul><li>ShowOrHide? bool</li></ul></li><li>判断 ShowOrHide?<ul><li>Show</li><li>Hide</li></ul></li></ul></li></ul><h4 id="64-耐力消耗和恢复"><a href="#64-耐力消耗和恢复" class="headerlink" title="64 耐力消耗和恢复"></a>64 耐力消耗和恢复</h4><p>修复上一节课的bug</p><ul><li>在 FoodWaterDrain 方法中，获取控制器 UpdateStatBarOnClient 时，有可能部件正在创建，可能会获取不到，所以要判断是否有效<ul><li>增加判断<ul><li>判断 Get Controller 的 Return value 是否有效，有效则继续</li></ul></li></ul></li><li>自定义事件 DecreaseStatsOverTime 的 set Timer by Event 事件<ul><li>增加参数 Initial Start Delay 初始延迟时间 1s</li></ul></li></ul><p>目的：四处走动消耗耐力，停止行动恢复耐力<br>思路：</p><ol><li>获取用户当前的速度：角色移动 [Character Movement] -&gt; 获取组件当前的速度 [Get Velocity] -&gt; 获取向量长度 [Vector Length]</li></ol><p>OPEN_FirstPersonCharacter</p><ul><li><p>创建 变量 IsSprinting? bool</p></li><li><p>创建 变量 ShouldDrain? bool</p></li><li><p>事件 xx中</p></li><li><p>往后增加逻辑</p></li><li><p>如果 步行速度 如果大于 &gt; 100 则认为需要消耗耐力</p><ul><li>true<ul><li>执行 消耗耐力 方法 StartDrainStaminaOnServer</li></ul></li><li>false<ul><li>执行 恢复耐力 方法 StopDrainStaminaOnServer</li></ul></li></ul></li><li><p>增加 变量 ShouldDrain? bool</p></li><li><p>创建 自定义事件 StartDrainStaminaOnServer</p><ul><li>Do once</li><li>Set ShouldDrain? &#x3D;&gt; true</li><li>DrainStamina</li></ul></li><li><p>创建 自定义事件 StopDrainStamina</p><ul><li>Set ShouldDrain? &#x3D;&gt; false</li><li>执行方法 RegenStamina</li><li>转到 StartDrainStaminaOnServer 方法中的 Do once 的 Reset</li></ul></li><li><p>创建 自定义事件 DrainStamina 循环消耗耐力</p></li><li><p>创建 自定义事件 RegenStamina 回复耐力</p></li><li><p>创建 方法 RegenStaminaFunction</p></li><li><p>创建 方法 DrainStamFunction</p></li></ul><h4 id="65-Shift键-增加冲刺功能"><a href="#65-Shift键-增加冲刺功能" class="headerlink" title="65 Shift键 增加冲刺功能"></a>65 Shift键 增加冲刺功能</h4><p>思路：</p><ul><li>冲刺 消耗 耐力值</li><li>耐力值低下 则减少用户的速度</li><li>耐力值恢复 则恢复用户的速度</li><li>Character Movement -&gt; Set Max Walk Speed 设置最大行走速度</li></ul><p>OPEN FirstPersonCharacter 蓝图</p><ul><li>创建 变量 StamLow? bool</li><li>创建 自定义事件 SetWalkSpeedOnServer</li><li>创建 自定义事件 SetWalkSpeedNormalOnServer</li><li>创建 自定义事件 MulticastWalkSpeed</li><li>创建 自定义事件 SetStaminaOnClient</li><li>Shift键 Event</li></ul><div>                <img src="/blog/p/614a8811/DrainStamFunction_add耐力值改变速度.png" alt="DrainStamFunction_add耐力值改变速度.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[DrainStamFunction_add耐力值改变速度.png]</p>            </div><div>                <img src="/blog/p/614a8811/FirstPersonCharacter耐力冲刺改变速度.png" alt="FirstPersonCharacter耐力冲刺改变速度.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[FirstPersonCharacter耐力冲刺改变速度.png]</p>            </div><div>                <img src="/blog/p/614a8811/RegenStaminaFunction_add耐力值改变速度.png" alt="RegenStaminaFunction_add耐力值改变速度.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[RegenStaminaFunction_add耐力值改变速度.png]</p>            </div><h4 id="66-浆果等食物的恢复效果"><a href="#66-浆果等食物的恢复效果" class="headerlink" title="66 浆果等食物的恢复效果"></a>66 浆果等食物的恢复效果</h4><p>物品使用逻辑</p><ul><li>食物 找到对应属性 增加效果</li><li>删除食物</li><li>添加 音效</li></ul><ol><li>FirstPersonCharacter<ul><li>修改方法 UseHotbarFunction<ul><li>对于消耗品 执行 ConsumeItemFunction</li></ul></li><li>新增方法 ConsumeItemFunction <ul><li>执行 BPC_ItemsContainer 的 RemoveQuantity</li><li>找到对应消耗品的 消耗Info，循环执行 UpdateStatInstant 更新用户状态</li></ul></li></ul></li></ol><ul><li>新增方法 UpdateStatInstant<ul><li>根据 stat 类型 <ul><li>计算出相加的值 Clamp</li><li>赋值<ul><li>Food 类型 处理 饥饿状态 以及饥饿UI ShowOrHideStarvingOnClient</li><li>Water 类型 处理 缺水状态 以及缺水UI ShowOrHideDehydratedOnClient</li></ul></li></ul></li><li>更新 UI UpdateStatBar 控制器 生存游戏 PCRef &#x3D;&gt; UpdateStatBar</li></ul></li></ul><ol start="2"><li>BPC_ItemsContainer<ul><li>新增方法 RemoveQuantity<ul><li>考虑 <code>&lt;= 0</code></li><li>执行方法 UpdateItemQuantity</li></ul></li><li>新增方法 UpdateItemQuantity<ul><li>设置 Items 的 item</li><li>设置 Items Array</li><li>更新UI</li></ul></li></ul></li></ol><p>选取的食物是浆果，ID 6</p><p>创建 蓝图结构文件 S_Consumable 在 _Main&#x2F;Blueprints&#x2F;Structures&#x2F;ConsumableStructs 目录下</p><ul><li>StatToModify E_StatEnum</li><li>InstantEffect? bool 是否即时增益</li><li>RestoreAmount Float</li><li>OverTime? bool 增益持续时间</li><li>OverTimeAmount Float 效果持续时间</li><li>OverTimeDuration Float 每段时间增益</li></ul><p>创建 蓝图结构文件 S_ConsumableInfo 在 _Main&#x2F;Blueprints&#x2F;Structures&#x2F;ConsumableStructs 目录下</p><ul><li>ItemName Text</li><li>StatsToUpdate S_Consumable array</li></ul><p>创建 其他-数据表 FROM S_ConsumableInfo 名字：DT_Consumables</p><ul><li>创建数据<ul><li>RowName 6</li><li>ItemName 浆果</li><li>StatsToUpdate<ul><li>0<ul><li>StatToModify 食物</li><li>InstantEffect? true</li><li>RestoreAmount 2</li><li>OverTime? false</li><li>OverTimeAmount 0</li><li>OverTimeDuration 0</li></ul></li><li>1      <ul><li>StatToModify 水</li><li>InstantEffect? true</li><li>RestoreAmount 4</li><li>OverTime? false</li><li>OverTimeAmount 0</li><li>OverTimeDuration 0</li></ul></li></ul></li></ul></li></ul><p>OPEN FirstPersonCharacter</p><ul><li>创建 方法 ConsumeItemFunction<ul><li>Inputs<ul><li>ItemIndex int</li><li>ContainerType E_ContainerType</li></ul></li><li>设置 参数 为本地变量</li><li>消耗物品</li><li>根据物品找出消耗后的属性</li><li>BPC_PlayerInventory &#x3D;&gt; select &amp; BPC_PlayerHotbar</li><li>RemoveQuantity</li><li>UpdateStatInstant</li></ul></li><li>使用快捷栏物品 Event 触发<ul><li>ConsumeItemFunction</li></ul></li></ul><p>BPC_ItemsContainer 增加 更新物品数量的方法 UpdateItemQuantity</p><ul><li>Inputs<ul><li>Index</li><li>Quantity</li></ul></li><li>Params 都 设置本地</li><li>设置 S_ItemInfo Array Elem<ul><li><code>&lt;=0</code> 删除 执行 RemoveItemIndex</li><li><code>&gt;0</code> 更新UI</li></ul></li><li>Return Node<ul><li>RemoveOrUpdate?</li></ul></li></ul><p>BPC_ItemsContainer 增加方法 RemoveQuantity</p><ul><li>删除指定物品指定数量</li><li>Inputs<ul><li>Index</li><li>AmountToRemove</li></ul></li><li>Items &#x3D;&gt; Get Copy</li><li>UpdateItemQuantity</li><li>Return Node<ul><li>Removed?</li><li>RemovedAmount</li></ul></li></ul><p>OPEN FirstPersonCharacter 增加 更新状态 方法 UpdateStatInstant</p><ul><li>Inputs<ul><li>StatToChange E_Stat Enum</li><li>Amount float</li></ul></li><li>PlayerStats Break S_PlayerStats </li><li>根据 Stats 分别 进行增益</li><li>更新 hotbar 设置最大值</li></ul><p>浆果类型 设置为 消耗品 Consumable</p><h4 id="67-消耗品持续增益效果"><a href="#67-消耗品持续增益效果" class="headerlink" title="67 消耗品持续增益效果"></a>67 消耗品持续增益效果</h4><p>增加物品 DT_Items</p><ul><li>ID 8</li><li>Q 1</li><li>Icon Tex_meat_07_b</li><li>Name Cooked Meat</li><li>说明 Restores Food and Health Over Time</li><li>StackSize 30</li><li>Type 消耗品<br>增加 消耗品的增益信息 DT_Consumables</li><li>ID 2</li><li>Row Name 8 </li><li>Name Cooked Meat</li><li>增益 Health</li><li>OverTime? True</li><li>10</li><li>5</li></ul><ol><li>FirstPersonCharacter</li></ol><ul><li>增加 Event UpdateStatOverTime<ul><li>根据不同的 StatToChange E_Stat enum 定时执行不同的 Function （Set Timer by Function Name）</li><li>赋值<ul><li>对应状态的 xxAmount 变量</li><li>对应状态的 xxTimer 定时器句柄</li></ul></li></ul></li><li>增加 方法 <ul><li>HealthOverTimeFunction<ul><li>if 当前增益类型 Amount &lt;&#x3D;0 重置定时器句柄</li><li>修改 当前增益类型 Amount - 1</li><li>执行 StatOverTimeFunction</li></ul></li><li>FoodOverTimeFunction<ul><li>同上</li></ul></li><li>WaterOverTimeFunction<ul><li>同上</li></ul></li><li>StaminaOverTimeFunction<ul><li>同上</li></ul></li></ul></li><li>增加 方法 StatOverTimeFunction<ul><li>根据参数 计算出增益的值<ul><li>UpdateStatBar</li><li>设置 PlayerStats</li></ul></li></ul></li><li>修改 方法 ConsumeItemFunction <ul><li>对于 InstantEffect? false &amp; OverTime? true 的  执行 Event UpdateStatOverTime</li></ul></li></ul><p>UpdateStatOverTime</p><ul><li>Inputs<ul><li>StatToChange E_Stat enum</li><li>OverTimeAmount float</li><li>Duration float</li></ul></li><li>根据 StatToChange Switch<ul><li>LocalHealthAmount</li><li>LocalFoodAmount</li><li>LocalWatchAmount</li><li>LocalStaminaAmount</li><li>Set Timer by Event<ul><li>Time &#x3D; OverTimeAmount&#x2F;Duration</li><li>FunctionName &#x3D; HealthOverTime</li><li>LocalHealthTimer</li><li>LocalFoodTimer</li><li>LocalWatchTimer</li><li>LocalStaminaTimer</li></ul></li></ul></li></ul><p>StatOverTimeFunction</p><ul><li>Inputs<ul><li>StatToChange E_Stat enum</li><li>Amount float</li></ul></li><li>转为本地变量</li><li>PlayerStats break</li><li>LocalStat Select</li><li><code>+</code> LocalAmount Clamp<ul><li>Max LocalStat Select</li></ul></li><li>Set LocalCurUpdatedAmount</li><li>UpdateStatBar 方法</li><li>LocalStat Switch</li><li>设置用户状态 PlayerStats Set members</li></ul><h4 id="68-玩家统计信息窗口部件（玩家等级信息）UI"><a href="#68-玩家统计信息窗口部件（玩家等级信息）UI" class="headerlink" title="68 玩家统计信息窗口部件（玩家等级信息）UI"></a>68 玩家统计信息窗口部件（玩家等级信息）UI</h4><p>导入纹理文件</p><p>创建部件 用户部件 部件蓝图 用户部件 W_PlayerStat</p><ul><li>添加变量<ul><li>StatName Text</li><li>Stat E_Stat Enum 可公开可编辑</li></ul></li><li>Size box 重写 WH：500 50<ul><li>水平框<ul><li>覆盖 Fill<ul><li>边框 全居中 笔刷颜色 透明度0<ul><li>进度条 padding 10 5 70 10 COLOR 009C73FF</li></ul></li><li>文本 padding:20 5 0 5 Text Health bind：StatName font-size:25 </li><li>文本 padding:0 0 90 0 水平右居 垂直中 Font:100&#x2F;100 Rename:StatText 是变量</li><li>尺寸框 水平右 垂直中 P:0 0 15 0 重写WD:40 40<ul><li>按钮 Rename:LevelStatButton 是变量 image:boxbutton 绘画成 图像 normal:color:FFFFFFFF 复制 Hovered、Pressed  Hovered：color:FFCE00FF Pressed:color:3FFF00FF<ul><li>文本 Text： + 文本对齐(Justfication):居中 padding 4 2 4 5</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>创建部件 用户接口 部件蓝图 W_PlayerInfoWindow</p><ul><li>SizeBox 重写WH:500 240<ul><li>垂直框 拉伸<ul><li>水平框 填充<ul><li>覆盖 填充<ul><li>Border 全居中 笔刷透明度0<ul><li>进度条 P:10 5 10 5 Color:00CE4AFF</li></ul></li><li>Text Rename:ExperienceText 是变量 垂直居中 P:20 5 0 5 size:15 Text:XP:1000&#x2F;5000</li><li>Text Rename:SkillPointsText 是变量 右居中 垂直居中 P:0 0 20 0 size:18 Text:技能点:0</li></ul></li></ul></li><li>部件 W_PlayerStat 修改默认值和名字 W_PlayerStatHealth stat:Health</li><li>部件 W_PlayerStat 修改默认值和名字 W_PlayerStatFood stat:Food</li><li>部件 W_PlayerStat 修改默认值和名字 W_PlayerStatWater stat:Water</li><li>部件 W_PlayerStat 修改默认值和名字 W_PlayerStatStamina stat:Stamina</li></ul></li></ul></li></ul><p>修改部件 W_Inventory<br>中间Player name<br>的 VBV中增加水平盒子</p><ul><li>水平<ul><li>垂直</li><li>垂直</li></ul></li><li>水平<ul><li>垂直(头盔 护甲) 用于 <ul><li>间隔区 Spacer Size:90,30</li></ul></li><li>垂直 填充<ul><li>size box 重写WH:200 250 填充<ul><li>Overlay<ul><li>Border 居中 35 5 35 5 纹理：craftoverlay 拉伸</li></ul></li></ul></li><li>部件 W_PlayerInfoWindow</li></ul></li></ul></li></ul><p>W_Inventory Player Name同级</p><ul><li>Size Box 重写WH:50 <ul><li>Border 纹理：testlvlicon<ul><li>TextBlock Rename PlayerLevelText 是变量 1 居中</li></ul></li></ul></li><li>Text Player Name 设置 Padding-left:40</li></ul><h4 id="69-玩家统计信息窗口部件（玩家等级信息）逻辑"><a href="#69-玩家统计信息窗口部件（玩家等级信息）逻辑" class="headerlink" title="69 玩家统计信息窗口部件（玩家等级信息）逻辑"></a>69 玩家统计信息窗口部件（玩家等级信息）逻辑</h4><p>W_PlayerStat 部件</p><ul><li>增加 Event UpdateStatWidget<ul><li>Inputs<ul><li>Current float</li><li>Max float</li></ul></li><li>Set Percent 设置 进度条 &#x3D; Current&#x2F;Max</li><li>SetText 变量 StatText &#x3D; format Text &#x3D;”{Current}&#x2F;{Max}”<ul><li>format Int</li></ul></li></ul></li></ul><p>W_PlayerInfoWindow 部件</p><ul><li>增加 Event <ul><li>Inputs UpdateStat<ul><li>StatToUpdate E_Stat Enum</li><li>Current float</li><li>Max float</li></ul></li><li>根据 部件的参数 Stat 选择更改 对应的 Text 和 进度条 <ul><li>Return 部件对象</li></ul></li><li>执行 部件内部的 Update Stat Widget 方法</li></ul></li></ul><p>SurvivalGame_PC</p><ul><li>事件 UpdateStatBar 中 同时更新  UpdateStat</li></ul><h4 id="70-经验和升级-逻辑"><a href="#70-经验和升级-逻辑" class="headerlink" title="70 经验和升级 逻辑"></a>70 经验和升级 逻辑</h4><p>成功制作物品后，物品如果有经验设置，则增加玩家经验。调用First事件 -&gt; AddExpFun -&gt; Survival</p><p>创建文件夹 蓝图 结构 &gt; MiscStructures<br>创建蓝图结构 S_ExperienceStruct</p><ul><li>ExpNeeded Int<br>新建数据表 经验表 Pick S_ExperienceStruct Rename DT_ExperienceTable</li><li>1 1 15</li><li>2 2 34</li><li>3 3 57</li><li>4 4 92</li><li>5 5 135</li><li>6 6 372</li><li>7 7 560</li><li>8 8 840</li><li>9 9 1240</li><li>10 10 1716</li><li>… 可以google一个经验表</li></ul><p>BP_FirstPersonCharacter</p><ul><li>创建 方法 AddExpFunction 给玩家增加经验 <ul><li>思路<ul><li>通过增加经验 自动增加 Level</li><li>经验和等级在 PlayerStat 存储</li><li>通过当前等级 获取 当前所处的 Level</li><li>存储 未添加的经验，循环升级</li><li>提示用户增加经验 SurvivalGame_PC 的 UpdateExpUIOnClient</li></ul></li><li>Inputs<ul><li>Exp Int</li></ul></li></ul></li></ul><p>设置 经验升级 进度条<br>W_PlayerInfoWindow</p><ul><li>创建 Event UpdateExp<ul><li>Inputs<ul><li>CurrentExp int</li><li>MaxExp int</li></ul></li><li>经验进度条百分比</li><li>经验进度条提示文本</li></ul></li></ul><p>BP_FirstPersonCharacter</p><ul><li>创建 Event AddExpOnServer<ul><li>执行 AddExpFunction</li></ul></li></ul><p>SurvivalGame_PC 增加 Event UpdateExpUIOnClient</p><ul><li>Inputs<ul><li>CurrentExp int</li><li>MaxExp int</li></ul></li><li>执行 W_PlayerStat 下的 Add方法</li></ul><p>设置物品制作成功后的经验值<br>设置PlayerStat的默认值 文字+百分比</p><h4 id="71-经验和-升级-增加通知"><a href="#71-经验和-升级-增加通知" class="headerlink" title="71 经验和 升级 增加通知"></a>71 经验和 升级 增加通知</h4><p>获取经验后，弹出获得经验通知：渐入渐出+变大变小，2s后消失。<br>升级后，弹出升级通知：渐入渐出+变大变小，2s后消失。并且更新Tab的当前等级数值</p><h5 id="添加经验通知"><a href="#添加经验通知" class="headerlink" title="添加经验通知"></a>添加经验通知</h5><p>创建用户接口 部件 W_ExperienceText in PlayerWidgets 目录</p><ul><li>创建 变量 Exp Int 可编辑可公开</li><li>水平框<ul><li>Text 紫色 文字：获得 x100 经验值 Bind 创建绑定 UpdateExpText Format Test 通过变量 Exp 更改<ul><li>为上面文字 增加动画 动画 + track Text 转换 关键帧 <ul><li>变大变小 &lt;1s</li><li>渐入渐出 0 1s 2s</li></ul></li></ul></li></ul></li><li>构造函数<ul><li>Play Animation 播放动画</li><li>Bind to Animation Finished<ul><li>Delegate -&gt; 自定义事件 DestroySelf<ul><li>Remove from parent</li></ul></li></ul></li></ul></li></ul><p>将部件 放在 W_MainWidget 中，与 NotificationBox 下</p><ul><li>增加 自定义事件 AddExpNotification<ul><li>Inputs<ul><li>ExpAmount</li></ul></li><li>创建 W_ExperienceText 部件</li><li>Add Child 到 Notification box</li></ul></li></ul><p>SurvivalGamePC</p><ul><li>创建 Event ExpNotifyOnClient<ul><li>Inputs<ul><li>Exp</li></ul></li><li>执行 MainWidgetRef 的 AddExpNotification</li></ul></li></ul><p>BP_FirstPersonCharacter</p><ul><li>AddExpFunction</li><li>UpdateExpUI 后 执行 ExpNotify</li></ul><h5 id="玩家升级通知"><a href="#玩家升级通知" class="headerlink" title="玩家升级通知"></a>玩家升级通知</h5><p>创建 升级 部件 W_LevelNotification</p><ul><li>垂直框<ul><li>text 等级提升！ 当前等级：1  填充 size:45 居中 粉色 FFB8C8FF  Rename:LevelUpText</li><li>text 新技能点可用！ 填充 size: 35 居中 绿色 C5FFBCFF Rename:SkillPointsText</li></ul></li><li>构建动画 Rename TextPopAnimation<ul><li>为 LevelUpText 增加 两个效果 同上</li></ul></li><li>构建动画 Rename SkillPointsAnimation<ul><li>为 LevelUpText 增加 两个效果 同上</li></ul></li><li>Graph<ul><li>构造函数 播放两个动画 不需要销毁自身</li></ul></li></ul><p>SurvivalGame_PC</p><ul><li>创建 Event UpdateLevelUIOnClient<ul><li>Inputs<ul><li>PlayerLevel</li></ul></li><li>执行 部件的 UpdatePlayerLevel</li></ul></li></ul><p>BP_FirstPersonCharacter</p><ul><li>AddExpFunction</li><li>ExpNotify 后 执行 UpdateLevelUIOnClient</li></ul><p>W_MainWidget</p><ul><li>创建 事件 ShowLevelUpNotification<ul><li>播放 等级提升通知</li><li>注意：这里需要创建 W_LevelNotification 控件，并且保存为变量</li><li>放入 NotificationBox 中(添加子项)</li></ul></li></ul><p>SurvivalGamePC</p><ul><li>创建 Event LevelNotifyOnClient<ul><li>Inputs<ul><li>Level</li></ul></li><li>执行 MainWidgetRef 的 ShowLevelUpNotification<div>            <img src="/blog/p/614a8811/SurvivalGamePC_LevelNotifyOnClient.png" alt="SurvivalGamePC_LevelNotifyOnClient.png"></img>            <p style="            display: flex;            color: #999;            justify-content: center;            font-size: 0.8rem;            position: relative;            top: -1rem;            right: 50%;            left: 50%;            transform: translateX(-50%);            ">[SurvivalGamePC_LevelNotifyOnClient.png]</p>        </div></li></ul></li></ul><p>修改W_Inventory控件的等级提示</p><div>                <img src="/blog/p/614a8811/修改W_Inventory控件的等级提示.png" alt="修改W_Inventory控件的等级提示.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[修改W_Inventory控件的等级提示.png]</p>            </div><h4 id="72-玩家统计数据-技能点"><a href="#72-玩家统计数据-技能点" class="headerlink" title="72 玩家统计数据 技能点"></a>72 玩家统计数据 技能点</h4><p>思路：</p><ol><li>玩家每次升级 增加 1 技能点</li><li>技能点用于 增加 Stat 比例 1:100</li><li>技能点是0，则需要关闭等级通知</li></ol><p>BP_FirstPersonCharacter</p><ul><li>创建 方法 UseLevelUpSkillPoint<ul><li>Inputs<ul><li>Stat</li></ul></li><li>如果当前技能点&gt;0,则可以增加对应的stat<ul><li>比例1:100</li></ul></li><li>更新 技能点 &amp; UI</li><li>更新 用户状态 &amp; UI</li></ul></li><li>创建 事件 ApplyUpLevelSkillPointOnServer<ul><li>Inputs<ul><li>Stat</li></ul></li><li>UseLevelUpSkillPoint</li></ul></li><li>AddExpFunction 后<ul><li>新增局部变量 SkillPoints</li><li>UpdateSkillPoints</li></ul></li></ul><p>W_PlayerInfoWindow</p><ul><li>增加 Event UpdateUpLevelSkillPoint<ul><li>Inputs<ul><li>SkillPoints</li></ul></li><li>修改对应的文字</li></ul></li></ul><p>SurvivalGamePC</p><ul><li>创建 Event UpdateUpLevelSkillPointOnClient<ul><li>UpdateUpLevelSkillPoint</li></ul></li><li>创建 Event RemoveLevelNotifyOnClient<ul><li>RemoveLevelUpNotification</li></ul></li></ul><p>W_MainWidget</p><ul><li>增加 Event RemoveLevelUpNotification</li><li>get is Valid</li><li>如果有效，则从父项移除</li></ul><p>W_PlayerStat</p><ul><li>LevelStatButton Click 事件<ul><li>Get Owning Player Pawn &#x3D;&gt; Get Survival Char Ref &#x3D;&gt; ApplyUpLevelSkillPointOnServer</li><li>执行 ApplyUpLevelSkillPointOnServer</li></ul></li></ul><h3 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h3><h4 id="73-盔甲装备"><a href="#73-盔甲装备" class="headerlink" title="73 盔甲装备"></a>73 盔甲装备</h4><h4 id="74-创建盔甲卡槽部件UI"><a href="#74-创建盔甲卡槽部件UI" class="headerlink" title="74 创建盔甲卡槽部件UI"></a>74 创建盔甲卡槽部件UI</h4><p>OPEN W_InventorySlot</p><ul><li>事件图<ul><li>增加变量 BackgroundImage Texture 2D<ul><li>设置 默认值 图片 Inventory_Slot_Background</li><li>可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li></ul></li><li>ArmorSlot? bool 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li><li>ArmorType E_ArmorType 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li><li>SlotStyle 可编辑实例[Instance Editable]，完成时公开[Expose on Spawn]</li></ul></li><li>设计<ul><li>将其他信息隐藏，只剩的背景 就是想要的卡槽效果</li></ul></li><li>Event Construct 构造函数<ul><li>SlotStyle &#x3D;&gt; Set Brush From Texture 给背景增加图片<ul><li>Texture &#x3D;&gt; BackgroundImage</li></ul></li></ul></li></ul><p>OPEN W_Inventory</p><ul><li>将 W_InventorySlot 放入到 W_Inventory 中（中间角色人物的左边垂直框）<ul><li>Spacer 的下面</li></ul></li><li>W_InventorySlot P:10 0 10 0</li><li>复制 Spacer + W_InventorySlot 生成四个框</li></ul><p>安装下载文件 CharacterWindow_Slot_xxx.TGA 四个文件 导入到 _Main&#x2F;Widgets&#x2F;Textures 目录中</p><ul><li>第1个框 Rename:HelmetSlot 背景图 CharacterWindow_Slot_Head  默认值ArmorSlot?true Helmet</li><li>第2个框 Rename:ChestSlot 背景图 CharacterWindow_Slot_Chest 默认值ArmorSlot?true Chest</li><li>第3个框 Rename:PantsSlot 背景图 CharacterWindow_Slot_Pants 默认值ArmorSlot?true Pants</li><li>第4个框 Rename:BootsSlot 背景图 CharacterWindow_Slot_Boots 默认值ArmorSlot?true Boots</li></ul><p>玩家人物背景图 Border</p><ul><li>Padding-left: 15</li></ul><h4 id="75-创建装甲物品类"><a href="#75-创建装甲物品类" class="headerlink" title="75 创建装甲物品类"></a>75 创建装甲物品类</h4><p>导入 材质包 _Main Widgets Textures ItemIcon 下</p><p>OPEN DT_Items 添加物品上面材质的物品</p><ul><li>鞋子<ul><li>ID 9</li><li>数量 1</li><li>说明 Leather Boots</li><li>Icon boots</li><li>ItemDamage 100</li><li>CurHP 100</li><li>MaxHP 100</li><li>Type Armor</li><li>ArmorType Boots</li><li>ClassRef BP_ArmorBoots 下面创建文件后再设置</li></ul></li><li>裤子<ul><li>ID 10</li><li>数量 1</li><li>说明 Pants</li><li>Icon pants</li><li>ItemDamage 100</li><li>CurHP 100</li><li>MaxHP 100</li><li>Type Armor</li><li>ArmorType Pants</li><li>ClassRef BP_ArmorPants</li></ul></li><li>衣服<ul><li>ID 11</li><li>数量 1</li><li>说明 Shirt</li><li>Icon Shirt</li><li>ItemDamage 100</li><li>CurHP 100</li><li>MaxHP 100</li><li>Type Armor</li><li>ArmorType Chest</li><li>ClassRef BP_ArmorChest</li></ul></li><li>面具<ul><li>ID 12</li><li>数量 1</li><li>说明 Leather Mask</li><li>Icon mask</li><li>ItemDamage 100</li><li>CurHP 100</li><li>MaxHP 100</li><li>Type Armor</li><li>ArmorType Helmet</li><li>ClassRef BP_ArmorHelmet</li></ul></li></ul><p>为 BP_ItemMaster 创建蓝图子类 BP_ArmorMaster<br>蓝图s Items 下 创建文件夹 Armor<br>OPEN BP_ArmorMaster</p><ul><li>创建 变量 ItemInfo S_ItemInfo</li></ul><p>为 BP_ArmorMaster 创建蓝图接口文件 BPI_ArmorItem</p><ul><li>创建 方法 GetArmorRef<ul><li>Outputs<ul><li>ArmorRef BP_ArmorMaster Object</li></ul></li></ul></li></ul><p>OPEN BP_ArmorMaster</p><ul><li>类设置<ul><li>增加 BPI_ArmorItem 接口</li><li>Return self</li></ul></li><li>增加 骨骼网格 子类实现</li></ul><p>为 BP_ArmorMaster 创建蓝图子类 BP_ArmorBoots 放入 蓝图s Items Armor下</p><ul><li>网格选择 SK_Man_Shoes</li><li>创建好文件后 设置DT_Items的ClassRef</li><li>类默认设置的ItemInfo，可以复制 DT_Items 的信息，然后对准 ItemInfo 粘贴</li></ul><p>为 BP_ArmorMaster 创建蓝图子类 BP_ArmorChest 放入 蓝图s Items Armor下</p><ul><li>网格选择 SK_Man_Pullover</li><li>创建好文件后 设置DT_Items的ClassRef</li><li>类默认设置的ItemInfo，可以复制 DT_Items 的信息，然后对准 ItemInfo 粘贴</li></ul><p>为 BP_ArmorMaster 创建蓝图子类 BP_ArmorHelmet 放入 蓝图s Items Armor下</p><ul><li>网格选择 SK_Man_Balaclava</li><li>创建好文件后 设置DT_Items的ClassRef</li><li>类默认设置的ItemInfo，可以复制 DT_Items 的信息，然后对准 ItemInfo 粘贴</li></ul><p>为 BP_ArmorMaster 创建蓝图子类 BP_ArmorPants 放入 蓝图s Items Armor下</p><ul><li>网格选择 SK_Man_Pants </li><li>创建好文件后 设置DT_Items的ClassRef</li><li>类默认设置的ItemInfo，可以复制 DT_Items 的信息，然后对准 ItemInfo 粘贴</li></ul><h4 id="76-设置装备装甲功能"><a href="#76-设置装备装甲功能" class="headerlink" title="76 设置装备装甲功能"></a>76 设置装备装甲功能</h4><p>思路：<br>如果 W_InventorySlot 中 拖动松开的位置是卡槽(ArmorSlot?)，则执行其他装备穿戴逻辑<br>增加的逻辑：生成物品后，需要将物品 需要多播 将物品附加到角色上，并且将动画复制过来，更新装备卡槽信息，删除背包的物品</p><p>OPEN BP_FirstPersonCharacter</p><ul><li>创建 Event EquipArmorOnServer<ul><li>Inputs<ul><li>FromContainer E_ContainerType</li><li>FromIndex Int</li><li>ArmorType E_ArmorType</li></ul></li></ul></li></ul><p>OPEN W_InventorySlot</p><ul><li>编辑 OnDrop 逻辑</li><li>如果 拖动松开的位置是卡槽(ArmorSlot?) &amp;&amp; 物品类型是 Armor类型</li><li>执行 玩家角色 &#x3D;&gt; SurvivalGamePC 的 EquipArmorOnServer</li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>创建 变量 HelmetSlot BP_ItemMaster Object</li><li>创建 变量 ChestSlot BP_ItemMaster Object</li><li>创建 变量 PantsSlot BP_ItemMaster Object</li><li>创建 变量 BootsSlot BP_ItemMaster Object</li><li>编辑 EquipArmorOnServer<ul><li>调用 EquipArmor</li></ul></li><li>方法 EquipArmor<ul><li>只能从 PlayerInventory 中装备</li><li>当前 ArmorType select 来装进对应的 变量中，并且需要 Is Valid<ul><li>有效，则需要交换</li><li>无效，则直接装备上</li></ul></li><li>获取指定的物品，赋值变量 BPC_PlayerInventory Items 通过参数 Index<ul><li>只能装备 Armor 类型的物品</li><li>检测 正在装备的类型 &#x3D;&#x3D;&#x3D; 已经装备物品的类型 是否相等</li></ul></li><li>SpawnActor<ul><li>Class 选择 物品的 ClassRef</li><li>分割结构体引脚</li></ul></li><li>当前 ArmorType select 来装进对应的 变量</li><li>set Owner 为 self 目标是 SpawnActor 的 Return</li><li>PoseCompMulticast<ul><li>Target 是 SpawnActor 的 Return</li></ul></li><li>Get Armor Ref<ul><li>Target 是 SpawnActor 的 Return</li></ul></li><li>UpdateArmorUIOnClient<ul><li>Get Controller 的 SurvivalGamePC</li></ul></li><li>BPC_PlayerInventory RemoveItemAtIndex</li></ul></li><li>创建 Event PoseCompMulticast<ul><li>Inputs<ul><li>Target BP_ItemMaster</li></ul></li><li>is Valid </li><li>Attach Actor To Component<ul><li>Parent 是 第三人称网格</li><li>三个Rule 都是 Snap to Target</li></ul></li><li>Get Armor Ref</li><li>MasterPoseEventMulticast<ul><li>CharRef 选择 Self</li></ul></li></ul></li></ul><p>OPEN BP_ArmorMaster</p><ul><li>创建 Event MasterPoseEventMulticast 从第三人称网格 复制动画<ul><li>Inputs<ul><li>CharRef BP_FirstPersonCharacter</li></ul></li><li>设置 骨骼网格 &#x3D;&gt; 设置总姿势组件 Set Master Pose Component<ul><li>New Master Bone Component 选择 Get Survival Char Ref 的 第三人称网格</li></ul></li></ul></li></ul><p>OPEN SurvivalGamePC</p><ul><li>创建 Event UpdateArmorUIOnClient 描述 更新装备部件UI<ul><li>Inputs<ul><li>ArmorType E_ArmorType</li><li>ItemInfo S_ItemInfo</li></ul></li><li>UpdateArmorSlot</li></ul></li></ul><p>OPEN W_Inventory</p><ul><li>创建 Event UpdateArmorSlot<ul><li>Inputs<ul><li>ArmorType E_ArmorType</li><li>ItemInfo S_ItemInfo</li></ul></li><li>通过 type 分别 更新物品 到指定的 变量(部件中)</li><li>UpdateSlot</li></ul></li></ul><p>测试逻辑：</p><ol><li>设置R键赋予的物品 id &#x3D; 11</li><li>运行时 设置两个玩家 预览</li></ol><p>测试 本人玩家是可以看到衣服的，需要设置 BP_ArmorMaster 的 OwnerNoSee &#x3D; true</p><h4 id="77-装备移动到背包"><a href="#77-装备移动到背包" class="headerlink" title="77 装备移动到背包"></a>77 装备移动到背包</h4><p>OPEN BP_FirstPersonCharacter</p><ul><li>修改 Event OnSlotDropOnServer<ul><li>如果是 装备类型 则执行 DequipArmor</li></ul></li><li>创建 Event DequipArmor<ul><li>Inputs <ul><li>ArmorType E_ArmorType</li></ul></li><li>DequipArmorFunction</li></ul></li><li>创建 方法 DequipArmorFunction<ul><li>Inputs <ul><li>ArmorType E_ArmorType</li></ul></li><li>获取对应的 Armor对象 </li><li>使用 Is Valid 获取</li><li>Get Armor Ref<ul><li>Target Armor对象</li></ul></li><li>将物品增加到 Inventory BPC_PlayerInventory 的 AddItemOnServer</li><li>Destroy Actor<ul><li>装备的物品</li></ul></li><li>将对应的装备变量设置为空</li><li>移除ArmorUI SurvivalGamePC 的 RemoveArmorUIOnClient</li></ul></li></ul><p>OPEN SurvivalGamePC</p><ul><li>创建 Event RemoveArmorUIOnClient<ul><li>Inputs<ul><li>ArmorType E_ArmorType</li></ul></li><li>W_Inventory 的 RemoveArmorSlot</li></ul></li></ul><p>OPEN W_Inventory</p><ul><li>创建 方法 RemoveArmorSlot<ul><li>Inputs<ul><li>ArmorType E_ArmorType</li></ul></li><li>对应槽的 ResetSlot Event <code>用来清除 卡槽内的物品 恢复之前的样子</code></li></ul></li></ul><p>测试发现 从装备栏中 无法获取 对应的 容器Type，所以需要在 W_InventorySlot 中 公开并且可修改</p><ul><li>在 W_Inventory 中 修改四个装备栏的 容器 Type</li></ul><h4 id="78-设置播放器窗口蓝图第-1-部分"><a href="#78-设置播放器窗口蓝图第-1-部分" class="headerlink" title="78 设置播放器窗口蓝图第 1 部分"></a>78 设置播放器窗口蓝图第 1 部分</h4><p>3D预览角色<br>思路：BP_FirstPersonCharacter 初始化时，执行一次 场景渲染</p><ul><li>场景渲染 生成 Actor BP_PlayerWindow 并且初始化</li><li>初始化过程中<ul><li>创建动态材质实例 设置纹理 &#x3D;&gt; 渲染 2D</li></ul></li><li>放入 Tab 的 PlayerImage 中(使用材质设置笔刷)</li><li>开启游戏后，按Tab可以看到对应的2D图像</li></ul><p>创建文件夹 蓝图s PlayerWindows<br>创建 纹理 渲染目标 PlayerRenderTarget In PlayerWindows</p><ul><li>size: 500 800</li></ul><p>创建 材质 M_PlayerMaterial In PlayerWindows</p><ul><li>材质 材质域(Domain):用户界面(UserInterface)</li><li>图示<ul><li>混合模式 Blend Mode 改为：半透明</li><li>创建 param 2d （纹理单一参数2D）<ul><li>RGB  &#x3D; Final Color</li><li>A 连接 1-(OneMinus) &#x3D; Opacity 透明度</li></ul></li></ul></li><li>Param 的材质 ：PlayerRenderTarget</li></ul><p>OPEN W_Inventory</p><ul><li>选择 动画区 Overlay<ul><li>增加 Image 放到 border 下方 全撑开 Padding:60 0 60 0 Rename：PlayerImage</li></ul></li></ul><p>PlayerWindows 文件夹下 创建 新蓝图类 Actor Rename:BP_PlayerWindow</p><ul><li>增加简单碰撞胶囊体[Capsule Collision] 变换 Scale：2.8 1.8 2.1<ul><li>增加 骨骼网格 材质:SK_Man_Full_01 调整物体 在 中心位置的 正上方</li><li>调整 胶囊体和骨骼网格的位置并且包裹起来</li><li>增加 场景捕获组件2D(在碰撞体内添加) 调整方向 正对角色  变换 位置：1.6 86 2 Rotation:0 -5 -90 抛射(Projection) 的 视场(FieldOfView) 设置 50<ul><li>General Show Flags 通用显示标志<ul><li>打开 骨骼网格 静态网格 和 Anti-aliasing(抗锯齿) 其他关闭</li></ul></li><li>Advanced Show Flags<ul><li>只打开 DeferredLighting 延迟光源</li></ul></li></ul></li></ul></li></ul><p>创建蓝图接口文件 BPI_PlayerWindow 在 蓝图s Interfaces</p><ul><li>GetPlayerWindowRef<ul><li>Outputs<ul><li>Ref BP_PLayerWindow</li></ul></li></ul></li></ul><p>OPEN BP_PlayerWindow</p><ul><li>类设置 继承 BPI_PlayerWindow</li><li>GetPlayerWindowRef ref 选择 self</li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>构造函数 Switch Has Authority 的 Remote<ul><li>延迟 Delay 执行</li><li>SetupSceneRenderOnClient</li></ul></li><li>创建 Event SetupSceneRenderOnClient<ul><li>Do Once 触发一次</li><li>SpawnActor<ul><li>BP_PlayerWindow</li><li>右键拆分<ul><li>3000 110 1350</li></ul></li><li>尝试调整位置，但固定生成</li></ul></li><li>提升为变量 PlayerWindowRef</li><li>获取玩家控制器 SurvivalGamePCRef 的 InitializeWindowOnClient<ul><li>目标 PlayerWindowRef</li></ul></li></ul></li></ul><p>OPEN BP_PlayerWindow</p><ul><li>创建 Event InitializeWindowOnClient<ul><li>Inputs<ul><li>ControllerRef SurvivalGamePC</li></ul></li><li>Create Render Target 2D<ul><li>w 500</li><li>h 800</li></ul></li><li>变量 Scene Capture Component 2D &#x3D;&gt; 设置 Texture Target<ul><li>纹理目标是 Create Render Target 2D 的 Return</li></ul></li><li>Create Dynamic Material Instance<ul><li>父级资源 M_PlayerMaterial</li></ul></li><li>Set Texture Parameter Value<ul><li>目标是 上的 Return</li><li>Param</li><li>Value &#x3D; Create Render Target 2D 的 Return</li></ul></li><li>参数 ControllerRef Is Valid 如果控制器有效，则设置材质</li><li>参数 ControllerRef 的方法 SetRenderMaterialOnClient<ul><li>Mat 使用 Create Dynamic Material Instance 的 Return</li></ul></li></ul></li></ul><p>OPEN SurvivalGamePC</p><ul><li>增加 Event SetRenderMaterialOnClient<ul><li>Inputs<ul><li>Mat Material Instance 材质实例</li></ul></li><li>Tab 的方法 SetPlayerTexture</li></ul></li></ul><p>W_Inventory</p><ul><li>增加 Event SetPlayerTexture<ul><li>Inputs<ul><li>Mat Material Instance 材质实例</li></ul></li><li>PlayerImage 使用材质设置笔刷 <ul><li>材质是 Event 的 参数</li></ul></li></ul></li></ul><h4 id="79-设置播放器窗口蓝图第-2-部分"><a href="#79-设置播放器窗口蓝图第-2-部分" class="headerlink" title="79 设置播放器窗口蓝图第 2 部分"></a>79 设置播放器窗口蓝图第 2 部分</h4><p>创建 动画蓝图 PlayerWindowAnimBP 选择 UE4_Mannequin_Skeleton IN PlayerWindow 目录</p><ul><li>new state Machine 对应 Output Pose<ul><li>增加状态 Idle&#x2F;Walk&#x2F;Run<ul><li>复制 ThirdPerson_AnimBP 的 new state Machine 的 Idle&#x2F;Walk&#x2F;Run 的</li><li>创建 Speed 变量</li><li>创建 EquippedItem 变量</li></ul></li></ul></li><li>默认 Event 事件蓝图更新动画 EventBluepointUpdateAnimation 更新装备武器状态<ul><li>Get Owning Actor 的 Is Valid</li><li>Is Valid 通过 Get Owning Actor 的 Get Player Window Ref<ul><li>Return 设置 EquippedState 参数 需要添加参数</li></ul></li></ul></li></ul><p>OPEN BP_PlayerWindow</p><ul><li>创建 变量 EquippedState（保存动画当前的持有状态） E_Equipable State 默认值 Default</li><li>骨骼网格 设置 动画类 PlayerWindowAnimBP</li><li>创建 Event EquipItemEvent<ul><li>Inputs <ul><li>Info S_Equipable Info</li></ul></li><li>break info &amp;&amp; set 参数 EquippedState</li><li>SpawnActor None<ul><li>class 选择 info break 的 第三人称 穿戴 Class</li><li>拆分</li></ul></li><li>set 变量 EquippedItemRef</li><li>Attach Actor To Component<ul><li>目标 EquippedItemRef</li><li>Parent 骨骼网格</li><li>SocketName Info break SocketName</li><li>三个参数都对齐到目标</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>创建 Event EquipItemOnClient<ul><li>Inputs<ul><li>Info S_Equipable Info</li></ul></li><li>变量 PlayerWindowRef 的 Get Player Window Ref 的 EquipItemEvent</li></ul></li><li>编辑 Event SpawnEquipableThirdPerson<ul><li>最后 执行 EquipItemOnClient</li><li>Info 选择 EquipableInfo Target</li></ul></li></ul><p>给一把石斧 ID 2</p><p>OPEN BP_PlayerWindow</p><ul><li>创建 Event DequipItemEvent<ul><li>获取 EquippedItemRef 右键 转为有效的 get</li><li>Destroy Actor</li><li>设置 EquippedState 改成 Default</li></ul></li><li>调整摄像头的位置<ul><li>1.6 85 4</li><li>0 -5 -90</li><li>0.35 0.5 0.47</li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>修改 事件 DequipWeaponFirstPerson </li><li>增加 PlayerWindowRef -&gt; DequipItemEvent</li></ul><h4 id="80-设置播放器窗口蓝图第-3-部分"><a href="#80-设置播放器窗口蓝图第-3-部分" class="headerlink" title="80 - 设置播放器窗口蓝图第 3 部分"></a>80 - 设置播放器窗口蓝图第 3 部分</h4><p>fix bug<br>多个玩家会看到全部的角色在同一个位置，</p><p>OPEN BP_PlayerWindow</p><ul><li>胶囊体碰撞 组件 设置 碰撞预设为 BlockAll</li><li>骨骼网络 Rendering 的 Visible In Scene Capture Only 勾选 仅在场景捕获中仅可见</li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>修改 方法 SetupSceneRenderOnClient <ul><li>InitializeWindowOnClient 的 GetController 获取 index 0的用户，使用 获取控制器</li></ul></li></ul><p>增加功能，穿戴装备时，也要更新玩家2D动画</p><p>BP_PlayerWindow</p><ul><li>创建 变量 HelmetSlot E_ItemMaster</li><li>创建 变量 ChestSlot E_ItemMaster</li><li>创建 变量 PantsSlot E_ItemMaster</li><li>创建 变量 BootsSlot E_ItemMaster</li><li>创建 Event EquipArmorFunction<ul><li>Inputs<ul><li>ItemInfo S_ItemInfo</li></ul></li><li>Break<ul><li>设置本地变量 Armor</li></ul></li><li>SpawnActor<ul><li>Class Ref</li><li>拆分</li></ul></li><li>根据不同的Armor 赋值 不同的参数 Slot</li><li>Attach Actor To Component<ul><li>Target 是 Slot</li><li>Parent 是 骨骼网格</li><li>对齐到目标</li></ul></li><li>Slot(可以使用 LocalArmorType select) 的 Get Armor Ref 的 get 获取骨骼网格</li><li>set master pose Component<ul><li>new 骨骼网格</li></ul></li></ul></li><li>创建 方法 EquipArmor add Comment  装备到玩家窗口<ul><li>EquipArmorFunction</li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>创建 Event EquipArmorOnClient<ul><li>Inputs<ul><li>ItemInfo S_ItemInfo</li></ul></li><li>PlayerWindow 的 EquipArmor</li></ul></li><li>编辑 方法 EquipArmor<ul><li>判断 是否是 Armor 枚举类型 首先执行 EquipArmorOnClient</li></ul></li></ul><p>给盔甲ID11，玩家2 进行测试</p><p>卸下装备 也要更新玩家2D动画</p><p>BP_PlayerWindow</p><ul><li>增加 Event DequipArmor<ul><li>Inputs<ul><li>ArmorType E_ArmorType</li></ul></li><li>根据参数 Switch 获取 xxx 转为有效获取<ul><li>分别 Destroy Actor. 不能共用一个 Destroy Actor</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>增加 Event DequipArmorOnClient<ul><li>Inputs<ul><li>ArmorType E_ArmorType</li></ul></li><li>PlayerWindow 的 DequipArmor</li></ul></li><li>编辑 Event DequipArmor<ul><li>增加 DequipArmorOnClient</li></ul></li></ul><p>测试</p><h4 id="81-攻击时增加护甲属性-穿戴护甲后伤害减少"><a href="#81-攻击时增加护甲属性-穿戴护甲后伤害减少" class="headerlink" title="81 攻击时增加护甲属性 穿戴护甲后伤害减少"></a>81 攻击时增加护甲属性 穿戴护甲后伤害减少</h4><p>思路：</p><ol><li>造成的伤害 &#x3D; 所有的装备护甲累加-伤害</li><li>新增 计算 伤害的方法，放入之前的伤害逻辑中，之前是固定伤害值写法</li></ol><p>OPEN BPI_SurvivalCharacter</p><ul><li>创建 函数 GetTotalArmorPieces<ul><li>Outputs<ul><li>TotalArmorSlots Int</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>编辑 Interface 方法 GetTotalArmorPieces 获取全部护甲数额<ul><li>创建 局部 变量 ArmorPieces Int</li><li>逐个获取 四个装备Slot (转为有效获取)<ul><li>有效则 ++ ArmorPieces 伤害值，核心是从0一直累加，每有一个装备则增加1</li><li>无效则检查后续的装备 Slot</li></ul></li><li>最后 Return ArmorPieces</li></ul></li></ul><p>OPEN BP_TP_Hatchet</p><ul><li>创建 方法 CalculateDamage 伤害&#x3D;物品伤害值x伤害倍数<ul><li>Inputs<ul><li>HitActor Actor</li><li>ItemBaseDamage 基础伤害 Float</li></ul></li><li>Outputs<ul><li>Damage</li></ul></li><li>创建 变量 DamageMultiplier(伤害倍数) 默认值 0.03</li><li>set LocalDamage(当前造成的伤害) &#x3D; 物品伤害值(参数) x 伤害倍数(变量)</li><li>参数 HitActor &#x3D;&gt; Does Implement Interface 是否实现接口 BPI_SurvivalCharacter<ul><li>Branch<ul><li>false 则不是角色<ul><li>LocalDamage x 4</li><li>Return</li></ul></li><li>True<ul><li>GetTotalArmorPieces</li><li>Switch On Int 增加 01234 引脚<ul><li>0 <ul><li>LocalDamage x 4</li><li>Return</li></ul></li><li>1<ul><li>LocalDamage x 3.5</li><li>Return</li></ul></li><li>2<ul><li>LocalDamage x 3</li><li>Return</li></ul></li><li>3<ul><li>LocalDamage x 2.5</li><li>Return</li></ul></li><li>4<ul><li>LocalDamage x 2</li><li>Return</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>编辑 Event ServerOverlap<ul><li>For Each Loop 后 CalculateDamage<ul><li>Array Element 给 HitActor</li><li>ItemInfo 内的伤害值 给 ItemBaseDamage  这里要保证 BP_EquipableMaster 中 有变量 ItemInfo，没有则需要添加</li><li>得出伤害值，传递给 <ul><li>方法 HarvestFoliage 的 Damage</li><li>方法 ApplyDamage 的 BaseDamage</li></ul></li></ul></li></ul></li></ul><p>上面设置了 ItemInfo，所以继承 BP_EquipableMaster 的所有子类都需要设置 类的 ItemInfo 才会有伤害<br>COPY DT_Items &amp;&amp; OPEN BP_TP_StoreHatchet</p><p>测试准备：</p><ol><li>玩家1攻击玩家2，玩家2受到有伤害</li><li>玩家2穿上衣服，玩家1攻击玩家2，玩家2受到的伤害会减少</li><li>玩家2穿上头盔，玩家1攻击玩家2，玩家2受到的伤害会减少更多</li></ol><p>测试：增加斧头和衣服，玩家2个，ID 2 11 12</p><p>测试成功！</p><h4 id="82-添加-装备耐用性和更新物品槽部件UI"><a href="#82-添加-装备耐用性和更新物品槽部件UI" class="headerlink" title="82 添加 装备耐用性和更新物品槽部件UI"></a>82 添加 装备耐用性和更新物品槽部件UI</h4><p>OPEN W_InventorySlot</p><ul><li>编辑 Event UpdateSlot<ul><li>设置 物品Icon<ul><li>Set Brush From Texture<ul><li>Texture 是 ItemInfo 的 Icon</li></ul></li><li>Set Visibility<ul><li>Visible</li></ul></li></ul></li><li>根据 物品的类型 Switch 执行不同的更新逻辑<ul><li>Resource 资源物品：只需要展示 数量<ul><li>Set QuantityText<ul><li>Text 是 ItemInfo 的 QuantityText</li><li>Visibility 是 Visible</li></ul></li><li>Set TopText<ul><li>Visibility 是 Hidden</li></ul></li><li>Set BottomText<ul><li>Visibility 是 Hidden</li></ul></li><li>Set ItemHp<ul><li>Visibility 是 Hidden</li></ul></li></ul></li><li>Equipable 可持有物品：<ul><li>Set Top Text<ul><li>Text 是 ItemInfo 的 ItemDamage TextFormat：DMG {Amount} %</li><li>Visibility 是 Visible</li></ul></li><li>Set QuantityText<ul><li>Visibility 是 Hidden</li></ul></li><li>Set ItemHp<ul><li>Visibility 是 Visible</li><li>Set Percent<ul><li>Percent 是 ItemInfo 的 CurHP &#x2F; MaxHP</li></ul></li></ul></li><li>判断 ItemInfo 的 UseAmmo? 是否为真<ul><li>True<ul><li>Set BottomText<ul><li>Visibility 是 Visible</li></ul></li></ul></li><li>False<ul><li>Set BottomText<ul><li>Visibility 是 Hidden</li></ul></li></ul></li></ul></li></ul></li><li>Armor<ul><li>Set TopText<ul><li>Text 是 ItemInfo 的 ItemDamage TextFormat：{ArmorAmount} Armor</li><li>Visibility 是 Visible</li></ul></li><li>Set QuantityText<ul><li>Visibility 是 Hidden</li></ul></li><li>Set BottomText<ul><li>Visibility 是 Hidden</li></ul></li><li>Set ItemHp<ul><li>Visibility 是 Visible</li><li>Set Percent<ul><li>Percent 是 ItemInfo 的 CurHP &#x2F; MaxHP</li></ul></li></ul></li></ul></li><li>Consumable 消耗品<ul><li>Set QuantityText<ul><li>Text 是 ItemInfo 的 QuantityText TextFormat：x{Quantity}</li><li>Visibility 是 Visible</li></ul></li><li>Set TopText<ul><li>Visibility 是 Hidden</li></ul></li><li>Set BottomText<ul><li>Visibility 是 Hidden</li></ul></li><li>Set ItemHp<ul><li>Visibility 是 Hidden</li><li>Set Percent<ul><li>Percent 是 ItemInfo 的 CurHP &#x2F; MaxHP</li></ul></li></ul></li></ul></li><li>Buildable 建筑物：和资源类型一样</li></ul></li></ul></li></ul><p>Comment：根据项目类型设置项目槽部件UI</p><p>更新 BP_ArmorHelmet、BP_ArmorChest、BP_ArmorPants、BP_ArmorBoots 的 ItemInfo 信息。</p><p>测试内容：</p><ol><li>玩家1</li><li>给予物品ID：2 11 12</li><li>石镐敲击石头、敲击数目，查看物品的UI情况</li></ol><p>OPEN BP_FirstPersonCharacter</p><ul><li>创建 方法 ArmorDurabilityDamageMele 作用：减少装备的耐久度<ul><li>Inputs<ul><li>Damage Float</li></ul></li><li>GetTotalArmorPieces 含义：获取此次攻击给装备造成的伤害</li><li>参数 Damage 除以 GetTotalArmorPieces 的 Return 除以 2 设置 局部变量 LocalArmorDamage</li><li>逐个获取 四个装备Slot (转为有效获取)<ul><li>有效则执行 ArmorTypeDamage<ul><li>ArmorTypeDamage<ul><li>ArmorRef 是 Slot 的 Get Armor Ref</li><li>ArmorType 是 Slot 的 ArmorType</li><li>DurabilityDamage 是 LocalArmorDamage</li></ul></li></ul></li></ul></li></ul></li><li>创建 方法 ArmorTypeDamage 作用：根据装备类型减少耐久度<ul><li>Inputs<ul><li>ArmorRef Object</li><li>ArmorType E_ArmorType</li><li>DurabilityDamage Float</li></ul></li><li>设置必要的 局部变量<ul><li>LocalArmorType E_ArmorType</li><li>LocalDurabilityDamage Float</li></ul></li><li>ArmorRef 的 GetArmorRef 的 Get Item Info</li><li>设置 ItemInfo 的 CurHP - DurabilityDamage &#x3D; LocalNewDurability</li><li><h2 id="Branch-判断-LocalNewDurability-是否小于等于0-True-设置-ItemInfo-的-CurHP-x3D-0-装备破碎"><a href="#Branch-判断-LocalNewDurability-是否小于等于0-True-设置-ItemInfo-的-CurHP-x3D-0-装备破碎" class="headerlink" title="Branch 判断 LocalNewDurability 是否小于等于0- True  - 设置 ItemInfo 的 CurHP &#x3D; 0 装备破碎"></a>Branch 判断 LocalNewDurability 是否小于等于0<br>- True<br>  - 设置 ItemInfo 的 CurHP &#x3D; 0 装备破碎</h2><ul><li>False<ul><li>设置 ItemInfo 的 CurHP &#x3D; LocalNewDurability </li><li>更新 装备栏的 UI 通过 Get Controller 的 SurvivalGamePC 的 UpdateArmorUIOnClient</li></ul></li></ul></li></ul></li><li>编辑 方法 ApplyDamageToPlayer<ul><li>在判断 用户是否死亡，如果没有死亡<ul><li>ArmorDurabilityDamageMele</li></ul></li></ul></li></ul><p>测试内容：</p><ol><li>给予物品ID：2 11 12</li><li>玩家1 攻击 玩家2 掉血</li><li>玩家2 穿上衣服，玩家1 攻击 玩家2 装备掉耐久</li><li>玩家2 穿上衣服+头盔，玩家1 攻击 玩家2 2个装备掉耐久</li></ol><p>完善装备破碎的逻辑<br>OPEN BP_FirstPersonCharacter</p><ul><li>创建 方法 ArmorBreakFunction 和 DequipArmorFunction 逻辑相似，可以copy<ul><li>Inputs<ul><li>ArmorType E_ArmorType</li></ul></li><li>设置必要的 局部变量<ul><li>LocalArmorType E_ArmorType</li></ul></li><li>将 Copy 的 AddItemOnServer 删除，直接 Destroy Actor</li></ul></li><li>编辑 方法 ArmorTypeDamage<ul><li>在 Branch True 中执行 ArmorBreakFunction</li><li>最后 调用 DequipArmorOnClient</li></ul></li></ul><p>测试内容：</p><ol><li>给予物品ID：2 11 12，设置 衣服 CurHP &#x3D; 10，In DT_Items、BP_ArmorChest</li><li>玩家1 攻击 玩家2 掉血</li><li>玩家2 穿上衣服，玩家1 攻击 玩家2 装备掉耐久</li><li>玩家2 穿上衣服+头盔，玩家1 攻击 玩家2 2个装备掉耐久</li></ol><p>设置回来 衣服 CurHP &#x3D; 100，In DT_Items、BP_ArmorChest</p><p>测试成功！</p><h4 id="83-修复-拖动部件时的UI展示"><a href="#83-修复-拖动部件时的UI展示" class="headerlink" title="83 修复 拖动部件时的UI展示"></a>83 修复 拖动部件时的UI展示</h4><p>COPY W_InventorySlot 的 Event UpdateSLot 的 Switch on E_ItemType 以及之后的 代码 到 W_DraggedItem</p><p>OPEN W_DraggedItem</p><ul><li>Quantity 连接 Quantity</li><li>TextTop 连接 Amount</li><li>CurrHP 连接 CurrHP</li><li>MaxHP 连接 MaxHP</li><li>TextTop 连接 ArmorAmount</li><li>UseAmmo 连接 UseAmmo</li></ul><h3 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h3><h4 id="84-建筑系统简介"><a href="#84-建筑系统简介" class="headerlink" title="84 建筑系统简介"></a>84 建筑系统简介</h4><p>需要的库资源： Easy Building System V版本</p><p>BP_BuildableMaster</p><h4 id="85-建筑系统基础文件"><a href="#85-建筑系统基础文件" class="headerlink" title="85 建筑系统基础文件"></a>85 建筑系统基础文件</h4><p>安装 Easy Building System 到项目</p><ul><li>将 All&#x2F;Content&#x2F;EasyBuildingSystem&#x2F;Meshes&#x2F;Structures 下的 Stylized 文件夹 右键 迁移到项目的 Content 文件夹下</li></ul><p>创建 建造系统 数据结构文件 S_BuildableInfo In _Main&#x2F;Blueprints&#x2F;Structures</p><ul><li>TraceChannel ETraceTypeQuery</li><li>CanPlaceOnGround? bool 是否可以放置在地面上</li><li>UseCustomOverlap? bool 是否使用自定义重叠</li><li>DoFloatCheck? bool 是否可以漂浮</li><li>CanPlaceOnFoundation? bool 是否可以放置在基础上</li><li>DoCeilingCheck? bool 是否可以检查天花板</li></ul><p>创建 建造系统 相关的文件夹 _Main&#x2F;Blueprints&#x2F;BuildingSystem</p><p>In BuildingSystem<br>创建 蓝图类 Actor BP_BuildableMaster</p><ul><li>类设置 <ul><li>Replicates 勾选 含义：允许复制</li><li>Start with Tick Enabled 取消勾选 含义：开始时不启用Tick</li></ul></li><li>增加 静态网格 组件</li><li>增加变量 BuildableInfo S_BuildableInfo</li></ul><p>创建 蓝图接口文件 BPI_BuildInterface In _Main&#x2F;Blueprints&#x2F;Interfaces</p><ul><li>创建 方法 GetBuildMasterRef<ul><li>Outputs<ul><li>Ref BP_BuildableMaster</li></ul></li></ul></li></ul><p>OPEN BP_BuildableMaster</p><ul><li>类设置 继承 BPI_BuildInterface</li><li>创建 Event GetBuildMasterRef<ul><li>Outputs<ul><li>Ref BP_BuildableMaster</li></ul></li><li>Return Self</li></ul></li></ul><p>创建 建造子类 BP_FoundationMaster 继承于 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem</p><ul><li>设置 静态网格 组件<ul><li>静态网格 设置为 SM_Stylized_Wood_Foundation</li></ul></li></ul><h4 id="86-创建建筑系统组件-和-键盘B键预览建筑物功能"><a href="#86-创建建筑系统组件-和-键盘B键预览建筑物功能" class="headerlink" title="86 创建建筑系统组件 和 键盘B键预览建筑物功能"></a>86 创建建筑系统组件 和 键盘B键预览建筑物功能</h4><p>思路：</p><ol><li>按下B键，生成一个预览建筑物<ul><li>根据玩家的摄像头角度，生成一个预览建筑物</li><li>按通道进行线条追踪运算逻辑：<ul><li>Start &#x3D; 玩家的世界位置 + 玩家的向前向量 * 建造结束距离 350</li><li>End &#x3D; 玩家的世界位置 + 玩家的向前向量 * 建造结束距离 1000</li></ul></li></ul></li><li>建造蓝图类需要 同时在客户端和服务端生成</li></ol><p>创建 建造蓝图类 Actor Component Rename:BPC_BuildingComponent In _Main&#x2F;Blueprints&#x2F;BuildingSystem</p><p>OPEN FirstPersonCharacter</p><ul><li>增加 组件 建造蓝图类 BPC Building Component</li></ul><p>OPEN BPC_BuildingComponent</p><ul><li>创建 变量 IsBuildModeEnabled? bool 是否开启建造模式</li><li>创建 变量 BuildPreview BP_BuildableMaster Object 预览建筑物</li><li>创建 方法 BuildModeClient<ul><li>Inputs<ul><li>StructureID Int</li></ul></li><li>创建局部变量 BuildDistanceClose Int 默认值 350</li><li>创建局部变量 BuildDistanceFar Int 默认值 1000</li><li>Get Owner -&gt; Get Survival Char Ref 的 Get First Person Camera<ul><li>Line Trace By Channel 的 Start<ul><li>目标 的 Get World Location + 目标 的 GetForwardVector X BuildDistanceClose</li></ul></li><li>Line Trace By Channel 的 End<ul><li>目标 的 Get World Location + 目标 的 GetForwardVector X BuildDistanceFar</li></ul></li></ul></li><li>BuildPreview 有效获取<ul><li>无效则 SpawnBuildPreview<ul><li>参数 StructureID 选择 Event 的 StructureID</li></ul></li><li>BuildPreview 有效获取</li></ul></li><li>Line Trace By Channel<ul><li>Start 在上</li><li>End 在上</li><li>Actors to Ignore 是 Make Array<ul><li>在 SpawnBuildPreview 的 Return 后的 BuildPreview 有效 的 Return Line Trace By Channel，并且 传递给 Make Array ，</li></ul></li><li>Return 进行一次 Branch<ul><li>True<ul><li>Set 变量 BuildTransform 拆分后的  <ul><li>Rotation &#x3D; Get Owner -&gt; Get Survival Char Ref 的 FirstPersonCamera 的 Get World Rotation 右键拆分，Z轴 + 90 进行一次 Make Rotator 右键拆分 连接z</li><li>Location &#x3D; Line Trace By Channel 的 Hit Location 的 Impact Point</li></ul></li></ul></li><li>False<ul><li>Set 变量 BuildTransform 拆分后的<ul><li>同上</li><li>Location &#x3D; Line Trace By Channel 的 Hit Location 的 Trace End(跟踪结束位置)</li></ul></li></ul></li></ul></li><li>BuildPreview Is Valid<ul><li>is Valid<ul><li>BuildPreview 的 DefaultSceneRoot 的 Set World Transform<ul><li>New Transform &#x3D; BuildTransform</li></ul></li></ul></li><li>Is Not Valid<ul><li>SpawnBuildPreview</li></ul></li></ul></li><li>BuildLoop</li></ul></li></ul></li><li>创建 Event LaunchBuildModeOnClient<ul><li>Inputs<ul><li>StructureID Int</li></ul></li><li>branch IsBuildModeEnabled<ul><li>False<ul><li>Set IsBuildModeEnabled &#x3D; True</li><li>BuildModeClient</li></ul></li><li>Ture<ul><li>StopBuildLoop</li></ul></li></ul></li></ul></li><li>创建 Event BuildLoop 循环执行 BuildModeClient<ul><li>Branch IsBuildModeEnabled<ul><li>True<ul><li>Delay 0.05</li><li>BuildModeClient</li></ul></li><li>False</li><li>下面逻辑 创建一个 Event StopBuildLoop </li><li>Set IsBuildModeEnabled &#x3D; False</li><li>BuildPreview Is Valid<ul><li>True<ul><li>则 Destroy Actor</li></ul></li></ul></li></ul></li></ul></li><li>创建 方法 SpawnBuildPreview<ul><li>Inputs<ul><li>StructureID Int</li></ul></li><li>SpawnActorFromClass<ul><li>BP_FoundationMaster</li><li>变换 提升为 变量 BuildTransform</li></ul></li><li>设置 BuildPreview</li><li>BuildPreview 的 获取Static Mesh 的 Set Collision Enabled<ul><li>NoCollision</li></ul></li></ul></li></ul><p>OPEN FirstPersonCharacter</p><ul><li>创建 B 键 的Event<ul><li>按下<ul><li>BPC_BuildingComponent 的 LaunchBuildModeOnClient<ul><li>StructureID &#x3D; 0</li></ul></li></ul></li></ul></li></ul><h4 id="87-设置预览颜色-以及鼠标左键点击后-可以创建建造物"><a href="#87-设置预览颜色-以及鼠标左键点击后-可以创建建造物" class="headerlink" title="87 设置预览颜色 以及鼠标左键点击后 可以创建建造物"></a>87 设置预览颜色 以及鼠标左键点击后 可以创建建造物</h4><p>创建 建造蓝图材质文件夹 _Main&#x2F;Blueprints&#x2F;BuildingSystem&#x2F;Materials<br>创建 建造材质文件 M_Green In Materials<br>OPEN M_Green</p><ul><li>Base Color &#x3D;&gt; Vector Parameter<ul><li>Color: 54FF0000</li></ul></li><li>混合模式 Blend Mode &#x3D;&gt; 半透明 Translucent</li><li>不透明度 &#x3D;&gt; Constant<ul><li>0.5</li></ul></li></ul><p>COPY M_Green Rename:M_Red</p><ul><li>Base Color &#x3D;&gt; Vector Parameter<ul><li>Color: FF230000</li></ul></li></ul><p>OPEN BPC_BuildingComponent</p><ul><li>创建 方法 SetPreviewColor<ul><li>Inputs<ul><li>IsGreen? bool</li></ul></li><li>设置局部变量 IsGreen? &#x3D; LocalCanPlace? bool</li><li>BuildPreview 的 Get Components By Class<ul><li>Components Class 是 Static Mesh Component</li></ul></li><li>For Each 循环<ul><li>Array 是 Get Components By Class 的 Return</li></ul></li><li>For Loop<ul><li>Last Index &#x3D; For Each 循环 的 Array Element 的 Get Num Materials - 1</li><li>Body<ul><li>Branch LocalCanPlace?<ul><li>True<ul><li>For Each 循环 的 Array Element 的 Set Material<ul><li>Material 是 M_Green</li><li>Element Index 是 For Loop 的 Index</li></ul></li></ul></li><li>False<ul><li>Set Material<ul><li>Material 是 M_Red</li><li>Element Index 是 For Loop 的 Index</li></ul></li></ul></li></ul></li></ul></li><li>Completed<ul><li>BuildPreview 的 Default Scene Root 的 Set World Transform<ul><li>New Transform 是 BuildTransform</li></ul></li></ul></li></ul></li></ul></li><li>编辑 方法 BuildModeClient<ul><li>判断 BuildPreview 是否有效<ul><li>有效则 SetPreviewColor</li></ul></li></ul></li><li>创建 方法 SpawnBuildable<ul><li>Inputs<ul><li>Transform Transform</li></ul></li><li>SpawnActorFromClass<ul><li>BP_FoundationMaster</li><li>Transform</li></ul></li></ul></li><li>创建 Event SpawnBuildOnServer<ul><li>Inputs<ul><li>Transform Transform</li><li>ClientCameraVector Vector</li><li>ClientCameraRotation Rotator</li></ul></li><li>SpawnBuildable</li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>创建 Event PlaceBuildableOnClient<ul><li>Branch BPC_BuildingComponent 的 IsBuildModeEnabled <ul><li>True<ul><li>BPC_BuildingComponent 的 SpawnBuildOnServer<ul><li>Transform 是 BPC_BuildingComponent 的 BuildTransform</li><li>ClientCameraVector 是 组件 Get First Person Camera 的 Get Forward Vector</li><li>ClientCameraRotation 是 组件 Get First Person Camera 的 Get World Rotation</li></ul></li><li>BPC_BuildingComponent 的 Set IsBuildModeEnabled &#x3D; False</li></ul></li><li>False</li></ul></li></ul></li><li>编辑 Event LeftMouseOnServer <ul><li>有效获取 失败 执行 PlaceBuildableOnClient</li></ul></li></ul><h4 id="88-检查建造物是否重叠-客户端-服务端"><a href="#88-检查建造物是否重叠-客户端-服务端" class="headerlink" title="88 检查建造物是否重叠 客户端+服务端"></a>88 检查建造物是否重叠 客户端+服务端</h4><p>OPEN BP_BuildableMaster</p><ul><li>BuildableInfo 的 UseCustomOverlap? 是 True</li><li>增加 组件 Box Collision Rename:OverlayBoxSize<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li></ul></li><li>调整 组件的位置 包裹住整个建筑物<ul><li>位置 0 0 77</li><li>缩放 4.6 4.6 0.2</li></ul></li></ul></li></ul><p>OPEN BPC_BuildingComponent</p><ul><li>创建 方法 CheckForOverlap 检查是否重叠<ul><li>创建 局部变量 HalfSize Float Default:1.2</li><li>Outputs<ul><li>Overlapping? Bool</li></ul></li><li>Box Trace By Channel<ul><li>Start 进行 Select(select 不是 选择旋转体)<ul><li>Options 0 BuildPreview 的 获取 Static Mesh 的 Get Component Bounds 的 Origin</li><li>True &#x3D; BuildPreview 的 获取 Overlay Box Size 的 Get Component Bounds 的 Origin</li><li>Index &#x3D; BuildPreview 获取 BuildableInfo 拆分 的 BuildableInfoUseCustomOverlap?</li></ul></li><li>End 同上</li><li>HalfSize用的<ul><li>Options 0 BuildPreview 的 获取 Static Mesh 的 Get Component Bounds 的 Box Extent</li><li>Options 1 BuildPreview 的 获取 Overlay Box Size 的 Get Component Bounds 的 Box Extent</li><li>Index &#x3D; BuildPreview 获取 BuildableInfo 拆分 的 BuildableInfoUseCustomOverlap?</li></ul></li><li>HalfSize &#x3D; 第二个 End 进行 Select(select 不是 选择旋转体) 的 Return Value &#x2F; HalfSize</li><li>Orientation &#x3D; Make Rotator 的 z 连接 (BuildPreview 的 获取 Root Component 的 Get World Rotation 拆分 的 Z 轴 + 90)</li><li>Actors to Ignore 是 Make Array<ul><li>BuildPreview</li></ul></li><li>Draw Debug Type 是 For Duration 持续</li></ul></li><li>Return Node 连接 Box Trace By Channel 的 Return Value</li></ul></li><li>编辑 方法 BuildModeClient<ul><li>删除两个分支 并且是 Set Transform 后的所有逻辑</li><li>分支1<ul><li>BuildPreview Is Valid<ul><li>True<ul><li>CheckForOverlap</li><li>SetPreviewColor<ul><li>IsGreen? &#x3D; CheckForOverlap 的 Return Value 进行 <code>not bool</code></li></ul></li><li>BuildLoop</li></ul></li><li>False<ul><li>SpawnBuildPreview</li><li>BuildLoop</li></ul></li></ul></li></ul></li><li>分支2<ul><li>BuildPreview Is Valid<ul><li>True<ul><li>SetPreviewColor<ul><li>IsGreen? &#x3D; false</li></ul></li><li>BuildLoop</li></ul></li><li>False<ul><li>SpawnBuildPreview</li><li>BuildLoop</li></ul></li></ul></li></ul></li></ul></li></ul><p>测试完之后 需要 将 <code>BPC_BuildingComponent</code> 的 方法 <code>CheckForOverlap</code> 的 方法 <code>Box Trace By Channel</code> 的 <code>Draw Debug Type</code> 是 <code>For Duration 持续</code> 改成 None 不显示</p><p>服务端也需要检查</p><p>OPEN BP_BuildingComponent</p><ul><li>新增 变量 HitActor Actor</li><li>新增 变量 HitComponent Primitive Component</li><li>创建 方法 BuildPlacementCheck<ul><li>Inputs<ul><li>StructureID Int</li><li>ClientCameraVector Vector</li><li>ClientCameraRotation Rotator</li></ul></li><li>Outputs<ul><li>CanBuild? bool</li></ul></li><li>创建 局部变量 LocalCameraRotation Rotator</li><li>创建 局部变量 BuildDistanceClose Int 默认值 350</li><li>创建 局部变量 BuildDistanceFar Int 默认值 1000</li><li>设置 局部变量 LocalCameraRotation &#x3D; ClientCameraRotation</li><li>设置 局部变量 LocalClientCameraVector &#x3D; ClientCameraVector</li><li>SpawnBuildPreview</li><li>BuildPreview 有效获取</li><li>Get Owner -&gt; Get Survival Char Ref 的 Get First Person Camera</li><li>Line Trace By Channel<ul><li>Start 目标 的 Get World Location + 参数 ClientCameraVector X BuildDistanceClose</li><li>End 目标 的 Get World Location + 参数 ClientCameraVector X BuildDistanceFar</li><li>Actors to Ignore 是 Make Array<ul><li>BuildPreview</li></ul></li><li>判断 Line Trace By Channel 的 Return Value <ul><li>有效 <ul><li>Set 变量 HitActor &#x3D; Hit Actor</li><li>Set 变量 HitComponent &#x3D; Hit Component</li><li>Set Transform<ul><li>Location 是 Line Trace By Channel 的 Hit Location 的 Impact Normal</li><li>Rotation &#x3D; Make Rotator 的 z 连接 (ClientCameraRotation Break 的 Z 轴 + 90)</li></ul></li><li>BuildPreview Is Valid<ul><li>有效<ul><li>CheckForOverlap<ul><li>Return Value 进行 <code>not bool</code> 连接 CanBuild? 返回</li></ul></li></ul></li><li>无效<ul><li>返回</li></ul></li></ul></li></ul></li><li>无效 <ul><li>Set Transform<ul><li>Location 是 Line Trace By Channel 的 Hit Location 的 Trace End</li><li>Rotation &#x3D; Make Rotator 的 z 连接 (ClientCameraRotation 拆分 的 Z 轴 + 90)</li></ul></li><li>Is Valid<ul><li>有效<ul><li>返回</li></ul></li><li>无效<ul><li>返回</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>编辑 方法 SpawnBuildOnServer 执行最前面需要 BuildPlacementCheck 的 Return Value 进行 Branch<ul><li>这里必须 设置 变量 BuildTransform</li><li>Branch CanBuild?<ul><li>True<ul><li>SpawnBuildable 参数 Transform 需要 用参数的 Transform 不然会有影响</li></ul></li><li>False<ul><li>BuildPreview 有效获取<ul><li>有效则 Destroy Actor</li></ul></li><li>Print String “没法建造在这里”</li></ul></li></ul></li></ul></li></ul><p>测试：</p><ol><li>B键生成建筑物，鼠标左键点击生成建筑物</li><li>检查是否重叠，重叠时显示红色，不重叠时显示绿色，重叠则不能生成。</li></ol><h4 id="89-实现网格捕捉-能够优化放置建筑物的位置"><a href="#89-实现网格捕捉-能够优化放置建筑物的位置" class="headerlink" title="89 实现网格捕捉 能够优化放置建筑物的位置"></a>89 实现网格捕捉 能够优化放置建筑物的位置</h4><p>含义：检测建造物是否重叠的时候，检测当前位置是否位于网格上，如果位于网格上，则给网格的位置。</p><p>项目设置</p><ul><li>Project Setting<ul><li>引擎<ul><li>碰撞<ul><li>Trace Channel 用于捕捉网格<ul><li>FoundationTrace</li><li>FloorTrace</li><li>StairsTrace</li><li>TriangleTrace</li><li>TriangleCeilingTrace</li><li>RoofTrace</li><li>RoofSmallTrace</li><li>DoorTrace</li><li>WindowTrace</li><li>LandscapeTrace</li><li>FoundationPlacement</li><li>TorchTrace</li><li>WallTrace</li><li>RampTrace Ignore</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BPI_BuildInterface</p><ul><li>创建 方法 ReturnBoxes<ul><li>Outputs<ul><li>Boxes Box Collision Array</li></ul></li></ul></li></ul><p>OPEN BP_BuildableMaster</p><ul><li>在 静态网格 建造物 下 增加 4个 Box Collision 组件<ul><li>1 Rename:Foundation<ul><li>Box Extent 150 150 85</li><li>Location 0 300 0</li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>FoundationTrace BlockAll</li></ul></li></ul></li><li>Copy 2 Rename:Foundation1<ul><li>Location 0 -300 0</li></ul></li><li>Copy 3 Rename:Foundation2<ul><li>Location 300 0 0</li></ul></li><li>Copy 3 Rename:Foundation3<ul><li>Location -300 0 0</li></ul></li></ul></li></ul><p>OPEN BP_FoundationMaster</p><ul><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 返回 4个 Box Collision 组件</li></ul></li><li>默认类设置<ul><li>Trace Channel 是 FoundationPlacement</li></ul></li></ul><p>OPEN BPC_BuildingComponent</p><ul><li>编辑 方法 BuildModeClient<ul><li><code>Line Trace By Channel</code> 的 <code>Return Value</code> <code>Branch</code> 后<ul><li>将 Break Hit Result 的<ul><li><code>Hit Actor</code> 设置变量 <code>HitActor</code></li><li><code>Hit Component</code> 设置变量 <code>HitComponent</code></li></ul></li></ul></li><li>后续继续连接起来</li><li>设置线路追踪<ul><li><code>Line Trace By Channel</code> 之前的 转为有效的 BuildPreview 的 Get BuildableInfo 进行 break<ul><li>BuildableInfoTraceChannel 传入 <code>Line Trace By Channel</code> 的 Trace Channel</li></ul></li></ul></li></ul></li><li>创建 方法 GetSnappingPoints<ul><li>创建 局部变量 LocalFound? bool</li><li>Outputs<ul><li>Found? bool</li><li>Location Vector</li></ul></li><li>HitActor 的 ReturnBoxes<ul><li>For Each Loop with Break<ul><li>LoopBody<ul><li>Branch HitComponent 有效获取 &#x3D;&#x3D; Item 的 ArrayElement<ul><li>Set LocalFound? &#x3D; true 并且 Break</li></ul></li></ul></li><li>Completed<ul><li>HitComponent 有效获取<ul><li>True<ul><li>Return<ul><li>LocalFound? 连接 Found?</li><li>Location 连接 HitComponent 的 获取世界变换</li></ul></li></ul></li><li>False<ul><li>Return</li><li>LocalFound? 连接 Found?</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>编辑 方法 BuildModeClient<ul><li><code>Set 变量 Transform</code> 后的 BuildPreview Is Valid 后(分支1)</li><li>GetSnappingPoints<ul><li>Branch Found?<ul><li>True 位于 更合适的 建造位置<ul><li>Set 变量 Transform &#x3D; Location</li><li>后续一样</li></ul></li><li>False 后续一样</li></ul></li></ul></li></ul></li><li>编辑 方法 BuildPlacementCheck<ul><li><code>Set 变量 Transform</code> 后的 BuildPreview Is Valid<ul><li>True<ul><li>GetSnappingPoints<ul><li>Branch Found?<ul><li>True<ul><li>Set 变量 Transform &#x3D; Location</li><li>后续一样</li></ul></li><li>False<ul><li>后续一样</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>设置线路追踪<ul><li><code>Line Trace By Channel</code> 之前的 转为有效的BuildPreview 进行 break<ul><li>BuildableInfoTraceChannel 传入 <code>Line Trace By Channel</code> 的 Trace Channel</li></ul></li></ul></li></ul></li></ul><h4 id="90-添加墙壁以及开关可构建调试"><a href="#90-添加墙壁以及开关可构建调试" class="headerlink" title="90 添加墙壁以及开关可构建调试"></a>90 添加墙壁以及开关可构建调试</h4><p>思路：</p><ol><li>鼠标滑轮滚动，切换可构建类型</li></ol><p>添加 墙壁蓝图子类 BP_WallMaster 继承于 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem</p><p>OPEN BP_WallMaster</p><ul><li>设置 BuildableInfo<ul><li>TraceChannel 是 WallTrace</li><li>UseCustomOverlap? 是 True</li></ul></li><li>静态网格 <ul><li>材质 SM_Stylized_Wood_Wall</li></ul></li></ul><p>OPEN BP_FoundationMaster 增加 Box Collision 组件</p><ul><li>设置一下 OverlayBoxSize<ul><li>变换<ul><li>0 0 52</li></ul></li></ul></li><li>DefaultSceneRoot<ul><li>静态网格<ul><li>增加 静态网格 组件<ul><li>设置 材质 SM_Stylized_Wood_Wall</li><li>调整 位置 放在桌子上 四面朝外</li><li>变换<ul><li>0 150 234.9</li><li>0 0 0</li></ul></li></ul></li><li>依次复制 1<ul><li>变换<ul><li>0 -150 234.9</li><li>0 0 0</li></ul></li></ul></li><li>依次复制 2<ul><li>变换<ul><li>150 0 234.9</li><li>0 0 -90</li></ul></li></ul></li><li>依次复制 3<ul><li>变换<ul><li>-150 0 234.9</li><li>0 0 90</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:Wall<ul><li>Box Extent 150 20 150 调整位置跟随上面的静态网格</li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>WallTrace BlockAll</li></ul></li><li>变换<ul><li>复制 静态网格</li></ul></li></ul></li><li>依次复制 1<ul><li>变换<ul><li>复制 静态网格</li></ul></li></ul></li><li>依次复制 2<ul><li>变换<ul><li>复制 静态网格</li></ul></li></ul></li><li>依次复制 3<ul><li>变换<ul><li>复制 静态网格</li></ul></li></ul></li><li>删除 四个 静态网格 组件</li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 4个 Box Collision 组件</li></ul></li></ul><p>现在 编辑 数据表 并且 为 玩家赋予 循环浏览不同的可构建对象的能力</p><p>创建 建造杂项文件夹 _Main&#x2F;Blueprints&#x2F;BuildingSystem&#x2F;Misc<br>创建 建造蓝图结构文件 S_BuildTableInfo In _Main&#x2F;Blueprints&#x2F;BuildingSystem&#x2F;Misc</p><p>OPEN S_BuildTableInfo</p><ul><li>增加 BuildableClass BP_BuildableMaster 类引用</li></ul><p>创建 建造杂项数据表文件 DT_Structures Select S_BuildTableInfo In _Main&#x2F;Blueprints&#x2F;BuildingSystem&#x2F;Misc</p><ul><li>ID 1<ul><li>BuildableClass BP_FoundationMaster</li></ul></li><li>ID 2<ul><li>BuildableClass BP_WallMaster</li></ul></li></ul><p>OPEN BPC_BuildingComponent</p><ul><li>编辑 方法 SpawnBuildPreview<ul><li>Get Data Table Row By 参数 StructureID<ul><li>Table Name 是 DT_Structures</li></ul></li><li>SpawnActor 改为 通过查询表到的 Row 结构的 BuildClass 生成 Actor</li><li>测试时，创建 变量 StructureIDDebug Int 默认值 1</li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>创建 Keyboard <code>Mouse Wheel Up</code> 的 Event<ul><li>Get Data Table Row By Name 获取数据表行名称<ul><li>Table Name 是 DT_Structures</li></ul></li><li>Clamp Int<ul><li>Value &#x3D; BPC Building Component 的 StructureIDDebug + 1</li><li>Min &#x3D; 1</li><li>Max &#x3D; 表Res 进行 Length</li></ul></li><li>Set BPC Building Component 的 StructureIDDebug &#x3D; Clamp Int 的 Return Value</li><li>BPC_BuildingComponent 的 BuildPreview 有效获取<ul><li>True<ul><li>Destroy Actor</li></ul></li></ul></li></ul></li><li>创建 Keyboard <code>Mouse Wheel Down</code> 的 Event<ul><li>Get Data Table Row By Name<ul><li>Table Name 是 DT_Structures</li></ul></li><li>Clamp Int<ul><li>Value &#x3D; BPC Building Component 的 StructureIDDebug - 1</li><li>Min &#x3D; 1</li><li>Max &#x3D; 表Res 进行 Length</li></ul></li><li>Set BPC Building Component 的 StructureIDDebug &#x3D; Clamp Int 的 Return Value</li><li>BPC_BuildingComponent 的 BuildPreview 有效获取<ul><li>True<ul><li>Destroy Actor</li></ul></li></ul></li></ul></li><li>Add 上述 Comment “切换建造物 Debug” 增加 Color &#x3D; Yellow</li></ul><p>OPEN BPC_BuildingComponent</p><ul><li>编辑 事件 SpawnBuildable<ul><li>Inputs<ul><li>增加 StructureIDTemp Int</li><li>设置 变量 StructureID &#x3D; StructureIDTemp</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>编辑 方法 PlaceBuildableOnClient<ul><li>将 组件 BPC_BuildingComponent 的 StructureIDDebug 传入 SpawnBuildOnServer 的 StructureID</li></ul></li></ul><p>测试：可以切换 可以放置桌子和墙壁</p><p>OPEN BP_FirstPersonCharacter</p><ul><li>编辑 方法 PlaceBuildableOnClient<ul><li>将 组件 BPC_BuildingComponent 的 StructureIDDebug 传入 SpawnBuildOnServer 的 StructureIDTmp</li></ul></li></ul><p>OPEN BPC_BuildingComponent</p><ul><li>编辑 方法 SpawnBuildPreview<ul><li>将参数的 StructureID 传入 Get Data Table Row 的 Row Name</li></ul></li><li>编辑 事件 LaunchBuildModeOnClient<ul><li>将 StructureIDDebug 传入 LaunchBuildModeOnClient 的 StructureID</li></ul></li><li>编辑 方法 SpawnBuildable<ul><li>Inputs<ul><li>增加 StructureIDTemp Int</li><li>将 参数 StructureIDTemp 进行 Get Data Table Row 的 Out Row 的 Build Class 传入 SpawnActor 的 Class</li></ul></li></ul></li><li>编辑 事件 SpawnBuildOnServer<ul><li>连接 SpawnBuildable 的 StructureIDTemp 是 事件 参数 StructureID</li><li>增加开关 事件第一件事 Switch Has Authority<ul><li>True<ul><li>往后执行</li></ul></li><li>False</li></ul></li></ul></li></ul><p>进行测试：可以切换 可以放置桌子和墙壁 墙壁碰撞生效</p><h4 id="91-修复BUG-添加天花板"><a href="#91-修复BUG-添加天花板" class="headerlink" title="91 修复BUG 添加天花板"></a>91 修复BUG 添加天花板</h4><p>OPEN BPC_BuildingComponent</p><ul><li>创建 方法 ChangeBuildStructure<ul><li>BuildPreview 有效获取<ul><li>True<ul><li>Destroy Actor</li></ul></li><li>False</li></ul></li><li>SpawnBuildPreview<ul><li>StructureID &#x3D; 变量 StructureIDDebug</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>编辑 Keyboard <code>Mouse Wheel Up</code> 的 Event<ul><li>将最后的 BPC_BuildingComponent 的 BuildPreview 有效获取<ul><li>True<ul><li>Destroy Actor</li></ul></li></ul></li><li>换成 ChangeBuildStructure</li></ul></li></ul><p>为 BP_BuildableMaster 创建 蓝图子类 BP_CeilingMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem<br>OPEN BP_CeilingMaster</p><ul><li>设置 网格组件<ul><li>设置 材质 SM_Stylized_Wood_Ceiling</li><li>TraceChannel 是 FloorTrace</li></ul></li><li>类设置 BuildableInfo<ul><li>UseCustomOverlap? 是 True 使用自定义重叠</li></ul></li><li>调整 OverlapBoxSize 的大小 比 建造物小一些 <ul><li>位置<ul><li>0 0 2</li></ul></li><li>缩放<ul><li>3 3 0.3</li></ul></li></ul></li></ul><p>OPEN BP_WallMaster</p><ul><li>在 已有材质的 静态网格体组件 下<ul><li>增加 静态网格体组件<ul><li>设置 材质 SM_Stylized_Wood_Ceiling</li><li>增加 Box Collision 组件 Rename:Ceiling1<ul><li>Box Extent 150 150 10</li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>FloorTrace BlockAll</li></ul></li><li>调整 位置<ul><li>0 150 150</li><li>0 0 0</li></ul></li></ul></li><li>复制 Rename:Ceiling2<ul><li>变换<ul><li>复制 静态网格</li></ul></li></ul></li><li>删除 两个 静态网格体组件</li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 2个 Box Collision 组件</li></ul></li></ul><p>OPEN DT_Structures</p><ul><li>增加 ID 3<ul><li>BuildableClass BP_CeilingMaster</li></ul></li></ul><p>OPEN BP_CeilingMaster 增加天花板 四个方位的 捕捉位置</p><ul><li>增加 Box Collision 组件 <ul><li>Rename:Ceiling1<ul><li>Box Extent 30 30 30 </li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>FloorTrace BlockAll</li></ul></li><li>变换<ul><li>0 300 0</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Ceiling2<ul><li>变换<ul><li>0 -300 0</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Ceiling3<ul><li>变换<ul><li>300 0 0</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Ceiling4<ul><li>变换<ul><li>-300 0 0</li></ul></li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 4个 Box Collision 组件</li></ul></li></ul><p>测试：可以切换 可以放置桌子、墙壁和天花板，但是天花板上方无法放置建造物</p><p>OPEN BP_CeilingMaster 增加天花板上方的捕捉位置</p><ul><li>DefaultSceneRoot<ul><li>静态网格体 组件<ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Wall</li><li>调整 位置<ul><li>0 150 155</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:Wall1<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>WallTrace BlockAll</li></ul></li><li>Box Extent 150 10 150</li><li>变换<ul><li>复制 静态网格</li></ul></li></ul></li><li>复制<ul><li>变换<ul><li>复制 静态网格体 组件</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Wall2<ul><li>Box Extent 10 150 150</li><li>变换<ul><li>复制 静态网格体 组件</li></ul></li></ul></li><li>复制<ul><li>变换<ul><li>复制 静态网格体 组件</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Wall3<ul><li>Box Extent 10 150 150</li><li>变换<ul><li>复制 静态网格体 组件</li></ul></li></ul></li><li>复制<ul><li>变换<ul><li>复制 静态网格体 组件</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Wall4<ul><li>Box Extent 10 150 150</li><li>变换<ul><li>复制 静态网格体 组件</li></ul></li></ul></li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 4个 Box Collision 组件</li></ul></li></ul><p>测试：可以切换 可以放置桌子、墙壁和天花板，天花板上方可以放置建造物</p><p>备注：<br>如果放置不了建造物，可能影响的因素：</p><ul><li>Trace 没设置对</li><li>旁边有其他建造物 很重要</li></ul><h4 id="92-增加浮动检查，天花板不需要检查，桌子需要检查"><a href="#92-增加浮动检查，天花板不需要检查，桌子需要检查" class="headerlink" title="92 增加浮动检查，天花板不需要检查，桌子需要检查"></a>92 增加浮动检查，天花板不需要检查，桌子需要检查</h4><ol><li>满足预览绿色 以及 可以放置的条件<ul><li>不能是重叠的</li><li>不能是浮动的</li></ul></li><li>桌子需要浮动检查，天花板不需要浮动检查</li></ol><p>OPEN BPC_BuildingComponent</p><ul><li>创建 方法 IsBuildFloating?<ul><li>Outputs<ul><li>DidHit? bool</li></ul></li><li>Line Trace By Channel<ul><li>Start 是 变量 BuildTransform 右键拆分 的 Location</li><li>End 是 变量 BuildTransform 右键拆分 的 Location - Z 50</li><li>Actors to Ignore 是 Make Array<ul><li>BuildPreview</li></ul></li><li>Draw Debug Type 是 For Duration 持续</li><li>Return Value 连接 Return Node 的 DidHit?</li></ul></li></ul></li><li>编辑方法 BuildModeClient<ul><li><code>Get Snaping Points</code> 后的 Branch<ul><li>False<ul><li><code>IsBuildFloating?</code><ul><li>Return 的 <code>DidHit?</code> 和 <code>CheckForOverlap 的 Return Value 的 Not</code> 进行 <code>And</code></li><li>传递给 方法 SetPreviewColor 的 IsGreen?</li></ul></li></ul></li><li>True 修改 true 后 Set BuildTransform 后面的逻辑<ul><li>原来的逻辑 Set BuildTransform 后面增加逻辑</li><li>Branch <code>变量 BuildPreview Get BuildableInfo</code> break <code>BuildableInfoDoFloatCheck?</code> 是否需要进行浮动检查<ul><li>True<ul><li>执行 <code>Get Snaping Points</code> 后的 Branch 为 False 后的所有逻辑</li></ul></li><li>False<ul><li>执行 原来逻辑</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_FoundationMaster</p><ul><li>类默认设置<ul><li>BuildableInfoDoFloatCheck? 是 True</li></ul></li></ul><p>测试：可以检测是否浮动，如果浮动则提示无法放置，但是可以放置，因为服务器没有验证</p><p>开始设置服务器的逻辑</p><p>OPEN BPC_BuildingComponent</p><ul><li>编辑 方法 BuildPlacementCheck<ul><li><code>Set 变量 Transform</code> 后的 Branch<ul><li>False<ul><li><code>IsBuildFloating?</code><ul><li>Return 的 <code>DidHit?</code> 和 <code>CheckForOverlap 的 Return Value 的 Not</code> 进行 <code>And</code></li><li>传递给 方法 SetPreviewColor 的 IsGreen?</li></ul></li></ul></li><li>True<ul><li>原来的逻辑 Set BuildTransform 后面增加逻辑</li><li>Branch <code>变量 BuildPreview</code> break <code>BuildableInfoDoFloatCheck?</code> 是否需要进行浮动检查<ul><li>True<ul><li>执行 <code>Get Snaping Points</code> 后的 Branch 为 False 后的所有逻辑</li></ul></li><li>False<ul><li>执行 原来逻辑</li></ul></li></ul></li></ul></li></ul></li><li>Line Trace By Channel 后 没有像Client那样 存储 HitActor 和 HitComponent，需要添加设置<ul><li>HitActor &#x3D; Hit Actor</li><li>HitComponent &#x3D; Hit Component</li></ul></li></ul></li></ul><p>测试：可以检测是否浮动，如果浮动则不能放置建造物</p><h4 id="93-添加门窗和门的开关"><a href="#93-添加门窗和门的开关" class="headerlink" title="93 添加门窗和门的开关"></a>93 添加门窗和门的开关</h4><p>In All&#x2F;Content&#x2F;EasyBuildingSystem&#x2F;Meshes&#x2F;Structures&#x2F;Stylized&#x2F;<br>将 课件 中的 SM_Stylized_Wood_Door 复制并且替换到 项目中的 SM_Stylized_Wood_Door Wood文件夹 点击 Done<br>将 课件 中的 SM_Stylized_Stone_Door 复制并且替换到 项目中的 SM_Stylized_Wood_Door Stone文件夹 点击 Done<br>将 课件 中的 SM_Stylized_Metal_Door 复制并且替换到 项目中的 SM_Stylized_Wood_Door Metal文件夹 点击 Done</p><p>创建 蓝图子类 BP_DoorFrame 继承 BP_WallMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem<br>OPEN BP_DoorFrame</p><ul><li>类设置 BuildableInfo<ul><li>TraceChannel 是 WallTrace</li></ul></li><li>设置 静态网格 <ul><li>材质 SM_Stylized_Wood_DoorFrame<ul><li>变换<ul><li>0 0 150</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:DoorBox<ul><li>变换<ul><li>60 0 -150</li><li>0 0 -180</li></ul></li><li>Box Extent 100 10 200</li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>DoorTrace BlockAll</li></ul></li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 3个 Box Collision 组件</li></ul></li></ul><p>创建 蓝图子类 BP_DoorMaster 继承 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem<br>OPEN BP_DoorMaster</p><ul><li>类设置 BuildableInfo<ul><li>TraceChannel 是 DoorTrace</li><li>其他不设置</li></ul></li><li>设置 静态网格<ul><li>材质 SM_Stylized_Wood_Door</li></ul></li></ul><p>创建 蓝图子类 BP_WindowFrame 继承 BP_WallMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem</p><ul><li>类设置 BuildableInfo<ul><li>TraceChannel 是 WallMaster</li></ul></li><li>设置 静态网格<ul><li>材质 SM_Stylized_Wood_Windowframe</li><li>增加 Box Collision 组件 Rename:WindowFrameBox<ul><li>变换<ul><li>0 0 0</li></ul></li><li>Box Extent 80 20 60</li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>WindowTrace BlockAll</li></ul></li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 3个 Box Collision 组件</li></ul></li></ul><p>创建 蓝图子类 BP_WindowMaster 继承 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem<br>OPEN BP_WindowMaster</p><ul><li>类设置 BuildableInfo<ul><li>TraceChannel 是 WindowTrace</li></ul></li><li>设置 静态网格<ul><li>材质 SM_Stylized_Wood_Window</li></ul></li><li>类设置 BuildableInfo<ul><li>TraceChannel 是 WindowTrace</li></ul></li></ul><p>OPEN DT_Structures</p><ul><li>增加 ID 4<ul><li>BuildableClass BP_DoorFrame</li></ul></li><li>增加 ID 5<ul><li>BuildableClass BP_DoorMaster</li></ul></li><li>增加 ID 6<ul><li>BuildableClass BP_WindowFrame</li></ul></li><li>增加 ID 7<ul><li>BuildableClass BP_WindowMaster</li></ul></li></ul><p>测试:<br>可以放置 门框、门、窗、窗框</p><p>设置门互动<br>思路：角色的摄像头旋转视角 和 门</p><p>创建 蓝图接口文件 BPI_Intractable In _Main&#x2F;Blueprints&#x2F;BuildingSystem</p><ul><li>添加方法 InteractEvent<ul><li>Inputs<ul><li>CharRef BP_FirstPersonCharacter</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>之前的 E 键逻辑是收获物品，需要在没有收获到物品后 增加一条射线检测门的逻辑</li><li>new Var CameraLocation Vector</li><li>new Var CameraRotation Rotator</li><li>new Event LineTraceStorageBoxOnServer<ul><li>LineTraceFunction<ul><li>Interface &#x3D; BPI_Intractable</li></ul></li></ul></li><li>创建 方法 LineTraceFunction<ul><li>创建 局部变量 InteractDistance Float Default:280</li><li>Inputs<ul><li>Interface 类引用(通过 Does Implement Interface 参数 移动到 方法名添加)</li></ul></li><li>Outputs<ul><li>HitActor Actor</li><li>ImplementsInterface? bool</li></ul></li><li>参数 Interface 设置 局部变量 LocalInterface</li><li>GEt First Person Camera 的 Get World Location 设置 变量 CameraLocation</li><li>Line Trace By Channel<ul><li>Start 是 CameraLocation</li><li>End 是 CameraRotation 的 Get Forward Vector * InteractDistance + CameraLocation</li><li>Trace Channel 是 Camera</li></ul></li><li>Branch 结果<ul><li>True<ul><li>Does Implement Interface? 连接 HitActor<ul><li>Class &#x3D; LocalInterface</li></ul></li><li>Branch 结果<ul><li>True<ul><li>Set HitActor &#x3D; Hit Actor</li><li>Set ImplementsInterface? &#x3D; true</li></ul></li><li>False<ul><li>Set ImplementsInterface? &#x3D; false</li></ul></li></ul></li></ul></li><li>False<ul><li>HitActor &#x3D; None</li><li>ImplementsInterface? &#x3D; false</li></ul></li></ul></li></ul></li><li>编辑 Event LineTraceStorageBoxOnServer<ul><li>LineTraceFunction 后</li><li>判断<ul><li>True<ul><li>InteractEvent<ul><li>CharRef 传入 Self</li></ul></li></ul></li></ul></li></ul></li><li>编辑方法 E按键 Event <ul><li>First Person Camera 的 Get World Rotation 连接 CameraRotation</li></ul></li><li>编辑 方法 InteractOnServer<ul><li>Inputs<ul><li>CameraRotator Rotator</li><li>首先 设置一下 CameraRotation</li></ul></li></ul></li><li>编辑 Event OverlapGroundItems<ul><li>在 绘制调试球体 的 Branch 为 False 的 Set Harvesting? 后</li><li>LineTraceStorageBox</li></ul></li></ul><p>OPEN BP_DoorMaster</p><ul><li>类设置<ul><li>Add BPI_Intractable</li></ul></li><li>编辑 Interfaces InteractEvent<ul><li>Print String “门被互动了”</li></ul></li></ul><p>Fix 按E键 之前收获逻辑播放动画的问题<br>OPEN BP_FirstPersonCharacter</p><ul><li>编辑 Event OverlapGroundItems GET OutActors 的 get 后<ul><li>Does Implement Interface<ul><li>Class &#x3D; BPI_GroundItem</li></ul></li><li>Branch<ul><li>True<ul><li>执行后续</li></ul></li><li>False<ul><li>执行 No Hit</li></ul></li></ul></li></ul></li></ul><p>测试：放置门后，按E键 提示 门被互动了</p><p>OPEN BP_DoorMaster</p><ul><li>new var IsDoorOpen? bool 设置 Replication &#x3D; RepNotify 含义：当变量改变时，会触发 RepNotify，此时会多一个方法 OnRep_IsDoorOpen?</li><li>编辑 Interfaces InteractEvent<ul><li>Branch IsDoorOpen?<ul><li>True<ul><li>Set IsDoorOpen? &#x3D; false</li></ul></li><li>False<ul><li>Set IsDoorOpen? &#x3D; true</li></ul></li></ul></li></ul></li><li>new Event SetDoorRotationOnMulticast<ul><li>Inputs<ul><li>OpenerClose? bool</li></ul></li><li>Branch OpenerClose?<ul><li>True<ul><li>Timeline 的 Play From Start<ul><li>add Float Track<ul><li>0 0</li><li>1 -90</li><li>点击垂直 右键 Auto</li><li><code>长度设置从5 设置到1</code></li></ul></li><li>Update<ul><li>门 静态网格体 组件 Set Relative Rotation<ul><li>Make Rotation 的 Z &#x3D; Timeline 的 轨道Return</li></ul></li></ul></li></ul></li></ul></li><li>False 连接 Timeline 的 Reverse from End</li></ul></li></ul></li><li>编辑 方法 OnRep_IsDoorOpen?<ul><li>Set Door Rotation On Multicast<ul><li>OpenerClose? &#x3D; 参数 IsDoorOpen?</li></ul></li></ul></li></ul><p>测试：放置门后，按E键 门会打开和关闭，但是开启后还是会存在一个多的门</p><p>FIX</p><p>OPEN BPC_BuildingComponent</p><ul><li>编辑 Event SpawnBuildOnServer<ul><li>SpawnBuildable 后 依然需要 Destroy Actor</li></ul></li></ul><p>测试成功！</p><p>TODO 遗留的问题：</p><ol><li>建造门的时候 门创建的位置不太合适，创建不流畅</li><li>门的方向不对 应该朝外</li></ol><h4 id="94-添加三角形基础"><a href="#94-添加三角形基础" class="headerlink" title="94 添加三角形基础"></a>94 添加三角形基础</h4><p>创建 BP_TriangleFoundation 继承 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem</p><ul><li>类设置 BuildableInfo<ul><li>TraceChannel 是 TriangleTrace</li><li>CanPlaceOnGroup? 是 True</li><li>UseCustomOverlap? 是 True</li></ul></li><li>OverlapBoxSize<ul><li>0 7 45 </li><li>0 0 0 </li><li>2 1.1 1</li></ul></li><li>编辑 静态网格<ul><li>材质 SM_Stylized_Wood_Triangle_Foundation</li><li>增加地板<ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Foundation</li><li>变换<ul><li>0 237 0</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:Foundation1<ul><li>变换<ul><li>0 237 0</li></ul></li><li>Box Extent 150 150 85</li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>FoundationTrace BlockAll</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Foundation2<ul><li>变换<ul><li>205 -118.3 0</li><li>0 0 -30</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Foundation3<ul><li>变换<ul><li>-205 -118.4 0</li><li>0 0 -60</li></ul></li></ul></li></ul></li><li>增加三角台<ul><li>编辑 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Triangle_Foundation</li><li>变换<ul><li>0 173 0</li><li>0 0 60</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:TriangleFoundation1<ul><li>变换<ul><li>150 -87 0</li><li>0 0 -60</li></ul></li><li>Box Extent 150 150 85</li></ul></li><li>复制 Box Collision 组件 Rename:TriangleFoundation2<ul><li>变换<ul><li>-149.803415 -86.591622 0</li><li>0 0 -60</li></ul></li></ul></li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>TriangleTrace BlockAll</li></ul></li></ul></li><li>增加墙壁<ul><li>编辑 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Wall</li><li>变换<ul><li>0 89 234.8</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:Wall1<ul><li>变换<ul><li>0 89 234.8</li></ul></li><li>Box Extent 150 10 150</li></ul></li><li>复制 Box Collision 组件 Rename:Wall2<ul><li>变换<ul><li>77.095519 -44.922601 234.8</li><li>0 0 -120</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Wall2<ul><li>变换<ul><li>-76.814355 -44.388824 234.8</li><li>0 0 -240</li></ul></li></ul></li><li>Box Collision 碰撞预设 自定义<ul><li>全部 Ignore</li><li>WallTrace BlockAll</li></ul></li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 9个 Box Collision 组件</li></ul></li></ul><p>OPEN DT_Structures</p><ul><li>增加 ID 8<ul><li>BuildableClass BP_TriangleFoundation</li></ul></li></ul><p>测试：可以放置三角形基础，多放几个</p><p>给基础木台设置三角台的捕捉位置</p><p>OPEN BP_FoundationMaster</p><ul><li>静态网格组件<ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Triangle_Foundation</li><li>变换<ul><li>0 235 0</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:TriangleFoundation1<ul><li>Box Extent 150 150 85</li><li>变换<ul><li>0 235 0</li><li>0 0 -60</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:TriangleFoundation2<ul><li>变换<ul><li>-236 0 0</li><li>0 0 30</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:TriangleFoundation3<ul><li>变换<ul><li>236 0 0</li><li>0 0 -30</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:TriangleFoundation4<ul><li>变换<ul><li>0 -236 0</li><li>0 0 0<br>Box Collision 碰撞预设 自定义</li></ul></li><li>全部 Ignore</li><li>TriangleTrace BlockAll</li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 4个 Box Collision 组件</li></ul></li></ul><p>注意：</p><ol><li>确保所有的建造物的 StaticMesh 碰撞预设都是 BlockAllDynamic</li><li>确保所有的建造物的 OverlayBoxSize 碰撞预设都是 Ignore</li><li>添加 Box Collision 组件 时，需要添加 静态网格体 组件，调整好位置之后，复制变换给 Box Collision 组件，然后删除 静态网格体 组件</li></ol><h4 id="95-添加坡道和围栏-的建造物"><a href="#95-添加坡道和围栏-的建造物" class="headerlink" title="95 添加坡道和围栏 的建造物"></a>95 添加坡道和围栏 的建造物</h4><p>创建 蓝图子类 BP_FenceMaster 继承 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem</p><ul><li>类默认设置 BuildableInfo<ul><li>TraceChannel 是 WallTrace</li></ul></li><li>设置 静态网格<ul><li>材质 SM_Stylized_Wood_Fence</li></ul></li></ul><p>创建 蓝图子类 BP_RampMaster 继承 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem</p><ul><li>类默认设置 BuildableInfo<ul><li>TraceChannel 是 RampTrace</li><li>UseCustomOverlap? 是 True</li></ul></li><li>设置 OverlapBoxSize<ul><li>0 -70 50</li><li>0 0 0</li><li>1.3 1 1</li></ul></li><li>设置 静态网格<ul><li>材质 SM_Stylized_Wood_Ramp</li></ul></li></ul><p>OPEN DT_Structures</p><ul><li>增加 ID 9<ul><li>BuildableClass BP_FenceMaster</li></ul></li><li>增加 ID 10<ul><li>BuildableClass BP_RampMaster</li></ul></li></ul><p>为 基础木台 增加 坡道捕捉位置<br>OPEN BP_FoundationMaster</p><ul><li>静态网格组件<ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Ramp</li><li>变换<ul><li>0 300 0</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:Ramp1<ul><li>Box Extent 150 150 85</li><li>变换<ul><li>0 300 0</li><li>0 0 0</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Ramp2<ul><li>变换<ul><li>0 300 0</li><li>0 0 -90</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Ramp2<ul><li>变换<ul><li>-300 0 0</li><li>0 0 90</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Ramp2<ul><li>变换<ul><li>0 -300 0</li><li>0 0 180<br>Box Collision 碰撞预设 自定义</li></ul></li><li>全部 Ignore</li><li>RampTrace BlockAll</li></ul></li></ul></li></ul><p>为 三角建造物 增加 坡道捕捉位置<br>OPEN BP_FoundationMaster</p><ul><li>静态网格组件<ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Ramp</li><li>变换<ul><li>0 235 0</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:Ramp1<ul><li>Box Extent 150 150 85</li><li>变换<ul><li>0 257 0</li><li>0 0 0</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Ramp2<ul><li>变换<ul><li>-205 -118.3 0</li><li>0 0 -240</li></ul></li></ul></li><li>复制 Box Collision 组件 Rename:Ramp2<ul><li>变换<ul><li>0 -300 0</li><li>0 0 180<br>Box Collision 碰撞预设 自定义</li></ul></li><li>全部 Ignore</li><li>RampTrace BlockAll</li></ul></li></ul></li></ul><h4 id="96-三角形天花板"><a href="#96-三角形天花板" class="headerlink" title="96 三角形天花板"></a>96 三角形天花板</h4><p>创建 蓝图子类 BP_TriangleCeiling 继承 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem</p><ul><li>类默认设置 BuildableInfo<ul><li>TraceChannel 是 TriangleCeilingTrace</li><li>UseCustomOverlap? 是 True</li></ul></li><li>设置 OverlapBoxSize</li><li>增加 正方体天花板<ul><li>创建 静态网格体 组件<ul><li>材质 SM_Stylized_Wood_Ceiling</li><li>变换<ul><li>0 236.5 0</li></ul></li></ul></li><li>创建 Box Collision 组件 Rename:Ceiling1<ul><li>Box Extent 150 150 10</li><li>复制 静态网格体的 变换</li></ul></li><li>调整 静态网格体 组件<ul><li>变换<ul><li>204.725551 -118.203589 0</li><li>0 0 -119.99999</li></ul></li></ul></li><li>创建 Box Collision 组件 Rename:Ceiling2<ul><li>复制 静态网格体的 变换</li></ul></li><li>调整 静态网格体 组件<ul><li>变换<ul><li>-205.019206 -118.250957 0</li><li>0 0 30</li></ul></li></ul></li><li>创建 Box Collision 组件 Rename:Ceiling3<ul><li>复制 静态网格体的 变换</li></ul></li><li>选中 所有 Box Collision 组件<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>FloorTrace BlockAll</li></ul></li></ul></li></ul></li><li>增加 三角形天花板<ul><li>创建 静态网格体 组件<ul><li>材质 SM_Stylized_Wood_Triangle_Ceiling</li><li>变换<ul><li>0 173.5 0</li><li>0 0 -60</li></ul></li></ul></li><li>创建 Box Collision 组件 Rename:Triangle1<ul><li>Box Extent 150 150 10</li><li>复制 静态网格体的 变换</li></ul></li><li>修改 静态网格体 组件<ul><li>变换<ul><li>150 -86.5 0</li><li>0 0 -60</li></ul></li></ul></li><li>创建 Box Collision 组件 Rename:Triangle2<ul><li>复制 静态网格体的 变换</li></ul></li><li>修改 静态网格体 组件<ul><li>变换<ul><li>-150 -86.5 0</li><li>0 0 -60</li></ul></li></ul></li><li>创建 Box Collision 组件 Rename:Triangle3<ul><li>复制 静态网格体的 变换</li></ul></li><li>选中 所有 Box Collision 组件<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>TriangleCeilingTrace BlockAll</li></ul></li></ul></li></ul></li><li>增加 正方形墙面<ul><li>创建 静态网格体 组件<ul><li>材质 SM_Stylized_Wood_Wall</li><li>变换<ul><li>0 89 157.5</li></ul></li></ul></li><li>创建 Box Collision 组件 Rename:Wall1<ul><li>Box Extent 150 10 150</li><li>复制 静态网格体的 变换</li></ul></li><li>修改 静态网格体 组件<ul><li>变换<ul><li>76.922911 -43.847995 157.499999</li><li>0 0 -120</li></ul></li></ul></li><li>创建 Box Collision 组件 Rename:Wall2<ul><li>Box Extent 150 10 150</li><li>复制 静态网格体的 变换</li></ul></li><li>修改 静态网格体 组件<ul><li>变换<ul><li>-76.922911 -43.847995 157.499999</li><li>0 0 -240</li></ul></li></ul></li><li>创建 Box Collision 组件 Rename:Wall3<ul><li>Box Extent 150 10 150</li><li>复制 静态网格体的 变换</li></ul></li><li>选中 所有 Box Collision 组件<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>WallTrace BlockAll</li></ul></li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 9个 Box Collision 组件</li></ul></li></ul><p>为 正方形墙面 增加 三角形天花板 捕捉位置<br>OPEN BP_WallMaster</p><ul><li>静态网格组件<ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Triangle_Ceiling</li><li>变换<ul><li>0 -88.904786 151.911246</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:TriangleCeiling1<ul><li>Box Extent 150 150 10</li><li>复制 静态网格体的 变换</li></ul></li><li>修改 静态网格体 组件<ul><li>变换<ul><li>84.434931 151.911246</li><li>0 0 -60</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:TriangleCeiling1<ul><li>复制 静态网格体的 变换</li></ul></li><li>选中 所有 Box Collision 组件<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>TriangleCeilingTrace BlockAll</li></ul></li></ul></li></ul></li></ul><p>增加 三角形天花板的数据表<br>OPEN DT_Structures</p><ul><li>增加 ID 11<ul><li>BuildableClass BP_TriangleCeiling</li></ul></li></ul><p>测试</p><p>为 正方形天花板 增加捕捉位置 OPEN BP_CeilingMaster</p><ul><li>静态网格组件<ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Triangle_Ceiling</li><li>变换<ul><li>0 236.5 0 </li><li>0 0 -60</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:TriangleCeiling1<ul><li>Box Extent 150 150 10</li><li>复制 静态网格体的 变换</li></ul></li><li>修改 静态网格体 组件<ul><li>变换<ul><li>236.5 0 0</li><li>0 0 -30</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:Copy<ul><li>复制 静态网格体的 变换</li></ul></li><li>修改 静态网格体 组件<ul><li>变换<ul><li>0 -236.5 0</li><li>0 0 0</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:Copy<ul><li>复制 静态网格体的 变换</li></ul></li><li>修改 静态网格体 组件<ul><li>变换<ul><li>-236.5 0 0</li><li>0 0 30</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:Copy<ul><li>复制 静态网格体的 变换</li></ul></li><li>选中 所有 Box Collision 组件<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>TriangleCeilingTrace BlockAll</li></ul></li></ul></li></ul></li></ul><p>测试</p><p>待补充：<br>为 正方形门墙 增加捕捉位置<br>为 正方形窗墙 增加捕捉位置</p><h4 id="97-添加可交互的火炬"><a href="#97-添加可交互的火炬" class="headerlink" title="97 添加可交互的火炬"></a>97 添加可交互的火炬</h4><p>选择资源文件夹</p><ul><li>EasyBuildingSystem&#x2F;Meshes&#x2F;Props&#x2F;Stylized </li><li>选中 床 和 火炬 SM_Stylized_Bed 和 SM_Stylized_Torch</li><li>右键 迁移[Migrate] 弹出资源报告</li><li>选择当前项目路径的 ${项目路径}&#x2F;Content 是否重写 点击全部重写</li></ul><p>创建 蓝图子类 BP_Torch 继承 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem</p><ul><li>类 默认 <ul><li>BuildableInfo<ul><li>TraceChannel 是 TorchTrace</li></ul></li></ul></li><li>设置 静态网格<ul><li>材质 SM_Stylized_Torch</li></ul></li></ul><p>增加火源，市场 Realistic Starter VFX Pack Vol 2<br>OPEN P_Fire_Small 只用一个粒子效果<br>创建 粒子文件 P_TorchFire Copy P_Fire_Small</p><p>OPEN P_TorchFire</p><ul><li>删除其他的 只留 smoke_a fire_small_a light_a</li><li>删除 右键 发射器 删除</li></ul><p>OPEN BP_Torch</p><ul><li>增加 粒子系统组件 Particle System 组件<ul><li>调整位置<ul><li>-30 -44 57</li></ul></li><li>设置 粒子效果 模板 P_TorchFire<ul><li>增加交互<ul><li>详情的 Visible 改为 False 默认隐藏</li></ul></li></ul></li></ul></li><li>创建 变量 IsTorchLit? bool RepNotify 修改后触发</li><li>类设置<ul><li>增加 API接口 BPI_Intractable</li></ul></li><li>编辑 接口 EventInteractEvent 用来控制 火源是否显示<ul><li>判断火源是否显示<ul><li>false<ul><li>显示</li></ul></li><li>true<ul><li>不显示</li></ul></li></ul></li></ul></li><li>编辑 方法 OnRep_IsTorchLit?</li><li>Set 火焰粒子 Set Visibility<ul><li>new Visible &#x3D; 变量 IsTorchLit?</li></ul></li></ul><p>为 墙壁增加 火炬捕捉位置<br>OPEN BP_WallMaster</p><ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Torch</li><li>变换<ul><li>0 10 0</li></ul></li><li>增加 Box Collision 组件 Rename:Torch1<ul><li>Box Extent 60 10 60</li><li>复制 静态网格体的 变换</li></ul></li><li>修改 静态网格体 组件<ul><li>变换<ul><li>0 -10 0</li><li>0 0 -180</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:Copy<ul><li>复制 静态网格体的 变换</li></ul></li><li>选中 所有 Box Collision 组件<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>TorchTrace BlockAll</li></ul></li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 2个 Box Collision 组件</li></ul></li></ul><p>增加 火炬的数据表<br>OPEN DT_Structures</p><ul><li>增加 ID 12<ul><li>BuildableClass BP_Torch</li></ul></li></ul><p>测试:</p><ol><li>在正方形墙壁上放置火炬</li><li>按E键 火炬会显示和隐藏</li></ol><p>设置门框左右的捕捉位置<br>OPEN BP_DoorFrame</p><ul><li>编辑 TorchBox1<ul><li>变换<ul><li>-100 10 0</li><li>0 0 0</li></ul></li></ul></li><li>编辑 TorchBox2<ul><li>变换<ul><li>100 10 0</li><li>0 0 0</li></ul></li></ul></li></ul><h4 id="98-添加楼梯和床"><a href="#98-添加楼梯和床" class="headerlink" title="98 添加楼梯和床"></a>98 添加楼梯和床</h4><p>添加楼梯</p><p>创建 蓝图子类 BP_StairsMaster 继承 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem</p><ul><li>类 默认 <ul><li>BuildableInfo<ul><li>TraceChannel 是 StairsTrace</li><li>UseCustomOverlap? 是 True</li></ul></li></ul></li><li>设置 静态网格<ul><li>材质 SM_Stylized_Wood_Stairs</li></ul></li></ul><p>为 基础木台 增加 楼梯捕捉位置<br>OPEN BP_FoundationMaster</p><ul><li>静态网格组件<ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Stairs</li><li>变换<ul><li>0 -14 242</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:Stairs1<ul><li>Box Extent 180 180 180 </li><li>复制 静态网格体的 变换</li></ul></li><li>选中 所有 Box Collision 组件<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>StairsTrace BlockAll</li></ul></li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 1个 Box Collision 组件</li></ul></li></ul><p>增加 楼梯的数据表<br>OPEN DT_Structures</p><ul><li>增加 ID 13<ul><li>BuildableClass BP_StairsMaster</li></ul></li></ul><p>测试</p><p>为 基础天花板 增加 楼梯捕捉位置<br>OPEN BP_CeilingMaster</p><ul><li>同上 高度是242</li></ul><p>创建 蓝图子类 BP_Bed 继承 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem</p><ul><li>类 默认 <ul><li>BuildableInfo<ul><li>CanPlaceOnFoundation? 是 True</li></ul></li></ul></li><li>设置 静态网格<ul><li>材质 SM_Stylized_Bed</li></ul></li></ul><p>增加 检测 是否可以放置在基础木台上<br>OPEN BPC_BuildingComponent</p><ul><li>创建 Event BuildOnFoundation?<ul><li>Outputs<ul><li>CanFoundation? bool</li></ul></li><li>Line Trace By Channel<ul><li>Start 是 变量 BuildPreview 的 静态网格体 的 世界位置</li><li>End 是 变量 BuildPreview 的 静态网格体 的 世界位置 - (0 0 50)</li><li>Actors To Ignore 是 Make Array 变量 BuildPreview</li></ul></li><li>Branch<ul><li>True<ul><li>Break Out Hit 的 HitActor 进行 Actor Has Tag(判断是否有标签)<ul><li>Tag &#x3D; Foundation</li></ul></li><li>Return Node<ul><li>CanFoundation? &#x3D; Actor Has Tag 的 Return Value</li></ul></li></ul></li><li>False<ul><li>Return Node<ul><li>CanFoundation? &#x3D; false</li></ul></li></ul></li></ul></li></ul></li><li>编辑 方法 BuildModeClient<ul><li>GetSnappingPoints &#x3D;&#x3D; false 后<ul><li>再增加一个 Branch 判断 CanPlaceOnGround? true 则原逻辑，false往下</li><li>Branch CanPlaceOnFoundation?<ul><li>True<ul><li>BuildOnFoundation?</li><li>根据参数检测，检测完后，后续逻辑一样</li></ul></li><li>False<ul><li>Set PreviewColor …</li></ul></li></ul></li><li>还有一种情况 逻辑上，建造物如果不能放在地面上，还需要检测是否能放在基础木台上<ul><li>判断 CanPlaceOnGround? true 后 但是整体都是 false，这时候需要重新 Branch CanPlaceOnFoundation?一下</li></ul></li></ul></li></ul></li><li>编辑 方法 BuildPlacementCheck<ul><li>一样的修改</li></ul></li></ul><p>OPEN BP_FoundationMaster</p><ul><li>CanPlaceOnGroup? 是 True</li><li>UseCustomOverlap? 是 True</li><li>DoFloatCheck? 是 True</li><li>增加标签 详情 Tags Array item &#x3D;&gt; Foundation</li></ul><p>OPEN BP_TriangleFoundation</p><ul><li>CanPlaceOnGroup? 是 True</li><li>UseCustomOverlap? 是 True</li><li>增加标签 详情 Tags Array item &#x3D;&gt; Foundation</li></ul><p>增加 床的数据表<br>OPEN DT_Structures</p><ul><li>增加 ID 14<ul><li>BuildableClass BP_Bed</li></ul></li></ul><p>测试：</p><ol><li>床不能地面上，可以放在基础木台、和三角形基础木台上</li></ol><h4 id="99-添加-左右三角形墙壁和屋顶"><a href="#99-添加-左右三角形墙壁和屋顶" class="headerlink" title="99 添加 左右三角形墙壁和屋顶"></a>99 添加 左右三角形墙壁和屋顶</h4><p>创建 蓝图子类 BP_RoofLeftMaster 继承 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem<br>OPEN BP_RoofLeftMaster</p><ul><li>类 默认 <ul><li>BuildableInfo<ul><li>TraceChannel 是 WallTrace</li><li>UseCustomOverlap? 是 True</li></ul></li></ul></li><li>设置 静态网格<ul><li>材质 SM_Stylized_Wood_Sloped_Wall_Left</li></ul></li><li>为 三角形墙壁 增加 屋顶的捕捉位置<ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Roof</li><li>变换<ul><li>0 -143.342 0</li><li>0 0 180</li></ul></li><li>增加 Box Collision 组件 Rename:RoofBox1<ul><li>Box Extent 150 150 150</li><li>复制 静态网格体的 变换</li></ul></li></ul></li><li>选中 所有 Box Collision 组件<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>RoofTrace BlockAll</li></ul></li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 1个 Box Collision 组件</li></ul></li></ul><p>Copy 蓝图子类 BP_RoofRightMaster TO BP_RoofLeftMaster<br>OPEN BP_RoofRightMaster</p><ul><li>类 默认<ul><li>BuildableInfo<ul><li>TraceChannel 是 WallTrace</li><li>UseCustomOverlap? 是 True</li></ul></li></ul></li><li>设置 静态网格<ul><li>材质 SM_Stylized_Wood_Sloped_Wall_Right</li></ul></li><li>为 三角形墙壁 增加 屋顶的捕捉位置<ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Roof</li><li>变换<ul><li>0 143.342 0</li><li>0 0 0</li></ul></li><li>增加 Box Collision 组件 Rename:RoofBox1<ul><li>Box Extent 150 150 150</li><li>复制 静态网格体的 变换</li></ul></li></ul></li><li>选中 所有 Box Collision 组件<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>RoofTrace BlockAll</li></ul></li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 1个 Box Collision 组件</li></ul></li></ul><p>创建 蓝图子类 BP_RoofLargeMaster 继承 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem<br>OPEN BP_RoofLargeMaster</p><ul><li>类 默认<ul><li>BuildableInfo<ul><li>TraceChannel 是 RoofTrace</li><li>UseCustomOverlap? 是 True</li></ul></li></ul></li><li>设置 静态网格<ul><li>材质 SM_Stylized_Wood_Roof</li></ul></li><li>设置 OverlapBoxSize<ul><li>6.5 0 8</li><li>0 50 0</li><li>1 2.6 3.1</li></ul></li><li>为 屋顶 增加 屋顶的捕捉位置<ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Roof</li><li>变换<ul><li>0 300 0</li><li>0 0 0</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:RoofBox1<ul><li>Box Extent 150 150 150</li><li>复制 静态网格体的 变换</li></ul></li><li>修改 静态网格体 组件<ul><li>变换<ul><li>0 -300 0</li><li>0 0 0</li></ul></li></ul></li><li>选中 所有 Box Collision 组件<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>RoofTrace BlockAll</li></ul></li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 2个 Box Collision 组件</li></ul></li></ul><p>增加 三个建造物的数据表<br>OPEN DT_Structures</p><ul><li>增加 ID 15<ul><li>BuildableClass BP_RoofLeftMaster</li></ul></li><li>增加 ID 16<ul><li>BuildableClass BP_RoofRightMaster</li></ul></li><li>增加 ID 17<ul><li>BuildableClass BP_RoofLargeMaster</li></ul></li></ul><p>为 基础墙壁 增加 向上的基础墙壁的捕捉位置<br>OPEN BP_WallMaster</p><ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Wall</li><li>变换<ul><li>0 0 300</li></ul></li><li>增加 Box Collision 组件 Rename:Wall1<ul><li>Box Extent 150 10 150</li><li>复制 静态网格体的 变换</li></ul></li><li>选中 所有 Box Collision 组件<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>WallTrace BlockAll</li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 1个 Box Collision 组件</li></ul></li></ul></li></ul><p>为 门框 增加 向上的基础墙壁的捕捉位置</p><ul><li>Copy BP_WallMaster 的 Wall1 到 BP_DoorFrame</li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 1个 Box Collision 组件</li></ul></li></ul><p>为 窗框 增加 向上的基础墙壁的捕捉位置</p><ul><li>Copy BP_WallMaster 的 Wall1 到 BP_WindowFrame</li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 1个 Box Collision 组件</li></ul></li></ul><h4 id="100-添加-三角形墙壁建造物"><a href="#100-添加-三角形墙壁建造物" class="headerlink" title="100 添加 三角形墙壁建造物"></a>100 添加 三角形墙壁建造物</h4><p>创建 蓝图子类 BP_RoofTriangleMaster 继承 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem<br>OPEN BP_RoofTriangleMaster</p><ul><li>类 默认<ul><li>BuildableInfo<ul><li>TraceChannel 是 WallTrace</li><li>UseCustomOverlap? 是 True</li></ul></li></ul></li><li>设置 静态网格<ul><li>材质 SM_Stylized_Wood_Triangle_Wall</li></ul></li><li>设置 屋顶 捕捉位置<ul><li>增加 静态网格体 组件<ul><li>设置 材质 SM_Stylized_Wood_Half_Roof</li><li>变换<ul><li>0 -142 0</li><li>0 0 0</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:RoofBox1<ul><li>Box Extent 130 150 50</li><li>复制 静态网格体的 变换</li></ul></li><li>修改 静态网格体 组件<ul><li>变换<ul><li>0 -142 0</li><li>0 0 180</li></ul></li></ul></li><li>增加 Box Collision 组件 Rename:Copy<ul><li>复制 静态网格体的 变换</li></ul></li><li>选中 所有 Box Collision 组件<ul><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>RoofSmallTrace BlockAll</li></ul></li></ul></li></ul></li><li>编辑 API方法 ReturnBoxes<ul><li>Make Array 增加返回 2个 Box Collision 组件</li></ul></li></ul><p>创建 蓝图子类 BP_RoofSmallMaster 继承 BP_BuildableMaster In _Main&#x2F;Blueprints&#x2F;BuildingSystem<br>OPEN BP_RoofSmallMaster</p><ul><li>类 默认<ul><li>BuildableInfo<ul><li>TraceChannel 是 RoofSmallTrace</li><li>UseCustomOverlap? 是 True</li></ul></li></ul></li><li>设置 静态网格<ul><li>材质 SM_Stylized_Wood_Half_Roof</li></ul></li><li>设置 OverlapBoxSize<ul><li>81 0 -65</li><li>0 -40 0</li><li>1.78 2.322 0.68</li></ul></li><li>为 屋顶 增加 屋顶的捕捉位置</li></ul><p>增加 2个建造物的数据表<br>OPEN DT_Structures</p><ul><li>增加 ID 18<ul><li>BuildableClass BP_RoofTriangleMaster</li></ul></li><li>增加 ID 19<ul><li>BuildableClass BP_RoofSmallMaster</li></ul></li></ul><p>修复遗留的问题：</p><ul><li>门墙的顶部的墙面捕捉位置无效</li><li>窗墙的顶部的墙面捕捉位置无效</li></ul><p>OPEN BP_DoorFrame 和 BP_WindowFrame</p><ul><li>需要 ReturnBoxes 方法中增加返回 Wall1 组件</li></ul><div>                <img src="/blog/p/614a8811/三角形墙壁建造物.png" alt="三角形墙壁建造物.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[三角形墙壁建造物.png]</p>            </div><h4 id="101-为建造物增加损坏和破坏效果"><a href="#101-为建造物增加损坏和破坏效果" class="headerlink" title="101 为建造物增加损坏和破坏效果"></a>101 为建造物增加损坏和破坏效果</h4><p>创建 蓝图枚举 伤害类型文件 E_StructureDamageType In _Main&#x2F;Blueprints&#x2F;Enums</p><ul><li>增加<ul><li>Wood</li><li>Stone</li><li>Metal</li><li>None</li></ul></li></ul><p>创建蓝图结构 S_DamageTiers In _Main&#x2F;Blueprints&#x2F;Structures</p><ul><li>CanDamageType E_StructureDamageType Array</li></ul><p>OPEN BP_ThirdPersonEquipable</p><ul><li>创建 变量 StructureDamageTier S_DamageTiers</li></ul><p>OPEN BP_TP_StoneHatchet</p><ul><li>详情<ul><li>StructureDamageTier 增加 <ul><li>Wood</li><li>Metal</li></ul></li></ul></li></ul><p>创建 蓝图接口文件 BPI_StructureDamage In _Main&#x2F;Blueprints&#x2F;Interfaces</p><ul><li>增加 API接口<ul><li>Event GetCanDamage<ul><li>Outputs<ul><li>DamageTiers S_DamageTiers</li></ul></li></ul></li></ul></li></ul><p>OPEN BP_ThirdPersonEquipable</p><ul><li>继承 API BPI_StructureDamage</li><li>实现 Event GetCanDamage<ul><li>返回 变量 StructureDamageTier</li></ul></li></ul><p>OPEN BP_BuildableMaster</p><ul><li>创建 变量 CurrentHP float Default：10 </li><li>创建 变量 MaxHP float</li><li>实现内置Event AnyDamage 对于这个actor 有任何的损坏 则执行<ul><li>Branch Does Implement Interface<ul><li>测试对象：伤害的 Causer</li><li>接口：BPI_StructureDamage</li></ul></li><li>True<ul><li>Branch 方法 CanDamageStructure? 参数连接 DamageCauser<ul><li>True<ul><li>测试对象：伤害的 Causer</li><li>返回值：CanDamage?</li><li>Branch CanDamage?</li><li>True<ul><li>设置 CurrentHP &#x3D; CurrentHP - 受到的伤害</li><li>Branch CurrentHP &lt;&#x3D;0</li><li>True<ul><li>print string “建筑物被摧毁”</li><li>执行 建造物本身的 StructureDestroyEvent 事件</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>创建 变量 StructureTier E_StructureDamageType Default:Wood</li><li>创建 方法 CanDamageStructure?<ul><li>Inputs<ul><li>Instigator Object</li></ul></li><li>Outputs<ul><li>CanApplyDamage? bool</li></ul></li><li>创建 局部变量 CanDamage? Bool</li><li>参数 Instigator &#x3D;&gt; Is Valid</li><li>参数 Instigator 的 Get Can Damage 对结果 break 的 数组 进行 For Each Loop With Break<ul><li>Branch Array Element &#x3D;&#x3D;(Enum 相等) StructureTier<ul><li>True<ul><li>设置 CanDamage? 为 True Break</li></ul></li><li>False<ul><li>循环执行</li></ul></li></ul></li></ul></li><li>返回 CanDamage?</li></ul></li></ul><p>OPEN BP_TP_StoneHatchet</p><ul><li>编辑 方法 ServerOverlap 是否重叠 的 SphereOverlapActors 增加一个 Structure<ul><li>变成两个<ul><li>Structure</li><li>Pawn</li></ul></li></ul></li></ul><p>OPEN BP_BuildableMaster</p><ul><li>编辑 静态网格体 的 碰撞预设设置<ul><li>ObjectType &#x3D; Structure</li></ul></li></ul><p>但是 继承 BP_BuildableMaster 的 子类的 静态网格体 的 碰撞预设设置 不会被自动修改，需要手动修改<br>OPEN BP_FoundationMaster</p><ul><li>编辑 静态网格体 的 碰撞预设设置<ul><li>ObjectType &#x3D; Structure</li></ul></li></ul><p>OPEN BPI_BuildInterface</p><ul><li>增加 API接口<ul><li>Event StructureDestroyEvent</li></ul></li></ul><p>OPEN BP_BuildableMaster</p><ul><li>实现 StructureDestroyEvent</li></ul><p>为 建造物 创建 破坏效果<br>创建文件夹 _Main&#x2F;Meshes&#x2F;DestructableMeshes&#x2F;Wood</p><p>OPEN FirstPersonMap 和 EasyBuildingSystem&#x2F;Meshes&#x2F;Props&#x2F;Stylized&#x2F;Wood&#x2F;SM_Stylized_Wood_Foundation</p><ul><li>将 上面文件夹内的基础木台 放进地图中</li><li>进入 破裂 Fracture 模式<ul><li>New </li><li>选择 Wood 文件夹</li><li>Rename DW_WoodFoundationForce</li><li>确认 创建 几何集合</li><li>Uniform<ul><li>20 x 20 确认</li></ul></li></ul></li><li>从地图中删除 基础木台</li></ul><p>OPEN BP_BuildableMaster</p><ul><li>增加 几何体 组件 Rename:DestructableMesh<ul><li>设置 几何体 DW_WoodFoundationForce</li><li>设置 隐藏</li></ul></li><li>编辑 StructureDestroyEvent<ul><li>执行 MulticastDestruction</li></ul></li><li>创建 Event MulticastDestruction<ul><li>设置 静态网格体 的 碰撞状态  Static Mesh &#x3D;&gt; Set Collision Enabled<ul><li>New Type &#x3D; No Collision</li></ul></li><li>设置 静态网格体 的 显示状态  Static Mesh &#x3D;&gt; Set Visibility<ul><li>New Visibility &#x3D; false</li></ul></li><li>设置 几何体 的 显示状态  DestructableMesh &#x3D;&gt; Set Visibility<ul><li>New Visibility &#x3D; True</li></ul></li><li>设置 几何体 的 显示状态  DestructableMesh &#x3D;&gt; Set Simulate Physics<ul><li>Simulate &#x3D; True</li></ul></li><li>Spawn Actor from Class<ul><li>Class &#x3D; BP_DestructionForce</li><li>变换 拆分引脚<ul><li>位置 &#x3D; Actor 的 Get Actor Location</li></ul></li></ul></li></ul></li></ul><p>测试，用斧头敲击，建筑物会被摧毁，但是碎片会卡住角色。</p><p>OPEN BP_BuildableMaster</p><ul><li>修改 DestructableMesh 的 碰撞预设设置<ul><li>Pawn 为重叠</li></ul></li><li>修改 物理<ul><li>Simulate Physics 为 False 含义：不受物理影响</li></ul></li></ul><p>遗留问题:碎片弹出范围很大，需要调整</p><h4 id="102-添加附加伤害-1"><a href="#102-添加附加伤害-1" class="headerlink" title="102 添加附加伤害 1"></a>102 添加附加伤害 1</h4><p>如果某个建造物被摧毁，那么与之相连的建造物也会受到伤害 通过Tag：AboveFoundation 来实现<br>逻辑写在 建造物父类 BP_BuildableMaster 中</p><p>OPEN BP_BuildableMaster</p><ul><li>创建 变量 IsDestroyed? bool</li></ul><p>OPEN BP_FoundationMaster</p><ul><li>增加 Box Collision 组件 Rename:CheckWallsTrace<ul><li>变换 <ul><li>0 0 212</li><li>0 0 0 </li><li>4.8 4.8 3</li></ul></li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>WorldStatic 和 WorldDynamic 和 Structure 重叠</li></ul></li></ul></li><li>实现 Event StructureDestroyEvent<ul><li>右键 Event 右键 添加对父函数的调用</li><li>Branch IsDestroyed?<ul><li>True</li><li>False<ul><li>设置 IsDestroyed? 为 True</li><li>父函数：StructureDestroyEvent</li><li>执行 DestroySnappedStructures</li><li>Delay 3S</li><li>Destroy Actor</li></ul></li></ul></li></ul></li><li>创建 方法 DestroySnappedStructures<ul><li>创建 局部变量 CheckWallsTrace -&gt; Get Overlapping Actors 给 OverlappingActors Array</li><li>branch OverlappingActors -&gt; Length &gt; 0<ul><li>True<ul><li>For Each Loop With Break<ul><li>Array &#x3D; OverlappingActors</li><li>Break Array Element</li><li>Branch Array Element -&gt; Actor Has Tag<ul><li>Tag &#x3D; AboveFoundation</li><li>True<ul><li>执行 循环体 Array Element 的 StructureDestroyEvent</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_WallMaster</p><ul><li>增加 Tag<ul><li>AboveFoundation</li></ul></li><li>查看 材质 点击按钮后找到 材质的位置 拖入 FirstPersonMap 中</li></ul><p>OPEN FirstPersonMap</p><ul><li>进入 破裂 Fracture 模式<ul><li>New</li><li>选择 Wood 文件夹</li><li>Rename DW_WoodWall</li><li>确认 创建 几何集合</li><li>Uniform<ul><li>20 x 20 确认</li></ul></li><li>调整一下碎片的大小 然后恢复乘0</li></ul></li><li>从地图中删除 基础木台</li></ul><p>OPEN BP_WallMaster</p><ul><li>设置 DestructableMesh 的 几何体 DW_WoodWall</li></ul><p>测试：</p><ol><li>放置 基础木台 和 一面墙</li><li>用斧头敲击 基础木台，墙会被摧毁</li></ol><p>增加 环境<br>OPEN FirstPersonMap</p><ul><li>选择模式 Landscape 地形<ul><li>位置 0 0 -25</li><li>创建</li></ul></li></ul><p>测试</p><p>增加 对 墙壁的损坏效果 和 附加伤害，墙壁除了被摧毁，还会对其他物品比如火炬造成伤害<br>OPEN BP_WallMaster</p><ul><li>创建 Box Collision 组件 Rename:DemoCeiling<ul><li>Box Extent</li><li>变换<ul><li>0 0 122</li></ul></li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>WorldStatic 和 WorldDynamic 和 Structure 重叠</li></ul></li></ul></li><li>实现 Event StructureDestroyEvent 复制 BP_FoundationMaster 的内容 一直到 添加对父函数的调用<ul><li>DestroySnappedStructures</li><li>Delay 3.0</li><li>Destroy Actor</li></ul></li><li>创建 方法 DestroySnappedStructures<ul><li>创建 局部变量 DemoCeiling -&gt; Get Overlapping Actors 给 OverlappingActors Array<ul><li>Class Filter &#x3D; BP_BuildableMaster</li></ul></li><li>DemoCeiling Length &gt; 0<ul><li>True<ul><li>For Each Loop With Break<ul><li>Array &#x3D; OverlappingActors</li><li>Break Array Element</li><li>Branch （Array Element -&gt; Actor Has Tag AboveWall）or（Array Element -&gt; Actor Has Tag AboveFoundation）<ul><li>True<ul><li>执行 StructureDestroyEvent</li></ul></li><li>False</li></ul></li></ul></li></ul></li><li>False 或者 循环完后<ul><li>Overlap Box Size -&gt; Get Overlapping Actors -&gt; 设置局部变量 OverlappingCeilings</li><li>OverlappingCeilings -&gt; Length &gt; 0<ul><li>True<ul><li>For Each Loop With Break<ul><li>Array &#x3D; OverlappingCeilings</li><li>Break Array Element</li><li>Branch Array Element -&gt; StructureDestroyEvent</li><li>Completed<ul><li>Return Node</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>设置 OverlapBoxSize<ul><li>碰撞预设 自定义<ul><li>Structure 重叠</li></ul></li></ul></li></ul><p>给 天花板 设置 Tag<br>OPEN BP_CeilingMaster</p><ul><li>增加 Tag<ul><li>AboveWall</li></ul></li><li>增加 Box Collision 组件 Rename:CheckWallsTrace<ul><li>变换<ul><li>0 0 153</li><li>4.8 4.8 3</li></ul></li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>WorldStatic 和 WorldDynamic 和 Structure 重叠</li></ul></li></ul></li><li>实现 Event StructureDestroyEvent 复制 BP_FoundationMaster 的内容 一直到 添加对父函数的调用<ul><li>DestroySnappedStructures</li><li>Delay 3.0</li><li>Destroy Actor</li></ul></li><li>创建 方法 DestroySnappedStructures<ul><li>CheckWallsTrace -&gt; Get Overlapping Actors -&gt; 设置局部变量 OnCeilingBuildables<ul><li>Class Filter &#x3D; BP_BuildableMaster</li></ul></li><li>Branch OnCeilingBuildables -&gt; Length &gt; 0<ul><li>True<ul><li>For Each Loop With Break<ul><li>Array &#x3D; OnCeilingBuildables</li><li>Break Array Element</li><li>Branch Array Element -&gt; Actor Has Tag<ul><li>Tag &#x3D; AboveFoundation</li><li>True<ul><li>执行 StructureDestroyEvent</li></ul></li><li>False</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>为 天花板 创建 破坏效果</p><p>OPEN BP_CeilingMaster</p><ul><li>查看 材质 点击按钮后找到 材质的位置 拖入 FirstPersonMap 中</li></ul><p>OPEN FirstPersonMap</p><ul><li>进入 破裂 Fracture 模式<ul><li>New</li><li>选择 Wood 文件夹</li><li>Rename DW_WoodCeiling</li><li>确认 创建 几何集合</li><li>Uniform<ul><li>20 x 20 确认</li></ul></li><li>调整一下碎片的大小 然后恢复乘0</li></ul></li></ul><p>OPEN BP_CeilingMaster</p><ul><li>设置 DestructableMesh 的 几何体 DW_WoodCeiling</li></ul><p>测试：</p><ol><li>放置 基础木台 和 一面墙 和 一面天花板</li><li>放置 基础木台 和 2面墙 和 2面天花板</li><li>用斧头敲击 基础木台、墙和天花板会被摧毁</li></ol><h4 id="103-添加附加伤害-2"><a href="#103-添加附加伤害-2" class="headerlink" title="103 添加附加伤害 2"></a>103 添加附加伤害 2</h4><p>OPEN BP_FoundationMaster</p><ul><li>查看 方法 DestroySnappedStructures<ul><li>针对 Tag 是：AboveFoundation 的建造物，会被摧毁</li></ul></li></ul><p>所以 针对 基础木台上的想要一并摧毁的建造物，需要设置 Tag 是：AboveFoundation</p><h5 id="Bed"><a href="#Bed" class="headerlink" title="Bed"></a>Bed</h5><p>OPEN BP_Bed</p><ul><li>增加 Tag<ul><li>AboveFoundation</li></ul></li><li>实现 Event StructureDestroyEvent 复制 BP_FoundationMaster 的内容<ul><li>对父函数的调用</li><li>Delay 3.0</li><li>Destroy Actor</li></ul></li></ul><p>为 床 添加 破坏效果<br>OPEN BP_Bed</p><ul><li>查看 材质 点击按钮后找到 材质的位置 拖入 FirstPersonMap 中</li></ul><p>OPEN FirstPersonMap</p><ul><li>进入 破裂 Fracture 模式<ul><li>New</li><li>选择 Wood 文件夹</li><li>Rename DW_Bed</li><li>确认 创建 几何集合</li><li>Uniform<ul><li>20 x 20 确认</li></ul></li></ul></li></ul><p>OPEN BP_Bed</p><ul><li>设置 DestructableMesh 的 几何体 DW_Bed</li></ul><p>测试：</p><ol><li>放置 基础木台 和 一面墙 和 一面天花板 和 一张床</li><li>用斧头敲击 基础木台、墙、天花板和床会被摧毁</li></ol><h5 id="DoorFrame-和-DoorMaster-和-Torch"><a href="#DoorFrame-和-DoorMaster-和-Torch" class="headerlink" title="DoorFrame 和 DoorMaster 和 Torch"></a>DoorFrame 和 DoorMaster 和 Torch</h5><p>OPEN BP_DoorFrame</p><ul><li>增加 Tag<ul><li>AboveFoundation</li></ul></li><li>对 DoorBox 和 Torch1 和 Torch2 修改 碰撞预设 自定义<ul><li>全部 Ignore</li><li>Structure 重叠</li></ul></li><li>实现 Event StructureDestroyEvent 复制 BP_FoundationMaster 的内容<ul><li>对父函数的调用</li><li>DestroyDoorStructure</li><li>Delay 3.0</li><li>Destroy Actor</li></ul></li><li>创建 方法 DestroyDoorStructure<ul><li>DoorBox -&gt; Get Overlapping Actors -&gt; 设置局部变量 OverlappingActors<ul><li>Class Filter &#x3D; BP_DoorMaster</li></ul></li><li>Branch OverlappingActors -&gt; Length &gt; 0<ul><li>True<ul><li>For Each Loop With Break<ul><li>Array &#x3D; OverlappingActors<ul><li>执行 StructureDestroyEvent</li></ul></li></ul></li></ul></li></ul></li><li>摧毁火炬 Torch1 -&gt; Get Overlapping Actors -&gt; 设置局部变量 OverlappingActors<ul><li>Class Filter &#x3D; BP_Torch</li><li>Branch OverlappingActors -&gt; Length &gt; 0<ul><li>True<ul><li>For Each Loop With Break<ul><li>Array &#x3D; OverlappingActors<ul><li>执行 StructureDestroyEvent</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>摧毁火炬 Torch2 同上</li></ul></li></ul><p>OPEN BP_Torch 和 BP_DoorMaster</p><ul><li>实现 Event StructureDestroyEvent 复制 BP_FoundationMaster 的内容<ul><li>对父函数的调用</li><li>Delay 3.0</li><li>Destroy Actor</li></ul></li></ul><p>为 门墙、门、火炬 添加 破坏效果<br>OPEN BP_DoorFrame 和 BP_DoorMaster 和 BP_TorchMaster</p><ul><li>查看 材质 点击按钮后找到 材质的位置 拖入 FirstPersonMap 中</li></ul><p>OPEN FirstPersonMap</p><ul><li>进入 破裂 Fracture 模式<ul><li>New</li><li>选择 Wood 文件夹</li><li>Rename DW_WoodDoorFrame 和 DW_WoodDoor 和 DW_Torch</li><li>确认 创建 几何集合</li><li>Uniform<ul><li>20 x 20 火炬改成 5 x 5 确认</li></ul></li></ul></li></ul><p>OPEN BP_DoorFrame</p><ul><li>设置 DestructableMesh 的 几何体 DW_WoodDoorFrame</li></ul><p>OPEN BP_DoorMaster</p><ul><li>设置 DestructableMesh 的 几何体 DW_WoodDoor</li></ul><p>OPEN BP_TorchMaster</p><ul><li>设置 DestructableMesh 的 几何体 DW_Torch</li></ul><p>测试：</p><ol><li>放置 基础木台 和 一个门墙 和 门 以及火炬</li><li>用斧头敲击 基础木台、门墙、门、火炬和床会被摧毁</li></ol><p>测试结果：门没有被摧毁</p><p>OPEN BP_DoorFrame</p><ul><li>编辑 Event StructureDestroyEvent<ul><li>执行 父函数</li><li>DestroyDoorStructure</li></ul></li></ul><h5 id="FenceMaster"><a href="#FenceMaster" class="headerlink" title="FenceMaster"></a>FenceMaster</h5><p>OPEN BP_FenceMaster</p><ul><li>增加 Tag<ul><li>AboveFoundation</li></ul></li><li>实现 Event StructureDestroyEvent 复制 BP_FoundationMaster 的内容<ul><li>对父函数的调用</li><li>Delay 3.0</li><li>Destroy Actor</li></ul></li></ul><p>添加 破坏效果<br>OPEN BP_FenceMaster</p><ul><li>查看 材质 点击按钮后找到 材质的位置 拖入 FirstPersonMap 中</li></ul><p>OPEN FirstPersonMap</p><ul><li>进入 破裂 Fracture 模式<ul><li>New</li><li>选择 Wood 文件夹</li><li>Rename DW_Fence</li><li>确认 创建 几何集合</li><li>Uniform<ul><li>10 x 10 确认</li></ul></li></ul></li></ul><p>OPEN BP_FenceMaster</p><ul><li>设置 DestructableMesh 的 几何体 DW_Fence</li></ul><p>测试：</p><ol><li>放置 基础木台 和 一面栅栏</li><li>用斧头敲击 基础木台、栅栏会被摧毁</li></ol><h5 id="RampMaster"><a href="#RampMaster" class="headerlink" title="RampMaster"></a>RampMaster</h5><p>OPEN BP_RampMaster</p><ul><li>增加 Tag<ul><li>AboveFoundation</li></ul></li><li>实现 Event StructureDestroyEvent 复制 BP_FoundationMaster 的内容<ul><li>对父函数的调用</li><li>Delay 3.0</li><li>Destroy Actor</li></ul></li></ul><p>添加 破坏效果<br>OPEN BP_RampMaster</p><ul><li>查看 材质 点击按钮后找到 材质的位置 拖入 FirstPersonMap 中</li></ul><p>OPEN FirstPersonMap</p><ul><li>进入 破裂 Fracture 模式<ul><li>New</li><li>选择 Wood 文件夹</li><li>Rename DW_WoodRamp</li><li>确认 创建 几何集合</li><li>Uniform<ul><li>15 x 15 确认</li></ul></li></ul></li></ul><p>OPEN BP_RampMaster</p><ul><li>设置 DestructableMesh 的 几何体 DW_WoodRamp</li></ul><p>测试：</p><ol><li>放置 基础木台 和 一面斜坡</li><li>用斧头敲击 斜坡 会被摧毁，注意这里这是敲击<code>斜坡</code></li></ol><h5 id="RoofLeftMaster-和-RoofRightMaster"><a href="#RoofLeftMaster-和-RoofRightMaster" class="headerlink" title="RoofLeftMaster 和 RoofRightMaster"></a>RoofLeftMaster 和 RoofRightMaster</h5><p>OPEN BP_RoofLeftMaster</p><ul><li>设置 RoofBox<ul><li>碰撞预设 自定义<ul><li>Structure 重叠</li></ul></li></ul></li><li>增加 Tag<ul><li>AboveFoundation</li></ul></li><li>实现 Event StructureDestroyEvent 复制 BP_FoundationMaster 的内容<ul><li>对父函数的调用</li><li>DestroySnappedRoof</li><li>Delay 3.0</li><li>Destroy Actor</li></ul></li><li>创建 Event DestroySnappedRoof<ul><li>创建 局部变量 LocalRoof -&gt; Get Overlapping Actors 给 OverlappingActors Array<ul><li>Class Filter &#x3D; BP_RoofLargeMaster</li></ul></li><li>Branch OverlappingActors -&gt; Length &gt; 0<ul><li>True<ul><li>For Each Loop With Break<ul><li>执行 StructureDestroyEvent</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_RoofRightMaster</p><ul><li>同上操作</li></ul><h5 id="RoofLargeMaster"><a href="#RoofLargeMaster" class="headerlink" title="RoofLargeMaster"></a>RoofLargeMaster</h5><p>OPEN BP_RoofLargeMaster</p><ul><li>设置 RoofBox1<ul><li>碰撞预设 自定义<ul><li>Structure 重叠</li></ul></li></ul></li><li>增加 Tag<ul><li>AboveFoundation</li></ul></li><li>实现 Event StructureDestroyEvent 复制 BP_FoundationMaster 的内容<ul><li>对父函数的调用</li><li>DestroySnappedRoof</li><li>Delay 3.0</li><li>Destroy Actor</li></ul></li><li>创建 Event DestroySnappedRoof<ul><li>创建 局部变量 LocalRoof -&gt; Get Overlapping Actors 给 OverlappingActors Array<ul><li>Class Filter &#x3D; BP_RoofLargeMaster</li></ul></li><li>Branch OverlappingActors -&gt; Length &gt; 0<ul><li>True<ul><li>For Each Loop With Break<ul><li>执行 StructureDestroyEvent</li></ul></li></ul></li></ul></li></ul></li></ul><p>添加 破坏效果<br>OPEN BP_RoofLeftMaster 和 BP_RoofRightMaster 和 BP_RoofLargeMaster</p><ul><li>查看 材质 点击按钮后找到 材质的位置 拖入 FirstPersonMap 中</li></ul><p>OPEN FirstPersonMap</p><ul><li>进入 破裂 Fracture 模式<ul><li>New</li><li>选择 Wood 文件夹</li><li>Rename DW_WoodRoofLeft 和 DW_WoodRoofRight 和 DW_WoodRoofLarge</li><li>确认 创建 几何集合</li><li>Uniform<ul><li>15 x 15 确认</li></ul></li></ul></li></ul><p>OPEN BP_RoofLeftMaster</p><ul><li>设置 DestructableMesh 的 几何体 DW_WoodRoofLeft</li></ul><p>OPEN BP_RoofRightMaster</p><ul><li>设置 DestructableMesh 的 几何体 DW_WoodRoofRight</li></ul><p>OPEN BP_RoofLargeMaster</p><ul><li>设置 DestructableMesh 的 几何体 DW_WoodRoofLarge</li></ul><p>测试：</p><ol><li>放置 基础木台 和 墙壁 和 一面屋顶</li><li>用斧头敲击 基础木台、墙壁、屋顶会被摧毁</li></ol><h4 id="104-添加附加伤害-3-将所有剩下的物品都增加破坏效果"><a href="#104-添加附加伤害-3-将所有剩下的物品都增加破坏效果" class="headerlink" title="104 添加附加伤害 3 将所有剩下的物品都增加破坏效果"></a>104 添加附加伤害 3 将所有剩下的物品都增加破坏效果</h4><p>小屋顶 和 三角形墙壁 和 楼梯 和 三角形天花板 和 三角形基础墙壁 和 窗框 和 窗户</p><p>OPEN BP_RoofSmallMaster BP_RoofTriangleMaster BP_StairsMaster BP_TriangleCeiling BP_TriangleFoundation BP_WindowMaster BP_WindowFrame</p><ul><li>增加 Tag<ul><li>BP_RoofSmallMaster AboveFoundation ？</li><li>BP_RoofTriangleMaster AboveFoundation</li><li>BP_StairsMaster AboveFoundation</li><li>BP_TriangleCeiling AboveWall 因为父级 BP_CeilingMaster 是 AboveWall</li><li>BP_TriangleFoundation Foundation</li><li>BP_WindowMaster 不设置</li><li>BP_WindowFrame AboveFoundation</li></ul></li><li>TODO:实现 Event StructureDestroyEvent 复制 BP_FoundationMaster 的内容<ul><li>对父函数的调用</li><li>Delay 3.0</li><li>Destroy Actor</li></ul></li></ul><p>OPEN 上面所有的文件</p><ul><li>查看 材质 点击按钮后找到 材质的位置 拖入 FirstPersonMap 中</li></ul><p>OPEN FirstPersonMap</p><ul><li>进入 破裂 Fracture 模式<ul><li>New</li><li>选择 Wood 文件夹</li><li>Rename DW_WoodRoofSmall DW_TriangleWallTop DW_WoodStairs DW_TriangleCeiling DW_TriangleFoundation DW_WoodWindow DW_WoodWindowFrame</li><li>确认 创建 几何集合</li><li>Uniform<ul><li>15 x 15 确认  </li><li>DW_WoodStairs DW_TriangleCeiling DW_TriangleFoundation 20 x 20</li><li>DW_WoodWindow 10 x 10</li><li>DW_WoodWindowFrame 20 x 20</li></ul></li></ul></li></ul><p>OPEN 上面所有的文件</p><ul><li>设置 DestructableMesh 的 几何体 分别设置 DW文件</li></ul><p>OPEN BP_RoofTriangleMaster</p><ul><li>设置 RoofBox1 RoofBox2<ul><li>碰撞预设 自定义<ul><li>Structure 重叠</li></ul></li></ul></li><li>编辑 事件 StructureDestroyEvent<ul><li>执行 父函数 后</li><li>执行 DestroySnappedRoof</li></ul></li><li>创建 Event DestroySnappedRoof<ul><li>RoofBox1 -&gt; Get Overlapping Actors -&gt; 设置局部变量 OverlappingActors<ul><li>Class Filter &#x3D; BP_RoofSmallMaster</li></ul></li><li>Branch OverlappingActors -&gt; Length &gt; 0<ul><li>True<ul><li>For Each Loop With Break<ul><li>执行 StructureDestroyEvent</li></ul></li></ul></li></ul></li></ul></li></ul><p>测试：</p><ol><li>放置 基础木台 和 墙壁 和 一面三角形墙壁 和 一面屋顶</li><li>用斧头敲击 基础木台、墙壁、三角形墙壁、屋顶会被摧毁</li><li>放置 基础木台 和 楼梯</li><li>用斧头敲击 基础木台、楼梯会被摧毁</li></ol><p>OPEN BP_TriangleCeiling</p><ul><li>创建 Box Collision 组件 Rename:DestroyBox<ul><li>变换<ul><li>0 13.329 82</li><li>0 0 0 </li><li>2 2.2 2.56</li></ul></li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>Structure 重叠</li></ul></li></ul></li><li>编辑 事件 StructureDestroyEvent<ul><li>执行 父函数 后</li><li>执行 DestroySnappedStructures</li></ul></li><li>创建 Event DestroySnappedStructures<ul><li>DestroyBox -&gt; Get Overlapping Actors -&gt; 设置局部变量 OverlappingActors<ul><li>Class Filter &#x3D; <code>BP_BuildableMaster</code></li></ul></li><li>Branch OverlappingActors -&gt; Length &gt; 0<ul><li>True<ul><li>For Each Loop With Break<ul><li>Array &#x3D; OverlappingActors</li><li>Break Array Element</li><li>Branch Array Element -&gt; Actor Has Tag<ul><li>Tag &#x3D; <code>AboveFoundation</code></li><li>True<ul><li>执行 StructureDestroyEvent</li></ul></li><li>False</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>测试：</p><ol><li>放置 基础木台 和 墙壁 和 一面三角形天花板</li><li>用斧头敲击 基础木台、墙壁、三角形墙壁、屋顶、楼梯、三角形天花板会被摧毁</li></ol><p>OPEN BP_TriangleFoundation</p><ul><li>复制 BP_TriangleCeiling 的 DestroyBox 组件 到 BP_TriangleFoundation</li><li>变换<ul><li>0 13.329 158</li><li>0 0 0</li><li>2 2.2 2.56</li></ul></li><li>碰撞预设 自定义<ul><li>Structure 重叠</li></ul></li><li>实现 Event StructureDestroyEvent 复制 BP_TriangleCeiling 的内容</li><li>实现 方法 DestroySnappedStructures 复制 BP_TriangleCeiling 的内容</li></ul><p>测试：</p><ol><li>放置 三角形建造物 和 墙壁</li><li>用斧头敲击 三角形建造物、墙壁会被摧毁</li></ol><p>OPEN BP_WindowFrame</p><ul><li>WindowFrameBox 组件<ul><li>碰撞预设 自定义<ul><li>Structure 重叠</li></ul></li></ul></li><li>实现 Event StructureDestroyEvent 跟之前的不一样 Event 就执行了两个步骤<ul><li>对父函数的调用</li><li>DestroyWindow</li></ul></li><li>实现 方法 DestroyWindow 复制 BP_TriangleCeiling 的内容<ul><li><code>WindowFrameBox</code> -&gt; Get Overlapping Actors -&gt; 设置局部变量 OverlappingActors<ul><li>Class Filter &#x3D; <code>BP_WindowMaster</code></li></ul></li><li>Branch OverlappingActors -&gt; Length &gt; 0<ul><li>True<ul><li>For Each Loop With Break<ul><li>执行 StructureDestroyEvent</li></ul></li></ul></li></ul></li></ul></li></ul><p>测试：</p><ol><li>放置 基础木台 和 墙壁 和 一面窗户框</li><li>用斧头敲击 基础木台、墙壁、窗户框会被摧毁</li></ol><h4 id="105-修复浮动天花板"><a href="#105-修复浮动天花板" class="headerlink" title="105 修复浮动天花板"></a>105 修复浮动天花板</h4><p>为天花板添加一个检测，检测天花板下面的所有Wall属性(墙)的建造物，如果没有有墙壁，则不允许放置天花板</p><p>OPEN BPI_BuildInterface</p><ul><li>增加 API接口<ul><li>Event CanPlaceCeiling?<ul><li>Outputs<ul><li>CanPlace? bool</li></ul></li></ul></li></ul></li></ul><p>检测天花板下面的所有Wall(墙)的建造物<br>OPEN BP_CeilingMaster</p><ul><li>创建 Box Collision 组件 Rename:WallBelowBox<ul><li>变换<ul><li>0 0 -195</li><li>0 0 0</li><li>4.59 4.59 0.5</li></ul></li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>Structure 重叠</li></ul></li></ul></li><li>实现 API CanPlaceCeiling?<ul><li>Return Node CanPlace? &#x3D; <code>WallBelowBox</code> -&gt; Get Overlapping Actors -&gt; Length &gt; 0<ul><li>Class Filter &#x3D; <code>BP_WallMaster</code></li></ul></li></ul></li></ul><p>OPEN BPC_BuildingComponent</p><ul><li>编辑 方法 BuildModeClient<ul><li>Branch GetSnappingPoints 为 True<ul><li>Branch BuildableInfo 的 DoFloatCheck? 为false<ul><li>增加 Branch BuildableInfo 的 DoCeilingCheck?<ul><li>True<ul><li>执行 BuildPreview 的 CanPlaceCeiling?（消息） 结果和另一个进行AND</li></ul></li><li>False<ul><li>执行 原逻辑</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>编辑 方法 BuildPlacementCheck<ul><li>和上面相同修改</li></ul></li></ul><p>OPEN BP_CeilingMaster</p><ul><li>类默认值<ul><li>DoCeilingCheck? &#x3D; true</li></ul></li></ul><p>测试：</p><ol><li>放置 基础木台 和 墙壁</li><li>放置 三角形天花板 查看是否可以放置</li></ol><p>为三角形天花板也增加相应逻辑<br>OPEN BP_TriangleCeiling</p><ul><li>类默认值<ul><li>DoCeilingCheck? &#x3D; true</li></ul></li><li>复制 BP_CeilingMaster 的 WallBelowBox 组件 到 BP_TriangleCeiling Rename：DetectWallsBox<ul><li>变换<ul><li>0 13 -121</li><li>0 0 0</li><li>4.59 4.59 0.5</li></ul></li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>Structure 重叠</li></ul></li></ul></li><li>实现 API CanPlaceCeiling?<ul><li>Return Node CanPlace? &#x3D; <code>DetectWallsBox</code> -&gt; Get Overlapping Actors -&gt; Length &gt; 0<ul><li>Class Filter &#x3D; <code>BP_TriangleWallTop</code></li></ul></li></ul></li></ul><p>测试：</p><ol><li>放置 三角形建造物 和 墙壁</li><li>放置 三角形天花板 查看是否可以放置</li></ol><h4 id="106-添加构建物的提示的信息部件"><a href="#106-添加构建物的提示的信息部件" class="headerlink" title="106 添加构建物的提示的信息部件"></a>106 添加构建物的提示的信息部件</h4><p>OPEN BPI_SurvivalCharacter</p><ul><li>将方法名 GetSurvivalCharacterRef 修改为 GetSurvivalCharRef<ul><li>Outputs<ul><li>SurvivalCharacterRef 改成了 SurvivalCharRef</li></ul></li></ul></li></ul><p>创建 建造部件文件夹 _Main&#x2F;Widgets&#x2F;BuildableWidgets<br>创建 用户接口 部件蓝图  用户部件 W_InteractText</p><ul><li>垂直框 Rename:InteractBox 是变量 <code>并且先隐藏</code><ul><li>文本 字体大小30 内容 Press [E] to Interact Color:00BAFFFF Outline Size:2 文本对齐方式：居中 Rename:InteractText 是变量</li><li>文本 Copy 修改： 内容 Hold [X] to Demolish Color:FFFFFFFF Rename:OptionsText 是变量</li><li>文本 Copy 修改： 内容 Wood Foundation Interact Color:00FF43FF Rename:NameAndHPText 是变量</li><li>文本 Copy 修改： 内容 拥有者:玩家名称 Color:FFA1E4FF Rename:OwnerText 是变量</li></ul></li><li>创建 Event SetInteractShowOrHide<ul><li>Inputs<ul><li>IsVisible ESlate Visibility</li><li>StructureName Text</li><li>CurrentHP Float</li><li>MaxHP Float</li><li>OwnerName Text</li><li>ShowInteractText? Bool</li><li>ShowOptionsText? Bool</li></ul></li><li>InteractBox &#x3D;&gt; Set Visibility<ul><li>New Visibility &#x3D; IsVisible</li></ul></li><li>InteractText &#x3D;&gt; Set Visibility<ul><li>New Visibility &#x3D; 参数 ShowInteractText? Select True:Visible Select False:Collapsed</li></ul></li><li>OptionsText &#x3D;&gt; Set Visibility<ul><li>New Visibility &#x3D; 参数 ShowOptionsText? Select True:Visible Select False:Collapsed</li></ul></li><li>OwnerText &#x3D;&gt; Set Text<ul><li>Text &#x3D; Format 拥有者：{OwnerName}</li></ul></li><li>NameAndHPText &#x3D;&gt; Set Text<ul><li>Text &#x3D; Format {StructureName}:{CurrentHP}&#x2F;{MaxHP}</li></ul></li></ul></li></ul><p>OPEN BP_BuildableMaster</p><ul><li>创建 Widget 组件 Rename:BuildableInfoWidget<ul><li>Space 屏幕</li><li>用户界面 WidgetClass &#x3D; W_InteractText</li><li>Draw size:100 100</li></ul></li><li>创建 Sphere Collision 组件 Rename:TextInfoSphere<ul><li>变换<ul><li>0 0 0</li><li>0 0 0</li><li>5 5 5</li></ul></li><li>碰撞预设 自定义<ul><li>全部 Ignore</li><li>Pawn 重叠</li></ul></li><li>点击 Events 的 On Component Begin Overlap<ul><li>Switch Has Authority<ul><li>True<ul><li>Branch Event参数 OtherActor &#x3D;&gt; Actor Has Tag (Player)<ul><li>True<ul><li>Event参数 OtherActor 的 Get SurvivalChar Ref 的 ShowOrHideInfoOnClient<ul><li>BuildableRef &#x3D; <code>self</code></li><li>IsVisible &#x3D; true</li><li>StructureName &#x3D; StructureName 右键创建变量 Default:基础木台</li><li>CurrentHP &#x3D; CurrentHP</li><li>MaxHP &#x3D; MaxHP</li><li>OwnerName &#x3D; OwnerName 右键创建变量 Default:玩家名称</li><li>ShowInteractText? &#x3D; ShowInteractText? 右键创建变量</li><li>ShowOptionsText? &#x3D; true</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>点击 Events 的 On Component End Overlap<ul><li>Switch Has Authority<ul><li>True<ul><li>Branch Event参数 OtherActor &#x3D;&gt; Actor Has Tag (Player)<ul><li>True<ul><li>Event参数 OtherActor 的 Get SurvivalChar Ref 的 ShowOrHideInfoOnClient<ul><li>IsVisible &#x3D; false</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>创建 Event ShowTextOnClient<ul><li>Inputs<ul><li>根据调用 BuildableInfoWidget 的 SetInteractShowOrHide 参数 添加所需参数</li></ul></li><li>BuildableInfoWidget 的 Get User Widget Object &#x3D;&gt; Cast To W_InteractText &#x3D;&gt; Set InteractShowOrHide<ul><li>BuildableRef &#x3D; <code>self</code></li><li>IsVisible &#x3D; Visible</li><li>StructureName &#x3D; StructureName</li><li>CurrentHP &#x3D; CurrentHP</li><li>MaxHP &#x3D; MaxHP</li><li>OwnerName &#x3D; OwnerName</li><li>ShowInteractText? &#x3D; ShowInteractText?</li><li>ShowOptionsText? &#x3D; ShowOptionsText?</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>增加 Tag<ul><li>Player</li></ul></li><li>创建 Event ShowOrHideInfoOnClient Comment:DOTO<ul><li>Inputs<ul><li>BuildableRef BP_BuildableMaster</li><li>根据调用 ShowTextOnClient 参数 添加所需参数</li></ul></li><li>BuildableRef IsValid<ul><li>True<ul><li>BuildableRef 的 GetBuildMasterRef 的 ShowTextOnClient<ul><li>ShowTextOnClient</li></ul></li></ul></li></ul></li></ul></li></ul><p>为 门墙 和 窗墙 改变一下 Sphere Collision 的位置，不能挡住门和窗户<br>OPEN BP_DoorFrame 和 BP_WindowFrame</p><ul><li>修改 Sphere Collision 组件<ul><li>变换<ul><li>100 0 0</li></ul></li></ul></li><li>类默认设置<ul><li>BP_DoorFrame 的 StructureName &#x3D; 门墙</li><li>BP_WindowFrame 的 StructureName &#x3D; 门窗</li><li>OPEN BP_DoorMaster<ul><li>ShowInteractText? &#x3D; true</li><li>StructureName &#x3D; 门窗</li></ul></li><li>OPEN BP_Torch<ul><li>ShowInteractText? &#x3D; true</li><li>StructureName &#x3D; 火炬</li></ul></li></ul></li></ul><p>改变门的显示位置<br>OPEN BP_DoorMaster</p><ul><li>修改 BuildableInfoWidget 和 TextInfoSphere 的位置<ul><li>60 0 100</li></ul></li></ul><p>注意：</p><ol><li>继承于 建造基类BP_BuildableMaster的所有建筑物，都不能重写 GetBuildMasterRef 方法，否则会导致无法显示交互信息，重写了就要删除，一个个检查</li></ol><p>测试：</p><ol><li>放置 建造物 后 走进去看看是否有交互信息</li></ol><h4 id="107-添加拆除建造物的功能"><a href="#107-添加拆除建造物的功能" class="headerlink" title="107 添加拆除建造物的功能"></a>107 添加拆除建造物的功能</h4><p>创建 材质文件夹 Materials _Main&#x2F;Materials<br>创建 材质文件 M_ProgressCircle</p><ul><li>主节点<ul><li>材质类型 Material Domain &#x3D; User Interface</li><li>混合模式 Blend Mode &#x3D; 遮罩</li></ul></li><li>创建 Vector parameter Rename:Color Color:#FFFFFF00<ul><li>白色 连接 最终颜色</li></ul></li><li>创建 Texture Coordinate - A,B(0.5) &#x3D;&gt; Multiply A,B(-2.2) &#x3D;&gt; VectorToRadialValue<ul><li>Vector Converted to Angle -&gt; Add A,B(Constant 右键转换为参数 Rename:Percent Default:0.5)</li><li>Floor</li><li>Multiply A,B(下面) &#x3D;&gt; 不透明遮罩  <ul><li>Subtract<ul><li>A:RadialGradientExponential 的 Return Value<ul><li>Redius &#x3D; 0.5</li><li>Density &#x3D; 5000</li></ul></li><li>B:RadialGradientExponential 的 Return Value<ul><li>Redius &#x3D; 0.45</li><li>Density &#x3D; 5000</li></ul></li></ul></li></ul></li></ul></li></ul><p>创建 材质文件实例 M_ProgressCircle_Inst 继承于 M_ProgressCircle</p><p>OPEN W_MainWidget</p><ul><li>Canvas Panel<ul><li>图像 Rename:ProgressCircle 是变量<ul><li>锚点居中 重置 PX,PY 对齐：0.5 0.5 Size:100 100 Image: M_ProgressCircle_Inst <code>默认隐藏</code>并且 创建绑定<ul><li>绑定方法 Rename：GetProgressCircleVisibility<ul><li>Get Owning Player Pawn &#x3D;&gt; Get Survival Char Ref &#x3D;&gt; Is Valid</li><li>Branch Get Survival Char Ref 的 InProgress?<ul><li>True<ul><li>ProgressCircle 的 Get Dynamic Material &#x3D;&gt; Set Scalar Parameter Value<ul><li>Parameter Name &#x3D; Percent</li><li>Value &#x3D; Get Survival Char Ref 的 ProgressValue</li></ul></li><li>Return Node 显示</li></ul></li><li>False<ul><li>Return Node Collapse</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>创建 变量 InProgress? bool</li><li>创建 变量 ProgressValue float Default:0.0</li><li>创建 Event StartDemolishTimerOnServer<ul><li>Inputs<ul><li>Rotation Rotator 旋转体</li></ul></li><li>根据 参数 设置 变量 CameraRotation</li><li>Set Timer by Event<ul><li>5.0s</li><li>Return Value &#x3D;&gt; 设置变量 DemolishTimerHandle</li><li>Event &#x3D;&gt; 创建 Event DemolishBuild 方法内部就执行了 DemolishFunction</li></ul></li></ul></li><li>创建 方法 DemolishFunction<ul><li>Line Trace Function<ul><li>Interface &#x3D; BPI_BuildInterface</li></ul></li><li>Branch Line Trace Function 的 结果<ul><li>True<ul><li>命中 Actor 的 DemolishStructure</li></ul></li></ul></li></ul></li><li>创建 Event StopDemolishTimerOnServer<ul><li>清除定时器 DemolishTimerHandle</li></ul></li><li>创建 E键 Key 按键触发事件<ul><li>按下<ul><li>StartDemolishTimerOnServer<ul><li>Rotate &#x3D; FirstPersonCamera 的 Get World Rotation</li></ul></li><li>StartDemolishBarOnClient</li></ul></li><li>松开<ul><li>StopDemolishTimerOnServer</li><li>StopDemolishBarOnClient</li></ul></li></ul></li><li>创建 Event StartDemolishBarOnClient<ul><li>设置变量 InProgress? &#x3D; true</li><li>Branch InProgress? -&gt; False<ul><li>True<ul><li>ProgressValue + 0.01 &#x3D;&gt; Clamp 的 Value &#x3D;&gt; 设置 变量 ProgressValue</li><li>ProgressValue &lt; 1<ul><li>True<ul><li>Delay 0.05</li><li>重复调用 Branch InProgress?</li></ul></li><li>False<ul><li>设置变量 InProgress? &#x3D; false</li><li>设置变量 ProgressValue &#x3D; 0</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>创建 Event StopDemolishBarOnClient<ul><li>设置变量 InProgress? &#x3D; false</li><li>设置变量 ProgressValue &#x3D; 0</li></ul></li></ul><p>OPEN BPI_BuildInterface</p><ul><li>增加 API 方法 DemolishStructure</li></ul><p>OPEN W_MainWidget</p><ul><li>修改一下层级关系<ul><li>W_Inventory ZOrder &#x3D; 1</li><li>ProgressCircle ZOrder &#x3D; 0</li></ul></li></ul><p>测试：</p><ol><li>按X会出现拆除进度条</li><li>放置基础木台，按E会出现圈圈，持续5秒，然后建造物被摧毁</li></ol><h4 id="108-将建造系统和库存系统连接起来"><a href="#108-将建造系统和库存系统连接起来" class="headerlink" title="108 将建造系统和库存系统连接起来"></a>108 将建造系统和库存系统连接起来</h4><p>将 B 键开启预建造模式 改为 使用 Hotbar 的物品 并且是 建造物时 才开启预建造模式</p><p>选择资源文件夹</p><ul><li>EasyBuildingSystem&#x2F;Textures&#x2F;Icons&#x2F;</li><li>选中 Stylized 文件夹</li><li>右键 迁移[Migrate] 弹出资源报告</li><li>选择当前项目路径的 ${项目路径}&#x2F;Content 是否重写 点击全部重写</li></ul><p>OPEN DT_Items 添加物品上面材质的物品</p><ul><li>基础木台<ul><li>ID 13</li><li>数量 1</li><li>说明 基础木台</li><li>Icon T_Icon_Stylized_Wood_Foundation</li><li>IsStackable True</li><li>StackSize 100</li><li>ItemType Buildable</li><li>ItemDamage </li><li>CurHP </li><li>MaxHP </li><li>Type </li><li>ArmorType </li><li>ClassRef</li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>增加 变量 StructureId int</li><li>编辑 方法 PlaceBuildableOnClient<ul><li>SpawnBuildOnServer<ul><li>删除了参数 StructureIDDebugID</li><li>Transform &#x3D; BPC BuildingComponent 的 BuildTransform</li></ul></li></ul></li><li>编辑 方法 UseHotbarFunction<ul><li>Switch on E_ItemType <ul><li>增加 Buildable 的逻辑<ul><li>设置变量 StructureId &#x3D; BPC_PlayerHotbar 的 Items -&gt; get by HotbarIndex -&gt; Break 的 ItemID</li><li>BPC_BuildingComponent 的 LaunchBuildMode<ul><li>BuildableID &#x3D; StructureId</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BPC_BuildingComponent 检查所有用到 StructureIDDebugID 的地方 都要替换成 BuildableID</p><ul><li>编辑 Event LaunchBuildMode&#x2F;BuildModeClient<ul><li>替换成 BuildableID</li></ul></li><li>编辑 Event TODO:PlaceBuildable<ul><li>删除 StructureIDDebugID</li></ul></li><li>编辑 Event SpawnBuildOnServer<ul><li>Inputs<ul><li>删除 StructureIDDebugID</li></ul></li><li><code>Set BuildTransform 后</code></li><li>Get Owner 的 Get Survival Char Ref 的 get BPC Player Hotbar 的 Container Items<ul><li>Items &#x3D; Make array &lt;&#x3D; Get Survival Char Ref 的 StructureId 进行一个 Make S_ItemStruct</li></ul></li><li>Branch ContainsItems 的 结果<ul><li>True<ul><li>继续逻辑 然后在 <code>方法 Build Placement Check 结果为 True 后</code> 执行 BPC_PlayerHotbar 的 RemoveQuantity<ul><li>HotbarIndex &#x3D; Get Survival Char Ref 的 HotbarIndex</li><li>Quantity &#x3D; 1</li></ul></li><li>Branch 结果<ul><li>True<ul><li>继续逻辑</li><li>并且修改后续的所有用到的 StructureIDDebugID StructureId</li></ul></li><li>False</li></ul></li></ul></li><li>False 找不到物品则不触发</li></ul></li></ul></li></ul><p>OPEN DT_Structures</p><ul><li>修改 Row13 改为 50</li><li>修改 Row1 改为 13</li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>编辑 Event R键<ul><li>给物品 Row 13 给到 Hotbar</li></ul></li></ul><p>测试：</p><ol><li>按R键将物品放到热键栏，按1进入预建造模式</li><li>鼠标左键放置建筑物</li><li>物品消失</li></ol><h4 id="109-添加所有可构建项目和类"><a href="#109-添加所有可构建项目和类" class="headerlink" title="109 添加所有可构建项目和类"></a>109 添加所有可构建项目和类</h4><p>创建文件夹 Tiers _Main&#x2F;Blueprints&#x2F;BuildingSystem<br>创建文件夹 Wood _Main&#x2F;Blueprints&#x2F;BuildingSystem&#x2F;Tiers 木制<br>创建文件夹 Stone _Main&#x2F;Blueprints&#x2F;BuildingSystem&#x2F;Tiers 石制<br>创建文件夹 Metal _Main&#x2F;Blueprints&#x2F;BuildingSystem&#x2F;Tiers 金属制</p><p>为每一个蓝图建造物 除了 火炬和床 都创建一个子类，共17个<br>创建 蓝图子类 BP_Wooden_Ceiling 从 BP_CeilingMaster 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_DoorFrame 从 BP_DoorFrame 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_DoorMaster 从 BP_DoorMaster 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_Fence 从 BP_Fence 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_Foundation 从 BP_Foundation 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_Ramp 从 BP_Ramp 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_RoofLarge 从 BP_RoofLarge 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_RoofLeft 从 BP_RoofLeft 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_RoofRight 从 BP_RoofRight 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_MallRoof 从 BP_MallRoof 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_Stairs 从 BP_Stairs 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_TriangleCeiling 从 BP_TriangleCeiling 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_TriangleFoundation 从 BP_TriangleFoundation 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_TriangleRoof 从 BP_RoofTriangle 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_Wall 从 BP_Wall 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_Window 从 BP_Window 继承 放入 In Tier&#x2F;Wood 文件夹中<br>创建 蓝图子类 BP_Wooden_WindowFrame 从 BP_WindowFrame 继承 放入 In Tier&#x2F;Wood 文件夹中 </p><p>考虑完善每一个 蓝图建造物子类的信息</p><ul><li>StructureTier &#x3D; Wood</li><li>CurrentHP 根据情况设置</li><li>MaxHP 根据情况设置</li><li>提示建造物相关的信息<ul><li>是否显示</li><li>显示的信息等</li></ul></li></ul><p>COPY Wood 下所有的文件 到 Stone 文件夹中</p><ul><li>修改名字 Wood 替换成 BP_Stone_</li><li>OPEN 所有的<ul><li>修改 材质</li><li>修改 类默认值<ul><li>StructureTier &#x3D; Stone</li></ul></li></ul></li></ul><p>COPY Stone 下所有的文件 到 Metal 文件夹中</p><ul><li>修改名字 Wood 替换成 BP_Metal_</li><li>OPEN 所有的<ul><li>修改 材质</li><li>修改 类默认值<ul><li>StructureTier &#x3D; Metal</li></ul></li></ul></li></ul><p>金属制的门的材质 偏宽一些，所以需要修改<br>OPEN BP_MetalDoor</p><ul><li>找到材质<ul><li>点击材质的位置 SM_Stylized_Metal_Door 并且 OPEN<ul><li>增加 Box Simplified Collision</li><li>增加 Box Simplified Collision<ul><li>变换<ul><li>调小一些 门厚度的2&#x2F;3</li></ul></li></ul></li></ul></li></ul></li></ul><p>为 每个 Stone 的文件添加 破坏效果</p><ul><li>选中所有文件 全部拖入到 FirstPersonMap 中</li></ul><p>破坏文件 放入 <em>Main&#x2F;Meshes&#x2F;DestructableMeshes&#x2F;Stone GM</em> 开头<br>破坏文件 放入 <em>Main&#x2F;Meshes&#x2F;DestructableMeshes&#x2F;Metal GC</em> 开头</p><p>将所有建造物添加到 DT_Items</p><p>OPEN DT_Items</p><ul><li>复制 ID 13</li><li>从 13 - 29 是 Wood<ul><li>13 T_Icon_Stylized_Wood_Foundation</li><li>14 T_Icon_Stylized_Wood_Ceiling</li><li>15 T_Icon_Stylized_Wood_Door</li><li>16 T_Icon_Stylized_Wood_DoorFrame</li><li>17 T_Icon_Stylized_Wood_Fence</li><li>18 T_Icon_Stylized_Wood_Ramp</li><li>19 T_Icon_Stylized_Wood_Roof</li><li>20 T_Icon_Stylized_Wood_WallLeft Wood_Tri_Left_Wall</li><li>21 T_Icon_Stylized_Wood_WallRight Wood_Tri_Right_Wall</li><li>22 T_Icon_Stylized_Wood_RoofSmall Wood_Half_Roof</li><li>23 T_Icon_Stylized_Wood_Stairs</li><li>24 T_Icon_Stylized_Wood_TriangleCeiling Wood_Tri_Ceiling</li><li>25 T_Icon_Stylized_Wood_TriangleFoundation Wood_Tri_Foundation</li><li>26 T_Icon_Stylized_Wood_TriangleWall Wood_Tri_Wall</li><li>27 T_Icon_Stylized_Wood_Wall</li><li>28 T_Icon_Stylized_Wood_Window</li><li>29 T_Icon_Stylized_Wood_WindowFrame</li></ul></li><li>从 30 - 46 是 Stone<ul><li>30 T_Icon_Stylized_Stone_Foundation</li><li>31 T_Icon_Stylized_Stone_Ceiling</li><li>32 T_Icon_Stylized_Stone_Door</li><li>33 T_Icon_Stylized_Stone_DoorFrame</li><li>34 T_Icon_Stylized_Stone_Fence</li><li>35 T_Icon_Stylized_Stone_Ramp</li><li>36 T_Icon_Stylized_Stone_Roof</li><li>37 T_Icon_Stylized_Stone_WallLeft Stone_Tri_Left_Wall</li><li>38 T_Icon_Stylized_Stone_WallRight Stone_Tri_Right_Wall</li><li>39 T_Icon_Stylized_Stone_RoofSmall Stone_Half_Roof</li><li>40 T_Icon_Stylized_Stone_Stairs</li><li>41 T_Icon_Stylized_Stone_TriangleCeiling Stone_Tri_Ceiling</li><li>42 T_Icon_Stylized_Stone_TriangleFoundation Stone_Tri_Foundation</li><li>43 T_Icon_Stylized_Stone_TriangleWall Stone_Tri_Wall</li><li>44 T_Icon_Stylized_Stone_Wall</li><li>45 T_Icon_Stylized_Stone_Window</li><li>46 T_Icon_Stylized_Stone_WindowFrame</li></ul></li><li>从 47 - 63 是 Metal <ul><li>47 T_Icon_Stylized_Metal_Foundation</li><li>48 T_Icon_Stylized_Metal_Ceiling</li><li>49 T_Icon_Stylized_Metal_Door</li><li>50 T_Icon_Stylized_Metal_DoorFrame</li><li>51 T_Icon_Stylized_Metal_Fence</li><li>52 T_Icon_Stylized_Metal_Ramp</li><li>53 T_Icon_Stylized_Metal_Roof</li><li>54 T_Icon_Stylized_Metal_WallLeft Metal_Tri_Left_Wall</li><li>55 T_Icon_Stylized_Metal_WallRight Metal_Tri_Right_Wall</li><li>56 T_Icon_Stylized_Metal_RoofSmall Metal_Half_Roof</li><li>57 T_Icon_Stylized_Metal_Stairs</li><li>58 T_Icon_Stylized_Metal_TriangleCeiling Metal_Tri_Ceiling</li><li>59 T_Icon_Stylized_Metal_TriangleFoundation Metal_Tri_Foundation</li><li>60 T_Icon_Stylized_Metal_TriangleWall Metal_Tri_Wall</li><li>61 T_Icon_Stylized_Metal_Wall</li><li>62 T_Icon_Stylized_Metal_Window</li><li>63 T_Icon_Stylized_Metal_WindowFrame</li></ul></li></ul><p>OPEN DT_Structures</p><ul><li>删除所有的数据</li><li>RowName 从 13 - 29 是 Wood<ul><li>13 BP_Wooden_Foundation</li><li>14 BP_Wooden_Ceiling</li><li>15 BP_Wooden_Door</li><li>16 BP_Wooden_DoorFrame</li><li>17 BP_Wooden_Fence</li><li>18 BP_Wooden_Ramp</li><li>19 BP_Wooden_Roof</li><li>20 BP_Wooden_WallLeft Wood_Tri_Left_Wall BP_Wooden_RoofLeft</li><li>21 BP_Wooden_WallRight Wood_Tri_Right_Wall BP_Wooden_RoofRight</li><li>22 BP_Wooden_RoofSmall Wood_Half_Roof BP_Wooden_MallRoof</li><li>23 BP_Wooden_Stairs</li><li>24 BP_Wooden_TriangleCeiling Wood_Tri_Ceiling</li><li>25 BP_Wooden_TriangleFoundation Wood_Tri_Foundation</li><li>26 BP_Wooden_TriangleWall Wood_Tri_Wall BP_Wooden_TriangleRoof</li><li>27 BP_Wooden_Wall</li><li>28 BP_Wooden_Window</li><li>29 BP_Wooden_WindowFrame</li></ul></li><li>RowName 从 30 - 46 是 Stone <ul><li>30 BP_Stone_Foundation</li><li>31 BP_Stone_Ceiling</li><li>32 BP_Stone_Door</li><li>33 BP_Stone_DoorFrame</li><li>34 BP_Stone_Fence</li><li>35 BP_Stone_Ramp</li><li>36 BP_Stone_Roof</li><li>37 BP_Stone_WallLeft Stone_Tri_Left_Wall BP_Stone_RoofLeft</li><li>38 BP_Stone_WallRight Stone_Tri_Right_Wall BP_Stone_RoofRight</li><li>39 BP_Stone_RoofSmall Stone_Half_Roof BP_Stone_MallRoof</li><li>40 BP_Stone_Stairs</li><li>41 BP_Stone_TriangleCeiling Stone_Tri_Ceiling</li><li>42 BP_Stone_TriangleFoundation Stone_Tri_Foundation</li><li>43 BP_Stone_TriangleWall Stone_Tri_Wall BP_Stone_TriangleRoof</li><li>44 BP_Stone_Wall</li><li>45 BP_Stone_Window</li><li>46 BP_Stone_WindowFrame</li></ul></li><li>RowName 从 47 - 63 是 Metal<ul><li>47 BP_Metal_Foundation</li><li>48 BP_Metal_Ceiling</li><li>49 BP_Metal_Door</li><li>50 BP_Metal_DoorFrame</li><li>51 BP_Metal_Fence</li><li>52 BP_Metal_Ramp</li><li>53 BP_Metal_Roof</li><li>54 BP_Metal_WallLeft Metal_Tri_Left_Wall BP_Metal_RoofLeft</li><li>55 BP_Metal_WallRight Metal_Tri_Right_Wall BP_Metal_RoofRight</li><li>56 BP_Metal_RoofSmall Metal_Half_Roof BP_Metal_MallRoof</li><li>57 BP_Metal_Stairs</li><li>58 BP_Metal_TriangleCeiling Metal_Tri_Ceiling</li><li>59 BP_Metal_TriangleFoundation Metal_Tri_Foundation</li><li>60 BP_Metal_TriangleWall Metal_Tri_Wall BP_Metal_TriangleRoof</li><li>61 BP_Metal_Wall</li><li>62 BP_Metal_Window</li><li>63 BP_Metal_WindowFrame</li></ul></li></ul><p>添加建造物 配方 OPEN DT_PlayerItemRecipes</p><ul><li>RowName 13 <ul><li>木质台</li><li>ID 13</li><li>Level 1</li><li>Icon 复制 DT_Items 的</li><li>RequiredItems<ul><li>1<ul><li>ID 1</li><li>Quantity 50</li></ul></li></ul></li></ul></li><li>RowName 14<ul><li>木质台</li><li>ID 14</li><li>Level 1</li><li>Icon 复制 DT_Items 的</li><li>RequiredItems<ul><li>1<ul><li>ID 1</li><li>Quantity 50</li></ul></li></ul></li></ul></li><li>RowName 15<ul><li>木质台</li><li>ID 15</li><li>Level 1</li><li>Icon 复制 DT_Items 的</li><li>RequiredItems<ul><li>1<ul><li>ID 1</li><li>Quantity 50</li></ul></li></ul></li></ul></li><li>…. 剩下不补充</li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>R键 赋予的物品ID 改为:47 49 50</li></ul><p>测试：</p><ol><li>按R键将物品放到热键栏，按1进入预建造模式</li><li>鼠标左键放置 三个 建筑物</li><li>按X键拆除建筑物</li></ol><h4 id="110-修复建造系统的bug"><a href="#110-修复建造系统的bug" class="headerlink" title="110 修复建造系统的bug"></a>110 修复建造系统的bug</h4><p>OPEN BPC_BuildingComponent</p><ul><li>编辑 Event SpawnBuildOnServer<ul><li>Remove Quantity 后 无论结果无语 都 SpawnBuildable</li></ul></li><li>编辑 方法 CheckForOverlap<ul><li>Box Trace By Channel<ul><li>Draw Debug Type &#x3D; For Duration</li></ul></li><li>修改 Start &#x3D; BuildPreview 的 OverlapBoxSize 的 Get Component Bounds 的 Origin</li><li>修改 End &#x3D; 同上</li><li>修改 HalfSize &#x3D; BuildPreview 的 OverlapBoxSize 的 BoxExtent <code>注意不是 Get Component Bounds</code></li><li>修改 Orientation &#x3D; BuildPreview 的 RootComponent 的 Get World Rotation 拆分z &#x3D;&gt; Make Rotator 的 z</li></ul></li></ul><p>OPEN BP_WallMaster</p><ul><li>类默认设置<ul><li>BuildableInfo<ul><li>检测全不开</li></ul></li></ul></li><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 140 10 140</li></ul></li></ul><p>其他的BP蓝图也都需要修改<br>OPEN WindowMaster</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 70 10 40</li></ul></li></ul><p>OPEN BP_WindowFrame</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 140 10 140</li></ul></li></ul><p>OPEN BP_TriangleFoundation</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 32 32 32</li></ul></li></ul><p>OPEN BP_TriangleCeiling</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 50 80 10</li></ul></li></ul><p>OPEN BP_Torch</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 10 10 40</li></ul></li><li>变换<ul><li>0 20 17.58</li></ul></li></ul><p>OPEN BP_StairsMaster</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 100 120 120</li></ul></li></ul><p>OPEN RoofTriangleMaster</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 35 10 35</li></ul></li><li>变换<ul><li>0 0 -90</li></ul></li></ul><p>OPEN BP_RoofSmallMaster</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 80 120 20</li></ul></li><li>变换<ul><li>85 0 -65</li><li>0 -40 0</li><li>1 1 1</li></ul></li></ul><p>OPEN BP_RoofRightMaster</p><ul><li>编辑 OverlapBoxSize<ul><li>Box Extent &#x3D; 60 10 60</li></ul></li><li>变换<ul><li>-73 0 -60</li></ul></li></ul><p>OPEN BP_RoofLeftMaster</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 60 10 60</li></ul></li><li>变换<ul><li>68 0 -60</li></ul></li></ul><p>OPEN BP_RoofLargeMaster</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 20 120 140</li></ul></li><li>变换<ul><li>6.7 0 8</li><li>0 50 0</li><li>1 1 1</li></ul></li></ul><p>OPEN BP_RampMaster</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 100 32 32</li></ul></li><li>变换<ul><li>0 -90 50</li><li>0 0 0</li><li>1 1 1</li></ul></li></ul><p>OPEN BP_FoundationMaster</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 140 140 32</li></ul></li></ul><p>OPEN BP_FenceMaster</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 140 10 35</li></ul></li><li>变换<ul><li>0 0 -102</li></ul></li></ul><p>OPEN BP_DoorMaster 坐标原点在中间</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 50 10 90</li></ul></li><li>变换<ul><li>62 0 114</li></ul></li></ul><p>OPEN BP_DoorFrame</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 140 10 140</li></ul></li></ul><p>OPEN BP_Bed</p><ul><li>编辑 OverlapBoxSize  <ul><li>Box Extent &#x3D; 40 100 32</li></ul></li><li>变换<ul><li>0 0 45</li></ul></li></ul><p>注意：</p><ol><li>正方形的建造物 如果 Box Extent 设置 150 会导致无法放置，因为检测的范围太大了 需要设置140</li></ol><p>测试：</p><ol><li>按R键将物品放到热键栏，按1进入预建造模式</li><li>鼠标左键放置 三个 建筑物</li></ol><h3 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h3><p>玩家存储容器</p><h3 id="第10章"><a href="#第10章" class="headerlink" title="第10章"></a>第10章</h3><p>创建所有项目</p><h4 id="126-简介"><a href="#126-简介" class="headerlink" title="126 简介"></a>126 简介</h4><h4 id="127-设置步枪动画和物品类别"><a href="#127-设置步枪动画和物品类别" class="headerlink" title="127 设置步枪动画和物品类别"></a>127 设置步枪动画和物品类别</h4><p>将 课件文件夹 Icons 的所有文件 放入 _Main&#x2F;Widgets&#x2F;Textures&#x2F;ItemIcons 中<br>将 课件文件夹 以外 的所有文件 放入 Man&#x2F;Animations 中</p><ul><li>网格体 选择 UE4_Mannequin_Skeleton</li></ul><p>创建 动画 混合控件 网格体 选择 UE4_Mannequin_Skeleton Rename：FP_RifleBS<br>OPEN FP_RifleBS</p><ul><li>详情<ul><li>水平 Axis<ul><li>Name：Speed</li><li>Max Axis Value: 800</li></ul></li></ul></li><li>FPRifleIdle 拖入动画<ul><li>0 0</li></ul></li><li>Rifle_Run 拖入 动画<ul><li>600 0</li></ul></li><li>RifleSprint 拖入 动画<ul><li>800 0</li></ul></li></ul><p>OPEN FirstPerson_AnimBP</p><ul><li>进入 Machine 的 Idle<ul><li>根据枚举器 选择不同的动画</li><li>右键 Blend Poses 增加 元素引脚 Rifle<ul><li>拖入 FP_RifleBS<ul><li>Speed 使用 参数 Speed</li></ul></li></ul></li></ul></li></ul><p>OPEN ThirdPerson_AnimBP</p><ul><li>预览网格体 使用 SK_Man_Full_01</li><li>进入 Machine 的 Idle<ul><li>根据枚举器 选择不同的动画</li><li>右键 Blend Poses 增加 元素引脚 Rifle<ul><li>拖入 FP_RifleBS<ul><li>Speed 使用 参数 Speed</li></ul></li></ul></li></ul></li></ul><p>创建文件夹 WeaponRanged In _Main&#x2F;Blueprints&#x2F;Items&#x2F;Equipable<br>创建文件夹 Rifle In _Main&#x2F;Blueprints&#x2F;Items&#x2F;Equipable&#x2F;WeaponsRanged<br>创建蓝图类 BP_TP_Rifle 继承于 BP_ThirdPersonEquipable 放入 Rifle 文件夹中<br>创建蓝图类 BP_FP_Rifle 继承于 BP_FirstPersonEquipable 放入 Rifle 文件夹中</p><p>下载UE引擎资源</p><ul><li>打开引擎市场</li><li>search<ul><li>military weapons Dark</li></ul></li><li>安装 如果不兼容 则安装4.27</li></ul><p>OPEN BP_TP_Rifle</p><ul><li>增加 骨骼网格体 组件 Rename:Rifle<ul><li>骨骼网格体 Static Mesh &#x3D; Assault_Rifle_B</li></ul></li></ul><p>OPEN BP_FP_Rifle</p><ul><li>增加 骨骼网格体 组件 Rename:Rifle<ul><li>骨骼网格体 Static Mesh &#x3D; Assault_Rifle_B</li></ul></li></ul><p>绑定套接字  为了让枪在手上<br>OPEN SK_Man_Full_01</p><ul><li>预览网格体 选择 FPRifleIdle BP_TP_Rifle</li><li>找到骨骼 ToolSocket<ul><li>删除下面的绑定 预览</li></ul></li><li>找到骨骼 hand_r<ul><li>创建 Socket Rename:RifleSocket<ul><li>增加预览资产 Assault_Rifle_B</li><li>变换 如果没有详情窗口就点击Window打开<ul><li>-9.9 3.9 -1.5</li><li>10.79 15.74 65.24</li></ul></li></ul></li></ul></li></ul><p>OPEN BP_TP_Rifle</p><ul><li>类默认设置<ul><li>EquipableInfo<ul><li>SocketName &#x3D; RifleSocket</li><li>AnimationState &#x3D; Rifle</li><li>FirstPersonEquipClass &#x3D; BP_FP_Rifle</li></ul></li></ul></li><li>Rifle<ul><li>Owner No See &#x3D; true</li></ul></li></ul><p>OPEN DT_Items</p><ul><li>增加 <ul><li>74<ul><li>Icon Rifle</li><li>突击步枪</li><li>伤害 100</li><li>Uncommon</li><li>HP 100 100</li><li>ItemType Equipable</li><li>ItemClassRef BP_TP_Rifle</li><li>UseAmmo? True</li><li>MaxAmmo 30</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>修改 R 键<ul><li>ID 74</li></ul></li></ul><p>玩家数量设置2</p><p>测试：</p><h4 id="128-设置步枪射击-1"><a href="#128-设置步枪射击-1" class="headerlink" title="128 设置步枪射击 1"></a>128 设置步枪射击 1</h4><p>创建 动画蒙太奇 继承于 FPRifleIdleFire Rename:FPRifleIdleFire_Montage In Man&#x2F;Animations</p><p>OPEN Fire_Rifle_W</p><ul><li>删除 声音 RifleB_Fire_Cue 后面调用生成，就可以设置声音的范围等参数</li></ul><p>OPEN BPI_EquipableItem</p><ul><li>创建 方法 StopLeftMouseLoop</li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>创建 Event StopLeftMouseOnServer<ul><li>ThirdPersonEquippedItem 有效获取<ul><li>True<ul><li>BPI 的 StopLeftMouseLoop</li></ul></li></ul></li></ul></li><li>编辑 鼠标左键按钮 Event 松开<ul><li>StopLeftMouseOnServer</li></ul></li></ul><p>OPEN BP_TP_Rifle</p><ul><li>创建 变量 IsReloading? Boolean</li><li>实现 UseItemInterface<ul><li>设置 变量 CharRef &#x3D; 参数 CharRef</li><li>Branch IsReloading? 结果<ul><li>False<ul><li>Branch CharRef 的 Get BPC Player Hotbar &#x3D;&gt; Items By Index(CharRef 的 HotbarIndex) Get &#x3D;&gt; Break &#x3D;&gt; CurrAmmo &gt;&#x3D; 1<ul><li>True<ul><li>StartFire</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>创建 Event StartFire(On Server)<ul><li>Set Timer By Event<ul><li>0.2</li><li>Set RifleFireTimerHandle &#x3D; Return Value</li><li>Event &#x3D; FireEvent</li></ul></li></ul></li><li>创建 Event FireEvent<ul><li>Branch CharRef 的 Get BPC Player Hotbar &#x3D;&gt; Items By Index(CharRef 的 HotbarIndex) Get &#x3D;&gt; Break &#x3D;&gt; CurrAmmo &gt;&#x3D; 1<ul><li>True<ul><li>CharRef 的 GetCameraRotation</li></ul></li></ul></li></ul></li><li>创建 Event GetCameraRotation(On Client)<ul><li>Inputs<ul><li>Target BP_FirstPersonCharacter</li></ul></li><li>FireRifleOnServer<ul><li>Rotation &#x3D; Target 的 Get First Person Camera 的 Get World Rotation</li></ul></li></ul></li><li>创建 Event FireRifleOnServer<ul><li>Inputs<ul><li>Rotation</li></ul></li><li>Set 变量 PlayerCameraRotation<ul><li>Rotation</li></ul></li><li>CharRef 的 FirstPersonMontage<ul><li>FPRifleIdleFire</li></ul></li><li>CharRef 的 ThirdPersonMontage<ul><li>FPRifleIdleFire</li></ul></li><li>Multicast</li><li>FireFirstPersonEquippedItemAnim</li></ul></li><li>创建 Event Multicast<ul><li>组件 Rifle 的 Play Animation<ul><li>Fire_Rifle_W</li></ul></li><li>Rifle 的 Spawn Sound Attached<ul><li>RifleB_Fire_Cue</li><li>Attenuation Setting &#x3D; WeaponShot_att 衰减</li></ul></li></ul></li><li>创建 Event FireFirstPersonEquippedItemAnim(On Client)<ul><li>Inputs<ul><li>CharRef BP_FirstPersonCharacter</li></ul></li><li>CharRef 的 Get First Person Equipped Item &#x3D;&gt; <code>Cast To BP_FP_Rifle 的 Rifle</code> 的 Play Animation<ul><li>Fire_Rifle_W</li></ul></li></ul></li><li>实现 API Event StopLeftMouseLoop<ul><li>Clear Timer By Handle<ul><li>RifleFireTimerHandle</li></ul></li></ul></li></ul><p>OPEN DT_Items</p><ul><li>修改 74<ul><li>UseAmmo? True</li><li>CurrentAmmo 30</li><li>MaxAmmo 30</li></ul></li></ul><p>测试：</p><ol><li>可以开枪，并且有声音和特效</li></ol><h4 id="129-设置步枪射击-2"><a href="#129-设置步枪射击-2" class="headerlink" title="129 设置步枪射击 2"></a>129 设置步枪射击 2</h4><p>通过玩家摄像头射线判断命中Player的Actor，根据不同部位造成不同伤害，根据玩家装备的护甲减免伤害。</p><p>OPEN BP_TP_Rifle</p><ul><li>创建 变量 BulletDistance float Default 10000</li><li>创建 方法 LineTrace<ul><li>Inputs<ul><li>PlayerCamera Rotation</li></ul></li><li>Outputs<ul><li>OutHit Hit Result</li><li>Hit? Bool</li></ul></li><li>CharRef 的 Get First Person Camera 的 Get World Location 设置 局部变量 CameraLocation</li><li>Line Trace By Channel<ul><li>Start &#x3D; CameraLocation</li><li>End &#x3D; CameraLocation + (PlayerCamera 的 Get Forward Vector * BulletDistance)</li><li>Channel &#x3D; 摄像机</li><li>Trace Complex &#x3D; true</li><li>Actors To Ignore &#x3D; Make Array &#x3D;&gt; Self and CharRef</li><li>Draw Debug Type &#x3D; 持久</li></ul></li><li>Branch 结果<ul><li>Return Node<ul><li>OutHit &#x3D; OutHit</li><li>Hit? &#x3D; Return Value</li></ul></li></ul></li></ul></li><li>编辑 Event FireRifleOnServer 最后<ul><li>LineTrace<ul><li>PlayerCameraRotation</li></ul></li></ul></li></ul><p>测试：</p><ol><li>开枪射击 可以看到射线</li></ol><p>项目设置</p><ul><li>Project Setting<ul><li>Physics Surface<ul><li>SurfaceType1 Head</li><li>SurfaceType2 Chest</li><li>SurfaceType3 Legs</li><li>SurfaceType4 Boots</li><li>SurfaceType5 Limb</li></ul></li></ul></li></ul><p>创建文件夹 Man&#x2F;Mesh&#x2F;Full&#x2F;PhysicalSurfaces<br>创建 物理材质 PhysicalMaterial Rename:PM_Head</p><ul><li>Surface Type &#x3D; Head</li></ul><p>COPY PM_Chest</p><ul><li>Surface Type &#x3D; Chest</li></ul><p>COPY PM_Legs</p><ul><li>Surface Type &#x3D; Legs</li></ul><p>COPY PM_Boots</p><ul><li>Surface Type &#x3D; Boots</li></ul><p>COPY PM_Limb</p><ul><li>Surface Type &#x3D; Limb</li></ul><p>OPEN SK_Man_Full_01_PhysicsAsset</p><ul><li>点击 骨骼 头部 1个部位<ul><li>材质重写 Physical Material &#x3D; PM_Head</li></ul></li><li>点击 骨骼 胸部 五个部位<ul><li>材质重写 Physical Material &#x3D; PM_Chest</li></ul></li><li>点击 骨骼 手臂 四个部位<ul><li>材质重写 Physical Material &#x3D; PM_Limb</li></ul></li><li>点击 骨骼 大腿小腿 四个部位 + 腹部<ul><li>材质重写 Physical Material &#x3D; PM_Legs</li></ul></li><li>点击 骨骼 脚 2个部位<ul><li>材质重写 Physical Material &#x3D; PM_Boots</li></ul></li></ul><p>OPEN BPI_SurvivalCharacter</p><ul><li>创建 方法 HasArmorInSlot?<ul><li>Inputs<ul><li>Surface EPhysicalSurface</li></ul></li><li>Outputs<ul><li>HasArmor? Boolean</li></ul></li></ul></li><li>创建 方法 WeaponRangedDamage<ul><li>Inputs<ul><li>Damage float</li><li>InstigatorController Controller</li><li>WeaponCauser Actor</li><li>SurfaceHit EPhysicalSurface</li></ul></li></ul></li></ul><p>OPEN BP_TP_Rifle</p><ul><li>创建 变量 DamageMultiplier float Default 0.05</li><li>创建 方法 ApplyDamages<ul><li>Inputs<ul><li>DamagedActor Actor</li><li>HitInfo HitResult</li><li>Condition? Bool</li><li>SurfaceHit EPhysicalSurface</li></ul></li><li>设置 局部变量 PSurfaceHit 并且打印 print String</li><li>设置 局部变量 LocalDamagedActor</li><li>Branch Condition?<ul><li>True<ul><li>设置 局部变量 LocalDamage &#x3D; ItemInfo Break &#x3D;&gt; ItemDamage * DamageMultiplier</li><li>Branch DamagedActor &#x3D;&gt; Actor Has Tag(Player)<ul><li>True<ul><li>SurfaceHit 进行 select 不同位置不同伤害<ul><li>Default &#x3D; LocalDamage * 1</li><li>Head &#x3D; LocalDamage * 8</li><li>Chest &#x3D; LocalDamage * 5</li><li>Legs &#x3D; LocalDamage * 3</li><li>Boots &#x3D; LocalDamage * 1</li><li>Limb &#x3D; LocalDamage * 1</li><li>设置 LocalDamage &#x3D; select 的 Return Value</li><li>Branch DamagedActor 的方法 HasArmorInSlot? 参数 SurfaceHit Comment：装备伤害减免<ul><li>True<ul><li>设置 LocalDamage &#x3D; LocalDamage - (LocalDamage * 0.25)</li></ul></li><li>False</li><li>WeaponRangedDamage (无论是否装备伤害减免 都执行)<ul><li>Damage &#x3D; LocalDamage</li><li>InstigatorController &#x3D; CharRef 的 Get Controller</li><li>WeaponCauser &#x3D; Self</li><li>SurfaceHit &#x3D; PSurfaceHit</li></ul></li><li>print string LocalDamage</li></ul></li></ul></li></ul></li><li>False <ul><li>ApplyDamage Comment:对AI或者除玩家之外的任何东西造成伤害<ul><li>DamagedActor &#x3D; DamagedActor</li><li>BaseDamage &#x3D; LocalDamage * 4</li><li>Event Instigator &#x3D; CharRef 的 Get Controller</li><li>Damage Causer &#x3D; Self</li><li>Damage Type Class &#x3D; DamageType</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>编辑 Event FireRifleOnServer 最后<ul><li>LineTrace<ul><li>PlayerCameraRotation</li></ul></li><li>Branch Hit?<ul><li>True<ul><li>ApplyDamages<ul><li>DamagedActor &#x3D; OutHit Break 的 Hit Actor</li><li>HitInfo &#x3D; OutHit</li><li>Condition &#x3D; OutHit Break 的 Hit Actor &#x3D;&gt; Actor Has Tag(Damageable)</li><li>SurfaceHit &#x3D; OutHit Break 的 Phys Mat 的 SurfaceType</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>增加 Tag Damageable</li><li>实现 API 方法 HasArmorInSlot?<ul><li>Inputs<ul><li>Surface EPhysicalSurface</li></ul></li><li>Surface Switch<ul><li>Default Return Value &#x3D; false</li><li>Head &#x3D;&gt; HelmetSlot Is Valid 的结果 bool 给 &#x3D;&gt; Return Node</li><li>Chest &#x3D;&gt; ChestSlot Is Valid 的结果 bool 给 &#x3D;&gt; Return Node</li><li>Legs &#x3D;&gt; PantsSlot Is Valid 的结果 bool 给 &#x3D;&gt; Return Node</li><li>Boots &#x3D;&gt; BootsSlot Is Valid 的结果 bool 给 &#x3D;&gt; Return Node</li><li>Limb Return Value &#x3D; false</li></ul></li></ul></li><li>编辑 方法 ApplyDamageToPlayer<ul><li>Inputs<ul><li>Damage float</li><li>DamageCauser Actor</li><li>SurfaceHit EPhysicalSurface</li><li>MeleorPointDMG Boolean 近远战</li></ul></li></ul></li><li>编辑 方法 Event AnyDamage<ul><li>调用 ApplyDamageToPlayer 时 参数 MeleorPointDMG &#x3D; true</li></ul></li><li>实现 API 方法 WeaponRangedDamage 放在 Event AnyDamage 旁<ul><li>Switch Has Authority<ul><li>True<ul><li>ApplyDamageToPlayer</li></ul></li></ul></li></ul></li><li>编辑 方法 ApplyDamageToPlayer<ul><li>判断 用户没有死亡后</li><li>判断 MeleorPointDMG 近远战<ul><li>True<ul><li>判断 DamageCauser !&#x3D; Self<ul><li>True<ul><li>Armor Durability Damage Mele</li><li>继续后续逻辑(Set 变量 LocalCurHealth)</li></ul></li><li>False 继续后续逻辑(Set 变量 LocalCurHealth)</li></ul></li></ul></li><li>False 远战<ul><li>ArmorDurabilityPointDamage<ul><li>Damage &#x3D; Damage</li><li>ArmorSlots &#x3D; SurfaceHit</li></ul></li><li>继续后续逻辑(Set 变量 LocalCurHealth)</li></ul></li></ul></li></ul></li><li>创建 方法 ArmorDurabilityPointDamage<ul><li>Inputs<ul><li>Damage float</li><li>ArmorSlots EPhysicalSurface</li></ul></li><li>设置 局部变量 LocalArmorDamage &#x3D; Damage &#x2F; 3</li><li>ArmorSlots Switch<ul><li>Head<ul><li>HeadSlot 右键转为有效获取</li></ul></li><li>Chest<ul><li>ChestSlot 右键转为有效获取</li></ul></li><li>Legs<ul><li>LegsSlot 右键转为有效获取</li></ul></li><li>Boots<ul><li>BootsSlot 右键转为有效获取</li></ul></li></ul></li><li><code>装备变量 例如 HeadSlot</code> 的 ArmorTypeDamage 传入参数</li></ul></li></ul><p>OPEN BP_TP_Rifle</p><ul><li>方法 ApplyDamages 调用了 ItemInfo 的 伤害值，需要设置才有伤害</li><li>类默认设置<ul><li>ItemInfo<ul><li>ItemDamage &#x3D; 100</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>第三人称网格体<ul><li>物理资产重写 SK_Man_Full_01_PhysicsAsset</li></ul></li><li>Capsule Component 设置<ul><li>碰撞预设体<ul><li>Camera 重叠，这样可以让枪的射线不会被自己的碰撞体挡住</li></ul></li></ul></li><li>ThirdPersonMesh<ul><li>碰撞预设<ul><li>对象类型 Pawn</li></ul></li></ul></li></ul><p>测试准备：</p><ol><li>两个玩家</li><li>命令行：show Collision 可以看到碰撞</li><li>给予的物品ID 74 11 13</li></ol><p>测试：,</p><ol><li>玩家1开枪射击玩家2，玩家2受伤，分别射击不同部位，受伤不同</li><li>玩家2开枪射击玩家1，玩家1受伤</li><li>玩家2穿上装备，玩家1开枪射击玩家2，玩家2受伤减少，分别射击不同部位，受伤不同</li></ol><h4 id="130-设置-步枪装弹和弹药"><a href="#130-设置-步枪装弹和弹药" class="headerlink" title="130 设置 步枪装弹和弹药"></a>130 设置 步枪装弹和弹药</h4><p>减少弹药</p><ul><li>容量检查</li><li>更新数据</li><li>更新UI</li></ul><p>OPEN 部件 W_InventorySlot</p><ul><li>编辑 方法 UpdateSlot<ul><li>类型 是 Equipment 并且 UseAmmo 是 True<ul><li>True<ul><li>逻辑最后</li><li>BottomText 的 Set Text<ul><li>ItemInfo Break 的 CurrAmmo + MaxAmmo Format:{CurrAmmo}&#x2F;{MaxAmmo}</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_TP_Rifle</p><ul><li>创建 方法 SubtractAmmo<ul><li>Inputs<ul><li>Amount int Default 1</li></ul></li><li>设置 局部变量 LocalItemInfo &#x3D; CharRef 的 Get Survival Char Ref 的 Get BPC Player Hotbar &#x3D;&gt; Items By Index(CharRef 的 HotbarIndex) Get</li><li>判断 LocalItemInfo &#x3D;&gt; Break &#x3D;&gt; CurrAmmo &gt;&#x3D; Amount<ul><li>True<ul><li>LocalItemInfo 的 Set Members 的 Set array Elem &#x3D;&gt; CurrAmmo - Amount</li><li>CharRef 的 Get Controller from Char &#x3D;&gt; UpdateItemSlot</li></ul></li></ul></li></ul></li><li>编辑 方法 FireRifleOnServer<ul><li>最后 增加 SubtractAmmo 无论是否命中都减少弹药</li></ul></li></ul><p>测试：</p><ol><li>开枪射击，弹药减少</li></ol><p>OPEN DT_Items</p><ul><li>增加 75<ul><li>75</li><li>1</li><li>Icon RifleAmmo</li><li>Rifle Ammo</li><li>…</li><li>UnCommon</li><li>IsStackable? True</li><li>StackSize 100</li></ul></li></ul><p>OPEN BPI_EquipableItem</p><ul><li>创建 方法 ReloadItemEvent<ul><li>Inputs<ul><li>CharRef BP_FirstPersonCharacter</li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>给予按键 改成 T</li><li>给予物品 ID 75 数量：100</li><li>创建 Event ReloadItemOnServer<ul><li>ThirdPersonEquippedItem 右键 有效获取 的 方法 ReloadItemEvent<ul><li>self</li></ul></li></ul></li><li>R键<ul><li>ReloadItemOnServer</li></ul></li></ul><p>OPEN BPC_ItemsContainer</p><ul><li>创建 方法 FindItem<ul><li>创建 局部变量 FoundIndex int</li><li>创建 局部变量 FoundItem? Boolean</li><li>Inputs<ul><li>ItemToFind int</li></ul></li><li>Outputs<ul><li>Index int</li><li>ItemInfo S_ItemInfo</li><li>HasItem? Boolean</li></ul></li><li>设置 局部变量 LocalItemID &#x3D; ItemToFind</li><li>Items 的 For Each Loop With Break<ul><li>Branch LocalItemID &#x3D; Items 的 Break 的 ItemID<ul><li>True<ul><li>设置 FoundIndex &#x3D; Array Index</li><li>设置 FoundItem &#x3D; true</li></ul></li></ul></li></ul></li><li>Break and Completed<ul><li>Return Node<ul><li>Index &#x3D; FoundIndex</li><li>ItemInfo &#x3D; Items By Index(FoundIndex) Get</li><li>HasItem? &#x3D; FoundItem</li></ul></li></ul></li></ul></li></ul><p>搜索 RifleReload</p><ul><li>右键 创建动画蒙太奇<ul><li>重命名 RifleReload_Montage</li></ul></li></ul><p>OPEN BP_TP_Rifle</p><ul><li>创建 变量 IsReloading? Boolean</li><li>创建 变量 AmmoIndex int</li><li>创建 变量 TotalAmmo int</li><li>实现 API Event ReloadItemEvent<ul><li>Branch IsReloading?<ul><li>False<ul><li>设置 变量 CurrAmmo &#x3D; CurrAmmo</li><li>判断 <code>Event参数的 CharRef</code> 的 GetSurvivalCharRef 的 Get BPC Player Hotbar &#x3D;&gt; Items By Index(CharRef 的 HotbarIndex) Get &#x3D;&gt; Break &#x3D;&gt; CurrAmmo &lt; MaxAmmo<ul><li>True<ul><li><code>变量的 CharRef</code> 右键 有效获取 的 方法 GetSurvivalCharRef 的 Get BPC Player Inventory &#x3D;&gt; FindItem<ul><li>ItemToFind &#x3D; 75</li><li>Branch HasItem?<ul><li>True<ul><li>设置 变量 AmmoIndex &#x3D; Index</li><li>设置 变量 TotalAmmo &#x3D; ItemInfo Break &#x3D;&gt; ItemQuantity</li><li>Set IsReloading? &#x3D; true</li><li>播放 装弹 动画 <ul><li><code>变量的 CharRef</code> 的 FirstPersonMontage<ul><li>RifleReload_Montage</li></ul></li><li><code>变量的 CharRef</code> 的 ThirdPersonMontage<ul><li>RifleReload_Montage</li></ul></li><li><code>变量的 CharRef</code> 的 ReloadWeaponOnClient</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>创建 Event ReloadWeaponOnClient<ul><li>Inputs<ul><li>CharRef BP_FirstPersonCharacter</li></ul></li><li>get First Person Equipped Item &#x3D;&gt; Cast To BP_FP_Rifle &#x3D;&gt; 骨骼网格体 Rifle 的 Play Animation<ul><li>Reload_Rifle_Hip_W</li></ul></li></ul></li><li>创建 变量 MaxClipSize Int Default:30</li><li>创建 变量 AmmoToRemove Int </li><li>实现 API Event EndAnimation<ul><li>Branch IsReloading?</li><li>看图</li></ul></li></ul><p>测试：</p><ol><li>开枪射击，弹药减少，按键装弹，装弹完成</li><li>子弹数量给10个，开枪所有子弹射完，装弹，装弹完成，子弹消失</li></ol><div>                <img src="/blog/p/614a8811/130装弹.png" alt="130装弹.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[130装弹.png]</p>            </div><div>                <img src="/blog/p/614a8811/动画结束后装上弹药并扣除_播放UI.png" alt="动画结束后装上弹药并扣除_播放UI.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[动画结束后装上弹药并扣除_播放UI.png]</p>            </div><h4 id="131-步枪-每次使用后减少耐久度"><a href="#131-步枪-每次使用后减少耐久度" class="headerlink" title="131 步枪 每次使用后减少耐久度"></a>131 步枪 每次使用后减少耐久度</h4><p>OPEN PlayerWindowAnimBP</p><ul><li>New State Machine<ul><li>Idle<ul><li>右键 增加 Blend Poses 增加 Rifle Pose<ul><li>FP_RifleBS<ul><li>Speed</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>创建 Event SetItemDurabilityOnServer<ul><li>Inputs<ul><li>AmountToSubtract int</li></ul></li><li>SetItemDurabilityFunction</li></ul></li><li>创建 方法 SetItemDurabilityFunction<ul><li>Inputs<ul><li>AmountToSubtract int</li></ul></li><li>设置 局部变量 LocalSubtract &#x3D; AmountToSubtract</li><li>ThirdPersonEquippedItem 右键 有效获取</li><li>设置 局部变量 LocalAmount &#x3D; BPC Player Hotbar 的 Items By Index(CharRef 的 HotbarIndex) Get &#x3D;&gt; Break &#x3D;&gt; ItemCurrentHP - LocalSubtract</li><li>判断 LocalAmount &lt;&#x3D; 0<ul><li>True<ul><li>BPC Player Hotbar 的 RemoveItemByIndex<ul><li>Index &#x3D; HotbarIndex</li></ul></li><li>DequipCurrentItem<ul><li>HotbarIndex</li></ul></li></ul></li><li>False<ul><li>BPC Player Hotbar 的 Items By Index(CharRef 的 HotbarIndex) Get &#x3D;&gt; Set Members<ul><li>ItemCurrentHP &#x3D; LocalAmount</li></ul></li><li>Items &#x3D;&gt; Set Array Elem<ul><li>Index &#x3D; HotbarIndex</li><li>Item &#x3D; Struct Out</li></ul></li><li>Get Controller 的 SurvivalGamePCRef 的 UpdateItemSlot<ul><li>PlayerHotbar</li><li>HotbarIndex</li><li>Struct Out</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_TP_Rifle</p><ul><li>编辑 API Event EndAnimation<ul><li>最后 增加 CharRef 的 SetItemDurabilityOnServer<ul><li>AmountToSubtract &#x3D; 10</li></ul></li></ul></li></ul><p>测试：</p><ol><li>开枪射击，丢失耐久度</li></ol><h4 id="132-火箭发射器"><a href="#132-火箭发射器" class="headerlink" title="132 火箭发射器"></a>132 火箭发射器</h4><p>导入课件资源<br>ICON 文件夹 导入到 Man&#x2F;Animations</p><ul><li>选择 UE4_Mannequin_Skeleton</li></ul><p>创建 动画 混合空间 Rename:FP_RocketBS</p><ul><li>选择 UE4_Mannequin_Skeleton</li><li>详情<ul><li>水平 Axis<ul><li>Name:Speed</li><li>Max Axis Value: 800</li></ul></li></ul></li><li>FPRocketIdle 拖入动画<ul><li>0 0</li></ul></li><li>FPRocketWalk 拖入动画<ul><li>600 0</li></ul></li><li>FPRocketRun 拖入动画<ul><li>800 0</li></ul></li><li>骨骼 添加套接字 预览动画 FPRocketIdle<ul><li>选中 pinky_02_l 移除所有附加资产</li><li>选中 hand_r 增加套接字 RocketSocket<ul><li>预览资产 Rocket_Launcher_B 火箭</li><li>变换<ul><li>-10.1 3.41 -0.57</li><li>14.5 -4.31 71.6</li><li>1 1 1</li></ul></li></ul></li></ul></li></ul><p>OPEN 三个文件 相同修改 FirstPerson_AnimBP&#x2F;ThirdPerson_AnimBP&#x2F;PlayerWindowAnimBP</p><ul><li>new State Machine<ul><li>Idle<ul><li>右键 增加 Blend Poses 增加 RocketLauncher Pose<ul><li>FP_RocketBS<ul><li>Speed</li></ul></li></ul></li></ul></li></ul></li></ul><p>创建文件夹 RocketLauncher In _Main&#x2F;Blueprints&#x2F;Items&#x2F;Equipable&#x2F;WeaponRanged<br>创建 子蓝图 BP_TP_RocketLauncher 继承于 BP_ThirdPersonEquipable 放入 RocketLauncher 文件夹中<br>创建 子蓝图 BP_FP_RocketLauncher 继承于 BP_FirstPersonEquipable 放入 RocketLauncher 文件夹中</p><p>OPEN BP_TP_RocketLauncher</p><ul><li>创建 骨骼网格体 组件 Rename:RocketLauncherMesh<ul><li>骨骼网格体 Static Mesh &#x3D; Rocket_launcher_B</li></ul></li><li>类默认设置<ul><li>EquipableInfo<ul><li>SocketName &#x3D; RocketSocket</li><li>AnimationState &#x3D; RocketLauncher</li><li>FirstPersonEquipClass &#x3D; BP_FP_RocketLauncher</li></ul></li></ul></li></ul><p>OPEN BP_FP_RocketLauncher</p><ul><li>创建 骨骼网格体 组件 Rename:RocketLauncherMesh<ul><li>骨骼网格体 Static Mesh &#x3D; Rocket_launcher_B</li></ul></li></ul><p>OPEN DT_Items</p><ul><li>增加 76<ul><li>76</li><li>1</li><li>Icon RocketLauncher</li><li>Rocket Launcher</li><li>…</li><li>ItemRarity Rare</li><li>HP 100 100</li><li>ItemType Equipable</li><li>ItemClassRef BP_TP_RocketLauncher</li><li>UseAmmo? true</li><li>MaxAmmo 1</li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>修改 R 键<ul><li>ID 76</li></ul></li></ul><p>测试：</p><ol><li>T键，获得火箭发射器，但是在背包移动中 状态下 提示的文字错误</li><li>按1持枪，可以看到火箭发射器，但是第一人称和第三人称持枪动作冲突</li><li>持枪后下肢没有动作</li></ol><p>OPEN BP_TP_RocketLauncher</p><ul><li>编辑 骨骼网格体<ul><li>Owner No See &#x3D; true</li></ul></li></ul><p>OPEN ThirdPerson_AnimBP</p><ul><li>预览网格体 SK_Man_Full_01</li><li>new State Machine<ul><li>Idle<ul><li>RocketLauncher Pose 改为<ul><li>Layered blend per bone 注意顺序<ul><li>ThirdPersonBS<ul><li>Speed</li></ul></li><li>FP_RocketBS<ul><li>Speed</li></ul></li><li>并且设置 详情的 层设置 LayerSetup 增加成员<ul><li>0<ul><li>Bone Name:spine_01</li><li>Bone Depth:1</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN W_InventorySlot</p><ul><li>编辑 方法 UpdateSlot<ul><li>类型 是 Equipment 并且 UseAmmo 是 True<ul><li>True<ul><li>逻辑最后</li><li>BottomText 的 Set Text<ul><li>ItemInfo Break 的 CurrAmmo + MaxAmmo</li></ul></li></ul></li></ul></li></ul></li></ul><p>复制 W_InventorySlot 的 方法 UpdateSlot 类型 是 Equipment 并且 UseAmmo 是 True 的 </p><ul><li>BottomText 的 Set Text<ul><li>ItemInfo Break 的 CurrAmmo + MaxAmmo</li></ul></li></ul><p>OPEN W_DraggedItem</p><ul><li>复制给 方法 UpdateSlot 类型 是 Equipment 并且 UseAmmo 是 True 的最后</li></ul><p>测试：<br>解决上述问题。</p><h4 id="133-火箭发射器发射-1"><a href="#133-火箭发射器发射-1" class="headerlink" title="133 火箭发射器发射 1"></a>133 火箭发射器发射 1</h4><p>创建 动画-蒙太奇 继承于 FPRocketFire Rename:FPRocketFire_Montage In</p><p>火箭发射器 粒子效果 文件：P_RocketLauncher_Trail_01</p><p>创建 蓝图类 Actor类型 BP_RocketProjectile 放入 _Main&#x2F;Blueprints&#x2F;Items&#x2F;Equipable&#x2F;WeaponsRanged&#x2F;RocketLauncher</p><ul><li>类默认设置<ul><li>可复制</li></ul></li><li>增加 发射物移动 Projectile Movement 组件 Rename:ProjectileMovement<ul><li>InitialSPeed: 3000 含义：初始速度</li><li>MaxSpeed: 3000 含义：最大速度</li><li>ProjectileGravityScale: 0 含义：发射物重力范围</li><li>Velocity: 3000 0 0 含义：速度</li></ul></li><li>增加 Sphere 组件 Rename：Sphere<ul><li>Radius：16</li><li>增加 静态网格体 组件 Rename:<ul><li>Static Mesh &#x3D; RocketLauncherB_Ammo</li><li>变换<ul><li>缩放 2 2 2</li></ul></li><li>增加 粒子效果 组件 P_RocketLauncher_Trail_01<ul><li>变换<ul><li>-12.2 0 0</li><li>0 0 -180</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_TP_RocketLauncher</p><ul><li>增加 变量 IsFiring? Boolean</li><li>增加 变量 IsReloading? Boolean</li><li>实现 API Event UseItemInterface<ul><li>设置 变量 CharRef &#x3D; 参数 CharRef</li><li>Branch IsFiring?<ul><li>False<ul><li>Branch IsReloading?</li><li>False<ul><li>Branch CharRef 的 Get BPC Player Hotbar &#x3D;&gt; Items By Index(CharRef 的 HotbarIndex) Get &#x3D;&gt; Break &#x3D;&gt; CurrAmmo &gt;&#x3D; 1<ul><li>True<ul><li>Set IsFiring? &#x3D; true</li><li>GetCameraRotationOnClient</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>创建 Event GetCameraRotationOnClient<ul><li>Inputs<ul><li>Target BP_FirstPersonCharacter</li></ul></li><li>FireRocketOnServer<ul><li>Rotation &#x3D; Target 的 Get First Person Camera 的 Get World Rotation</li></ul></li></ul></li><li>创建 Event FireRocketOnServer<ul><li>Inputs<ul><li>Rotation</li></ul></li><li>CharRef 的 FirstPersonMontage<ul><li>FPRocketFire_Montage</li></ul></li><li>CharRef 的 ThirdPersonMontage<ul><li>FPRocketFire_Montage</li></ul></li><li>MulticastProjectile<ul><li>SpawnTransformRotation &#x3D; Rotation</li><li>CharRef &#x3D; CharRef</li></ul></li><li>Set IsFiring? &#x3D; false</li></ul></li><li>创建 Event MulticastProjectile<ul><li>Inputs<ul><li>SpawnTransformRotation Rotation</li><li>CharRef BP_FirstPersonCharacter</li></ul></li></ul></li></ul><p>OPEN BP_TP_RocketLauncher</p><ul><li>在 骨骼网格体 组件内<ul><li>增加 箭头 Arrow 组件 Rename:Arrow<ul><li>变换<ul><li>0 64 10.62 这里注意，如果位置太接近角色则会炸到自己</li><li>0 0 90</li><li>1 1 1</li></ul></li></ul></li></ul></li><li>编辑 Event MulticastProjectile<ul><li>SpawnActor BP_RocketProjectile<ul><li>Transform<ul><li>Location &#x3D; Arrow 的 Get World Location</li><li>Rotation &#x3D; SpawnTransformRotation</li></ul></li></ul></li></ul></li></ul><p>OPEN DT_Items</p><ul><li>修改 76<ul><li>UseAmmo? True</li><li>CurrAMmo 1</li><li>MaxAmmo 1</li></ul></li></ul><p>给火箭发射器子弹限制生命周期<br>OPEN BP_RocketProjectile</p><ul><li>类默认设置<ul><li>Initial life span 5</li></ul></li></ul><p>测试：</p><ol><li>按T获得火箭发射器，按1持枪，按鼠标左键发射火箭</li><li>火箭发射器子弹限制生命周期，5S后消失</li></ol><h4 id="134-火箭发射器发射-2"><a href="#134-火箭发射器发射-2" class="headerlink" title="134 火箭发射器发射 2"></a>134 火箭发射器发射 2</h4><ol><li>装弹扣减</li><li>使用耐久度扣减</li><li>增加火箭发射器开火声音、粒子效果</li></ol><p>OPEN Fire_RocketLauncher_W</p><ul><li>删除 声音 RocketLauncherB_Fire_Cue 后面调用生成，就可以设置声音的范围等参数</li></ul><p>OPEN BP_TP_RocketLauncher</p><ul><li>创建 方法 SubtractAmmo<ul><li>Inputs<ul><li>Amount int Default 1</li></ul></li><li>设置 局部变量 LocalItemInfo &#x3D; CharRef 的 Get Survival Char Ref 的 Get BPC Player Hotbar &#x3D;&gt; Items By Index(CharRef 的 HotbarIndex) Get</li><li>判断 LocalItemInfo &#x3D;&gt; Break &#x3D;&gt; CurrAmmo &gt;&#x3D; Amount<ul><li>True<ul><li>LocalItemInfo 的 Set Members 的 Set array Elem &#x3D;&gt; CurrAmmo - Amount</li><li>CharRef 的 Get Controller from Char &#x3D;&gt; UpdateItemSlot</li></ul></li></ul></li></ul></li><li>编辑 Event MulticastProjectile<ul><li>增加 逻辑</li><li>RocketLauncherMesh 的 Spawn Sound Attached<ul><li>RocketLauncherB_Fire_Cue</li><li>Attenuation Setting &#x3D; WeaponShot_att 衰减</li></ul></li><li>RocketLauncherMesh 的 Play Animation<ul><li>Fire_RocketLauncher_W</li></ul></li></ul></li><li>创建 Event FireRockerOnClient<ul><li>Inputs<ul><li>CharRef BP_FirstPersonCharacter</li></ul></li><li>CharRef 的 Get First Person Equipped Item &#x3D;&gt; Cast To BP_FP_RocketLauncher 的 RocketLauncherMesh 的 Play Animation<ul><li>Fire_RocketLauncher_W</li></ul></li></ul></li><li>编辑 Event FireRocketOnServer<ul><li>设置 开火结束变量前<ul><li>增加 SetItemDurabilityOnServer 减少耐久度</li><li>增加 SubtractAmmo 减少弹药</li><li>增加 FireRockerOnClient 播放动画</li></ul></li></ul></li></ul><h4 id="135-火箭发射器-遇到物体爆炸"><a href="#135-火箭发射器-遇到物体爆炸" class="headerlink" title="135 火箭发射器 遇到物体爆炸"></a>135 火箭发射器 遇到物体爆炸</h4><p>OPEN BP_RocketProjectile</p><ul><li>类设置<ul><li>继承 BPI_StructureDamage 用于实现对结构的伤害</li></ul></li><li>Sphere<ul><li>确保 组件 Sphere 在 BP 的最外层</li><li>碰撞预设<ul><li>BlockAll 然后设置 自定义<ul><li>Structure 阻止</li></ul></li></ul></li></ul></li><li>创建 变量 CharRef BP_FirstPersonCharacter<ul><li>公开 </li><li>可编辑实例</li></ul></li><li>创建 内置 EventHit <ul><li>Switch Has Authority<ul><li>True<ul><li>RocketHitMulticast<ul><li>Location &#x3D; 参数 Hit Location</li></ul></li><li>Sphere Overlap Actors<ul><li>Location &#x3D; 参数 Hit Location</li><li>Object Type &#x3D; Make Array &#x3D;&gt; Pawn + Structure</li><li>Radius &#x3D; 100</li><li>Actors To Ignore &#x3D; Make Array &#x3D;&gt; Self</li></ul></li><li>Draw Debug Sphere<ul><li>Location &#x3D; 参数 Hit Location</li><li>Radius &#x3D; 100</li><li>Duration &#x3D; 30</li></ul></li><li>Branch 结果<ul><li>True<ul><li>For Each Loop<ul><li>ApplyDamage<ul><li>DamagedActor &#x3D; Array Element</li><li>BaseDamage &#x3D; 100</li><li>Event Instigator &#x3D; CharRef 的 Get Controller</li><li>Damage Causer &#x3D; Self</li><li>Damage Type Class &#x3D; DamageType</li></ul></li></ul></li><li>Completed<ul><li>Delay 0.2</li><li>Destroy Actor</li></ul></li></ul></li></ul></li></ul></li><li>False<ul><li>Delay 0.2  这里延迟是为了让客户端解决一些问题 无法穿过物体等</li><li>Destroy Actor</li></ul></li></ul></li></ul></li><li>创建 Event RocketHitMulticast<ul><li>Inputs<ul><li>HitLocation Vector</li></ul></li><li>Spawn Emitter At Location<ul><li>EmitterTemplate &#x3D; P_RocketLauncher_Explosion_01</li><li>HitLocation</li></ul></li><li>Spawn Sound at Location<ul><li>Sound RocketLauncher_Explosion_Cue</li><li>HitLocation</li><li>Attenuation Setting &#x3D; Explosion_att</li></ul></li><li>StaticMesh 的 Set Visibility<ul><li>false</li></ul></li></ul></li><li>创建 变量 DamageTiers S_DamageTiers<ul><li>默认值<ul><li>0 Metal</li><li>1 Stone</li><li>2 Wood</li></ul></li></ul></li><li>实现 API 方法 GetCanDamage<ul><li>DamageTiers &#x3D; 变量 DamageTiers</li></ul></li></ul><p>OPEN BP_TP_RocketLauncher</p><ul><li>创建 Event SpawnProjectileOnServer<ul><li>Inputs<ul><li>SpawnRotation Rotator</li></ul></li><li>将 MulticastProjectile Event 的 SpawnActor BP_RocketProjectile 逻辑移动到这里<ul><li>CharRef &#x3D; CharRef</li><li>Rotation &#x3D; 箭头 Arrow 的 Get World Rotation</li></ul></li></ul></li><li>编辑 Event SpawnProjectileOnServer<ul><li>调用 SpawnActor BP_RocketProjectile 传入 CharRef &#x3D; 变量 CharRef</li></ul></li></ul><h4 id="136-火箭发射器-装弹"><a href="#136-火箭发射器-装弹" class="headerlink" title="136 火箭发射器 装弹"></a>136 火箭发射器 装弹</h4><p>OPEN DT_Items</p><ul><li>编辑 76<ul><li>CurrAmmo 1</li><li>MaxAmmo 1</li></ul></li><li>增加 77<ul><li>77</li><li>1</li><li>ICON RocketsAmmo</li><li>Uncommon</li><li>IsStackable? true</li><li>100</li></ul></li></ul><p>OPEN BP_TP_RocketLauncher</p><ul><li>实现 API Event ReloadItemEvent 和 BP_TP_Rifle 的一样<ul><li>设置 变量 CharRef</li><li>Branch IsReloading?<ul><li>False<ul><li>设置 变量 CurrAmmo &#x3D; CurrAmmo</li><li>判断 <code>Event参数的 CharRef</code> 的 GetSurvivalCharRef 的 Get BPC Player Hotbar &#x3D;&gt; Items By Index(CharRef 的 HotbarIndex) Get &#x3D;&gt; Break &#x3D;&gt; CurrAmmo &lt; MaxAmmo<ul><li>True<ul><li><code>变量的 CharRef</code> 右键 有效获取 的 方法 GetSurvivalCharRef 的 Get BPC Player Inventory &#x3D;&gt; FindItem<ul><li>ItemToFind &#x3D; 75</li><li>Branch HasItem?<ul><li>True<ul><li>设置 变量 AmmoIndex &#x3D; Index</li><li>设置 变量 TotalAmmo &#x3D; ItemInfo Break &#x3D;&gt; ItemQuantity</li><li>Set IsReloading? &#x3D; true</li><li>播放 装弹 动画<ul><li><code>变量的 CharRef</code> 的 FirstPersonMontage<ul><li>RifleReload_Montage</li></ul></li><li><code>变量的 CharRef</code> 的 ThirdPersonMontage<ul><li>RifleReload_Montage</li></ul></li><li><code>变量的 CharRef</code> 的 ReloadWeaponOnClient</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>实现 API Event EndAnimation 和 BP_TP_Rifle 的一样<ul><li>Branch IsReloading?<ul><li>True<ul><li>Set IsReloading? &#x3D; false</li><li>SubtractAmmo<ul><li>Amount &#x3D; 1</li></ul></li><li>SetItemDurabilityOnServer<ul><li>AmountToSubtract &#x3D; 10</li></ul></li><li>Get Controller 的 SurvivalGamePCRef 的 UpdateItemSlot<ul><li>PlayerHotbar</li><li>HotbarIndex</li><li>Struct Out</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>T 键<ul><li>ID 77 76 13 11</li><li>数量都是 1</li></ul></li></ul><p>测试：</p><ol><li>按T获得火箭发射器，按1持枪，按鼠标左键发射火箭</li><li>按 R 键装弹，装弹完成</li><li>没有弹药 无法装弹</li></ol><h4 id="137-增加弓"><a href="#137-增加弓" class="headerlink" title="137 增加弓"></a>137 增加弓</h4><p>导入课件资源</p><p>创建 弓资源文件夹 In _Main&#x2F;Meshes&#x2F;Equipable&#x2F;Bow  进入 Bow<br>导入 SK_Bow.FBX 不选择网格<br>删除文件 SK_Box_Anim<br>导入 BowAnim.FBX 选择网格 SK_Bow_Skeleton<br>导入 SK_Arrow.fbx 不用设置<br>创建 弓材质文件夹 Materials In <em>Main&#x2F;Meshes&#x2F;Equipable&#x2F;Bow<br>导入 四个 T</em> 开头的材质文件 In Materials</p><p>创建 材质文件 M_Bow<br>OPEN M_Bow</p><ul><li>拖入 四个 T_ 开头的材质文件<ul><li>上下排列<ul><li>T_Centaur_Gear_BaseColor<ul><li>RGB 连接 材质的 Base Color 含义：基础颜色</li></ul></li><li>T_Centaur_Gear_Specular<ul><li>RGB 连接 材质的 Specular 含义：高光</li></ul></li><li>T_Centaur_Gear_OcclusionRoughnessMetallic<ul><li>R 连接 材质的 Ambient Occlusion 含义：环境光遮蔽</li><li>G 连接 材质的 Roughness 含义：粗糙度</li><li>B 连接 材质的 Metallic 含义：金属度</li></ul></li><li>T_Centaur_Gear_nml<ul><li>RGB 连接 材质的 Normal</li></ul></li></ul></li></ul></li></ul><p>OPEN SK_Bow</p><ul><li>设置 材质槽<ul><li>选择 M_Bow</li></ul></li></ul><p>OPEN SM_Arrow</p><ul><li>设置 材质槽<ul><li>选择 M_Bow</li></ul></li></ul><p>创建 动画 混合空间 Rename:FP_BowBS In Man&#x2F;Animations 选择 UE4_Mannequin_Skeleton</p><ul><li>详情<ul><li>水平 Axis<ul><li>Name:Speed</li><li>Max Axis Value: 800</li></ul></li></ul></li><li>Bow_Idle 拖入动画<ul><li>0 0</li></ul></li><li>Bow_Walk 拖入动画<ul><li>600 0</li></ul></li><li>Bow_Run 拖入动画<ul><li>800 0</li></ul></li></ul><p>OPEN UE4_Mannequin_Skeleton</p><ul><li>创建 套接字<ul><li>选中 thumb_01_r</li><li>移除所有附加资产</li><li>预览动画 Bow_Idle</li><li>选中 hand_l<ul><li>增加套接字<ul><li>BowSocket</li><li>预览资产 SK_Bow</li><li>变换<ul><li>9.75 -3.4 -0.33</li><li>-110 -0.86 -109.29</li><li>1 1 1</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN FirstPerson_AnimBP</p><ul><li>new State Machine<ul><li>Idle 可以复制 Rifle Pose<ul><li>右键 增加 Blend Poses 增加 Bow Pose <ul><li>FP_BowBS<ul><li>Speed</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN ThirdPerson_AnimBP</p><ul><li>new State Machine<ul><li>Idle 可以复制 Rifle Pose<ul><li>右键 增加 Blend Poses 增加 Bow Pose<ul><li>FP_BowBS<ul><li>Speed</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN PlayerWindowAnimBP</p><ul><li>new State Machine<ul><li>Idle 可以复制 Rifle Pose<ul><li>右键 增加 Blend Poses 增加 Bow Pose<ul><li>FP_BowBS<ul><li>Speed</li></ul></li></ul></li></ul></li></ul></li></ul><p>创建文件夹 Bow In _Main&#x2F;Blueprints&#x2F;Items&#x2F;Equipable&#x2F;WeaponRanged</p><p>进入文件夹 _Main&#x2F;Blueprints&#x2F;Items&#x2F;Equipable</p><ul><li>创建 子蓝图 BP_TP_Bow 继承于 BP_ThirdPersonEquipable 放入 Bow 文件夹中</li><li>创建 子蓝图 BP_FP_Bow 继承于 BP_FirstPersonEquipable 放入 Bow 文件夹中</li></ul><p>OPEN BP_TP_Bow</p><ul><li>类默认设置<ul><li>EquipableInfo<ul><li>SocketName &#x3D; BowSocket</li><li>AnimationState &#x3D; Bow</li><li>FirstPersonEquipClass &#x3D; BP_FP_Bow</li></ul></li></ul></li><li>增加 骨骼网格体 组件 Rename:BowMesh<ul><li>骨骼网格体 Static Mesh &#x3D; SK_Bow</li><li>OwnerNoSee</li></ul></li></ul><p>OPEN BP_FP_Bow</p><ul><li>增加 骨骼网格体 组件 Rename:BowMesh<ul><li>骨骼网格体 Static Mesh &#x3D; SK_Bow</li></ul></li></ul><p>OPEN DT_Items</p><ul><li>增加 78<ul><li>78</li><li>1</li><li>ICON Bow</li><li>Bow</li><li>…</li><li>ItemRarity Rare</li><li>HP 100 100</li><li>ItemType Equipable</li><li>ItemClassRef BP_TP_Bow</li><li>UseAmmo? True</li><li>MaxAmmo 1</li><li>CurrAmmo 1</li></ul></li></ul><p>OPEN BP_FirstPersonCharacter</p><ul><li>T 键<ul><li>ID 78</li><li>数量 1</li></ul></li></ul><p>测试：</p><ol><li>按T获得弓</li><li>玩家2能看到玩家1拿着弓，并且角色走动正常</li></ol><h4 id="138-弓射击"><a href="#138-弓射击" class="headerlink" title="138 弓射击"></a>138 弓射击</h4><p>OPEN SK_Bow</p><ul><li>选择 Bone_002<ul><li>增加 套接字<ul><li>ArrowSocket<ul><li>预览资产 SM_Arrow</li><li>变换<ul><li>-2.5 22.39 -9.52</li><li>0 0 10</li><li>1 1 1</li></ul></li></ul></li></ul></li></ul></li></ul><p>创建 拉弓动画蒙太奇 Rename:Bow_Draw_Montage By Bow_Draw</p><ul><li>选择 Default 行 右键 新增 蒙太奇片段 End 移动到最后<ul><li>点击 Clear <ul><li>将 片段 End 的 下个片段 设置成 End</li><li>将 片段 Default 的 下个片段 设置成 End</li></ul></li></ul></li></ul><p>创建 拉弓动画蒙太奇 Rename:Bow_Shoot_Montage By Bow_Shoot</p><p>创建蓝图类 Actor Rename：BP_ArrowProjectile Bow In _Main&#x2F;Blueprints&#x2F;Items&#x2F;Equipable&#x2F;WeaponRanged&#x2F;Bow</p><ul><li>类默认设置<ul><li>可复制</li></ul></li><li>创建 Sphere Collision 组件 Rename:Sphere 并且将 Sphere 放到最外层<ul><li>碰撞预设 <ul><li>自定义<ul><li>Object Type &#x3D; Projectile</li><li>Structure 阻止</li></ul></li></ul></li><li>创建 静态网格体 组件 Rename:ArrowMesh<ul><li>静态网格体 Static Mesh &#x3D; SM_Arrow</li><li>变换<ul><li>旋转 0 0 -90</li></ul></li><li>碰撞预设<ul><li>NoCollision</li></ul></li></ul></li><li>创建 发射物移动 Projectile Movement 组件 Rename:ProjectileMovement<ul><li>Initial Speed 4000</li><li>Max Speed 4000</li><li>Projectile Gravity Scale 0.3</li><li>Velocity 4000 0 0</li></ul></li></ul></li></ul><p>OPEN BP_TP_Bow 和 BP_FP_Bow</p><ul><li>骨骼网格体<ul><li>增加 静态网格体 组件 Rename:GongJianMesh<ul><li>静态网格 SM_Arrow</li><li>父 Socket &#x3D; ArrowSocket</li><li>碰撞预设<ul><li>NoCollision</li></ul></li><li>Owner No See &#x3D; true</li></ul></li></ul></li></ul><p>OPEN BP_FP_Bow</p><ul><li>创建 Event HideArrow 隐藏箭<ul><li>Inputs<ul><li>NewVisibility Boolean</li></ul></li><li>静态网格 GongJianMesh 的 Set Visibility<ul><li>NewVisibility</li></ul></li></ul></li></ul><p>OPEN BP_TP_Bow</p><ul><li>实现 API Event StopLeftMouseLoop<ul><li>判断 IsFiring?<ul><li>True<ul><li>CharRef 的 CameraOnClient</li></ul></li></ul></li></ul></li><li>实现 API Event UseItemInterface 可以复制 BP_TP_Rifle 的<ul><li>CharRef 的 FireFirstPersonEquippedItemAnim</li></ul></li><li>创建 Event GetCameraRotationOnClient 可以复制 BP_TP_Rifle 的 GetCameraRotation<ul><li>FireOnServer</li></ul></li><li>创建 Event FireOnServer 他这里 扣减了 Slot<ul><li>Inputs<ul><li>Rotation</li></ul></li><li>设置 变量 PlayerCameraRotation &#x3D; Rotation</li><li>FireOnClient</li><li>CharRef 的 First Person Montage<ul><li>Bow_Shoot_Montage</li></ul></li><li>CharRef 的 Third Person Montage<ul><li>Bow_Shoot_Montage</li></ul></li><li>DrawMultiCast</li><li>SpawnActor BP_ArrowProjectile<ul><li>Transform<ul><li>Location &#x3D; GongJianMesh 的 Get World Location</li></ul></li><li>CharRef &#x3D; 参数 CharRef</li></ul></li><li>Set IsFiring? &#x3D; false</li></ul></li><li>创建 Event FireFirstPersonEquippedItemAnim 可以复制 BP_TP_Rifle 的<ul><li>cast BP_FP_Bow 的 BowMesh 的 Play Animation<ul><li>Bow_Draw</li></ul></li><li>文件 BowAnim</li><li>武器的 HideArrow 方法<ul><li>NewVisibility &#x3D; True</li></ul></li></ul></li><li>创建 Event DrawMultiCast<ul><li>BowMesh 的 Play Animation<ul><li>BowAnim</li></ul></li><li>GongJianMesh 的 Set Visibility<ul><li>true</li></ul></li></ul></li><li>FireOnClient<ul><li>Inputs<ul><li>CharRef BP_FirstPersonCharacter</li></ul></li><li>参数 CharRef 的 Get First Person Equipped Item &#x3D;&gt; Cast To BP_FP_Bow 的 BowMesh 的 Player Animation<ul><li>BowAnim</li></ul></li><li>参数 CharRef 的 Get First Person Equipped Item &#x3D;&gt; Cast To BP_FP_Bow 的 BowMesh 的 HiddArrow<ul><li>true</li></ul></li></ul></li></ul><p>测试：</p><ol><li>按T获得弓，按1持枪，按鼠标左键发射箭</li><li>弓发射出去后卡住，碰撞体有问题</li></ol><p>OPEN BP_ArrowProjectile</p><ul><li>Sphere<ul><li>缩放 0.5 0.5 0.5</li><li>Radius 16</li></ul></li><li>ArrowMesh<ul><li>缩放 3 1.5 3</li></ul></li></ul><p>OPEN BP_TP_Bow</p><ul><li>SpawnActor BP_ArrowProjectile<ul><li>Transform<ul><li>Location &#x3D; 改为：ArrowMesh 的 Get World Location &#x3D;&gt; Break Vector &#x3D;&gt; X Y 都加 50 然后 Make Vector</li></ul></li></ul></li></ul><h4 id="139-设置弓-碰撞物体产生伤害"><a href="#139-设置弓-碰撞物体产生伤害" class="headerlink" title="139 设置弓 碰撞物体产生伤害"></a>139 设置弓 碰撞物体产生伤害</h4><p>OPEN BP_ArrowProjectile</p><ul><li>类默认设置 <ul><li>Actor<ul><li>Initial Life Span 5 含义：初始生命周期</li></ul></li></ul></li><li>设置 变量 CharRef BP_FirstPersonCharacter<ul><li>公开</li><li>可编辑实例</li></ul></li><li>创建 内置 EventHit<ul><li>Do Once</li><li>参数 Other &#x3D;&gt; Actor Has Tag<ul><li>Tag &#x3D; Damageable</li><li>Branch 结果<ul><li>True<ul><li>Attach Actor to Actor<ul><li>Target &#x3D; Self</li><li>ParentActor &#x3D; Other</li><li>Location Rule &#x3D; Keep World 含义：位置规则&#x3D;保持世界</li><li>Rotation Rule &#x3D; Keep World</li><li>Scale Rule &#x3D; Keep World</li><li>Weld Simulated Bodies &#x3D; true</li></ul></li><li>Sphere 的 Set Collision Response To Channel<ul><li>Channel &#x3D; Pawn</li><li>New Response &#x3D; Overlap</li></ul></li><li>设置 变量 ArrowLocation &#x3D; Arrow 的 Get World Location</li><li>Line Trace By Channel<ul><li>创建 变量 TraceDistance float Default 100</li><li>Start &#x3D; ArrowLocation</li><li>End &#x3D; ArrowLocation + (Get Actor Forward Vector * 变量 TraceDistance)</li><li>Channel &#x3D; 摄像头</li><li>TraceComplex &#x3D; True</li><li>Draw Debug Type &#x3D; 持久</li><li>Actors To Ignore &#x3D; Make Array &#x3D;&gt; Self</li><li>Branch 结果<ul><li>True<ul><li>Branch 结果 的 Break Hit Actor &#x3D;&gt; Actor Has Tag<ul><li>Tag &#x3D; Damageable<ul><li>方法 ApplyDamage<ul><li>DamagedActor &#x3D; HitActor</li><li>HitInfo &#x3D; OutHit</li><li>SurfaceHit &#x3D; PhysMat 的 SurfaceType</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>创建 方法 ApplyDamage 和 BP_TP_Rifle 的一样<ul><li>不同点：<ul><li>这个方法用的 ApplyPointDamage 而不是 ApplyDamage<ul><li>Hit from Direction &#x3D; ArrowLocation - Other</li></ul></li></ul></li><li>Inputs<ul><li>DamagedActor Actor</li><li>HitInfo HitResult</li><li>SurfaceHit EPhysicalSurface</li></ul></li><li>创建 变量 DamageMultiplier(伤害倍数) 默认值 0.03</li><li>创建 变量 ItemDamage(伤害) 默认值 100</li><li>设置 局部变量 PSurfaceHit 并且打印 print String</li><li>设置 局部变量 LocalDamagedActor</li><li>设置 局部变量 LocalDamage &#x3D; ItemDamage * DamageMultiplier</li><li>Branch DamagedActor &#x3D;&gt; Actor Has Tag(Player)<ul><li>True<ul><li>…</li></ul></li><li>False<ul><li>ApplyPointDamage Comment:对AI或者除玩家之外的任何东西造成伤害<ul><li>DamagedActor &#x3D; LocalDamagedActor</li><li>BaseDamage &#x3D; LocalDamage</li><li>Hit from Direction &#x3D; ArrowLocation</li><li>HitInfo &#x3D; 参数 HitInfo</li><li>Event Instigator &#x3D; null 不需要</li><li>Damage Causer &#x3D; Self</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_TP_Bow</p><ul><li>编辑 内置 FireOnServer<ul><li>SpawnActor BP_ArrowProjectile<ul><li>CharRef &#x3D; CharRef</li><li>Location 修改成 CharRef 的 Get Arrow1 的 Get World Location</li></ul></li></ul></li></ul><p>粒子效果<br>创建文件夹 _Main&#x2F;Blueprints&#x2F;Items&#x2F;Equipable&#x2F;WeaponRanged&#x2F;Bow&#x2F;BowTrail<br>创建 材质 Rename:M_Trail</p><ul><li>Blend Model &#x3D; Translucent 含义：混合模式&#x3D;半透明</li><li>Shading Model &#x3D; Unlit 含义：着色模型&#x3D;未照明</li><li>Texture Coordinate<ul><li>UTiling 0.1  U平铺</li><li>Panner<ul><li>Speed -1</li></ul></li><li>Texture Sample<ul><li>Texture &#x3D; T_Noise01</li><li>RGB 连接 Multiply 的 A</li></ul></li></ul></li><li>RadialGradientExponential<ul><li>Return 连接 Multiply 的 B</li></ul></li><li>Power(X,2)<ul><li>Base &#x3D; Multiply</li></ul></li><li>Multiply 连接 Opacity<ul><li>A &#x3D; Particle Color 粒子</li><li>B &#x3D; Power</li></ul></li><li>Particle Color <ul><li>第一个 连接 自发光颜色</li><li>最后一个 连接 Multiply 的 A</li></ul></li></ul><div>                <img src="/blog/p/614a8811/M_Trail.png" alt="M_Trail.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[M_Trail.png]</p>            </div><p>创建 Niagara 系统 添加 Simple Sprite Burst 含义：简单精灵爆发 Rename:NS_BowTrail</p><ul><li>详情<ul><li>LiftCycle<ul><li>Loop Behavior &#x3D; Infinite 含义：循环行为&#x3D;无限</li><li>Loop Duration &#x3D; 10 含义：循环持续时间</li></ul></li><li>Spawn Burst Instantaneous<ul><li>Count &#x3D; 100 含义：数量</li><li>Spawn Rate &#x3D; 0 含义：生成速率</li></ul></li><li>Sprite Rendering 精灵渲染<ul><li>Material &#x3D; M_Trail</li></ul></li><li>Ribbon Attributes 条带属性<ul><li>Ribbon Width Mode &#x3D; Direct Set</li><li>Ribbon Width &#x3D; 20</li></ul></li></ul></li><li>SimpleSpriteBurst 图表<ul><li>发射器 Emitter Update +<ul><li>Spawn Rate<ul><li>Spawn Rate &#x3D; 100</li></ul></li></ul></li><li>Particle Spawn 粒子生成<ul><li>Point Attributes<ul><li>Initial Mode<ul><li>Lifttime &#x3D; 1</li></ul></li></ul></li></ul></li><li>渲染 Renderer <ul><li>删除 Sprite Renderer</li><li>增加<ul><li>Ribbon Renderer 条带渲染器<ul><li>Material &#x3D; M_Trail</li></ul></li></ul></li></ul></li></ul></li></ul><p>OPEN BP_ArrowProjectile</p><ul><li>增加 Niagara Particle System 组件 Rename:NS_BowTrail<ul><li>System &#x3D; NS_BowTrail</li><li>变换<ul><li>-24.869 0 0</li><li>0 0 90</li></ul></li></ul></li></ul><h4 id="140-弓-装弹"><a href="#140-弓-装弹" class="headerlink" title="140 弓 装弹"></a>140 弓 装弹</h4><p>OPEN DT_Items</p><ul><li>增加 79<ul><li>79</li><li>1</li><li>ICON arrow</li><li>Arrow</li><li>…</li><li>ItemRarity Common</li><li>HP 100 100</li><li>ItemType Equipable</li><li>ItemClassRef BP_ArrowProjectile</li><li>UseAmmo? True</li><li>MaxAmmo 1</li><li>CurrAmmo 1</li></ul></li></ul><p>遗留的问题：</p><ol><li>按1持枪 某些情况下 取消持枪后，再次持枪提示已经持枪</li></ol><h3 id="第11章"><a href="#第11章" class="headerlink" title="第11章"></a>第11章</h3><p>创建部落&#x2F;氏族系统</p><h3 id="第12章-创建社会系统"><a href="#第12章-创建社会系统" class="headerlink" title="第12章 创建社会系统"></a>第12章 创建社会系统</h3><h3 id="第13章-创建开放世界地图"><a href="#第13章-创建开放世界地图" class="headerlink" title="第13章 创建开放世界地图"></a>第13章 创建开放世界地图</h3><h4 id="将项目从-5-0-更新到-5-2"><a href="#将项目从-5-0-更新到-5-2" class="headerlink" title="将项目从 5.0 更新到 5.2"></a>将项目从 5.0 更新到 5.2</h4><p>需要更新 Plugins&#x2F;AdvanceSessions </p><ul><li>去官网下载 vreue4.com&#x2F;advanced-sessions-binaries</li><li>选择 5-2-0版本 下载地址是：drive.google.com 开头的地址</li></ul><p>删除原来的，导入新的文件到 Plugins&#x2F;AdvanceSessions 目录中</p><p>编辑 SurvivalCraft.uproject 右键 Switch Unreal Engine version … 选择 5.2.0</p><ul><li>可以双击打开了</li><li>如果有提示，则需要解决 提示文件不同版本的问题</li></ul><p>问题1：Project Setting 搜索 sm6 勾选，重启<br>如果有其他问题，依次解决</p><h3 id="第14章-多生物群落-x2F-程序树叶"><a href="#第14章-多生物群落-x2F-程序树叶" class="headerlink" title="第14章 多生物群落&#x2F;程序树叶"></a>第14章 多生物群落&#x2F;程序树叶</h3><h3 id="第15章-人工智能系统"><a href="#第15章-人工智能系统" class="headerlink" title="第15章 人工智能系统"></a>第15章 人工智能系统</h3><h3 id="第16章-程序区"><a href="#第16章-程序区" class="headerlink" title="第16章 程序区"></a>第16章 程序区</h3><h3 id="第17章-玩家小地图"><a href="#第17章-玩家小地图" class="headerlink" title="第17章 玩家小地图"></a>第17章 玩家小地图</h3><h3 id="第18章-保存-x2F-加载系统"><a href="#第18章-保存-x2F-加载系统" class="headerlink" title="第18章 保存&#x2F;加载系统"></a>第18章 保存&#x2F;加载系统</h3><h3 id="第19章-Steam-会话-x2F-前端小控件"><a href="#第19章-Steam-会话-x2F-前端小控件" class="headerlink" title="第19章 Steam 会话&#x2F;前端小控件"></a>第19章 Steam 会话&#x2F;前端小控件</h3><h3 id="第20章-专用服务器设置和托管"><a href="#第20章-专用服务器设置和托管" class="headerlink" title="第20章 专用服务器设置和托管"></a>第20章 专用服务器设置和托管</h3><h4 id="232"><a href="#232" class="headerlink" title="232"></a>232</h4><p>修复bug，先不处理</p><h4 id="233-加载播放器错误修复"><a href="#233-加载播放器错误修复" class="headerlink" title="233 加载播放器错误修复"></a>233 加载播放器错误修复</h4><h4 id="234-游戏实例和主机会话"><a href="#234-游戏实例和主机会话" class="headerlink" title="234 游戏实例和主机会话"></a>234 游戏实例和主机会话</h4><p>关闭UE4Editor.exe</p><p>打开目录</p><p>文档连接 docs.unrealengine.com&#x2F;4.26&#x2F;zh-CN&#x2F;ProgrammingAndScripting&#x2F;Online&#x2F;Steam&#x2F;<br>找到 专用服务器设置和托管设置 Finished Settings 的 DefaultEngine.ini<br>OPEN DefaultEngine.ini，最下方添加</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[/Script/Engine.GameEngine]</span><br><span class="line">+NetDriverDefinitions=(<span class="attribute">DefName</span>=<span class="string">&quot;GameNetDriver&quot;</span>,DriverClassName=&quot;OnlineSubsystemSteam.SteamNetDriver&quot;,DriverClassNameFallback=&quot;OnlineSubsystemUtils.IpNetDriver&quot;)</span><br><span class="line"></span><br><span class="line">[OnlineSubsystem]</span><br><span class="line"><span class="attribute">DefaultPlatformService</span>=Steam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将源文件上方的OnlineSubsystemSteam删掉</span></span><br><span class="line">[OnlineSubsystemSteam]</span><br><span class="line"><span class="attribute">bEnabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attribute">SteamDevAppId</span>=480 # 测试APPID</span><br><span class="line"><span class="attribute">bHasVoiceEnabled</span>=<span class="literal">true</span> # 复制上方的 开启语音</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将源文件的内容复制到这</span></span><br><span class="line">[Voice]</span><br><span class="line"><span class="attribute">bEnabled</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[/Script/OnlineSubsystemSteam.SteamNetDriver]</span><br><span class="line"><span class="attribute">NetConnectionClassName</span>=<span class="string">&quot;OnlineSubsystemSteam.SteamNetConnection&quot;</span></span><br></pre></td></tr></table></figure><p>启动项目</p><p>File -&gt; Recent Levels -&gt; MainMenu</p><p>以独立模式运行网络模式<br>Run -&gt; Net Mode -&gt; Play Standalone</p><p>运行后可以查看到 MainMenu，但是没有Steam窗口叠加</p><p>打开 Steam, 创建新账户</p><p>Run -&gt; Standalone Game 新的编辑窗口运行独立游戏<br>运行后 可以看到 Steam 窗口叠加</p><h5 id="设置-托管逻辑"><a href="#设置-托管逻辑" class="headerlink" title="设置 托管逻辑"></a>设置 托管逻辑</h5><p>创建 蓝图类 游戏实例类[SurvivalGameInstance] 在 _Main&#x2F;Blueprints&#x2F;GameModels,搜索 GameInstance<br>这个实例，会在游戏启动的时候一直加载，直到游戏结束，并且项目中只有一个实例</p><p>在项目设置中 搜索 游戏实例 选择 SurvivalGameInstance</p><p>OPEN SurvivalGameInstance</p><ul><li>创建 会话逻辑</li><li>创建 事件 Event Init<ul><li>Delay 2S</li><li>Create Advanced Session<ul><li>额外设置 Extra Setting &#x3D;&gt; Make Array<ul><li>Make Literal Session Property String<ul><li>Key &#x3D;&gt; “ServerName”</li><li>Value &#x3D;&gt; “生存游戏 959554xxx房间”</li><li>这里回到 W_ServerBrowser 中的 W_ServerSlot 的 展示了 ServerName</li><li>OPEN W_ServerSlot<ul><li>Event Construct<ul><li>ServerName &#x3D;&gt; Set Text &#x3D;&gt; ServerName</li></ul></li></ul></li></ul></li><li>Make Literal Session Property String<ul><li>Key &#x3D;&gt; “ServerMap”</li><li>Value &#x3D;&gt; 在前面调用 Get Current Level Name 的 Return Value 连接 Value</li></ul></li></ul></li><li>公共连接数 &#x3D;&gt; 100</li><li>私有连接数 &#x3D;&gt; 0</li><li>允许邀请</li><li>Is Dedicated Server &#x3D;&gt; true</li><li>Use Presence &#x3D;&gt; false 专用服务器不需要</li><li>其他 默认值</li></ul></li></ul></li><li>设置 托管服务器</li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>创建快捷方式 在开发模式下 运行，使用端口转发</p><ul><li>将 Steam 的端口 转发给 服务器</li></ul><h3 id="第21章"><a href="#第21章" class="headerlink" title="第21章"></a>第21章</h3><p>其他</p><h3 id="结构补充"><a href="#结构补充" class="headerlink" title="结构补充"></a>结构补充</h3><p>BPI_SurvivalGamePC</p><ul><li>GetSurvivalGamePCRef 留给子类实现</li></ul><p>SurvivalGamePC 继承了 BPI_SurvivalGamePC</p><ul><li>GetSurvivalGamePCRef 返回了自己</li><li>构造函数<ul><li>服务端 print 输出 Authority [当前角色拥有网络所有权（通常是服务器角色）]</li><li>客户端 创建 W_MainWidget 控件，添加到游戏窗口</li></ul></li></ul><p>重点：</p><ul><li>BP_FirstPersonCharacter 可以通过 <code>获取控制器 (目标是Pawn)</code> &#x3D;&gt; <code>SurvivalGamePC Ref (目标是BPI_SurvivalGamePC)</code> 控件的 Event.</li><li>BP_FirstPersonCharacter 可以通过 <code>获取玩家控制器</code> &#x3D;&gt; <code>SurvivalGamePC Ref (目标是Survival_GamePC)</code> 控件的 Event.</li><li>控件 可以通过 <code>获取拥有玩家pawn</code> &#x3D;&gt; <code>Get Survival Character Ref</code> 调用 SurvivalGamePC 的 Event.</li><li>控件 可以通过 <code>获取拥有玩家角色</code> &#x3D;&gt; <code>Get Survival Character Ref</code> 调用 BP_FirstPersonCharacter 的 Event.</li></ul><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>单词：<br>Actor<br>Inventory 背包<br>widget 小控件<br>Hotbar 快捷栏<br>Hatchet 斧头<br>Harvest 收获<br>Specific 特定的<br>Harvestable 可收获的<br>Large 大的</p><ul><li>树</li><li>石头<br>Ground 地面</li><li>草</li><li>灌木<br>Damage 伤害</li></ul><p>Overlap 重叠</p><p>对象使用 Break 拆分<br>枚举使用 Switch on Enum 判断<br>控件 的 方法体中 中 获取父级组件的方法 通过</p><ul><li>Get Owning Player -&gt; Survival Game PCRef -&gt; MainWidgetRef -&gt;  W_Inventory -&gt; W_CraftingWindow<br>但是在 W_CraftingWindow 中 … 这一行可以删除</li></ul><p>用户控件 滚动框 增加子控件 用 <code>Add Child</code></p><h2 id="设计一款游戏"><a href="#设计一款游戏" class="headerlink" title="设计一款游戏"></a>设计一款游戏</h2><h3 id="Common"><a href="#Common" class="headerlink" title="Common"></a>Common</h3><p>登录界面</p><ul><li>登录方式<ul><li>微信</li><li>Steam</li><li>账号密码</li><li>手机号</li><li>游客</li><li>邮箱</li></ul></li></ul><p>物品</p><ul><li>装备</li><li>武器</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;暂无描述&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://ayou129.github.io/blog/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Unity</title>
    <link href="https://ayou129.github.io/blog/p/c8a4b253/"/>
    <id>https://ayou129.github.io/blog/p/c8a4b253/</id>
    <published>2022-12-23T19:38:15.000Z</published>
    <updated>2022-10-21T19:59:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂无描述</p><span id="more"></span><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><blockquote><p><a href="https://learn.microsoft.com/zh-cn/visualstudio/gamedev/unity/unity-scripting-upgrade" target="_blank" rel="noopener">https://learn.microsoft.com/zh-cn/visualstudio/gamedev/unity/unity-scripting-upgrade</a></p></blockquote><p>编辑 项目设置 Player Configuration </p><ul><li>Scripting Backend</li><li>C++<ul><li>(首选).NET Standard 2.1。 此 配置文件与 .NET Foundation 发布的 .NET Standard 2.1 配置文件 匹配。 Unity 建议对新项目使用 .NET Standard 2.1。 它比 .NET 4.x 小，有利于尺寸受限的平台。 此外，Unity 承诺在 Unity 支持的所有平台上支持此配置文件。</li><li>.NET Framework。 此配置文件提供对最新 .NET 4 API 的访问权限。 它包括.NET Framework类库中提供的所有代码，并支持 .NET Standard 2.1 配置文件。 如果 .NET Standard 2.0 配置文件中未包含项目所需的部分 API，请使用 .NET 4.x 配置文件。 但此 API 的某些部分并非在所有 Unity 平台上均受支持。</li></ul></li></ul><h3 id="Unity-Scene-缩放"><a href="#Unity-Scene-缩放" class="headerlink" title="Unity Scene 缩放"></a>Unity Scene 缩放</h3><p>Mac 两手指滑动</p><h3 id="输出信息到控制台上"><a href="#输出信息到控制台上" class="headerlink" title="输出信息到控制台上"></a>输出信息到控制台上</h3><ul><li>输出函数 Print()</li><li>输出函数 Debug.log()</li></ul><p>相同点：</p><ul><li>都能将 <code>字符串信息</code> 打印到 Unity编辑器的 <code>Console控制台</code> 上</li><li>都来自 <code>UnityEngine</code> 命名空间，使用前必须 <code>using UnityEngine;</code></li></ul><p>不同点：</p><ul><li>Print 方法 来自于 <code>MonoBehaviour</code>,使用前必须继承<code>MonoBehaviour</code></li><li>Debug.log 不需要继承 就可以使用</li></ul><h2 id="Inspector"><a href="#Inspector" class="headerlink" title="Inspector"></a>Inspector</h2><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="Sprite-Renderer-图片精灵渲染"><a href="#Sprite-Renderer-图片精灵渲染" class="headerlink" title="Sprite Renderer 图片精灵渲染"></a>Sprite Renderer 图片精灵渲染</h4><blockquote><p>用于渲染__精灵__并控制其在 2D 和 3D 项目场景中的可视化效果。</p></blockquote><h4 id="Rigidbody-2D-增加重力"><a href="#Rigidbody-2D-增加重力" class="headerlink" title="Rigidbody 2D 增加重力"></a>Rigidbody 2D 增加重力</h4><h4 id="CircleCollider-2D-圆形碰撞器，可以设置偏移量"><a href="#CircleCollider-2D-圆形碰撞器，可以设置偏移量" class="headerlink" title="CircleCollider 2D 圆形碰撞器，可以设置偏移量"></a>CircleCollider 2D 圆形碰撞器，可以设置偏移量</h4><blockquote><p><a href="https://docs.unity3d.com/cn/current/Manual/class-CircleCollider2D.html" target="_blank" rel="noopener">https://docs.unity3d.com/cn/current/Manual/class-CircleCollider2D.html</a></p></blockquote><h4 id="Script-行为剧本"><a href="#Script-行为剧本" class="headerlink" title="Script 行为剧本"></a>Script 行为剧本</h4><p>创建Test脚本</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用程序集，引入并功能</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 和组件建立通信，使用插槽</span></span><br><span class="line">    <span class="keyword">public</span> Rigidbody2D myRigidbody;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="comment">// 在第一帧更新之前调用Start</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// gameObject.name = &#x27;角色名&#x27;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="comment">// 每帧调用一次更新</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>gameObject</strong></p><ul><li>gameObject 对应 Inspector对象</li><li>gameObject.name 对应 Inspector的 name</li><li>gameObject.tag 对应 Inspector的 tag</li></ul><p><strong>Script插槽</strong><br><code>Script</code>只能和 <code>ganmeObject</code> 交互，和其他组件之间要引用建立通信，使用<code>插槽</code></p><p><strong>transform</strong><br>位置组件，有两个属性</p><ul><li>position:游戏对象中心点在世界空间的位置</li><li>localPosition:游戏对象中心点在父类空间的位置</li></ul><p>世界空间就是Unity最大的空间，可以创建一个无任何父节点的空对象<br>position 0<br>rotation 0<br>scale 1</p><p><strong>Time</strong></p><blockquote><p><a href="https://docs.unity3d.com/cn/current/Manual/TimeFrameManagement.html" target="_blank" rel="noopener">https://docs.unity3d.com/cn/current/Manual/TimeFrameManagement.html</a></p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 返回自上一帧完成以来所经过的时间(以秒为单位)。该值取决于游戏或应用程序运行的每秒帧数(FPS)</span><br><span class="line">Time.deltaTime </span><br><span class="line"></span><br><span class="line">## 保证无论帧率多少，运算都会计算出相同的值</span><br><span class="line">速度 = 运算 * Time.deltaTime</span><br></pre></td></tr></table></figure><p>预制，就像一个游戏对象的蓝图<br>管道生成器<br>每秒生成管道</p><p><strong>变量</strong><br>脚本绑定UI对象的方式</p><ul><li>GameObject.Find()<ul><li>查找目标的路径是从Assert的相对路径来查找的，不用将脚本挂载到要查找的对象也可以实现查找</li><li>返回的是对象的Inspector的完整属性，如果对象下面挂载了其他对象，也一并包含(子对象)</li></ul></li><li>GetComponent<ComponentType>();<ul><li>必须挂载在对象下面的脚本</li><li>获取对象的一部分属性，其他对象的脚本是无法访问当前对象的属性的</li></ul></li></ul><p><strong>Instantiate</strong><br>克隆对象 被克隆的对象 位置 四元素旋转</p><p><strong>Destory</strong><br>Destory(object,销毁延时float); 销毁对象</p><p><strong>For</strong></p><ul><li>生成随机的树<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> GameObject objectToSpawn;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start is called before the first frame update</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 生成树的数量</span></span><br><span class="line">    <span class="built_in">int</span> numberOfTreesToSpawn = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numberOfTreesToSpawn; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 任意位置 <span class="doctag">TODO:</span>这里第三个参数需要补充 应该是和i有关系的</span></span><br><span class="line">        Vector3 randomPosition = <span class="keyword">new</span> Vector3(Random.Range(<span class="number">11</span>, <span class="number">-11</span>), Random.Range(<span class="number">4</span>, <span class="number">-7</span>));</span><br><span class="line">        <span class="comment">// 克隆对象</span></span><br><span class="line">        Instantiate(objectToSpawn, randomPosition, Quaternion.identity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>if else</strong></p><ul><li>根据玩家不同性别选择不同角色对象<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> GameObject female; <span class="comment">// 女性角色</span></span><br><span class="line"><span class="keyword">public</span> GameObject male; <span class="comment">// 男性角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> isFemale;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start is called before the first frame update</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 读取玩家信息...</span></span><br><span class="line">    <span class="comment">// 匹配玩家的性别分配不同角色</span></span><br><span class="line">    <span class="keyword">if</span> (isFemale)</span><br><span class="line">    &#123;</span><br><span class="line">        Instantiate(female, Vector3.zero, Quaternion.identity);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Instantiate(male, Vector3.zero, Quaternion.identity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>用户输入</strong><br>有两种方式</p><ol><li>Input 原始<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> speed = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start is called before the first frame update</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 根据用户案件输入改变位置</span></span><br><span class="line">    Vector3 playerInput = <span class="keyword">new</span> Vector3(Input.GetAxisRaw(<span class="string">&quot;Horizontal&quot;</span>), Input.GetAxisRaw(<span class="string">&quot;Vertical&quot;</span>), <span class="number">0</span>);</span><br><span class="line">    transform.position = transform.position + playerInput.normalized * speed * Time.deltaTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Input Manager</li></ol><p><strong>Vector2.MoveTowards</strong><br>Vector2.MoveTowards(起始位置，目标位置，速度);</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> GameObject target; <span class="comment">// 目标对象的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> speed; <span class="comment">// 行走时的速度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Update is called once per frame</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 跟踪玩家，例如：怪物追踪玩家</span></span><br><span class="line">    transform.position = Vector2.MoveTowards(transform.position, transform.transform.position, speed * Time.deltaTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OnTriggerEnter2D</strong><br>当对象碰撞或接触另一个对象时执行</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> GameObject target; <span class="comment">// 目标对象的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> speed; <span class="comment">// 行走时的速度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter2D</span>(<span class="params">Collider2D other</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 碰撞的对象信息 other</span></span><br><span class="line">    <span class="comment">// 碰撞后的行为：被攻击(粒子特效)、加减分数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安全游戏系统"><a href="#安全游戏系统" class="headerlink" title="安全游戏系统"></a>安全游戏系统</h3><p>二进制格式，保存所有想要的数据。<br>三个重要组件</p><ul><li>Gameplay Data</li><li>Save Game Container</li><li>Serialization System To write the Binary File 序列化系统读写二进制文件</li></ul><p>Assets</p><ul><li>Scripts<ul><li>Serialization<ul><li>SerializationManager</li></ul></li></ul></li></ul><p>TODU：待补充…</p><h3 id="帧同步"><a href="#帧同步" class="headerlink" title="帧同步"></a>帧同步</h3><h2 id="Unity-多人游戏框架"><a href="#Unity-多人游戏框架" class="headerlink" title="Unity 多人游戏框架"></a>Unity 多人游戏框架</h2><blockquote><p><code>Netcode for GameObjects</code> <a href="https://www.bilibili.com/video/av898075461/?vd_source=dbdc982d62ac5b2bb1058ae9896d20df" target="_blank" rel="noopener">https://www.bilibili.com/video/av898075461/?vd_source=dbdc982d62ac5b2bb1058ae9896d20df</a></p></blockquote><p>主要特点：</p><ul><li>服务器客户端都跑 Unity，运行同一套代码，但是可能跑不同逻辑分支</li><li>状态同步(区别于lock-step帧同步)</li></ul><p>安装: <code>Package Manager</code></p><p>其他介绍：<br>自定义服务器  or 云服务提供商<br>实时服务、云架构<br>云技术和游戏服务器托管</p><p>同步不同游戏循环的解决方案： <code>Netcode for GameObjects</code> 和连接工具 Relay(转播、中继节点)、Lobby(大厅)、Multiplay和Matchmaker<br>网络变量、远程过程调用，同步世界之间的关键信息<br>运行载体：桌面、手机、控制台<br>不同阶段：开发阶段、预发布阶段、生产阶段</p><p>游戏的阶段：<br>客户端启动：</p><ol><li>玩家进行匿名认证</li><li>Host在Lobby服务中创建一个Lobby，向其他玩家宣告上线</li><li>Relay服务的后台创建新位置</li><li>使用数据位置调用Netcode的start，并将网络场景切换到角色选择场景(包含网络列表的网络对象)</li><li>客户端，大厅列表，后台向Lobby服务请求该主机的Relay信息，请求Relay服务并且加入它，启动一个Netcode连接</li><li>主机端Netcode会批准连接，在 <code>自定义会话管理器</code> 中创建一个 新的玩家条目，即使断开连接，也不会丢失进程</li></ol><p>GameObject上需要有一个网络转换(Network transform),让他们的位置自动复制，从主机到所有客户端<br>游戏中的所有状态都使用网络变量：</p><ul><li>动画和特效</li><li>法师的火弩箭</li><li>坦克的近战攻击</li><li>门开的状态</li><li>弓箭手的箭</li><li>机器人被破坏的状态</li><li>角色的生命值</li></ul><p>网络条表示状态<br>支持晚加入，这样就不必维护自己的点RPC列表，以便在新玩家连接时发送</p><p>门状态使用 <code>netbars</code> 作为它的状态，点击按钮时，它们会更新状态主机站点，并且复制到所有客户端，并且使用网络动画器触发动画。<br>箭头正在使用 <code>fork对象池</code> ，使用自定义生成处理程序来管理客户端对象的生命周期</p><p>缓解延迟和抖动：</p><ul><li>角色选择的权威客户端</li><li>动作预测(在点击时运行一个小的跳跃动画来怼输入做出相应)</li><li>缓冲插值(Buffer interpolation)</li><li>网络变换</li></ul><p>Relay：连接玩家进行端到端体验的枢纽，将A的数据包传送到B<br>Relay Server<br>特点：</p><ul><li>安全性，加密方式</li><li>低延迟</li></ul><p>Lobby：</p><ul><li>创建和浏览公共游戏的方法<ul><li>邀请朋友参加私人游戏(人类可读+机器唯一ID)</li><li>Quick Join的轻量级玩家匹配功能(公开游戏)</li></ul></li><li>提供玩家设备提供一个手机和共享安全信息的场所</li><li>灵活的状态存储，具有不同级别</li></ul><p>语音系统<br>社交游戏、竞技游戏、</p><p>Multiplay：创建和上传游戏服务器fleet和游戏服务器容器，将它们分配到世界各地的混合数据中心，为游戏发布做好准备。</p><p>Matchmaker：玩家匹配系统</p><p>很多开发工作，迭代、处理自己的队列、自己的构建，Alpha&amp;Beta，公开测试，最坏的情况：停机部署和规则修复<br>结论就是需要一个支持实验的系统，支持A&#x2F;B测试、调优、尤其复杂情况时</p><p>Unity面板中：</p><ul><li>Environments系统：为生产、开发、QA执行不同的隔离</li></ul><p>新增两种隔离类型队列(Queue)和池(Pool)</p><h2 id="帧同步-1"><a href="#帧同步-1" class="headerlink" title="帧同步"></a>帧同步</h2><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="王者荣耀-商业级手游"><a href="#王者荣耀-商业级手游" class="headerlink" title="王者荣耀 商业级手游"></a>王者荣耀 商业级手游</h3><h3 id="战斗地形的创建-地形、植物、箭塔"><a href="#战斗地形的创建-地形、植物、箭塔" class="headerlink" title="战斗地形的创建 地形、植物、箭塔"></a>战斗地形的创建 地形、植物、箭塔</h3><p>导入地形<br>增加植物<br>增加箭塔<br>  Assets-&gt;Model，选中箭塔，放到合适的位置<br>箭塔增加材质<br>  Assets-&gt;Model，选中材质拖动到箭塔中<br>增加英雄</p><h3 id="玩家控制"><a href="#玩家控制" class="headerlink" title="玩家控制"></a>玩家控制</h3><h4 id="手游"><a href="#手游" class="headerlink" title="手游"></a>手游</h4><blockquote><p>虚拟摇杆插件(EasyTouch)</p></blockquote><p>创建空元素</p><ul><li>EasyTouch 且添加组件 Assets-&gt;EasyTouch-&gt;Plugins-&gt;EasyTouch</li><li>EasyJoystick 且添加组件 Assets-&gt;EasyTouch-&gt;Plugins-&gt;EasyJoystick</li></ul><p>添加完之后 Hierarchy 会出现 MoveController</p><p>如何使用</p><ol><li>在英雄上添加 <code>MoveController</code> 组件，在Assets里面找</li></ol><h4 id="端游"><a href="#端游" class="headerlink" title="端游"></a>端游</h4><blockquote><p>新版输入系统 <code>input system</code></p></blockquote><p>创建用户 player 胶囊capsule tag&#x3D;&gt; player<br>创建 Assets &#x3D;&gt; prefabs，将player纳入</p><img src="/blog/p/c8a4b253/createUser01.png" class="" title="createUser01.png"><p>安装</p><ul><li>windows &#x3D;&gt;</li><li>package Mamager &#x3D;&gt;</li><li>unity registry &#x3D;&gt;</li><li>input system(输入控制器 键盘等等) &#x3D;&gt;</li><li>统统 yes yes</li></ul><p>OnFoot</p><ul><li>Movement wsad value Vector2</li><li>Jump space</li><li>Look Delta 鼠标滑动</li><li>Crouch 下蹲</li><li>Spring 加速</li></ul><img src="/blog/p/c8a4b253/InputManager01.png" class="" title="InputManager01.png"><p>三、方向键<br>新创建InputManger、PlayerMotor 增加到player 组件当中<br>InputManger获取到方向改变(void FixedUpdate 读取玩家的当前状态 固定帧处理) &#x3D;&gt;<br>执行玩家引擎(ProcessMove(Vector2的x和y)) &#x3D;&gt;<br>CharActerController.move(transform.TransformDirection(moveDirection)  速度  每帧产生的时间)</p><p>四、重力<br>Velocity速度<br>gravity重力<br>isGrounded 已接地<br>重力值 -9.8f<br>核心：让用户自然下坠(重力*deltaTime)，下坠到某个值就停下(地板)<br>用户y坐标降低</p><p>五、跳跃<br>y &#x3D; 跳跃的高度<em>重力</em>变数(可以减(*0.5))</p><p>六、加速<br>是否加速 sprinting<br>按了shift键就把速度提升到8，是否加速ing</p><p>七、蹲<br>是否下蹲 bool crouching<br>下蹲差 bool lerpCrouch &#x3D; false;<br>下蹲时间 float crouchTimer &#x3D; 0;</p><p>八、视角</p><ol><li>Look &#x3D;&gt; Vector2 bind Delta 鼠标</li><li>PlayerLook.cs  ProcessLook<br>InputManger 引入  <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private PlayerLook playerLook<span class="comment">;</span></span><br><span class="line"><span class="attribute">playerLook</span> <span class="operator">=</span> GetComponent&lt;PlayerLook&gt;()<span class="comment">;</span></span><br><span class="line">void LateUpdate()</span><br><span class="line">&#123;</span><br><span class="line">  playerLook.ProcessLook(onFoot.Look.ReadValue&lt;Vector2&gt;())<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Player&#x3D;&gt;摄像机 绑定到 player组件的cam上</li></ol><h4 id="摄像机玩家跟随"><a href="#摄像机玩家跟随" class="headerlink" title="摄像机玩家跟随"></a>摄像机玩家跟随</h4><p>移动时改变玩家视角</p><ol><li><code>Main Camera</code> 增加组件 <code>CameraFollow</code> script</li><li>编写 <code>CameraFollow</code><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> C : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    private <span class="keyword">Transform</span> player;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> cameraX;</span><br><span class="line">    <span class="type">float</span> cameraZ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">float</span> y = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">public</span> <span class="type">float</span> z = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    // <span class="keyword">Start</span> <span class="keyword">is</span> <span class="keyword">called</span> <span class="keyword">before</span> the first frame <span class="keyword">update</span></span><br><span class="line">    <span class="type">void</span> <span class="keyword">Start</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // <span class="keyword">Update</span> <span class="keyword">is</span> <span class="keyword">called</span> once per frame</span><br><span class="line">    <span class="type">void</span> <span class="keyword">Update</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(player)&#123;</span><br><span class="line">            cameraX = player.position.x;</span><br><span class="line">            cameraZ = player.position.z;</span><br><span class="line">            this.<span class="keyword">transform</span>.position = <span class="built_in">new</span> Vector3(cameraX, y, cameraZ + z)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3.</span> `CameraFollow` script 中将玩家Player 添加到 类成员Player</span><br></pre></td></tr></table></figure>第二个方案：标准资源包中 Standard Assets -&gt; Scripts -&gt; Camera Scripts -&gt; SmoothFollow</li><li><code>Main Camera</code> 增加组件 <code>SmoothFollow</code> script</li><li><code>SmoothFollow</code> script 中将玩家 添加到 Target</li></ol><h4 id="攻击特效"><a href="#攻击特效" class="headerlink" title="攻击特效"></a>攻击特效</h4><p>触发：攻击按钮<br>画布{<br>    攻击按钮1<br>    攻击按钮2<br>    攻击按钮3 大招<br>    闪现<br>    治疗<br>}<br>执行：动画事件<br>创建玩家攻击脚本Assets&#x2F;Scripts&#x2F;PlayerAttack.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerAttack</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">private</span> ParticleSystem fire1;</span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">private</span> GameObject fire2;</span><br><span class="line">    <span class="keyword">private</span> Animator ani; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ani = GetComponent&lt;Animator&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Atk1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ani.SetInteger(<span class="string">&#x27;state&#x27;</span>, AnimState.ATTACK1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Atk1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ani.SetInteger(<span class="string">&#x27;state&#x27;</span>, AnimState.ATTACK2)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Atk1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ani.SetInteger(<span class="string">&#x27;state&#x27;</span>, AnimState.ATTACK3)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 播放 粒子效果，点击攻击后时间线走一部分</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EffectPlayer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        fire1.play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将状态设置回来，在时间线的尾部</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ResetIdle</span>()</span>&#123;</span><br><span class="line">        ani.SetInteger(<span class="string">&#x27;state&#x27;</span>, AnimState.IDLE)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Animator面板中，Entry-&gt;idle1-&gt;n个动画中(1技能、2技能、3技能)增加事件Events，不同时间线不同事件<br>给画布中的按钮 指定 事件，onclick-&gt;playerAttack-&gt;指定技能</p><img src="/blog/p/c8a4b253/PlayerAttack.png" class="" title="PlayerAttack.png"><h3 id="游戏打包-APK"><a href="#游戏打包-APK" class="headerlink" title="游戏打包 APK"></a>游戏打包 APK</h3><ol><li>Unity-&gt;file-&gt;Build Setting</li><li>选择平台，需要提前下载好打包软件</li><li>点击player settings，设置相关信息，基本信息+包信息</li><li>配置安卓环境 Unity Preferences-&gt;External Tools-&gt;安卓相关信息</li><li>build-&gt;目录名称</li></ol><h2 id="ISO-x2F-OSI-参考模型"><a href="#ISO-x2F-OSI-参考模型" class="headerlink" title="ISO&#x2F;OSI 参考模型"></a>ISO&#x2F;OSI 参考模型</h2><a href="/blog/p/cf930505/" title="Mian">Mian</a><p>SocketModel</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SocketModel</span>&#123;</span><br><span class="line">    <span class="comment">// 一级协议，区分 所属模块</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span> type = &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="comment">// 二级协议，区分 模块下所属子模块</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> area = &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="comment">// 三级协议，区分 当前处理逻辑功能</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> command = &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="comment">// 消息体 当前需要处理的主体数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> message = &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketModel</span>()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketModel</span>(<span class="params"><span class="built_in">byte</span> t, <span class="built_in">int</span> a,iunt c,<span class="built_in">object</span> o</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = t;</span><br><span class="line">        <span class="keyword">this</span>.area = a;</span><br><span class="line">        <span class="keyword">this</span>.command = c;</span><br><span class="line">        <span class="keyword">this</span>.message = o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetMessage</span>&lt;<span class="title">T</span>&gt;()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="temp"><a href="#temp" class="headerlink" title="temp"></a>temp</h3><p>动画状态机</p><h3 id="游戏模式构建"><a href="#游戏模式构建" class="headerlink" title="游戏模式构建"></a>游戏模式构建</h3><h3 id="地形创建"><a href="#地形创建" class="headerlink" title="地形创建"></a>地形创建</h3><h4 id="NGUI插件"><a href="#NGUI插件" class="headerlink" title="NGUI插件"></a>NGUI插件</h4><h4 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h4><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><p>核心游戏场景逻辑<br>地图生成<br>地形系统<br>英雄生成<br>消息接收<br>加载英雄模型<br>设置英雄模型<br>死亡处理</p><h4 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h4><h4 id="玩家匹配"><a href="#玩家匹配" class="headerlink" title="玩家匹配"></a>玩家匹配</h4><p>房间</p><ul><li>私有房间</li><li>公开房间</li><li>自定义</li></ul><h4 id="技能模块"><a href="#技能模块" class="headerlink" title="技能模块"></a>技能模块</h4><p>技能程序框架</p><ul><li>攻击</li></ul><h4 id="战队功能"><a href="#战队功能" class="headerlink" title="战队功能"></a>战队功能</h4><h3 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h3><p>寻路<br>移动</p><p>画面</p><ul><li>血条(CRUD)</li></ul><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>内存<br>渲染</p><p>资源管理</p><p>Shader<br>AI<br>图形学<br>引擎架构</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="游戏开发流程"><a href="#游戏开发流程" class="headerlink" title="游戏开发流程"></a>游戏开发流程</h3><ol><li>将项目代码添加到git当中</li><li>unity项目结构<br>脚本Script<br>艺术Art<br>预制文件夹<br>资产包文件夹</li><li>部署和集成自动化系统</li><li>沙盒项目(用于清理Assets Store资产包和试验品)</li><li>提出一个合理的计划 trello 团队管理工具 (清单、进度)</li><li>分享进度 WebGl 或 Steam</li><li>建立游戏的垂直部分，不要构建整个事务、整个故事、整个other<br>建立游戏中最好玩的地方&amp;可玩版本(告诉自己其他玩家为什么会玩)<br>建立核心，再在基础之上往上堆栈</li><li>下一步是什么</li></ol><h3 id="搭建示例舞台"><a href="#搭建示例舞台" class="headerlink" title="搭建示例舞台"></a>搭建示例舞台</h3><h4 id="FPS"><a href="#FPS" class="headerlink" title="FPS"></a>FPS</h4><p>一、新建舞台 create cube<br>地板 floor</p><img src="/blog/p/c8a4b253/floor.png" class="" title="floor.png"><p>方块xN</p><img src="/blog/p/c8a4b253/%E6%96%B9%E5%9D%97xN01.png" class="" title="方块xN01.png"><img src="/blog/p/c8a4b253/%E6%96%B9%E5%9D%97xN02.png" class="" title="方块xN02.png"><p>灯光调暗 Directional_light_intensity 0.7</p><img src="/blog/p/c8a4b253/Directional_light_intensity.png" class="" title="Directional_light_intensity.png"><h2 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="3D数学"><a href="#3D数学" class="headerlink" title="3D数学"></a>3D数学</h3><h4 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h4><p><strong>笛卡尔坐标系</strong></p><blockquote><p><code>直角坐标系</code> 和 <code>斜坐标系</code> 统称为 <code>笛卡尔坐标系</code></p></blockquote><ul><li>相交于原点的两条数轴，构成了平面仿射坐标系</li><li>两条数轴上的度量单位相等，则称此仿射坐标系为笛卡尔坐标系</li><li>两条数轴互相垂直的笛卡尔坐标系，称为笛卡尔直角坐标系，否则称为笛卡尔斜角坐标系</li></ul><p>2D笛卡儿坐标系中，可用(x，y)来表示一个点，被称为坐标。</p><p>2D笛卡儿坐标系的基础上，增加一条垂直于2D平面的轴就构成了3D笛卡儿坐标系。<br>3D笛卡儿坐标系中，(x，y，z)用来表示一个点。</p><p><strong>左手坐标系 与 右手坐标系</strong><br>在3D笛卡儿坐标系中，有两种方式可以确定Z轴的方向，即左手坐标系与右手坐标系。</p><ul><li>左手坐标系：伸开左手，大拇指指向X轴正方向，食指指向Y轴正方向，其他3个手指指向Z轴正方向。</li><li>右手坐标系：伸开右手，大拇指指向X轴正方向，食指指向Y轴正方向，其他3个手指指向Z轴正方向。<img src="/blog/p/c8a4b253/%E5%B7%A6%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB%E5%92%8C%E5%8F%B3%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB.png" class="" title="左手坐标系和右手坐标系">两种坐标系的旋转正方向不同，左手坐标系是顺时针方向旋转，右手坐标系是逆时针方向旋转。<img src="/blog/p/c8a4b253/%E5%B7%A6%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB%E5%92%8C%E5%8F%B3%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB%E7%9A%84%E6%97%8B%E8%BD%AC%E6%96%B9%E5%90%91.png" class="" title="左手坐标系和右手坐标系的旋转方向"></li><li>常见左手坐标系<ul><li>Unity 3D(世界坐标系)</li><li>Direct 3D</li></ul></li><li>常见右手坐标系<ul><li>3D笛卡尔坐标系</li><li>OpenGL</li></ul></li></ul><h4 id="世界坐标系"><a href="#世界坐标系" class="headerlink" title="世界坐标系"></a>世界坐标系</h4><blockquote><p>全局坐标系</p></blockquote><ul><li>唯一切固定不变</li><li>建立了描述其他坐标系所需的参考和框架，即可以用世界坐标系描述其他坐标系，但是不能用更大的坐标系描述世界坐标系。</li><li>描述场景内所有物体的<code>位置和方向</code>的基准，可以使用<code>transform.position</code>获取<code>游戏对象的世界坐标</code>。</li></ul><p>因为Unity使用左手坐标系，so：</p><img src="/blog/p/c8a4b253/Unity%E4%BD%BF%E7%94%A8%E5%B7%A6%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB.png" class="" title="Unity使用左手坐标系"><p>在游戏对象的Transform组件中，reset后，此时位置就位于世界坐标系的原点。</p><h4 id="本地坐标系"><a href="#本地坐标系" class="headerlink" title="本地坐标系"></a>本地坐标系</h4><h5 id="本地坐标系-1"><a href="#本地坐标系-1" class="headerlink" title="本地坐标系"></a>本地坐标系</h5><blockquote><p>局部坐标系(模型或物体坐标系)，它是与特定物体相关联的坐标系，每个物体都有，当物体发生平移或旋转时，其本地坐标系也会随之发生平移或旋转。</p></blockquote><p>模型Mesh保存的顶点坐标均为本地坐标系下的坐标；每个模型的本地坐标系的位置和朝向由建模师在建模软件中设定，在<code>引擎中无法修改</code>。</p><p>选中了某个物体后，显示的坐标系就是本地坐标系</p><h5 id="父坐标系"><a href="#父坐标系" class="headerlink" title="父坐标系"></a>父坐标系</h5><p>用于描述物体间相对位置关系。指的是物体父对象的本地坐标系。</p><p>子物体将父物体的坐标点作为自身的坐标原点</p><ul><li>使用<code>transform.localPosition</code>可以获得物体在父物体的本地坐标系中的位置。<ul><li>该物体有父物体，获得其在<code>父物体的本地坐标系中的坐标</code>。</li><li>该物体没有父物体，获得的是<code>该物体在世界坐标系中的坐标</code>。</li></ul></li><li>在Inspector视图中显示的数值为localPosition的值。</li></ul><h5 id="惯性坐标系"><a href="#惯性坐标系" class="headerlink" title="惯性坐标系"></a>惯性坐标系</h5><p>惯性坐标系是为了简化从世界坐标系到本地坐标系的转换而引入的一种新坐标系。<br>惯性坐标系的原点和本地坐标系的原点重合，但惯性坐标系的坐标轴平行于世界坐标系的坐标轴。</p><img src="/blog/p/c8a4b253/Unity%E6%83%AF%E6%80%A7%E5%9D%90%E6%A0%87%E7%B3%BB.png" class="" title="Unity惯性坐标系"><h4 id="屏幕坐标系"><a href="#屏幕坐标系" class="headerlink" title="屏幕坐标系"></a>屏幕坐标系</h4><blockquote><p>建立在屏幕上的二维坐标系。</p></blockquote><p>Unity的屏幕坐标系以屏幕左下角对应坐标系的原点，屏幕水平方向对应坐标系的X轴，屏幕垂直方向对应坐标系的Y轴。</p><p>坐标以像素来定义：</p><ul><li>屏幕的左下角坐标为(0，0)</li><li>右上角坐标为(Screen.width，Screen.height)</li><li>Z轴的坐标是摄像机的世界坐标系中的Z轴坐标的负值。<img src="/blog/p/c8a4b253/Unity%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E7%B3%BB.png" class="" title="Unity屏幕坐标系"></li></ul><p><code>鼠标位置坐标</code>属于屏幕坐标，通过<code>Input.MousePosition</code>可以获得该位置的坐标。<br><code>手指触摸屏幕</code>属于屏幕坐标，通过<code>Input.GetTouch(0).position</code>可以获得单个手指触摸屏幕时手指的坐标。</p><h4 id="视口坐标系"><a href="#视口坐标系" class="headerlink" title="视口坐标系"></a>视口坐标系</h4><blockquote><p>视口坐标系主要用在摄像机显示中，可以在摄像机的属性窗口中看到。</p></blockquote><p>视口坐标系是将Game视图的屏幕坐标系单位化，即标准化之后的屏幕坐标。视口坐标与屏幕坐标的属性相同。其范围是左下角为起点(0，0)，右上角为终点(1，1)，其余与屏幕坐标同理。</p><p>利用比例可以控制点在屏幕内的位置，而不用关注屏幕实际大小的变化，常用于自适应。例如</p><ul><li>Camera的世界坐标是(0，0，-10)，屏幕大小为800像素×600像素，则屏幕的中间点的视口坐标为(0.5，0.5，10)。</li></ul><p>视口坐标系对于场景的显示非常重要，当使用多个摄像机在同一个场景中显示多个视口时，需要使用视口坐标系。一个摄像机对应一个视口，视口预览展示了摄像机看到的所有物体，其默认大小是Width&#x3D;1、Height&#x3D;1，位置也是从0到1，即左下角为(0，0)，右上角为(1，1)。</p><p>摄像机前面的长方形框为视口。视口坐标与屏幕坐标一致，指向为Z轴正方向，Z轴的坐标是摄像机的世界坐标系中的Z轴坐标的负值。</p><img src="/blog/p/c8a4b253/Unity%E8%A7%86%E5%8F%A3%E5%9D%90%E6%A0%87%E7%B3%BB.png" class="" title="Unity视口坐标系"><h4 id="坐标系的转换"><a href="#坐标系的转换" class="headerlink" title="坐标系的转换"></a>坐标系的转换</h4><p><code>世界坐标系</code>和<code>本地坐标系</code>的相互转换函数如下。</p><ul><li>Transform.TransformPoint(Vector3 position)：将一个坐标点从本地坐标系转换到世界坐标系。</li><li>Transform.InverseTransformPoint(Vector3 position)：将一个坐标点从世界坐标系转换到本地坐标系。</li><li>Transform.TransformDirection(Vector3 direction)：将一个方向从本地坐标系转换到世界坐标系。</li><li>Transform.InverseTransformDirection(Vector3 direction)：将一个方向从世界坐标系转换到本地坐标系。</li><li>Transform.TransformVector(Vector3 vector)：将一个向量从本地坐标系转换到世界坐标系。</li><li>Transform.InverseTransformVector(Vector3 vector)：将一个向量从世界坐标系转换到本地坐标系。</li></ul><p>其他常用的一些函数，如Transform.forward()、Transform.right()、Transform.up()，则表示当前物体的本地坐标系的Z轴、X轴、Y轴在世界坐标系中的指向。</p><p><code>屏幕坐标系</code>与<code>世界坐标系</code>的相互转换函数如下。</p><ul><li>Camera.ScreenToWorldPoint(Vector3 position)：将屏幕坐标系转换为世界坐标系。</li><li>Camera.WorldToScreenPoint(Vector3position)：将世界坐标系转换为屏幕坐标系。</li></ul><p><code>屏幕坐标系</code>与<code>视口坐标系</code>的相互转换函数如下。</p><ul><li>Camera.ScreenToViewportPoint(Vector3 position)：将屏幕坐标系转换为视口坐标系。</li><li>Camera.ViewportToScreenPoint(Vector3 position)：将视口坐标系转换为屏幕坐标系。</li></ul><p><code>世界坐标系</code>与<code>视口坐标系</code>的相互转换函数如下。</p><ul><li>Camera.WorldToViewportPoint(Vector3 position)：将世界坐标系转换为视口坐标系。</li><li>Camera.ViewportToWorldPoint(Vector3 position)：将视口坐标系转换为世界坐标系。</li></ul><h4 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>在空间中，向量用一段有方向的线段来表示，可以用于描述具有大小和方向的物理量</p><ul><li>物体运动的速度</li><li>加速度</li><li>摄像机观察方向</li><li>刚体受到的力等</li></ul><p>向量是物理、动画、三维图形的基础。</p><p>在数学中，向量(Vector3)也被称为矢量，是指具有大小和方向的量。</p><ul><li>向量的长度，也被称为“模”，也是向量的大小。</li><li>向量的方向描述了空间中向量的指向。</li></ul><p>在Unity中，点和向量都是以(x，y，z)的形式表示的。向量有两种类型</p><ul><li>Vector2(2D)</li><li>Vector3(3D)</li></ul><p>实际应用：</p><ul><li>设置某个物体的位置，使用 <code>Vector类型</code></li><li>物体沿着某个方向以某个速度移动，使用 <code>Vector类型</code> 表示速度的向量值，即速度的大小和方向</li><li>计算两个物体之间的距离，可以计算两个物体之间为起始和终点的向量的长度<br>TODO 待补充实际代码</li></ul><p><code>transform.position</code> 表示一个点，即物体在世界坐标系中的点。<br><code>transform.forward</code> 表示一个向量，即当前物体的本地坐标系的z轴在世界坐标系中的指向。</p><h5 id="向量运算"><a href="#向量运算" class="headerlink" title="向量运算"></a>向量运算</h5><p>向量的头是线的初始位置<br>向量的尾是线的结束为止(箭头)</p><p><strong>加法</strong></p><blockquote><p>从几何学的角度可以被理解成平移向量</p></blockquote><img src="/blog/p/c8a4b253/Unity%E5%90%91%E9%87%8F%E5%8A%A0%E6%B3%95.png" class="" title="Unity向量加法"><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向量加法</span></span><br><span class="line">Vector3 v1 = <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">Vector3 v2 = <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">Vector3 v3 = v1 + v2; <span class="comment">// TODO 答案待验证 v3(2,0,0)</span></span><br></pre></td></tr></table></figure><ul><li>如果v1和v2都表示一个点，v3就是<code>从原点指向v3</code>的一个带有箭头的射线，此时v3就是一个向量；</li><li>如果v1和v2都表示一个向量，v3是一个<code>从v1的尾部指向v2的头部</code>的一个向量。</li></ul><p>用法：</p><ul><li>计算物体移动位置</li></ul><p><strong>减法</strong></p><blockquote><p>从几何学的角度可以被理解成平移负向量。不满足交换律，即a-b !&#x3D; (b-a)</p></blockquote><img src="/blog/p/c8a4b253/Unity%E5%90%91%E9%87%8F%E5%87%8F%E6%B3%95.png" class="" title="Unity向量减法"><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向量减法</span></span><br><span class="line">Vector3 v1 = <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Vector3 v2 = <span class="keyword">new</span> Vector3(<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">Vector3 v3 = v2 - v1; <span class="comment">// TODO 答案待验证 v3(3,0,-2.0)</span></span><br></pre></td></tr></table></figure><ul><li>如果v1和v2都表示一个点，v3就是<code>从v1开始指向v2</code>的一个带有箭头的射线，此时v3就是一个向量；</li><li>如果v1和v2都表示一个向量，v3是一个<code>从v1头部指向v2头部</code>的一个向量。</li></ul><p><strong>数乘(实数与向量相乘)</strong></p><blockquote><p>从几何学的角度可以被理解为沿着原始向量的方向或原始向量的反方向放大或缩小。</p></blockquote><p>数乘可以对向量的长度进行缩放，</p><ul><li>如果实数<code>大于0</code>，则数乘后的向量的方向与原始向量的方向一致，</li><li>如当实数<code>大于1</code>，向量数乘如图(a)所示；</li><li>如果实数<code>小于0</code>，则数乘后的向量的方向和原始向量的方向相反，</li><li>如当实数<code>小于-1</code>，向量数乘如图(b)所示。<img src="/blog/p/c8a4b253/Unity%E5%90%91%E9%87%8F%E6%95%B0%E4%B9%98.png" class="" title="Unity向量数乘"></li></ul><p><strong>点乘</strong></p><blockquote><p>又被称为点积、数量积、内积<br>从几何学的角度可以被理解为一条边向另一条边的投影乘以另一条边的长度。向量的点乘的结果描述了两个向量的“相似”程度，点乘的结果越大，两个向量越相近。<br>运算符 <code>·</code></p></blockquote><p>两个向量的点乘是对应分量乘积的和，其结果是一个标量，数值等于两个向量长度相乘再乘以两者夹角的余弦值。向量的点乘满足交换律，即a·b&#x3D;b·a</p><img src="/blog/p/c8a4b253/Unity%E5%90%91%E9%87%8F%E7%82%B9%E4%B9%98.png" class="" title="Unity向量点乘"><p>用法：</p><ul><li>计算机图形学中，点乘常用来进行<code>方向性判断</code><ul><li>如果两个矢量的点乘<ul><li>&gt;0，他们的方向相近</li><li>&lt;0，他们的方向相反</li></ul></li></ul></li><li>Unity中，点乘用来判断角度<ul><li><code>计算物体的前进方向</code></li><li><code>计算物体到目标方向的夹角</code><ul><li>利用点乘判断一个多边形是面向摄像机还是背向摄像机</li><li>在计算聚光灯的效果时，根据点乘得到光照效果<ul><li>点乘越大说明夹角越小，则物体离光照的轴线越近，光照越强</li><li>反之，光照越弱</li></ul></li></ul></li></ul></li></ul><p><strong>叉乘</strong></p><blockquote><p>从几何学的角度可以被理解为两个向量叉乘得到一个新的向量，新向量垂直于原来的两个向量。<br>运算符 <code>*</code><br>仅用于3D向量</p></blockquote><p>如果两个向量a和b在同一个平面中，则向量a×b垂直于a和b，指向符合左手定则，其模是以两个向量为边的平行四边形的面积。<br>  <img src="/blog/p/c8a4b253/Unity%E5%90%91%E9%87%8F%E5%8F%89%E4%B9%98.png" class="" title="Unity向量叉乘"></p><p>axb叉乘 类似于 左手坐标系的z轴，仅用于3D向量</p><p>用法：(通常用于<code>判断方向</code>)</p><ul><li>判断角色是顺时针转动还是逆时针转动 才能更快的转向敌人。 <ul><li>当一个敌人在你身后时，利用叉乘可以判断是往左转还是往右转才能更快的转向敌人，点乘得到当前面朝向的方向和你到敌人的方向所成角度的大小</li></ul></li></ul><h5 id="Vector3"><a href="#Vector3" class="headerlink" title="Vector3"></a>Vector3</h5><blockquote><p>三维向量表示3D向量和点，既包含位置、方向(朝向)、欧拉角等信息，也包含普通向量运算的函数。</p></blockquote><p>Vector3三维向量可以表示位置、方向，3D向量的长度&#x3D;向量的大小&#x3D;向量的模&#x3D;向量各分量平方和的平方根。</p><p>在三维坐标系中，分别取与X轴、Y轴、Z轴方向相同的3个单位向量i、j、k作为一组基底。若a为该坐标系内的任意向量，以坐标原点O为起点向P点作向量OP&#x3D;a。a&#x3D;向量OP&#x3D;xi+yj+zk，把实数对(x，y，z)被称为向量a的坐标，记作a&#x3D;(x，y，z)，这就是向量a的坐标的表示。其中，(x，y，z)是点P的坐标，向量OP被称为点P的位置向量。</p><p>在Unity中，Vector3的常用属性如下。</p><ul><li>Vector3.zero：表示3D零向量，是Vector3(0，0，0)的简码。</li><li>forward：表示3D向量的前方，是Vector3(0，0，1)的简码，即面向Z轴。</li><li>right：表示3D向量的右方，是Vector3(1，0，0)的简码，即面向X轴。</li><li>up：表示3D向量的上方，是Vector3(0，1，0)的简码，即面向Y轴。</li><li>one：是Vector3(1，1，1)的简码。</li></ul><p>Vector3还有很多常用函数和方法，如</p><ul><li>Lerp()(两个向量之间的线性插值)、</li><li>Slerp()(两个向量之间的球形插值)、</li><li>MoveTowards()(由当前地点移向目标)、</li><li>RotateTowards()(将当前的向量转向目标)、</li><li>SmoothDamp()(随着时间的推移，逐渐改变一个向量朝向预期的目标)、</li><li>Distance()(返回a和b之间的距离)等。</li></ul><p>另外，在Unity中，有时会用到Vector2和Vector4</p><ul><li>Vector2表示二维向量，用于表示2D的位置和向量，如网格中的纹理坐标或材质中的纹理偏移等。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对应坐标系 上下左右</span></span><br><span class="line">Vector2.down = Vector2(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">Vector2.up = Vector2(<span class="number">0</span>, <span class="number">1</span>) </span><br><span class="line">Vector2.left = Vector2(<span class="number">-1</span>, <span class="number">0</span>)</span><br><span class="line">Vector2.right = Vector2(<span class="number">1</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li>Vector4表示四维向量，如网格切线、着色器的参数等。</li></ul><p>这两种向量的操作与Vector3基本类似.</p><!-- 补充： --><h4 id="欧拉角和四元数"><a href="#欧拉角和四元数" class="headerlink" title="欧拉角和四元数"></a>欧拉角和四元数</h4><p>在特定的坐标系中，描述物体的方位一般需要说明物体的位置和朝向。</p><ul><li>描述物体的位置实际上就是描述物体相对于给定参考点(通常是坐标系原点)的位移</li><li>描述物体的朝向就是描述相对于已知朝向(通常为“单位”朝向)的旋转，旋转的量被称为角位移。</li></ul><p>在图形学中，<strong>描述物体方位</strong>的常见方法有<code>矩阵</code>、<code>欧拉角</code>和<code>四元数</code>，这3种方法各有各的优点和不足，可以在不同的场合使用不同的方法。</p><h5 id="欧拉角"><a href="#欧拉角" class="headerlink" title="欧拉角"></a>欧拉角</h5><p>欧拉角的基本思想是 将角位移分解为绕3个互相垂直轴的3个旋转组成的序列，即按照一定的坐标轴顺序(一般为先Z轴，再X轴，最后Y轴)绕每个轴旋转一定的角度来变换坐标或向量，实际上是一系列绕坐标轴旋转的组合。</p><p>欧拉角在表现形式上是一个三维向量，每个分量的值分别表示<code>物体绕坐标系对应轴的旋转角度</code>。</p><p>Unity中，所有物体都会绑定Transform组件，Rotation属性对应的就是该游戏对象方位的欧拉角表示。描述了 <code>该游戏对象相对于副坐标系的方位</code>。<br>Transform组件：</p><ul><li>Position 本地坐标系(位置)</li><li>Potation 欧拉角表示(方位)</li></ul><img src="/blog/p/c8a4b253/Unity%E6%AC%A7%E6%8B%89%E8%A7%92x.png" class="" title="Unity欧拉角x"><p>Unity中规定了一组欧拉旋转是按照Z→X→Y的顺序进行的。</p><ul><li>一次旋转 和 多次旋转的结果是不同的。因为在一组欧拉旋转中，相对的轴向不会发生变化。  <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一次旋转</span></span><br><span class="line">transform.Rotate(<span class="number">90</span>, <span class="number">60</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多次旋转，每次旋转后，相对的轴向都发生了变化</span></span><br><span class="line">transform.Rotate(<span class="number">0</span>, <span class="number">0</span>, <span class="number">30</span>);</span><br><span class="line">transform.Rotate(<span class="number">90</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">transform.Rotate(<span class="number">0</span>, <span class="number">60</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul><h5 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h5><p>通过四个数字来表示方位：<code>一个3维向量</code>表示<code>转轴</code>和 <code>一个角度分量</code>表示<code>绕次转轴的旋转角度</code>，所以叫四元数。</p><p>在Unity中：<br><strong>基本的旋转</strong>可以通过 <code>transform.Rotate</code> 实现。但是当需要对旋转角度进行计算时，只使用一个四元数就可以执行<code>绕任意过原点的向量</code>的旋转。</p><p>transform组件有个名为 <code>rotation</code> 的变量，其类型是四元数。<br>不能通过取 rotation的x、y、z对应transform面板中Rotation的各个分量。<br>四元素的x、y、z与 <code>rotation</code> 的三个值并不直接对应，但是可以通过表达式进行转换。</p><p>一个四元数p：</p><ul><li>可以表示为p&#x3D;(xi+yj+zk+w)&#x3D;((x，y，z)，w)&#x3D;(v，w)</li><li>也可以表示为p&#x3D;i(x<em>sin(θ&#x2F;2))+j(y</em>sin(θ&#x2F;2))+k(z*sin(θ&#x2F;2))+cos(θ&#x2F;2)&#x3D;((x，y，z)sinθ&#x2F;2，cosθ&#x2F;2)。<br>其中，v是向量，w是实数，θ为旋转角度。具体来说，它表示空间点P绕着单位向量轴u&#x3D;(x，y，z)表示的旋转轴旋转的角度为θ。</li></ul><p>如使点m&#x3D;Vector3(x，y，z)绕X轴(1，0，0)按顺时针旋转90°，只要有角度，即可给出四元数的4个分量值，则对应的Quaternion数值为如下形式：</p><img src="/blog/p/c8a4b253/Unity%E5%9B%9B%E5%85%83%E6%95%B0Quaternion.png" class="" title="Unity四元数Quaternion"><p>欧拉角与四元数在易读性、易运算性、表示的唯一性等方面各有优点和缺点。</p><p><code>四元数q</code>转换为<code>欧拉角v</code>的转换方法：<code>Vector3 v = q.eulerAngles;</code><br><code>欧拉角v</code>转换为<code>四元数q</code>的转换方法：<code>Quaternion q = Quaternion.Euler(v);</code></p><p><strong>四元数操作</strong></p><blockquote><p>四元数是基于复数</p></blockquote><p>大多数情况下：</p><ul><li>只需要获取和使用现有的旋转，如来自<code>Transform</code>组件</li><li>使用四元数来构造新的旋转，如在两次旋转之间平滑的插值。</li></ul><p>构造器Quaternion();<br>构建方式：</p><ul><li>Quaternion(x,y,z,w); &#x2F;&#x2F; 从四个float类型的参数构建一个新的四元数。</li><li>Quaternion(Vector3, Single); &#x2F;&#x2F; 从指定向量和旋转部分创建四元数。</li></ul><p>参数要求：</p><ul><li>xyzw的取值范围(-1,1)</li></ul><p>物体旋转两周才可以使所有数值回归初始值。<br>例如：<br>如果四元数的初始值为(0,0,0,1)，则分别沿着X轴和Y轴旋转不同的角度后，四元数的变化如下<br>沿着X轴旋转：</p><ul><li>180°(-1，0，0，0)，</li><li>360°(0，0，0，-1)，</li><li>540°(1，0，0，0)，</li><li>720°(0，0，0，1)。</li></ul><p>沿着Y轴旋转：</p><ul><li>180°(0，1，0，0)，</li><li>360°(0，0，0，-1)，</li><li>540°(0，-1，0，0)，</li><li>720°(0，0，0，1)。</li></ul><p>运算符<br>四元素的运算符主要有三个</p><ul><li>!&#x3D; 判断两个四元数是否不相等</li><li>&#x3D;&#x3D; 判断两个四元数是否相等</li><li>* 和平两个旋转</li></ul><p>四元数与 <code>方向向量</code> 相乘，必须是四元数右乘方向向量，即将四元数至于方向向量的前面</p><p>在Unity中，Quaternion的乘法操作 <code>*</code> 有以下两种：<br>(1)Quaternion<em>Quaternion，如q&#x3D;t</em>p，表示先将一个点进行t操作旋转，然后进行p操作旋转。其中，p、q、t均为四元数。<br>(2)Quaternion<em>Vector3，如q&#x3D;t</em>p，表示将点p进行t操作旋转。其中，q、t为四元数，p为方向向量。</p><p>如下代码用于计算结果向量的值：</p><img src="/blog/p/c8a4b253/Unity%E5%9B%9B%E5%85%83%E6%95%B0%E4%B9%98%E6%B3%95%E8%AE%A1%E7%AE%97.png" class="" title="Unity四元数乘法计算"><p>在上面的代码中，向量forward包含的初始值为(0，0，1)，如绕Y轴旋转90°，即向量按照顺时针方向旋转90°。</p><p>因此，resultA的值为(1，0，0)，resultB的值为(0，0，-1)，resultC的值同样为(0，0，-1)。需要注意的是，四元数是可以叠加运算的。</p><p>静态方法<br>Quaternion类中的静态方法主要有</p><ul><li>Angle()方法、</li><li>AngleAxis()方法、</li><li>Dot()方法、</li><li>Euler()方法、</li><li>LookRotation()方法、</li><li>FromToRotation()方法、</li><li>Inverse()方法、</li><li>Lerp()方法、</li><li>RotateToWards()方法</li><li>Slerp()方法。</li></ul><p>静态方法可以直接通过类名调用，如Quaternion.Angle(q1，q2)。下面对常用的静态方法进行分析。</p><ol><li>Angle()方法声明形式如下：<br><code>public static float Angle(Quaternion a, Quaternion b);</code><br>功能：计算两个旋转之间的夹角，与Vector3.Angle()的作用相同。</li><li>AngleAxis()方法声明形式如下：<br><code>public static Quaternion AngleAxis(float angle, Vector3 axis);</code><br>功能：构建一个四元数，表示沿着一个轴旋转固定的角度，即绕axis轴旋转angle，创建一个旋转。其参数是旋转的角速度和轴方向(向量)。</li><li>Euler()方法声明形式如下：<br><code>public static Quaternion Euler(float x, float y, float z);</code><br>或者<br><code>public static Quaternion Euler(Vector3 euler);</code><br>功能：返回一个旋转角度，绕Z轴旋转z°，绕X轴旋转x°，绕Y轴旋转y°(默认顺序为Z轴→X轴→Y轴)，即返回一个四元数，该四元数表示欧拉旋转后的朝向。</li><li>LookRotation()方法声明形式如下：<br><code>public static Quaternion LookRotation(Vector3 forward, [DefaultValue(&quot;Vector3.up&quot;)] Vector3 upwards);</code><br>功能：返回一个四元数，使用前方和上方矢量确定朝向，即创建一个有具体的forward方向和upward方向的旋转。这个功能很实用，传入的两个参数分别代表前方盯着的方向及自己的上方。如在以下代码中，可以使一个GameObject转动时盯着另一个物体，即当前的object一直盯着target，默认up朝向是Vector3.up，也可以自定义up朝向：<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Transform target;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Vector3 relativePos = target.position - transform.position;</span><br><span class="line">    Quaternion rotation = Quaternion.LookRotation(relativePos);</span><br><span class="line">    transform.rotation = rotation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>FromToRotation()方法声明形式如下：<br><code>public static Quaternion FromToRotation(Vector3 fromDirection, Vector3 toDirection);</code><br>功能：返回从一个方向到另一个方向的旋转，即转一个方向。</li><li>Lerp()方法声明形式如下：<br><code>public static Quaternion Lerp(Quaternion a, Quaternion b, float t);</code><br>功能：返回一个四元数，表示从四元数a到b的线性插值，即线性地从一个角度旋转到另一个角度。插值也就是中间旋转量，a作为起点，此时对应的t为0；b作为终点，此时对应的t为1。当t取0和1之间的小数时，代表中间的插值结果。</li><li>Slerp()方法声明形式如下：<br><code>public static Quaternion Slerp(Quaternion a, Quaternion b, float t);</code><br>功能：通过t值在from和to之间插值，即沿球面线性地从一个角度旋转到另一个角度，其中，旋转匀速增加t。<br>Ler()p方法与Slerp()方法的功能基本相同，Lerp()方法的计算速度快，但是精度较低，如果相对旋转变化量很小，则效果不理想。Slerp()方法的计算精度高，但是运算速度相对较慢。</li></ol><p>思考与练习</p><ol><li>简述笛卡儿坐标系的特点及常用的种类。</li><li>简述Unity中常用的坐标系及其特点。</li><li>简述Unity中常用的向量运算及其特点。</li><li>简述Vector3类型变量的特点及常用的方法。</li><li>简述欧拉角的特点。</li><li>简述四元数的特点及常用的静态方法。</li><li>简述欧拉角与四元数的优点和缺点。</li></ol><h3 id="Unity基本内容"><a href="#Unity基本内容" class="headerlink" title="Unity基本内容"></a>Unity基本内容</h3><h4 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h4><p>推荐使用Unity Hub安装，需要注册Unity账号</p><blockquote><p><a href="https://unity.cn/releases" target="_blank" rel="noopener">https://unity.cn/releases</a></p></blockquote><p>保存Scene场景：File-&gt;save as… -&gt; 输入文件名 保存即可。</p><h4 id="Unity窗口视图"><a href="#Unity窗口视图" class="headerlink" title="Unity窗口视图"></a>Unity窗口视图</h4><p><code>对象</code> 是由 <code>组件</code> 构成的，<code>对象</code> 可以理解为是 <code>组件</code> 的<code>容器</code>。</p><p>所有视图：</p><img src="/blog/p/c8a4b253/Unity%E5%9B%9B%E5%A4%A7%E9%9D%A2%E6%9D%BF.png" class="" title="Unity四大面板"><ul><li><strong>Hierarchy</strong> 层级视图，显示当前场景中所有游戏对象的<code>层级结构</code></li><li><strong>Inspector</strong> 检视视图，显示当前选择游戏对象的<code>相关属性</code>和<code>信息</code><ul><li>Transform 对象的位置、大小、旋转信息</li><li>Scripts 对象脚本，类似剧本</li><li>Camera 对象相机</li></ul></li><li><strong>Scene</strong> 场景视图，用于设置场景以及方式游戏对象，是构建游戏场景的地方<ul><li>Game 游戏视图 游戏开始后，摄像机拍到的景象</li><li>关卡</li></ul></li><li><strong>Project</strong> 工程视图(Packages和Assets)，包含整个工程中所有可用的资源<ul><li>包</li><li>脚本</li><li>字体</li><li>声音</li><li>地图</li></ul></li></ul><p>所有菜单项</p><ul><li>File：Scene和Project的创建、保存以及输出等</li><li>Edit：编辑功能，设置关联环境，控制输入的设置等</li><li>Assets：创建、导入、导出资源，提取预制体，导入C#项目等</li><li>GameObject：创建场景对象和UI，以及调整摄像机视野等</li><li>Component：为对象添加系统提供的组件</li><li>Window：打开各个视图窗口和面板</li><li>Help</li></ul><h4 id="常用工作视图"><a href="#常用工作视图" class="headerlink" title="常用工作视图"></a>常用工作视图</h4><img src="/blog/p/c8a4b253/Unity%E5%B8%B8%E7%94%A8%E5%B7%A5%E4%BD%9C%E8%A7%86%E5%9B%BEScene%E8%A7%86%E5%9B%BE.png" class="" title="Unity常用工作视图Scene视图"><p><strong>Scene视图</strong></p><ul><li>模型(对象)</li><li>摄像机</li><li>光源</li><li>Scene Gizmos工具</li><li><img src="/blog/p/c8a4b253/Unity%E5%B8%B8%E7%94%A8%E5%B7%A5%E4%BD%9C%E8%A7%86%E5%9B%BEScene%E8%A7%86%E5%9B%BE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95.png" class="" title="Unity常用工作视图Scene视图常用操作方法"></li><li><img src="/blog/p/c8a4b253/Unity%E5%B8%B8%E7%94%A8%E5%B7%A5%E4%BD%9C%E8%A7%86%E5%9B%BEScene%E8%A7%86%E5%9B%BE%E5%9C%BA%E6%99%AF%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E6%A0%8F.png" class="" title="Unity常用工作视图Scene视图场景视图控制栏"></li></ul><p><strong>Game游戏视图</strong></p><ul><li>顶部是Game View Control Bar(游戏视图控制条)<ul><li><img src="/blog/p/c8a4b253/UnityGame%E8%AF%95%E5%9B%BE%E9%A1%B6%E9%83%A8.png" class="" title="UnityGame试图顶部"></li><li><img src="/blog/p/c8a4b253/UnityGame%E8%A7%86%E5%9B%BE%E9%A1%B6%E9%83%A8%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D1.png" class="" title="UnityGame视图顶部功能介绍1"></li><li><img src="/blog/p/c8a4b253/UnityGame%E8%A7%86%E5%9B%BE%E9%A1%B6%E9%83%A8%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D2.png" class="" title="UnityGame视图顶部功能介绍2"></li></ul></li></ul><p><strong>Hierarchy层级视图</strong><br>先创建的游戏对象会被后创建的游戏对象遮挡住，从场景中看到的是最后创建的游戏对象<br>Scene视图中的游戏对象会随着Hierarchy视图中游戏对象的添加和删除而不断更新。<br>主要操作功能：</p><ul><li>添加游戏对象</li><li>删除游戏对象</li><li>建立父子关系<ul><li>一个父对象可以有多个子对象</li><li>子对象只能有一个父对象</li><li>对父对象的操作会影响子对象</li><li>对子对象的操作不会影响父对象</li></ul></li></ul><p><strong>Project视图</strong></p><blockquote><p>组织管理文件的模式 与 资源管理模式相同：对各种资源采用分类管理</p></blockquote><p>如果需要移动或重新组织项目资源，则在Project视图的项目资源内进行，否者会损坏或删除与该资源相关的原数据和链接，甚至破坏项目</p><p><strong>Inspector视图</strong></p><blockquote><p>显示和设置游戏对象的属性、添加代码或组件等</p></blockquote><p>组件以及部分属性：</p><img src="/blog/p/c8a4b253/UnityInspector%E8%A7%86%E5%9B%BE%E9%83%A8%E5%88%86%E7%BB%84%E4%BB%B6%E5%92%8C%E5%B1%9E%E6%80%A7.png" class="" title="UnityInspector视图部分组件和属性"><ul><li>Transform<ul><li>Position：本地坐标系</li><li>Rotation：方位信息(欧拉角)</li><li>Scale：缩放</li></ul></li><li>Mesh Filter：网格过滤器<ul><li>从资源中获取Mesh(网格)，并将其传递给网格渲染器(Mesh Renderer)，以便在屏幕上渲染。</li></ul></li><li>Mesh Collider：Mesh碰撞体，为了防止物体被穿透，需要为对象添加碰撞体。</li><li>Mesh Renderer组件：网格渲染器，从网格过滤器获得几何形状，并且根据游戏对象的Transform组件定义的位置进行渲染。<ul><li>Materials属性：设置游戏对象的颜色、贴图等信息。</li></ul></li></ul><p><strong>Console面板</strong></p><blockquote><p>调试工具，显示程序运行时产生的调试信息</p></blockquote><img src="/blog/p/c8a4b253/UnityConsole%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.png" class="" title="UnityConsole调试工具"><p>每条信息前面的图标可以显示信息的种类：</p><ul><li><p>白色叹号是正常信息；</p></li><li><p>黄色三角形是警告信息，不影响运行；</p></li><li><p>红色叹号是错误报警信息，出现此类信息后，程序<code>无法运行</code>，调试后不再出现此类信息程序才可以运行。</p><p>所以，根据出现的信息种类可以判断信息的处理方式，<code>双击错误信息</code>会<code>直接跳转到脚本代码中出现问题的位置</code>，可以快捷地调试程序。</p></li></ul><h4 id="Unity资源商店-AssetStore"><a href="#Unity资源商店-AssetStore" class="headerlink" title="Unity资源商店 AssetStore"></a>Unity资源商店 AssetStore</h4><blockquote><p>Windows -&gt; Asset Store 命令直接访问 或者”Ctrl+9”组合键访问</p></blockquote><p>汇集了丰富的<code>插件资源</code>和<code>游戏素材资源</code>，在创建游戏时，通过资源商店获取资源如：</p><ul><li>任务模型</li><li>动画</li><li>粒子特效</li><li>纹理</li><li>音频特效</li><li>各类扩展插件</li></ul><p>同时开发者可以在资源商店出售或免费提供自己的资源。</p><p>资源安装流程：</p><ol><li>选择对应的资源</li><li>点击下载</li><li>导入(Import Unity Package)</li></ol><h3 id="Unity脚本开发技术"><a href="#Unity脚本开发技术" class="headerlink" title="Unity脚本开发技术"></a>Unity脚本开发技术</h3><h4 id="脚本简介"><a href="#脚本简介" class="headerlink" title="脚本简介"></a>脚本简介</h4><blockquote><p>脚本可以被理解为 <code>附加在游戏对象上</code>的<code>用于定义游戏对象的行为</code>的<code>指令代码</code>，必须绑定在游戏对象上才能开始它的生命周期。</p></blockquote><p>游戏吸引人的地方在于它的<code>可交互性</code>，Unity的<code>游戏交互</code>通过<code>脚本编程</code>来实现。</p><p>通过脚本，开发者可以控制每个游戏对象的创建、销毁，以及游戏对象在各种情况下的行为，进而实现预期的交互效果。</p><p>Unity集成了开源的脚本编辑器<code>MonoDevelop</code>，它具有使用简便、跨平台等特性，是Unity默认的脚本开发工具。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestScript</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1. 最先加载，首先执行，且只执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 第一次enable后执行start，随后不再执行start</span></span><br><span class="line">    <span class="comment">//    同时可以根据程序的逻辑多次调用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 脚本被禁用时调用，当前脚本被禁用后，脚本不在执行任何更新操作</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDisable</span>()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 尽在enable后执行一次，及时后面多次enable，start也不执行</span></span><br><span class="line">    <span class="comment">//    在第一帧更新之前调用Start</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 只要start完成，且当前enable，每帧都执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上图是Unity生命周期调试代码，此脚本被挂载到游戏对象上之后能在控制台上显示调试信息，以此了解事件执行的先后顺序。</p><h5 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h5><p>Unity的脚本语言运行于Mono之上。Mono是一个致力于.NET开源的软件平台，严格来讲是.NET的第三方跨平台实现。Mono旨在使开发人员能够轻松地创建.NET基础的跨平台应用程序。运行于Mono之上的应用可以使用.NET库。</p><p>Unity支持三种脚本语言：</p><ul><li>UnityScript(菜单上显示为JavaScript，是两种不同的语言)</li><li>C#(推荐使用)</li><li>Boo(.net平台的第三方语言，使用群体较小)<br>在一个游戏开发中人员可以使用一种或两种语言来实现脚本的控制。</li></ul><p>Unity 5.x及以上版本，Unity推荐使用C#作为开发语言，并一直延续至今。</p><h5 id="C-简介"><a href="#C-简介" class="headerlink" title="C#简介"></a>C#简介</h5><blockquote><p>一种面向对象的计算机语言</p></blockquote><p>C#本身有很强大的语言特性，语法简单，易学易用，高度面向对象，类型体系完善且安全，能胜任从桌面应用到Web开发等诸多场景。大多数Unity第三方插件都是使用C#编写的，许多商业游戏项目也是使用C#开发的。</p><h5 id="脚本与类、组件、游戏对象之间的关系"><a href="#脚本与类、组件、游戏对象之间的关系" class="headerlink" title="脚本与类、组件、游戏对象之间的关系"></a>脚本与类、组件、游戏对象之间的关系</h5><p>一个Unity脚本对应一个.cs文件扩展名的脚本文件，该文件对应一个C#类。在不考虑创建组件的前提下，C#支持在一个.cs文件中定义多个类或声明一个命名空间。</p><p>一般来讲，一个脚本文件对应一个C#类，但不是所有的C#类都能<code>作为组件挂载到游戏对象上</code>。只有直接或间接<code>继承MonoBehaviour类</code>的脚本，才能被称为<code>组件</code>。所以，Unity组件一定是脚本，但脚本不一定是Unity组件。在一般情况下，组件可以自由调用普通的C#类提供的静态方法。</p><p>Unity组件可以分为<code>系统组件</code>和<code>用户自定义组件</code>。两者均可以直接挂载到游戏对象上。</p><ul><li>系统组件集成于Unity开发环境中，一些常用的组件被整合至Unity标准Asset资源包中</li><li>自定义组件则是用户在开发环境下自行编写的C#脚本。</li></ul><p>Unity组件依附于游戏对象，用于模拟游戏对象的行为。从本质上来说，游戏对象是GameObject类在场景内的实例化，用于充当组件的载体。将一些具有特定功能的代码封装成一个类(组件)，当这个类挂载到某个游戏对象上时，就相当于对此类进行了实例化，挂载了此实例的游戏对象将获得该实例提供的所有功能。<code>挂载组件</code>相当于<code>创建功能实体</code>，<code>添加游戏对象行为</code>。</p><p><code>继承自MonoBehaviour的组件``只能挂载(Add Component)到游戏对象上</code>，其实例化由Unity引擎自动完成。开发人员<code>不能通过new关键字</code>来创建一个组件的实例，虽然这样做可以编译成功，但是执行时会有错误提示。在场景运行状态下，组件的生命周期受限于加载它的游戏对象的生命周期。游戏对象被销毁之后，其挂载的组件的生命周期也随之结束。</p><h4 id="脚本的相关操作"><a href="#脚本的相关操作" class="headerlink" title="脚本的相关操作"></a>脚本的相关操作</h4><p><strong>创建脚本</strong></p><ul><li>菜单命令法 菜单栏中选择 Assets -&gt; Create -&gt; C# Script</li><li>快捷菜单法 Project视图上房单击Create按钮，或者在视图区右击，选择Create-&gt;C# Script</li><li>游戏对象中添加组件 点击New Script创建</li></ul><p><strong>挂载脚本</strong></p><blockquote><p>仅继承MonoBehaviour类的脚本，即组件</p></blockquote><ol><li>添加组件法<br>  创建脚本后，在Add Component中搜索组件脚本进行挂载</li><li>文件拖动法<br>  创建脚本后，从Project视图中的脚本拖到空白处</li><li>添加脚本代码法<br>  在脚本代码中，通过AddComponent<T>()方法动态添加组件  <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 为当前脚本所依附的游戏对象添加Player组件</span></span><br><span class="line">    AddComponent&lt;Player&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意：</p><ul><li>一般将所有的C#脚本存放在一个单独的文件夹中，如Scripts。</li><li>直接将脚本拖到游戏对象上，运行时脚本就会自动关联该游戏对象。</li><li>脚本在Project视图中显示的名称不包括.cs文件扩展名。类名需要与.cs脚本的名称一致，否则会出现编译错误。所有类继承自MonoBehaviour类。</li><li>挂载的脚本可以通过脚本编辑器随时进行修改、保存，并在Unity编辑器中每隔几秒自动检测更新。如果脚本中存在严重的语法错误，在未更正前错误提示会一直出现在控制台区，并导致该脚本无法挂载到游戏对象上，程序也无法正常启动。</li><li>在Unity场景编辑状态下以拖动方式挂载的脚本会一直保留在Inspector视图中</li><li>在调试状态下挂载的脚本会在调试结束后自动卸载。</li></ul><p><strong>卸载脚本</strong></p><ul><li>Inspector视图 -&gt; 脚本 -&gt; Remove Component</li><li>通过代码卸载<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 销毁组件</span></span><br><span class="line">Destroy(gameObject.GetComponent&lt;Player&gt;());</span><br></pre></td></tr></table></figure></li></ul><p><strong>脚本编译顺序</strong><br>遵循特定的规则，与脚本所在的文件夹位置有关。</p><p>C＃以Assembly(汇编集)为基本单位来组织脚本代码，脚本被编译成的库文件(dll)将在运行时被实时编译执行。库文件之间有加载顺序。后编译的脚本能够引用先编译的脚本，先编译的脚本无法引用后编译的脚本。</p><p>C＃脚本的编译顺序如下。</p><ol><li>所有在Standard Assets、Pro Standard Assets或Plugins中的脚本最先编译。</li><li>所有在Standard Assets&#x2F;Editor、Pro Standard Assets&#x2F;Editor、Plugins&#x2F;Editor中的脚本相继被编译。</li><li>所有在Assets&#x2F;Editor外面的，并且不在(1)、(2)中的脚本相继被编译。</li><li>Assets&#x2F;Editor中的脚本最后被编译。</li></ol><p><strong>脚本执行顺序</strong><br>Unity脚本的执行顺序有一套默认的规则，在特殊情况下也可以根据需要手动定制脚本的执行顺序。注意：这里所说的脚本的执行顺序是指多个脚本之间执行的先后顺序，不单指脚本内部代码的执行顺序(脚本内方法的执行顺序遵循MonoBehaviour类的生命周期规则，方法间的调用顺序并没有改变)。</p><p>默认规则</p><ol><li>单个游戏对象脚本方法的执行顺序按照挂载到该游戏对象的时间先后顺序倒序执行(后挂载的先执行)，而不是按照Inspector视图上显示的上下顺序。当脚本方法执行时，所有脚本初始化阶段的Awake()执行完毕后再执行所有脚本的OnEnable()，然后依次执行Start()、Update()、LateUpdate()，程序运行期间任何脚本被禁用，该脚本的更新将停止。</li><li>当场景中有多个游戏对象时，按照脚本创建在游戏对象上的时间先后顺序(不是上下顺序)倒序初始化(后创建的先初始化)，脚本执行顺序遵循规则(1)，与脚本挂载到哪个游戏对象上无关。未被激活的游戏对象在场景中将不可见，挂载在其上的脚本也不会运行。</li><li>如果游戏对象有子对象，则同样遵循规则(2)。</li><li>单个脚本内部方法的执行顺序如图所示。脚本主要内部方法的执行顺序如下：<ol><li>唤醒(Awake()，仅执行一次)</li><li>→激活(OnEnable())</li><li>→重置(Reset())</li><li>→开始(Start()，仅执行一次)</li><li>→固定更新(FixedUpdate())</li><li>→模拟物理(Physics)</li><li>→触发器(Trigger)的进入、离开等</li><li>→碰撞器(Collision)的进入、离开等</li><li>→刚体(Rigidbody)的位置和旋转的处理</li><li>→鼠标按下、抬起等事件(OnMouse())</li><li>→更新(Update())</li><li>→最后更新(LateUpdate())</li><li>→渲染(Rendering())</li><li>→禁用(OnDisable())</li><li>→销毁(OnDestroy())。  <img src="/blog/p/c8a4b253/Unity%E8%84%9A%E6%9C%AC%E7%BC%96%E8%AF%91%E9%A1%BA%E5%BA%8F-%E9%BB%98%E8%AE%A4%E9%A1%BA%E5%BA%8F.jpeg" class="" title="Unity脚本编译顺序-默认顺序"></li></ol></li></ol><p>手动设置<br>  Unity也提供了用来设置脚本的执行顺序的方法，在菜单栏中选择“Edit→Project Settings→Script Execution Order”命令，即可在Inspector视图中看到Script Execution Order面板。单击右下角的“+”按钮将弹出下拉列表，包括游戏中的所有脚本。单击所需脚本即可把脚本添加至Script Execution Order面板中，如图所示。<br>  <img src="/blog/p/c8a4b253/Unity%E8%84%9A%E6%9C%AC%E7%BC%96%E8%AF%91%E9%A1%BA%E5%BA%8F-%E6%89%8B%E5%8A%A8%E8%AE%BE%E7%BD%AE.jpeg" class="" title="Unity脚本编译顺序-手动设置"></p><p>  脚本添加完毕之后，可以使用鼠标拖动脚本为脚本排序，脚本的位置越靠上，脚本名称后面的数字越小，执行越靠前(这种调整方式仅仅影响不同脚本名称之间的优先级，同名脚本的执行顺序遵循后挂载先执行的堆栈原则)。其中，Default Time表示没有设置执行顺序的那些脚本的执行顺序。</p><h4 id="脚本编辑器"><a href="#脚本编辑器" class="headerlink" title="脚本编辑器"></a>脚本编辑器</h4><p>Unity支持多种外部脚本编辑器</p><ul><li>MonoDevelop编辑器(默认)</li><li>Visual Studio(Mono的替代方案)</li><li>Visual Studio Code(个人推荐)</li><li>Other…</li></ul><h5 id="设置默认编辑器"><a href="#设置默认编辑器" class="headerlink" title="设置默认编辑器"></a>设置默认编辑器</h5><p>Unity 首选项<br>External Tools<br>External Script Editor 选择编辑器</p><h5 id="VSCode编辑器-代码不提示"><a href="#VSCode编辑器-代码不提示" class="headerlink" title="VSCode编辑器 代码不提示"></a>VSCode编辑器 代码不提示</h5><p>Unity版本 2022.2.1f1c1</p><p><strong>安装.net</strong></p><blockquote><p><a href="https://dotnet.microsoft.com/zh-cn/download" target="_blank" rel="noopener">https://dotnet.microsoft.com/zh-cn/download</a> arm64(m1)</p></blockquote><p>选择最新版 M1芯片arm64安装即可，看安装文档是否需要重启。</p><p><strong>安装momo</strong></p><blockquote><p><a href="https://www.mono-project.com/download/stable/" target="_blank" rel="noopener">https://www.mono-project.com/download/stable/</a></p></blockquote><p>选择最新版Visual Studio channel版本，并且重启。</p><p><strong>安装C#扩展</strong></p><blockquote><p>从指定文件安装 <a href="https://github.com/OmniSharp/omnisharp-vscode/releases/tag/v1.23.11" target="_blank" rel="noopener">https://github.com/OmniSharp/omnisharp-vscode/releases/tag/v1.23.11</a></p></blockquote><p>如果出现</p><img src="/blog/p/c8a4b253/OmniShart_requires.png" class="" title="OmniShart_requires"><p>说明当前版本的C#是还未修复的最新版本，需要安装23.11</p><p><strong>设置VSCode</strong><br>user-&gt;settings.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;omnisharp.useGlobalMono&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;omnisharp.useModernNet&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;omnisharp.monoPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Library/Frameworks/Mono.framework/Versions/Current&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>monoPath通过命令<code>which mono</code>查看，但是只能按照上面的Path写，不然第一个VSCode实例是可以运行的，但是第二个实例会报错<br><code>[ERROR] Error: Unable to find Mono. Update the &quot;omnisharp.monoPath&quot; setting to point to the folder containing Mono&#39;s &#39;/bin&#39; folder.</code></p><p><strong>最后</strong><br>删除项目中的 <code>Assembly-CSharp.csproj</code> 和 <code>study_FlappyBird.sln</code> 文件，Unity首选项也可以进行生成。</p><p>彻底退出VSCode、Unity、Unity HUB。</p><p>重新打开即可</p><h4 id="常用命名空间"><a href="#常用命名空间" class="headerlink" title="常用命名空间"></a>常用命名空间</h4><p>TODO…</p><h4 id="MonoBehaviour类"><a href="#MonoBehaviour类" class="headerlink" title="MonoBehaviour类"></a>MonoBehaviour类</h4><h4 id="游戏对象和组件"><a href="#游戏对象和组件" class="headerlink" title="游戏对象和组件"></a>游戏对象和组件</h4><h4 id="常用脚本API"><a href="#常用脚本API" class="headerlink" title="常用脚本API"></a>常用脚本API</h4><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><h3 id="创建基本的3D场景"><a href="#创建基本的3D场景" class="headerlink" title="创建基本的3D场景"></a>创建基本的3D场景</h3><p>游戏对象 和 组件</p><p>预制体</p><p>Runball案例<br>地形</p><h3 id="物理系统"><a href="#物理系统" class="headerlink" title="物理系统"></a>物理系统</h3><p>Rigidbody组件<br>Collider组件<br>Constant Force组件</p><p>Runball案例2<br>Joint组件<br>Cloth组件<br>Character Controller组件</p><h3 id="图形用户界面UGUI"><a href="#图形用户界面UGUI" class="headerlink" title="图形用户界面UGUI"></a>图形用户界面UGUI</h3><p>简介<br>常用组件</p><p>Rect Transform组件<br>UGUI布局组件<br>Runball案例3</p><h3 id="Mecanim动画系统"><a href="#Mecanim动画系统" class="headerlink" title="Mecanim动画系统"></a>Mecanim动画系统</h3><p>介绍</p><p>人性角色动画</p><p>Animator Controller<br>动画混合树<br>Sprite动画剪辑</p><h3 id="导航网格寻路"><a href="#导航网格寻路" class="headerlink" title="导航网格寻路"></a>导航网格寻路</h3><p>介绍</p><ul><li>常见寻路技术概述</li></ul><p>实现导航网格寻路</p><p>导航常用属性概述</p><h3 id="音效系统"><a href="#音效系统" class="headerlink" title="音效系统"></a>音效系统</h3><p>介绍</p><p>音频文件格式<br>Audio Source组件<br>Audio Listener组件<br>空间音效环绕效果案例分析</p><h3 id="全局光照和粒子系统"><a href="#全局光照和粒子系统" class="headerlink" title="全局光照和粒子系统"></a>全局光照和粒子系统</h3><p>全局光照介绍<br>Light光照</p><p>粒子系统</p><h3 id="游戏资源打包与跨平台发布"><a href="#游戏资源打包与跨平台发布" class="headerlink" title="游戏资源打包与跨平台发布"></a>游戏资源打包与跨平台发布</h3><p>AssetBundle概述</p><p>平台发布设置<br>发布到PC<br>发布到Android<br>发布到WebGL</p><h3 id="UGUI综合案例"><a href="#UGUI综合案例" class="headerlink" title="UGUI综合案例"></a>UGUI综合案例</h3><p>介绍与环境搭建</p><p>游戏的开始面板</p><p>游戏的主面板</p><p>游戏的角色面板</p><p>游戏的背包面板</p><p>游戏的关卡选择面板</p><p>游戏的设置面板</p><p>游戏的登录面板</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>网络教程：<br>游戏网络同步 <a href="https://www.bilibili.com/video/BV15P4y1U79G/?p=4&amp;vd_source=508e069b09636e2f68f3ef05a2868539" target="_blank" rel="noopener">https://www.bilibili.com/video/BV15P4y1U79G/?p=4&amp;vd_source=508e069b09636e2f68f3ef05a2868539</a><br>《王者荣耀》2亿用户量的背后：产品定位、技术架构、网络方案等 <a href="http://www.52im.net/thread-1595-1-1.html" target="_blank" rel="noopener">http://www.52im.net/thread-1595-1-1.html</a><br>从《王者荣耀》来聊聊游戏的帧同步 <a href="https://gwb.tencent.com/community/detail/115398" target="_blank" rel="noopener">https://gwb.tencent.com/community/detail/115398</a></p><p>课程：<br>《FPS射击游戏》训练营 <a href="https://ke.qq.com/course/4000336#term_id=105639476" target="_blank" rel="noopener">https://ke.qq.com/course/4000336#term_id=105639476</a><br>Unity3D(U3D)从零打造王者荣耀 - 钻石班 <a href="https://ke.qq.com/course/260595#term_id=100574690" target="_blank" rel="noopener">https://ke.qq.com/course/260595#term_id=100574690</a><br>Unity3D(U3D)从零打造王者荣耀 - 王者班 <a href="https://ke.qq.com/course/260601#term_id=100573021" target="_blank" rel="noopener">https://ke.qq.com/course/260601#term_id=100573021</a><br>P2【商业级MMORPG大型网游】Unity全栈开发 <a href="https://ke.qq.com/course/329046#term_id=100390455" target="_blank" rel="noopener">https://ke.qq.com/course/329046#term_id=100390455</a></p><p>Unity Asset Store Packages：<br>Easy Touch Controls 摇杆 <a href="https://assetstore.unity.com/packages/tools/input-management/easy-touch-controls-28118#content" target="_blank" rel="noopener">https://assetstore.unity.com/packages/tools/input-management/easy-touch-controls-28118#content</a><br>其他 <a href="https://assetstore.unity.com/?on_sale=true&amp;q=FPS&amp;orderBy=1" target="_blank" rel="noopener">https://assetstore.unity.com/?on_sale=true&amp;q=FPS&amp;orderBy=1</a></p><p>Blender(uv editing 角色、枪械、地图) <a href="http://www.baidu.com/link?url=CYr_XnWcJw26dpGc_1Lgqm5nDCwJxJYnchlpZOA-7UXQXqttk--wSzzujQt7lCL0QfOuFEr6YmZBubtWk51g6K" target="_blank" rel="noopener">http://www.baidu.com/link?url=CYr_XnWcJw26dpGc_1Lgqm5nDCwJxJYnchlpZOA-7UXQXqttk--wSzzujQt7lCL0QfOuFEr6YmZBubtWk51g6K</a></p><p>游戏设计(色彩、音乐)<br><a href="https://www.youtube.com/watch?v=gTZT8GE5928" target="_blank" rel="noopener">https://www.youtube.com/watch?v=gTZT8GE5928</a><br><a href="https://github.com/FlowingSPDG/CS-GO-Observer-Unity-HUD" target="_blank" rel="noopener">https://github.com/FlowingSPDG/CS-GO-Observer-Unity-HUD</a></p><p>音效 <a href="https://www.imphenzia.com/files/file-list-game-ready-blasters.pdf" target="_blank" rel="noopener">https://www.imphenzia.com/files/file-list-game-ready-blasters.pdf</a></p><p>网络：<br><a href="https://blog.theknightsofunity.com/steamworks-and-unity-p2p-multiplayer/" target="_blank" rel="noopener">https://blog.theknightsofunity.com/steamworks-and-unity-p2p-multiplayer/</a><br><a href="https://steamworks.github.io/installation/" target="_blank" rel="noopener">https://steamworks.github.io/installation/</a></p><p>7小时 fps：<br><a href="https://www.youtube.com/watch?v=WxqsIGeCxg0" target="_blank" rel="noopener">https://www.youtube.com/watch?v=WxqsIGeCxg0</a><br><a href="https://www.youtube.com/watch?v=WxqsIGeCxg0&amp;t=54s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=WxqsIGeCxg0&amp;t=54s</a></p><h3 id="多人FPS-15年"><a href="#多人FPS-15年" class="headerlink" title="多人FPS 15年"></a>多人FPS 15年</h3><blockquote><p><a href="https://www.youtube.com/watch?v=-m28axeuRNs&amp;list=PLPV2KyIb3jR5PhGqsO7G4PsbEC_Al-kPZ&amp;index=3" target="_blank" rel="noopener">https://www.youtube.com/watch?v=-m28axeuRNs&amp;list=PLPV2KyIb3jR5PhGqsO7G4PsbEC_Al-kPZ&amp;index=3</a></p></blockquote><p>了解如何在 Unity 中制作多人第一人称射击游戏。本系列讲授非常酷的 Unity Networking 系统 (uNet)。所有代码完全用 C# 编写。</p><ul><li>初始场景</li><li>网络介绍</li><li>同步运动</li><li>Flying</li><li>射击</li><li>重复创建Respawn</li><li>玩家模型</li><li>十字准线</li><li>Gun GFX</li><li>Rapid Fire</li><li>错误修复</li><li>加入连接</li><li>断开连接</li><li>用户账户</li><li>获取数据</li><li>发送数据</li><li>光标锁定</li><li>记分牌</li></ul><h3 id="生成地形程序-17年"><a href="#生成地形程序-17年" class="headerlink" title="生成地形程序 17年"></a>生成地形程序 17年</h3><blockquote><p><a href="https://www.youtube.com/playlist?list=PLFt_AvWsXl0eBW2EiBtl_sxmDtSgZBxB3" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLFt_AvWsXl0eBW2EiBtl_sxmDtSgZBxB3</a></p></blockquote><p>章节：</p><ul><li>八度</li><li>颜色</li><li>网格</li><li>LOD</li><li>无尽地形</li><li>现成</li><li>LOD切换</li><li>接缝</li><li>衰减贴图</li><li>法线</li><li>碰撞</li><li>平面着色</li><li>数据存储</li><li>颜色着色器</li><li>纹理着色器</li><li>修复和优化</li><li>重构</li><li>修复间隙</li></ul><h3 id="2D平台游戏-15年"><a href="#2D平台游戏-15年" class="headerlink" title="2D平台游戏 15年"></a>2D平台游戏 15年</h3><blockquote><p><a href="https://www.youtube.com/playlist?list=PLPV2KyIb3jR42oVBU6K2DIL6Y22Ry9J1c" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLPV2KyIb3jR42oVBU6K2DIL6Y22Ry9J1c</a></p></blockquote><p>章节：</p><ul><li>视差滚动</li><li>平铺</li><li>Character</li><li>动画</li><li>摄像</li><li>Bullet Trail</li><li>Muzzle Flash</li><li>玩家生命</li><li>ReSpawning</li><li>重生效果</li><li>敌人AI</li><li>敌人</li><li>拍摄GFX</li><li>Camera Shake</li><li>敌人枪</li><li>Enemy Attack攻击</li><li>GUI</li><li>游戏结束</li><li>MENU</li><li>音效管理</li><li>升级-&gt;4.0</li></ul><h3 id="在线多人游戏01-2022"><a href="#在线多人游戏01-2022" class="headerlink" title="在线多人游戏01 2022"></a>在线多人游戏01 2022</h3><blockquote><p><a href="https://www.youtube.com/watch?v=stJ4SESQwJQ" target="_blank" rel="noopener">https://www.youtube.com/watch?v=stJ4SESQwJQ</a></p></blockquote><p>章节：</p><ul><li>0:00介绍</li><li>0:20安装</li><li>1:00并行同步</li><li>1:26网络管理员</li><li>1:45统一传输层</li><li>2:18播放器预制件&#x2F;网络对象</li><li>4:09什么是主机、服务器和客户端？</li><li>6:15只控制你的本地对象</li><li>7:40使用 ClientNetworkTransform 同步数据</li><li>8:30使用 NetworkVariable 手动序列化</li><li>11:25使用 INetworkSerializable 自定义网络序列化</li><li>14:10插值网络运动（乡巴佬风格）</li><li>14:33减少网络流量</li><li>15:30使用 ServerRPC 调用服务器代码</li><li>17:00服务器与客户端权限</li><li>19:45添加模拟延迟</li><li>20:45让服务器权限感觉良好的技巧</li><li>21:35订阅网络变化</li></ul><h2 id="good-project-构思"><a href="#good-project-构思" class="headerlink" title="good project 构思"></a>good project 构思</h2><p>前提：</p><ul><li>可以与抖音有趣的梗结合<ul><li>跑酷 意外从高处掉下，带着摄像机拍下了过程 神评：”带我死的你还是第一个”</li></ul></li></ul><h3 id="1-双人情侣类"><a href="#1-双人情侣类" class="headerlink" title="1.双人情侣类"></a>1.双人情侣类</h3><blockquote><p>需要提前解剖双人成行游戏</p></blockquote><p>剖析：<br>叙事<br>互动叙事类游戏<br>家庭关系<br>夫妻关系<br>爱情与亲情<br>父母与孩子<br>NPC哈金博士：它主张“爱治愈一切”，并且回应了小女孩的期待，帮助修复父母之间的关系。<br>游戏弱化了小梅和科迪的争吵与分歧，利用一些矛盾点作为开端，引出一系列有趣的交互行为，在有意无意间转移了玩家的关注点，开始专心钻研合作事宜。<br>可以作妖<br>故地重游，做一些能够挽救这段感情的互动<br>合理的分配故事情节，比如故事剧情整体较为平缓，一共两个有起伏转折点：一个是游戏途中小梅和科迪破坏小象玩具，另一个是接近尾声时女儿做出的离家决定。这两个设定都正好出现在一系列的闯关内容之后，彼时玩家正好从需要花精力的配合中脱离出来，想要享受片刻安宁：比如终于到达了小象的城堡里，比如终于破解了咒语返回现实。</p><p>丛林中手持 喷射油和火药，与松鼠战斗。</p><p>融入</p><p>双人互动 最大化游戏乐趣<br>走心<br>配合解密，分工差异</p><ul><li><p>远战和近战</p></li><li><p>情侣 懵懂</p></li><li><p>情侣 相处</p></li><li><p>结婚</p></li><li><p>情侣 孩子</p></li><li><p>1</p></li></ul><h2 id="Game-Jam-极限开发"><a href="#Game-Jam-极限开发" class="headerlink" title="Game Jam 极限开发"></a>Game Jam 极限开发</h2><blockquote><p>重在学习、练习、实验、挑战自我、与新伙伴合作、尝试新点子，而不全是为了奖品和荣誉。<br>迅速开发，能跑就行，后期优化</p></blockquote><h3 id="游戏类型："><a href="#游戏类型：" class="headerlink" title="游戏类型："></a>游戏类型：</h3><blockquote><p><a href="https://baike.baidu.com/item/%E6%B8%B8%E6%88%8F%E5%88%86%E7%B1%BB/7690482" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%B8%B8%E6%88%8F%E5%88%86%E7%B1%BB/7690482</a></p></blockquote><ul><li>RPG：角色扮演游戏，由玩家扮演游戏中的一个或数个角色，有完整的故事情节的游戏，RPG更强调的是剧情发展和个人体验<ol><li>最终幻想</li><li>仙剑奇侠穿</li><li>暗黑破坏神</li></ol></li><li>ACT：动作游戏，玩家控制游戏人物用各种武器消灭敌人以过关的游戏，不追求故事情节<ul><li>魂斗罗</li><li>三国志</li><li>鬼泣</li></ul></li><li>AVG：冒险游戏，由玩家控制游戏人物进行虚拟冒险的游戏。与RPG不同的是，AVG的特色是故事情节往往是以完成一个任务或解开某些谜题的形式出现的，而且在游戏过程中刻意强调谜题的重要性。<ul><li>动作类，包含(AAG：动作冒险游戏)<ul><li>生化危机</li><li>古墓丽影</li><li>恐龙危机</li></ul></li><li>解密类<ul><li>神秘岛</li></ul></li></ul></li><li>SLG：策略游戏<ul><li>RTS：即时战略游戏</li><li>MOBA：多人在线战术竞技游戏<ol><li>英雄联盟</li><li>dota</li><li>D10</li></ol></li></ul></li><li>SRPG：模拟类角色扮演游戏</li><li>FTG：格斗游戏</li><li>STG：射击类游戏</li><li>FPS：第一人称视角射击游戏</li><li>TPS：第三人称视角射击游戏</li><li>PZL：益智类游戏</li><li>SPG：体育竞技类游戏</li><li>RCG（RAC）：竞速游戏</li><li>CAG：卡片游戏</li><li>TAB：桌面游戏</li><li>MSC:音乐游戏<ol><li>节奏大师</li></ol></li><li>塔防建造游戏</li></ul><p>开发游戏设计原则：</p><ul><li>多一些恍然大悟的「觉悟时刻」</li><li>游戏上手简易，不能带来太大的负面体验</li></ul><ul><li>创意廉价，宝贵的是实现创意，尤其是创意落地过程中实现程度、细节推敲和权衡<ul><li>客观地舍弃自己非常喜爱但性价比低的设计</li><li>全局视角权衡，夹缝中找到最优解，长远而不是舒服的决策。<br>难点：</li></ul></li></ul><ul><li>设计上：同步PVP体验 提高角色的技能设计</li><li>技术上：实时PVP，模拟物理，物理同步(大问题)，部分地方使用UI、色彩等解决方案。<br>如何学习：</li><li>找到一个靠谱的团队和项目</li></ul><ul><li>找到一个愿意带自己的人很重要</li><li>积极主动，争取机会</li><li>实践为主，多动手自己做</li></ul><p>备考设计功能：</p><ul><li>关卡<ul><li>可以跳过关卡，不以固定顺序游玩</li><li>关卡过渡动画</li></ul></li><li>通过建立一个多行为的脚本，用面板可控的方式，替换掉需要频繁修改多处位置的方式</li><li>Event，例如btn的event中，按钮被按下<ul><li>可以使用<code>onButtonPressed?.Invoke();</code></li><li>然后属性面板中OnButtonPressed()中可以选择，运行Object上附带的函数</li></ul></li><li>通过用户输入*，控制行为</li><li>通过防御进行击杀</li><li>消消乐 例如：游戏Fish</li><li>UI<ul><li>背景图<ul><li>与主题相关的元素</li><li>按键说明</li></ul></li><li>动画场景<ul><li>被攻击动画<ul><li>Player对象 闪烁 3S</li></ul></li><li>过关动画<ul><li>居中 从大到小 抖动 效果</li><li>过关处<ul><li>某个动画</li></ul></li></ul></li><li>升级动画<ul><li>居中 从大到小 抖动 效果</li></ul></li></ul></li></ul></li><li>无法后退的游戏(例如2D游戏)</li><li>2D</li></ul><blockquote><p><a href="https://www.youtube.com/watch?v=3sWTzMsmdx8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=3sWTzMsmdx8</a><br><a href="https://github.com/Matthew-J-Spencer/Ultimate-2D-Controller" target="_blank" rel="noopener">https://github.com/Matthew-J-Spencer/Ultimate-2D-Controller</a></p></blockquote><p>可变跳跃高度(尽早释放跳跃让玩家控制跳跃的高度)</p><blockquote><p>当玩家在你跳跃的顶点释放，跳跃顶点修改器时，通过向角色添加额外的向下力来完成</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fallSpeed = _endedJumpEarly &amp;&amp; _currentVerticalSpeed &gt; <span class="number">0</span> ? _fallSpeed * _jumpEndEarlyGravityModifier : _fallSpeed;</span><br><span class="line">_currentVerticalSpeed -= fallSpeed * Time.deltaTime;</span><br></pre></td></tr></table></figure><p>Apex Modifiers(顶点修改器)</p><blockquote><p>得到一个反作用力的改变以及轻微的速度提升，轻松地降落在想要的地方，这是一个带有夸大值的例子</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">float</span> _apexPoint = Mathf.InverseLerp(_jumpApexThreshold, <span class="number">0</span>, Mathf.Abs(Velocity.y));</span><br><span class="line"><span class="keyword">var</span> apexBonus = Mathf.Sign(Input.x) * _apexBonus * _apexPoint;</span><br><span class="line">_currentHorizontalSpeed += apexBonus * Time.deltaTime;</span><br><span class="line">_fallSpeed = Mathf.Lerp(_minFallSpeed, _maxFallSpeed, _apexPoint);</span><br></pre></td></tr></table></figure><p>Jump Buffering(跳跃缓冲)</p><blockquote><p>带有夸大值，在实际落地之前排队下一次跳跃，这可能是一个好的控制器最重要的隐藏部分<br>如果玩家按下跳跃，角色只是坐在那里</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(_colDown &amp;&amp; _lastJumpPressed + _jumpBuffer &gt; Time.time)&#123;</span><br><span class="line">    <span class="comment">// 跳跃</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Coyote time</p><blockquote><p>离开平台几号秒后执行，离开地面后并检查是否在Coyote阈值内按下跳跃</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Input.JumpDown &amp;&amp; !_colDown &amp;&amp; _timeLeftGrounded + _coyoteTimeThreshold &gt; Time.time)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do more jumpies</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Clamped fall speed</p><blockquote><p>在下降的时候控制，用于轻松躲避或降落在平台</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_currentVerticalSpeed &lt; _fallClamp)</span><br><span class="line">&#123;</span><br><span class="line">    _currentVerticalSpeed = _fallClamp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Edge detection(边缘检测)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_currentVerticalSpeed &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    _currentVerticalSpeed = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dir = transform.position - hit.transform.position;</span><br><span class="line">transform.position += dir.normalized * move.magnitude;</span><br></pre></td></tr></table></figure><p>备考功能：</p><ul><li>控制窗口大小</li><li>攻击<ul><li>攻击<ul><li>单体攻击</li><li>多体攻击(穿透攻击)</li></ul></li><li>攻击类型<ul><li>范围攻击</li><li>连击</li></ul></li><li>其他<ul><li>子弹追踪</li></ul></li></ul></li><li>分数</li><li>血条</li></ul><p>备考实例：</p><ol><li>决定游戏类型</li><li>提前准备固定模板<ol><li>菜单</li><li>屏幕HUD界面</li><li>保存和读取数据<ol><li>同步选项</li><li>追踪进展</li></ol></li><li>支持各种不同的控制器类型<ul><li>不同类型<ol><li>2D</li><li>3D</li><li>双人</li></ol></li><li>不同设备<ol start="4"><li>键盘+鼠标</li><li>滑动控制</li></ol></li></ul></li><li>制作组名单<ol><li>Game Design 游戏设计</li><li>Programming 程序</li><li>Music&#x2F;SFX 音乐&#x2F;特效</li></ol></li></ol></li></ol><h3 id="Game-Jam正式步骤："><a href="#Game-Jam正式步骤：" class="headerlink" title="Game Jam正式步骤："></a>Game Jam正式步骤：</h3><ol><li>决定游戏类型<br>拿到题目，脑子最清醒，有很多想法<br>在非常短的时间内，不要想的很清楚，有个雏形就行，——小会议进行思维碰撞。<br>关卡设计<br>素材+故事<br>设计关卡<br>放出惊喜DEMO</li></ol><p>实战：<br>过场管理器(控制关卡)</p><ul><li>关卡控制<ul><li>擦除现有关卡</li><li>跳转新的关卡<br>音乐管理器</li></ul></li><li>BGM控制<ul><li>随着关卡载入，进行淡入淡出<br>HUD窗口管理器</li></ul></li><li>负责在屏幕上绘制信息<ul><li>教程提示</li><li>根据情况出现按键提示图标</li><li>分数</li><li>开始&#x2F;暂停</li><li>选项菜单<ul><li>设置<ul><li>show particles</li><li>show trails</li><li>screen shake</li><li>low sensitivity aiming</li><li>toggle aim mode on&#x2F;off</li><li>always show arrow when holding magnet</li></ul></li><li>音乐</li><li>手柄</li><li>键盘<ul><li>上下左右</li><li>跳</li></ul></li><li>艺术</li></ul></li></ul></li></ul><p>配置管理器</p><ol><li>设置管理器，对设置进行读取，操控硬盘上的文本读取</li><li>销毁管理器GameObject对象，替换成关卡</li><li>每次开始关卡之前都读取数据</li></ol><h3 id="优质游戏："><a href="#优质游戏：" class="headerlink" title="优质游戏："></a>优质游戏：</h3><h4 id="Vintage-Flashlight"><a href="#Vintage-Flashlight" class="headerlink" title="Vintage Flashlight"></a>Vintage Flashlight</h4><h4 id="Roll-Of-The-Dice-2022GameJam"><a href="#Roll-Of-The-Dice-2022GameJam" class="headerlink" title="Roll Of The Dice 2022GameJam"></a>Roll Of The Dice 2022GameJam</h4><blockquote><p><a href="https://escapadegames.itch.io/roll-of-the-dice" target="_blank" rel="noopener">https://escapadegames.itch.io/roll-of-the-dice</a></p></blockquote><img src="/blog/p/c8a4b253/RollOfTheDice.png" class="" title="RollOfTheDice"><h4 id="Randomancer"><a href="#Randomancer" class="headerlink" title="Randomancer"></a>Randomancer</h4><blockquote><p><a href="https://riuku.itch.io/randomancer" target="_blank" rel="noopener">https://riuku.itch.io/randomancer</a></p></blockquote><p>类似于植物大战僵尸</p><img src="/blog/p/c8a4b253/Randomancer.gif" class="" title="Randomancer">]]></content>
    
    
    <summary type="html">&lt;p&gt;暂无描述&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://ayou129.github.io/blog/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="游戏开发" scheme="https://ayou129.github.io/blog/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Lua</title>
    <link href="https://ayou129.github.io/blog/p/6fbb57c1/"/>
    <id>https://ayou129.github.io/blog/p/6fbb57c1/</id>
    <published>2022-12-09T11:44:01.000Z</published>
    <updated>2022-10-23T10:22:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习一下lua语言，使用到的场景有许多，游戏开发、redis中并发问题。</p><span id="more"></span><h2 id="有关游戏的"><a href="#有关游戏的" class="headerlink" title="有关游戏的"></a>有关游戏的</h2><p>在编写<code>第三人称游戏</code>的开发核心代码时，我们可以考虑以下几个方面：</p><ul><li>使用<code>变量</code>来存储<code>玩家的位置和姿势</code>，并根据键盘或控制器的输入来更新玩家的位置。</li><li>使用<code>函数</code>来封装<code>游戏世界中的各种对象</code>，例如：敌人、道具、建筑物等。</li><li>使用<code>循环</code>来处理<code>游戏世界中各个对象的逻辑</code>，例如：敌人的移动、道具的消失、建筑物的损坏等。</li><li>使用<code>条件语句</code>来处理游戏<code>世界中各种事件的发生</code>，例如：玩家的死亡、敌人的攻击、道具的收集等。</li></ul><p>以下是一段基本的第三人称游戏开发核心代码的例子：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义玩家的位置和姿势变量</span></span><br><span class="line"><span class="keyword">local</span> playerPosition = &#123;x = <span class="number">0</span>, y = <span class="number">0</span>, z = <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">local</span> playerRotation = &#123;x = <span class="number">0</span>, y = <span class="number">0</span>, z = <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义游戏世界中各种对象的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createEnemy</span><span class="params">(position, rotation)</span></span></span><br><span class="line"><span class="keyword">local</span> enemy = &#123;</span><br><span class="line">    position = position,</span><br><span class="line">    rotation = rotation,</span><br><span class="line">    health = <span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> enemy</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createItem</span><span class="params">(position, rotation)</span></span></span><br><span class="line"><span class="keyword">local</span> item = &#123;</span><br><span class="line">    position = position,</span><br><span class="line">    rotation = rotation,</span><br><span class="line">    duration = <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> item</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBuilding</span><span class="params">(position, rotation)</span></span></span><br><span class="line"><span class="keyword">local</span> building = &#123;</span><br><span class="line">    position = position,</span><br><span class="line">    rotation = rotation,</span><br><span class="line">    health = <span class="number">1000</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> building</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 初始化游戏世界中的各种对象</span></span><br><span class="line"><span class="keyword">local</span> enemies = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> items = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> buildings = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 处理游戏世界中各个对象</span></span><br></pre></td></tr></table></figure><h3 id="计算炮弹的轨迹"><a href="#计算炮弹的轨迹" class="headerlink" title="计算炮弹的轨迹"></a>计算炮弹的轨迹</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 炮弹的初始位置</span></span><br><span class="line"><span class="keyword">local</span> bullet_x = <span class="number">10</span></span><br><span class="line"><span class="keyword">local</span> bullet_y = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 炮弹的初始速度和方向</span></span><br><span class="line"><span class="keyword">local</span> bullet_speed = <span class="number">100</span></span><br><span class="line"><span class="keyword">local</span> bullet_angle = <span class="number">45</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 炮弹的重力加速度</span></span><br><span class="line"><span class="keyword">local</span> gravity = <span class="number">9.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算炮弹的位移</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">time</span> = <span class="number">0.1</span></span><br><span class="line">bullet_x = bullet_x + bullet_speed * <span class="built_in">math</span>.<span class="built_in">cos</span>(bullet_angle) * <span class="built_in">time</span></span><br><span class="line">bullet_y = bullet_y + bullet_speed * <span class="built_in">math</span>.<span class="built_in">sin</span>(bullet_angle) * <span class="built_in">time</span> - <span class="number">0.5</span> * gravity * <span class="built_in">time</span> * <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 输出炮弹的新位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bullet_x = &quot;</span> .. bullet_x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bullet_y = &quot;</span> .. bullet_y)</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p><a href="http://www.lua.org/start.html" target="_blank" rel="noopener">http://www.lua.org/start.html</a></p></blockquote><h3 id="MAC源代码编译"><a href="#MAC源代码编译" class="headerlink" title="MAC源代码编译"></a>MAC源代码编译</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl -R -O http://www.lua.org/ftp/lua-<span class="number">5</span>.<span class="number">4</span>.<span class="number">4</span>.tar.gz</span><br><span class="line">tar zxf lua-<span class="number">5</span>.<span class="number">4</span>.<span class="number">4</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> lua-<span class="number">5</span>.<span class="number">4</span>.<span class="number">4</span></span><br><span class="line">make all test</span><br><span class="line"></span><br><span class="line"># 出现这个说明成功</span><br><span class="line">lua -v</span><br><span class="line">Lua <span class="number">5</span>.<span class="number">4</span>.<span class="number">4</span>  Copyright (C) <span class="number">1994</span>-<span class="number">2022</span> Lua.org, PUC-Rio</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">sudo make all install</span><br><span class="line"></span><br><span class="line">lua -v</span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ol><li><a href="https://www.lua.org/download.html" target="_blank" rel="noopener">https://www.lua.org/download.html</a> 选择 <code>Building</code> -&gt; <code>get a binary</code></li><li>Download</li><li>lua-5.4.2_Win64_bin.zip</li><li>Windows 高级系统设置 环境变量 系统变量 Path + <code>C:\Users\lee\lua-5.4.2_Win64_bin</code><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lua54 -v</span><br><span class="line"><span class="meta">&gt;</span> <span class="language-javascript"><span class="title class_">Lua</span> <span class="number">5.4</span><span class="number">.2</span>  <span class="title class_">Copyright</span> (C) <span class="number">1994</span>-<span class="number">2020</span> <span class="title class_">Lua</span>.<span class="property">org</span>, <span class="variable constant_">PUC</span>-<span class="title class_">Rio</span></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>注释</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    多行注释</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>类型和值</p><blockquote><p>使用 type 可以获取 <code>值</code> 对应的类型名称(return string)</p></blockquote><p>8中基本类型</p><ul><li>nil(空，主要作用是和其他值进行区分，初始化的时候会被回收内存)</li><li>boolean</li><li>number</li><li>string</li><li>userdata(用户数据，例如，标准I&#x2F;O库使用用户数据来表示打开的文件)</li><li>function(函数)</li><li>thread(线程)</li><li>table(表)</li></ul><p>数值常量<br>整型 和 浮点型 都是”number”，可以相互转换，也相等</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span> == <span class="number">1.0</span> <span class="comment">--&gt; true</span></span><br><span class="line">&gt; <span class="number">-3</span> == <span class="number">-3.0</span> <span class="comment">--&gt; true</span></span><br><span class="line">&gt; <span class="number">0.2e3</span> == <span class="number">200</span> <span class="comment">--&gt; true</span></span><br></pre></td></tr></table></figure><p>如果要区分整型 和 浮点型，则使用<code>math.type</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">math</span>.<span class="built_in">type</span>(<span class="number">3</span>)  <span class="comment">--&gt; integer</span></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">type</span>(<span class="number">3.0</span>) <span class="comment">--&gt; float</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 幂运算 ^ <span class="keyword">return</span> float</span><br><span class="line">x^<span class="number">0.5</span> 计算x的平方根</span><br><span class="line">x^(<span class="number">1</span>/<span class="number">3</span>) 计算x的立方根</span><br></pre></td></tr></table></figure><p>关系运算</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">== 相等性测试</span><br><span class="line">~= 不等性测试</span><br><span class="line">&lt;=</span><br><span class="line">&gt;=</span><br><span class="line">&gt;</span><br><span class="line">&lt;</span><br></pre></td></tr></table></figure><p>数学库(math)<br>数学函数、<br>指数函数、<br>取整函数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">floor</span> 向负无穷取整</span><br><span class="line"><span class="built_in">ceil</span> 向正无穷取整</span><br><span class="line"><span class="built_in">modf</span> 向零取整，额外返回小数部分</span><br></pre></td></tr></table></figure><p>最大和最小函数maxmin、<br>随机数random</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">random</span>() 不带参数[<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">random</span>() 带<span class="number">1</span>参数：整型，[<span class="number">1</span>,n]</span><br><span class="line"><span class="built_in">random</span>() 带<span class="number">2</span>参数：整型，[n,y]</span><br><span class="line">例子：<span class="built_in">random</span>(<span class="number">6</span>) 模拟筛子</span><br><span class="line"></span><br><span class="line"><span class="built_in">randomseed</span> 设置伪随机数发生器的种子，，通常调用<span class="built_in">math</span>.<span class="built_in">randomseed</span>(<span class="built_in">os</span>.<span class="built_in">time</span>())来使用当前系统时间作为种子初始化随机数发生器</span><br></pre></td></tr></table></figure><p>πpi、<br>huge(最大可表示数值，大多数平台代表inf)</p><p>表示范围</p><table><thead><tr><th>版本</th><th>整型存储</th><th>浮点型存储</th></tr></thead><tbody><tr><td>标准Lua</td><td>64个比特位 最大值是2^63-1</td><td>双精度，64个比特位，11位为指数；16个有效十进制位</td></tr><tr><td>精简Lua</td><td>32个比特位 最大值是2^31-1</td><td>单精度，32个比特位；7个有效十进制位</td></tr></tbody></table><p>双精度浮点数的限制：</p><ul><li>回环</li><li>超过表示范围之后不可控，会导致精度缺失，要谨慎思考所使用的表示方式</li></ul><p>强制转换<br>对于整型 可以使用 + 0.0 强制转换成浮点型</p><p>但是如果精度缺失后，可以使用 与零进行按位或运算，可以讲浮点型强制转换成整型</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="number">2</span>^<span class="number">53</span>         <span class="comment">--&gt; 9.007199254741e+15 (浮点型值)</span></span><br><span class="line">&gt;<span class="number">2</span>^<span class="number">53</span> | <span class="number">0</span>     <span class="comment">--&gt; 9007199254740992 (整型值)</span></span><br></pre></td></tr></table></figure><p>练习：<br>练习3.1：以下哪些是有效的数值常量？它们的值分别是多少？</p><img src="/blog/p/6fbb57c1/3.9%E7%BB%83%E4%B9%A0-%E6%9C%89%E6%95%88%E6%95%B0%E5%80%BC1.png" class="" title="3.9练习-有效数值1.png"><p>练习3.2：解释下列表达式之所以得出相应结果的原因。（注意：整型算术运算总是会回环。）</p><img src="/blog/p/6fbb57c1/3.9%E7%BB%83%E4%B9%A0-%E6%9C%89%E6%95%88%E6%95%B0%E5%80%BC2.png" class="" title="3.9练习-有效数值2.png"><p>练习3.3：下列代码的输出结果是什么？</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">-10</span>, <span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i, i%<span class="number">3</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><img src="/blog/p/6fbb57c1/3.9%E7%BB%83%E4%B9%A0-%E6%9C%89%E6%95%88%E6%95%B0%E5%80%BC3.png" class="" title="3.9练习-有效数值3.png"><h2 id="3-7-运算符优先级"><a href="#3-7-运算符优先级" class="headerlink" title="3.7 运算符优先级"></a>3.7 运算符优先级</h2><p>TODO</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="33-线程和状态"><a href="#33-线程和状态" class="headerlink" title="33 线程和状态"></a>33 线程和状态</h2><p>多线程：共享内存(重点1)的抢占式线程(重点2)</p><p><code>Lua协程</code> 本质就是<code>线程(thread)</code></p><p>lua_pushnumber时 lua_State这些函数的第一个参数，不仅表示的lua状态</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习一下lua语言，使用到的场景有许多，游戏开发、redis中并发问题。&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://ayou129.github.io/blog/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Lua" scheme="https://ayou129.github.io/blog/tags/Lua/"/>
    
    <category term="游戏开发" scheme="https://ayou129.github.io/blog/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>安卓反编译</title>
    <link href="https://ayou129.github.io/blog/p/5001f0a0/"/>
    <id>https://ayou129.github.io/blog/p/5001f0a0/</id>
    <published>2022-11-25T08:03:20.000Z</published>
    <updated>2022-11-08T12:19:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候想通过研究大厂的APP内部Mysql字段是如何设计的，但是大厂开发人员将信息传递的方式放入了TCP更深层的地方，尝试使用反编译的方式获取其数据信息，方便研究。</p><span id="more"></span><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>安卓 <code>Android app</code> 的包后缀是apk</p><p>工具：<code>apktool</code>：资源文件获取，可以提取出图片文件和布局文件进行使用查看<br>工具：<code>dex2jar</code>将apk反编译成Java源码（classes.dex转化成jar文件）<br>工具：<code>jd-gui</code>查看APK中classes.dex转化成出的jar文件，即源码文件</p><h2 id="资源文件获取-Apktool"><a href="#资源文件获取-Apktool" class="headerlink" title="资源文件获取 Apktool"></a>资源文件获取 Apktool</h2><p><code>apktool</code> 可以进行反编译，52pojie中有很多工具，全部都是集成了apktool工具进行操作的。<br>所以这里只介绍 <code>apktool</code> 的工具使用说明</p><p>官网 <code>https://ibotpeaches.github.io/Apktool/build/</code><br>github <code>https://github.com/iBotPeaches/Apktool</code></p><p><code>apktool</code> 源代码编译后的文件就是 <code>released</code>版本</p><h3 id="Mac切换不同版本的apktool"><a href="#Mac切换不同版本的apktool" class="headerlink" title="Mac切换不同版本的apktool"></a>Mac切换不同版本的apktool</h3><p>1.下载多个版本到根目录的apktool list文件夹中<br>2.<code>sudo cp apktool\ list/apktool_2.7.0.jar /usr/local/bin/apktool.jar</code><br>3.<code>chmod +x /usr/local/bin/apktool.jar</code></p><h3 id="Mac如何build"><a href="#Mac如何build" class="headerlink" title="Mac如何build"></a>Mac如何build</h3><p><code>https://ibotpeaches.github.io/Apktool/build/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ./gradlew build dist</span><br><span class="line"><span class="comment"># 以及</span></span><br><span class="line">sudo ./gradlew build <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="Mac如何反编译"><a href="#Mac如何反编译" class="headerlink" title="Mac如何反编译"></a>Mac如何反编译</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除之前编译的文件夹</span></span><br><span class="line">rm <span class="operator">-</span>rf app<span class="operator">-</span><span class="built_in">prod</span><span class="operator">-</span>release_encrypted_guanwang_16_align</span><br><span class="line"><span class="comment"># 反编译</span></span><br><span class="line">sudo apktool d app<span class="operator">-</span><span class="built_in">prod</span><span class="operator">-</span>release_encrypted_guanwang_16_align.apk</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p><code>uki apk</code> 安全方面可能利用了apktool的bug，解码不使用<code>v2.0.0-RC2</code><br>会报</p><img src="/blog/p/5001f0a0/Could%20not%20decode%20arsc%20file.png" class="" title="Could not decode arsc file.png"><p>但是使用了rc2版本之后依然会遇到下面的问题</p><ul><li>要使用java7</li><li>maven不再支持http的方式，尝试解决了一下，<br>在每个<code>repositories</code> 下面都修改了代码<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">repositories</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 这里需要注销这行 mavenCentral()</span></span><br><span class="line">    <span class="title class_">maven</span> <span class="punctuation">&#123;</span></span><br><span class="line">        url <span class="string">&quot;https://repo1.maven.org/maven2&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">maven</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">name</span> <span class="operator">=</span> <span class="string">&quot;forge&quot;</span></span><br><span class="line">        <span class="attr">url</span> <span class="operator">=</span> <span class="string">&quot;http://files.minecraftforge.net/maven&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="title class_">maven</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">name</span> <span class="operator">=</span> <span class="string">&quot;sonatype&quot;</span></span><br><span class="line">        <span class="attr">url</span> <span class="operator">=</span> <span class="string">&quot;https://oss.sonatype.org/content/repositories/snapshots/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>但是依然遇到了一些问题，就此放弃<img src="/blog/p/5001f0a0/problem2.png" class="" title="problem2.png"></li></ul><p>经测试</p><ul><li>酷狗apk，反编译通过，但是安全方面使用了混淆，所以源代码较难理解</li><li>微信apk，反编译通过，使用了混淆</li><li>Keep apk，反编译通过，</li><li>Soul apk，反编译通过，</li><li>积木 apk，未尝试</li><li>uki apk，反编译不通过</li></ul><h2 id="dex2jar-将apk反编译成Java源码（classes-dex转化成jar文件）"><a href="#dex2jar-将apk反编译成Java源码（classes-dex转化成jar文件）" class="headerlink" title="dex2jar 将apk反编译成Java源码（classes.dex转化成jar文件）"></a>dex2jar 将apk反编译成Java源码（classes.dex转化成jar文件）</h2><ol><li>解压apk</li><li>获取所有classes.dex(每一个dex都有相关代码)</li><li>执行<code>./d2j-dex2jar.sh ../keep_keep_homepage___default_7.39.0_73326892的副本/classes.dex</code></li></ol><h2 id="jd-gui-查看jar里面的文件"><a href="#jd-gui-查看jar里面的文件" class="headerlink" title="jd-gui 查看jar里面的文件"></a><code>jd-gui</code> 查看jar里面的文件</h2><h2 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h2><p>dex2jar <code>https://github.com/pxb1988/dex2jar</code></p>]]></content>
    
    
    <summary type="html">暂无描述</summary>
    
    
    
    
    <category term="Android" scheme="https://ayou129.github.io/blog/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>加密算法</title>
    <link href="https://ayou129.github.io/blog/p/79dcde6c/"/>
    <id>https://ayou129.github.io/blog/p/79dcde6c/</id>
    <published>2022-11-24T04:01:59.000Z</published>
    <updated>2022-09-02T08:05:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍经常用到的加密算法，不同场景对加密算法的选择。</p><span id="more"></span><h2 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h2><p><code>https://zhuanlan.zhihu.com/p/347114235</code></p><p>加密算法分 <code>对称加密</code> 和 <code>非对称加密</code>，其中<br><code>对称加密算法</code> 的加密与解密 密钥相同<br><code>非对称加密算法</code> 的加密密钥与解密 密钥不同，<br>此外，还有一类 不需要密钥 的 散列算法。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">常见的 对称加密 算法主要有 DES、<span class="number">3</span>DES、AES 等</span><br><span class="line">常见的 非对称算法 主要有 RSA、DSA 等</span><br><span class="line">散列算法 主要有 <span class="keyword">SHA-1、MD5 </span>等</span><br></pre></td></tr></table></figure><h3 id="对称加密-私钥-早期加密算法"><a href="#对称加密-私钥-早期加密算法" class="headerlink" title="对称加密(私钥)(早期加密算法)"></a>对称加密(私钥)(早期加密算法)</h3><p>发送放和接收方 使用相同的私钥<br>例子：</p><ul><li>寄快递 收快递 快递上了保险盒，两人都有相同的钥匙。<img src="/blog/p/79dcde6c/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png" class="" title="对称加密.png"></li></ul><h3 id="非对称加密-公开密钥加密算法"><a href="#非对称加密-公开密钥加密算法" class="headerlink" title="非对称加密(公开密钥加密算法)"></a>非对称加密(公开密钥加密算法)</h3><p><code>加密</code> 和 <code>解密</code> 使用不同的密钥(一公一私)</p><img src="/blog/p/79dcde6c/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png" class="" title="非对称加密.png"><h3 id="常见的签名加密算法"><a href="#常见的签名加密算法" class="headerlink" title="常见的签名加密算法"></a>常见的签名加密算法</h3><h4 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h4><p>MD5 用的是 哈希函数，它的典型应用是对一段信息产生 信息摘要，以 防止被篡改。<br>严格来说，MD5 不是一种 加密算法 而是 摘要算法。<br>无论是多长的输入，MD5 都会输出长度为 128bits 的一个串 (通常用 16 进制 表示为 32 个字符)。</p><h4 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h4><p>SHA1 是和 MD5 一样流行的 消息摘要算法，然而 SHA1 比 MD5 的 安全性更强。<br>对于长度小于 2 ^ 64 位的消息，SHA1 会产生一个 160 位的 消息摘要。<br>基于 MD5、SHA1 的信息摘要特性以及 不可逆 (一般而言)，可以被应用在检查 文件完整性 以及 数字签名 等场景。</p><h4 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h4><p>HMAC 是密钥相关的 哈希运算消息认证码（Hash-based Message Authentication Code），HMAC 运算利用 哈希算法 (MD5、SHA1 等)，以 一个密钥 和 一个消息 为输入，生成一个 消息摘要 作为 输出。<br>HMAC 发送方 和 接收方 都有的 key 进行计算，而没有这把 key 的第三方，则是 无法计算 出正确的 散列值的，这样就可以 防止数据被篡改。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">测试结论：HMAC 算法实例在 多线程环境 下是 不安全的。但是需要在 多线程访问 时，进行同步的辅助类，使用 ThreadLocal 为 每个线程缓存 一个实例可以避免进行锁操作。</span><br></pre></td></tr></table></figure><h4 id="AES-x2F-DES-x2F-3DES算法"><a href="#AES-x2F-DES-x2F-3DES算法" class="headerlink" title="AES&#x2F;DES&#x2F;3DES算法"></a>AES&#x2F;DES&#x2F;3DES算法</h4><p>AES、DES、3DES 都是 对称 的 块加密算法，加解密 的过程是 可逆的。<br>常用的有 AES128、AES192、AES256 (默认安装的 JDK 尚不支持 AES256，需要安装对应的 jce 补丁进行升级 jce1.7，jce1.8)。</p><h4 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h4><p>RSA 加密算法是目前最有影响力的 公钥加密算法，并且被普遍认为是目前 最优秀的公钥方案 之一。<br>RSA 是第一个能同时用于 加密 和 数字签名 的算法，它能够 抵抗 到目前为止已知的 所有密码攻击，已被 ISO 推荐为公钥数据加密标准。</p>]]></content>
    
    
    <summary type="html">数字签名、信息加密 是前后端开发都经常需要使用到的技术，应用场景包括了用户登入、交易、信息通讯、oauth 等等，不同的应用场景也会需要使用到不同的签名加密算法，或者需要搭配不一样的 签名加密算法 来达到业务目标。这里简单的给大家介绍几种常见的签名加密算法和一些典型场景下的应用。</summary>
    
    
    
    
    <category term="加密算法" scheme="https://ayou129.github.io/blog/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁</title>
    <link href="https://ayou129.github.io/blog/p/f3599f9f/"/>
    <id>https://ayou129.github.io/blog/p/f3599f9f/</id>
    <published>2021-12-05T14:23:29.000Z</published>
    <updated>2022-10-02T01:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>分布式锁，即分布式系统中的锁，目的是为了解决 分布式系统中控制共享资源访问 的问题。<br><br>以下是我的个人理解…</p><span id="more"></span><h2 id="分布式锁应该具备哪些条件："><a href="#分布式锁应该具备哪些条件：" class="headerlink" title="分布式锁应该具备哪些条件："></a>分布式锁应该具备哪些条件：</h2><ul><li>分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行</li><li>高可用的获取锁与释放锁</li><li>高性能的获取锁与释放锁</li><li>具备可重入特性（可理解为重新进入，由多于一个任务并发使用，而不必担心数据错误）</li><li>具备锁失效机制，即自动解锁，防止死锁</li><li>具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败</li></ul><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="基于数据库"><a href="#基于数据库" class="headerlink" title="基于数据库"></a>基于数据库</h3><p>核心是 <code>数据库表的唯一索引</code>，唯一索引具有排他性。</p><p>缺点：</p><ul><li>性能有瓶颈。</li></ul><h3 id="基于缓存-redis-x2F-memcached-x2F-tair"><a href="#基于缓存-redis-x2F-memcached-x2F-tair" class="headerlink" title="基于缓存(redis&#x2F;memcached&#x2F;tair)"></a>基于缓存(redis&#x2F;memcached&#x2F;tair)</h3><p>核心是 <code>setnx</code> ，理论上讲使用缓存的方案效率最高。</p><h3 id="基于zookeeper"><a href="#基于zookeeper" class="headerlink" title="基于zookeeper"></a>基于zookeeper</h3><p>核心是创建瞬时节点，节点不能重复创建 保证排他性。一般用于配置中心</p><p>缺点：</p><ul><li>磁盘IO效率低下</li></ul><h2 id="下方是待处理的内容"><a href="#下方是待处理的内容" class="headerlink" title="下方是待处理的内容"></a>下方是待处理的内容</h2><h3 id="Redis实现"><a href="#Redis实现" class="headerlink" title="Redis实现"></a>Redis实现</h3><h4 id="Redis类"><a href="#Redis类" class="headerlink" title="Redis类"></a>Redis类</h4><h3 id="第二个版本-Mysql悲观锁实现-for-update"><a href="#第二个版本-Mysql悲观锁实现-for-update" class="headerlink" title="第二个版本 Mysql悲观锁实现 for update"></a>第二个版本 Mysql悲观锁实现 for update</h3><p>解决超发问题</p><p>注意，在 SQL 中加入的 for update 语句，意味着将持有对数据库记录的行更新锁（因为这里使用主键查询，所以只会对行加锁。如果使用的是非主键查询，要考虑是否对全表加锁的问题，加锁后可能引发其他查询的阻塞），那就意味着在高并发的场景下，当一条事务持有了这个更新锁才能往下操作，其他的线程如果要更新这条记录，都需要等待，这样就不会出现超发现象引发的数据一致性问题了。</p><p>有性能瓶颈，因为悲观锁的实现方式就是抢锁，当请求过多时，会堵塞进程，造成延迟甚至 bad request</p><h3 id="第三个版本-Mysql乐观锁-以及-CAS机制-实现-version"><a href="#第三个版本-Mysql乐观锁-以及-CAS机制-实现-version" class="headerlink" title="第三个版本 Mysql乐观锁 以及 CAS机制 实现(version)"></a>第三个版本 Mysql乐观锁 以及 CAS机制 实现(version)</h3><p>会有ABA的问题</p><blockquote><p><a href="https://en.wikipedia.org/wiki/ABA_problem" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/ABA_problem</a></p></blockquote><h3 id="第四个版本-重入机制"><a href="#第四个版本-重入机制" class="headerlink" title="第四个版本 重入机制"></a>第四个版本 重入机制</h3><p>有性能问题</p><h3 id="最终版本-Redis实现"><a href="#最终版本-Redis实现" class="headerlink" title="最终版本 Redis实现"></a>最终版本 Redis实现</h3><p>解决的问题：超发(原子性)、性能问题(内存操作，非阻塞Io多路复用机制)、</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;分布式锁，即分布式系统中的锁，目的是为了解决 分布式系统中控制共享资源访问 的问题。&lt;br&gt;&lt;br&gt;以下是我的个人理解…&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://ayou129.github.io/blog/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="分布式" scheme="https://ayou129.github.io/blog/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="Mysql" scheme="https://ayou129.github.io/blog/tags/Mysql/"/>
    
    <category term="Redis" scheme="https://ayou129.github.io/blog/tags/Redis/"/>
    
    <category term="Zookeeper" scheme="https://ayou129.github.io/blog/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>实战：在线售票功能</title>
    <link href="https://ayou129.github.io/blog/p/fc5b94cd/"/>
    <id>https://ayou129.github.io/blog/p/fc5b94cd/</id>
    <published>2021-10-13T15:00:40.000Z</published>
    <updated>2021-12-01T15:00:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂无描述</p><span id="more"></span><ul><li>展示图<ul><li><img src="/blog/p/fc5b94cd/1.png" class="" title="展示图1"></li><li><img src="/blog/p/fc5b94cd/2.png" class="" title="展示图2"></li><li><img src="/blog/p/fc5b94cd/3.png" class="" title="展示图3"></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;暂无描述&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://ayou129.github.io/blog/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="实战" scheme="https://ayou129.github.io/blog/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Paxos</title>
    <link href="https://ayou129.github.io/blog/p/c20c6b6/"/>
    <id>https://ayou129.github.io/blog/p/c20c6b6/</id>
    <published>2021-08-20T12:30:41.000Z</published>
    <updated>2021-10-22T12:30:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂无描述</p><span id="more"></span><h2 id="Paxos-算法"><a href="#Paxos-算法" class="headerlink" title="Paxos 算法"></a>Paxos 算法</h2><p>「Pa so si」</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>一种基于<code>消息传递</code>的<code>分布式一致性算法</code>。</p><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>在分布式系统中的各个进程之间对某个值如何达成一致，即<code>分布式一致性</code>的问题。</p><h3 id="如何解决问题？"><a href="#如何解决问题？" class="headerlink" title="如何解决问题？"></a>如何解决问题？</h3><p>Paxos通过类似 <code>民主议会制度</code> 进行选举</p><ul><li><code>所有的人民</code> 都可以参与决议(提议和投票)。</li><li><code>少数服从多数(N/2+1)</code> 的方式来达成共识(只有超过一半的机器都认可某一个消息，最终所有的机器都对这个消息的决议达成共识)</li></ul><p>涉及到的角色：</p><ul><li><strong>提议者(Proposer)</strong> ：提出提案。提案信息包括：「提议编号、提议值」。</li><li><strong>决策者(Acceptor)</strong> ：参与决策，回应P的提案。如果多数批准，则通过。</li><li><strong>最终决策学习者(Learner)</strong> ：不参与决策，从P和A学习最新达成一致的提案。</li></ul><p>在多副本状态机中，每个副本同时具有三种角色</p><img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.png" class="" title="Paxos算法中的角色.png"><p>通过一个决议分成两个阶段(学习阶段之前决议已经形成)</p><ol><li><strong>第一：准备阶段(Prepare)</strong> ：<code>P</code> 向 <code>所有A</code> 发出准备决议请求，<code>所有A</code>收到请求后进行Promise承诺。</li><li><strong>第二：通过阶段(Accept)</strong> ：<code>P</code> 收到了 <code>多数A</code> 的Promise承诺，标志着本次决议成功，将决议结果发送给 <code>所有A</code>。</li><li><strong>第二：学习阶段(Learn)</strong> ：将决议结果抄送一份发给 <code>所有L</code></li></ol><img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B.png" class="" title="Paxos算法流程.png"><p>Paxos算法流程中的每条消息描述如下：</p><ul><li>Prepare: Proposer生成全局唯一且递增的Proposal ID (可使用时间戳加Server ID)，向所有Acceptors发送Prepare请求，这里无需携带提案内容，只携带Proposal ID即可。</li><li>Promise: Acceptors收到Prepare请求后，做出“两个承诺，一个应答”。</li></ul><p>两个承诺：</p><ol><li>不再接受Proposal ID小于等于（注意：这里是&lt;&#x3D; ）当前请求的Prepare请求。</li><li>不再接受Proposal ID小于（注意：这里是&lt; ）当前请求的Propose请求。</li></ol><p>一个应答：</p><ul><li><p>不违背以前作出的承诺下，回复已经Accept过的提案中Proposal ID最大的那个提案的Value和Proposal ID，没有则返回空值。</p></li><li><p>Propose: Proposer 收到多数Acceptors的Promise应答后，从应答中选择Proposal ID最大的提案的Value，作为本次要发起的提案。如果所有应答的提案Value均为空值，则可以自己随意决定提案Value。然后携带当前Proposal ID，向所有Acceptors发送Propose请求。</p></li><li><p>Accept: Acceptor收到Propose请求后，在不违背自己之前作出的承诺下，接受并持久化当前Proposal ID和提案Value。</p></li><li><p>Learn: Proposer收到多数Acceptors的Accept后，决议形成，将形成的决议发送给所有Learners。</p></li></ul><p>Paxos算法伪代码描述如下：</p><img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E4%BC%AA%E4%BB%A3%E7%A0%81.png" class="" title="Paxos算法伪代码.png"><ol><li>获取一个Proposal ID n，为了保证Proposal ID唯一，可采用时间戳+Server ID生成；</li><li>Proposer向所有Acceptors广播Prepare(n)请求；</li><li>Acceptor比较n和minProposal，如果n&gt;minProposal，minProposal&#x3D;n，并且将 acceptedProposal 和 acceptedValue 返回；</li><li>Proposer接收到过半数回复后，如果发现有acceptedValue返回，将所有回复中acceptedProposal最大的acceptedValue作为本次提案的value，否则可以任意决定本次提案的value；</li><li>到这里可以进入第二阶段，广播Accept (n,value) 到所有节点；</li><li>Acceptor比较n和minProposal，如果n&gt;&#x3D;minProposal，则acceptedProposal&#x3D;minProposal&#x3D;n，acceptedValue&#x3D;value，本地持久化后，返回；否则，返回minProposal。</li><li>提议者接收到过半数请求后，如果发现有返回值result &gt;n，表示有更新的提议，跳转到1；否则value达成一致。</li></ol><p>几个例子，实例1如下图：</p><img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E5%AE%9E%E4%BE%8B1.png" class="" title="Paxos算法实例1.png"><p>图中P代表Prepare阶段，A代表Accept阶段。3.1代表Proposal ID为3.1，其中3为时间戳，1为Server ID。X和Y代表提议Value。</p><p>实例1中P 3.1达成多数派，其Value(X)被Accept，然后P 4.5学习到Value(X)，并Accept。</p><img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E5%AE%9E%E4%BE%8B2.png" class="" title="Paxos算法实例2.png"><p>实例2中P 3.1没有被多数派Accept（只有S3 Accept），但是被P 4.5学习到，P 4.5将自己的Value由Y替换为X，Accept（X）。</p><img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E5%AE%9E%E4%BE%8B3.png" class="" title="Paxos算法实例3.png"><p>实例3中P 3.1没有被多数派Accept（只有S1 Accept），同时也没有被P 4.5学习到。由于P 4.5 Propose的所有应答，均未返回Value，则P 4.5可以Accept自己的Value (Y)。后续P 3.1的Accept (X) 会失败，已经Accept的S1，会被覆盖。</p><p>Paxos算法可能形成活锁而永远不会结束，如下图实例所示：</p><img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E5%BD%A2%E6%88%90%E6%B4%BB%E9%94%81.png" class="" title="Paxos算法形成活锁.png"><p>回顾两个承诺之一，Acceptor不再应答Proposal ID小于等于当前请求的Prepare请求。意味着需要应答Proposal ID大于当前请求的Prepare请求。</p><p>两个Proposers交替Prepare成功，而Accept失败，形成活锁（Livelock）。</p><h2 id="三、Multi-Paxos算法"><a href="#三、Multi-Paxos算法" class="headerlink" title="三、Multi-Paxos算法"></a>三、Multi-Paxos算法</h2><p>原始的Paxos算法（Basic Paxos）只能对一个值形成决议，决议的形成至少需要两次网络来回，在高并发情况下可能需要更多的网络来回，极端情况下甚至可能形成活锁。如果想连续确定多个值，Basic Paxos搞不定了。因此Basic Paxos几乎只是用来做理论研究，并不直接应用在实际工程中。</p><p>实际应用中几乎都需要连续确定多个值，而且希望能有更高的效率。Multi-Paxos正是为解决此问题而提出。Multi-Paxos基于Basic Paxos做了两点改进：</p><ol><li>针对每一个要确定的值，运行一次Paxos算法实例（Instance），形成决议。每一个Paxos实例使用唯一的Instance ID标识。</li><li>在所有Proposers中选举一个Leader，由Leader唯一地提交Proposal给Acceptors进行表决。这样没有Proposer竞争，解决了活锁问题。在系统中仅有一个Leader进行Value提交的情况下，Prepare阶段就可以跳过，从而将两阶段变为一阶段，提高效率。</li></ol><img src="/blog/p/c20c6b6/Multi-Paxos%E6%B5%81%E7%A8%8B.png" class="" title="Multi-Paxos流程.png"><p>Multi-Paxos首先需要选举Leader，Leader的确定也是一次决议的形成，所以可执行一次Basic Paxos实例来选举出一个Leader。选出Leader之后只能由Leader提交Proposal，在Leader宕机之后服务临时不可用，需要重新选举Leader继续服务。在系统中仅有一个Leader进行Proposal提交的情况下，Prepare阶段可以跳过。</p><p>Multi-Paxos通过改变Prepare阶段的作用范围至后面Leader提交的所有实例，从而使得Leader的连续提交只需要执行一次Prepare阶段，后续只需要执行Accept阶段，将两阶段变为一阶段，提高了效率。为了区分连续提交的多个实例，每个实例使用一个Instance ID标识，Instance ID由Leader本地递增生成即可。</p><p>Multi-Paxos允许有多个自认为是Leader的节点并发提交Proposal而不影响其安全性，这样的场景即退化为Basic Paxos。</p><p>Chubby和Boxwood均使用Multi-Paxos。ZooKeeper使用的Zab也是Multi-Paxos的变形。</p><h2 id="Paxos算法推导过程"><a href="#Paxos算法推导过程" class="headerlink" title="Paxos算法推导过程"></a>Paxos算法推导过程</h2><p>Paxos算法的设计过程就是从正确性开始的，对于分布式一致性问题，很多进程提出（Propose）不同的值，共识算法保证最终只有其中一个值被选定，Safety表述如下：</p><ul><li>只有被提出（Propose）的值才可能被最终选定（Chosen）。</li><li>只有一个值会被选定（Chosen）。</li><li>进程只会获知到已经确认被选定（Chosen）的值。</li></ul><p>Paxos以这几条约束作为出发点进行设计，只要算法最终满足这几点，正确性就不需要证明了。Paxos算法中共分为三种参与者：Proposer、Acceptor以及Learner，通常实现中每个进程都同时扮演这三个角色。</p><p>Proposers向Acceptors提出Proposal，为了保证最多只有一个值被选定（Chosen），Proposal必须被超过一半的Acceptors所接受（Accept），且每个Acceptor只能接受一个值。</p><p>为了保证正常运行（必须有值被接受），所以Paxos算法中：</p><h3 id="P1：Acceptor必须接受（Accept）它所收到的第一个Proposal。"><a href="#P1：Acceptor必须接受（Accept）它所收到的第一个Proposal。" class="headerlink" title="P1：Acceptor必须接受（Accept）它所收到的第一个Proposal。"></a>P1：Acceptor必须接受（Accept）它所收到的第一个Proposal。</h3><p>先来先服务，合情合理。但这样产生一个问题，如果多个Proposers同时提出Proposal，很可能会导致无法达成一致，因为没有Propopal被超过一半Acceptors的接受，因此，Acceptor必须能够接受多个Proposal，不同的Proposal由不同的编号进行区分，当某个Proposal被超过一半的Acceptors接受后，这个Proposal就被选定了。<br>既然允许Acceptors接受多个Proposal就有可能出现多个不同值都被最终选定的情况，这违背了Safety要求，为了保证Safety要求，Paxos进一步提出：</p><h3 id="P2：如果值为v的Proposal被选定（Chosen），则任何被选定（Chosen）的具有更高编号的Proposal值也一定为v。"><a href="#P2：如果值为v的Proposal被选定（Chosen），则任何被选定（Chosen）的具有更高编号的Proposal值也一定为v。" class="headerlink" title="P2：如果值为v的Proposal被选定（Chosen），则任何被选定（Chosen）的具有更高编号的Proposal值也一定为v。"></a>P2：如果值为v的Proposal被选定（Chosen），则任何被选定（Chosen）的具有更高编号的Proposal值也一定为v。</h3><p>只要算法同时满足P1和P2，就保证了Safety。P2是一个比较宽泛的约定，完全没有算法细节，我们对其进一步延伸：</p><h3 id="P2a：如果值为v的Proposal被选定（Chosen），则对所有的Acceptors，它们接受（Accept）的任何具有更高编号的Proposal值也一定为v。"><a href="#P2a：如果值为v的Proposal被选定（Chosen），则对所有的Acceptors，它们接受（Accept）的任何具有更高编号的Proposal值也一定为v。" class="headerlink" title="P2a：如果值为v的Proposal被选定（Chosen），则对所有的Acceptors，它们接受（Accept）的任何具有更高编号的Proposal值也一定为v。"></a>P2a：如果值为v的Proposal被选定（Chosen），则对所有的Acceptors，它们接受（Accept）的任何具有更高编号的Proposal值也一定为v。</h3><p>如果满足P2a则一定满足P2，显然，因为只有首先被接受才有可能被最终选定。但是P2a依然难以实现，因为acceptor很有可能并不知道之前被选定的Proposal（恰好不在接受它的多数派中），因此进一步延伸：</p><h3 id="P2b：如果值为v的Proposal被选定（Chosen），则对所有的Proposer，它们提出的的任何具有更高编号的Proposal值也一定为v。"><a href="#P2b：如果值为v的Proposal被选定（Chosen），则对所有的Proposer，它们提出的的任何具有更高编号的Proposal值也一定为v。" class="headerlink" title="P2b：如果值为v的Proposal被选定（Chosen），则对所有的Proposer，它们提出的的任何具有更高编号的Proposal值也一定为v。"></a>P2b：如果值为v的Proposal被选定（Chosen），则对所有的Proposer，它们提出的的任何具有更高编号的Proposal值也一定为v。</h3><p>更进一步的： </p><h3 id="P2c：为了提出值为v且编号为n的Proposal，必须存在一个包含超过一半Acceptors的集合S，满足-1-没有任何S中的Acceptors曾经接受（Accept）过编号比n小的Proposal，或者-2-v和S中的Acceptors所接受过-Accept-的编号最大且小于n的Proposal值一致。"><a href="#P2c：为了提出值为v且编号为n的Proposal，必须存在一个包含超过一半Acceptors的集合S，满足-1-没有任何S中的Acceptors曾经接受（Accept）过编号比n小的Proposal，或者-2-v和S中的Acceptors所接受过-Accept-的编号最大且小于n的Proposal值一致。" class="headerlink" title="P2c：为了提出值为v且编号为n的Proposal，必须存在一个包含超过一半Acceptors的集合S，满足(1) 没有任何S中的Acceptors曾经接受（Accept）过编号比n小的Proposal，或者(2) v和S中的Acceptors所接受过(Accept)的编号最大且小于n的Proposal值一致。"></a>P2c：为了提出值为v且编号为n的Proposal，必须存在一个包含超过一半Acceptors的集合S，满足(1) 没有任何S中的Acceptors曾经接受（Accept）过编号比n小的Proposal，或者(2) v和S中的Acceptors所接受过(Accept)的编号最大且小于n的Proposal值一致。</h3><p>满足P2c即满足P2b即满足P2a即满足P2。至此Paxos提出了Proposer的执行流程，以满足P2c：</p><ol><li>Proposer选择一个新的编号n，向超过一半的Acceptors发送请求消息，Acceptor回复: (a)承诺不会接受编号比n小的proposal，以及(b)它所接受过的编号比n小的最大Proposal（如果有）。该请求称为Prepare请求。</li><li>如果Proposer收到超过一半Acceptors的回复，它就可以提出Proposal，Proposal的值为收到回复中编号最大的Proposal的值，如果没有这样的值，则可以自由提出任何值。</li><li>向收到回复的Acceptors发送Accept请求，请求对方接受提出的Proposal。</li></ol><p>仔细品味Proposer的执行流程，其完全吻合P2c中的要求，但你可能也发现了，当多个Proposer同时运行时，有可能出现没有任何Proposal可以成功被接受的情况（编号递增的交替完成第一步），这就是Paxos算法的Liveness问题，或者叫“活锁”，论文中建议通过对Proposers引入选主算法选出Distinguished Proposer来全权负责提出Proposal来解决这个问题，但是即使在出现多个Proposers同时提出Proposal的情况时，Paxos算法也可以保证Safety。</p><p>接下来看看Acceptors的执行过程，和我们对P2做的事情一样，我们对P1进行延伸：</p><h3 id="P1a：Acceptor可以接受（Accept）编号为n的Proposal当且仅当它没有回复过一个具有更大编号的Prepare消息。"><a href="#P1a：Acceptor可以接受（Accept）编号为n的Proposal当且仅当它没有回复过一个具有更大编号的Prepare消息。" class="headerlink" title="P1a：Acceptor可以接受（Accept）编号为n的Proposal当且仅当它没有回复过一个具有更大编号的Prepare消息。"></a>P1a：Acceptor可以接受（Accept）编号为n的Proposal当且仅当它没有回复过一个具有更大编号的Prepare消息。</h3><p>易见，P1a包含了P1，对于Acceptors：</p><ol><li>当收到Prepare请求时，如果其编号n大于之前所收到的Prepare消息，则回复。</li><li>当收到Accept请求时，仅当它没有回复过一个具有更大编号的Prepare消息，接受该Proposal并回复。<br>以上涵盖了满足P1a和P2b的一套完整一致性算法。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;暂无描述&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://ayou129.github.io/blog/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>小提琴</title>
    <link href="https://ayou129.github.io/blog/p/1ckaiojcz/"/>
    <id>https://ayou129.github.io/blog/p/1ckaiojcz/</id>
    <published>2021-05-06T13:38:41.000Z</published>
    <updated>2021-05-06T13:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂无描述</p><span id="more"></span><p>琴身<br>琴头<br>琴弓<br>面板<br>侧板<br>噻托  </p><p>调旋</p><h2 id="持琴"><a href="#持琴" class="headerlink" title="持琴"></a>持琴</h2><p>下巴靠紧，其他放松，左手不要托盘</p><p>右手臂：<br>大拇指中指相对应，弯曲不要僵硬<br>手臂略低，不能太高也不能太低<br>琴弓和琴要直<br>整体正方形</p>]]></content>
    
    
    <summary type="html">1</summary>
    
    
    
    <category term="Diary" scheme="https://ayou129.github.io/blog/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>CharlesProxy抓包指南</title>
    <link href="https://ayou129.github.io/blog/p/3aa747c4/"/>
    <id>https://ayou129.github.io/blog/p/3aa747c4/</id>
    <published>2021-03-28T14:26:19.000Z</published>
    <updated>2022-07-23T09:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>蒸无语辣，大厂的app抓不到包，解决方案跳转到 <a href="/blog/p/5001f0a0/" title="安卓反编译">安卓反编译</a></p><span id="more"></span><h2 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h2><ol><li>Charles是一个运行在自己计算机中的Web代理（http代理&#x2F;http监视器）</li><li>将web浏览器(或者其他任何的Internet应用程序,手机或物联网设备)配置通过Charles访问Internet</li><li>然后就可以通过Charles看到所有发送和接收的数据</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>官网 <a href="https://charlesproxy.com/" target="_blank" rel="noopener">https://charlesproxy.com</a></p></blockquote><p>…省略步骤</p><h2 id="常见的抓包需求"><a href="#常见的抓包需求" class="headerlink" title="常见的抓包需求"></a>常见的抓包需求</h2><ol><li>数据缺陷分析（分析数据结构，一般分析手机或物联网设备）</li><li>模拟不同网络速度场景（龟龟）</li><li>模拟各种疑难杂症网络场景（各种http错误状态码）</li><li>更改请求数据 或 response数据（BreakPoint）</li><li>将目的源地址替换成其他，或本地（Map）</li><li>压测</li></ol><h2 id="HTTPS代理-安装SSL"><a href="#HTTPS代理-安装SSL" class="headerlink" title="HTTPS代理 安装SSL"></a>HTTPS代理 安装SSL</h2><blockquote><p><a href="https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/" target="_blank" rel="noopener">https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/</a></p></blockquote><p>如果不安装ssl则无法以纯文本的方式查看内容，通俗点讲就是看不到实际内容，而只能看到加密后的乱码<br>步骤详情：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 手机端安装SSL  https:<span class="comment">//www.charlesproxy.com/documentation/using-charles/ssl-certificates/</span></span><br><span class="line">## 这里是 `iphone` 手机的安装步骤，不同机型进入网站按照提示安装</span><br><span class="line"><span class="number">1.</span> iphone打开Safari(重点)浏览器访问 https:<span class="comment">//chls.pro/ssl 并下载SSL证书</span></span><br><span class="line"><span class="number">2.</span> 进入iphone设置-&gt;已下载描述文件-&gt;安装-&gt;输入密码</span><br><span class="line"><span class="number">3.</span> 进入iphone设置-&gt;通用-&gt;关于本机-&gt;证书信任设置-&gt;信任Charles Proxy CA...</span><br><span class="line"></span><br><span class="line">## 这里是 `android` 手机的安装步骤，不同机型进入网站按照提示安装</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># CharlesProxy客户端安装SSL证书</span><br><span class="line"><span class="number">1.</span> Help-&gt;SSL Proxying-&gt;Install Charles Root Certificate，安装到系统</span><br><span class="line"><span class="number">2.</span> 默认会弹出钥匙串访问的窗口，要点击CharlesProxy的证书，并且添加信任，没有的话自行打开 Mac-&gt;启动台-&gt;钥匙串访问</span><br><span class="line"><span class="number">3.</span> Proxy-&gt;SSL Proxy Settings-&gt;Enable SSL Proxying 并且添加域名</span><br><span class="line">note:域名处觉得麻烦可以直接填写*</span><br><span class="line"></span><br><span class="line"># Charles默认禁止所有IP连接，连接时，会要求授权，若不想授权，可 Proxy -&gt; Access Control Settgings -&gt; Add <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> 以允许所有IP连接</span><br></pre></td></tr></table></figure><img src="/blog/p/3aa747c4/%E9%92%A5%E5%8C%99%E4%B8%B2%E8%AE%BF%E9%97%AE%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BF%A1%E4%BB%BB.png" class="" title="钥匙串访问中添加证书并信任.png"><img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A41.png" class="" title="CharlesProxySSl证书安装步骤1"><img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A42.png" class="" title="CharlesProxySSl证书安装步骤2"><img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A43.png" class="" title="CharlesProxySSl证书安装步骤3"><img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A44.png" class="" title="CharlesProxySSl证书安装步骤4"><img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A45.png" class="" title="CharlesProxySSl证书安装步骤5"><img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A46.png" class="" title="CharlesProxySSl证书安装步骤6"><img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A47.png" class="" title="CharlesProxySSl证书安装步骤7"><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="网速模拟"><a href="#网速模拟" class="headerlink" title="网速模拟"></a>网速模拟</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Proxy</span>-&gt;Throtte Setting</span><br><span class="line">Bandwidth 带宽</span><br><span class="line">Utilistation 利用百分比</span><br><span class="line">Round-trip 往返延迟</span><br><span class="line">MTU 字节</span><br></pre></td></tr></table></figure><h3 id="Map-remote"><a href="#Map-remote" class="headerlink" title="Map remote"></a>Map remote</h3><p>将指定的网络请求重定向到指定网址<br>一般用于正式环境&#x2F;测试环境的切换<br>使用步骤：抓包之后，选中需要替换的请求，Map remote，修改更改后的指定网址，重新请求即可</p><h3 id="Map-local"><a href="#Map-local" class="headerlink" title="Map local"></a>Map local</h3><blockquote><p>常用操作，一般用在调试服务端代码</p></blockquote><p>将指定的网络请求的结果重定向到本地文件，<br>每个API都可以 <code>Save response</code><br>保存之后 选中一个网络请求 开启Map local选择本地文件路径保存。重新请求即可</p><h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><p>在 请求 与 返回结果中间通过断点停顿编辑所有相关信息<br>操作步骤：抓包之后，选中需要打断点的请求，重新请求即可</p>]]></content>
    
    
    <summary type="html">针对开发人员测试抓包的使用指南</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>产品设计总结</title>
    <link href="https://ayou129.github.io/blog/p/2252453f/"/>
    <id>https://ayou129.github.io/blog/p/2252453f/</id>
    <published>2021-03-28T11:33:01.000Z</published>
    <updated>2021-04-20T11:33:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂无描述</p><span id="more"></span><h2 id="用户账户-账号-体系"><a href="#用户账户-账号-体系" class="headerlink" title="用户账户(账号)体系"></a>用户账户(账号)体系</h2><h3 id="账号体系的类别"><a href="#账号体系的类别" class="headerlink" title="账号体系的类别"></a>账号体系的类别</h3><p>自定义账号<br>    账号+密码<br>邮箱账号<br>    邮箱+密码<br>手机账号<br>    手机+密码(验证码)<br>第三方平台<br>    用户在第三方平台上将部分的信息授权至我方账号体系当中<br>    微信、QQ、微博<br>        包含的信息：昵称&#x2F;头像&#x2F;地址&#x2F;省市区</p><h3 id="设计账号体系"><a href="#设计账号体系" class="headerlink" title="设计账号体系"></a>设计账号体系</h3><p>相关字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># user</span><br><span class="line">id create_at</span><br><span class="line"></span><br><span class="line"># auth</span><br><span class="line">phone email username</span><br><span class="line"></span><br><span class="line"># user_base_info</span><br><span class="line">nickname //第一次创建账号时，使用自定义或者第三方授权过来的昵称</span><br><span class="line"></span><br><span class="line"># 第三方平台</span><br><span class="line">type 微信 微博 QQ</span><br><span class="line">unionid</span><br><span class="line">openid </span><br></pre></td></tr></table></figure><h3 id="账号体系的核心流程"><a href="#账号体系的核心流程" class="headerlink" title="账号体系的核心流程"></a>账号体系的核心流程</h3><h4 id="注册-和-登陆流程"><a href="#注册-和-登陆流程" class="headerlink" title="注册 和 登陆流程"></a>注册 和 登陆流程</h4><p>一切都是以手机号为准，无论哪个平台注册都需要手机号验证。<br>第三方注册登陆流程<br>    通过第三方授权成功，返回信息至我方登陆API，如果没有账户存在，则要求绑定手机号</p><h4 id="找回密码流程"><a href="#找回密码流程" class="headerlink" title="找回密码流程"></a>找回密码流程</h4><p>首先通过手机号查找，但是由于手机号会发生更换，并且当手机卡停机一段时间后手机运营商会重新投递到市场中，导致其他人能够使用到这个手机号，最后篡改信息<br>所以核心需要用户绑定更为深层次的信息，</p><h4 id="风控流程"><a href="#风控流程" class="headerlink" title="风控流程"></a>风控流程</h4><h2 id="提升用户体验的设计"><a href="#提升用户体验的设计" class="headerlink" title="提升用户体验的设计"></a>提升用户体验的设计</h2><h3 id="手机号输入框，自动采用3-4-4的方式留出空格，方便用户随时进行校验"><a href="#手机号输入框，自动采用3-4-4的方式留出空格，方便用户随时进行校验" class="headerlink" title="手机号输入框，自动采用3-4-4的方式留出空格，方便用户随时进行校验"></a>手机号输入框，自动采用3-4-4的方式留出空格，方便用户随时进行校验</h3><h3 id="精准的错误提示"><a href="#精准的错误提示" class="headerlink" title="精准的错误提示"></a>精准的错误提示</h3><p>例如：</p><ol><li>参数错误</li><li>用户名已存在</li></ol><p>选择更精准的错误提示，提高用户体验</p><h3 id="输入数字的时候，自动打开数字键盘"><a href="#输入数字的时候，自动打开数字键盘" class="headerlink" title="输入数字的时候，自动打开数字键盘"></a>输入数字的时候，自动打开数字键盘</h3><h3 id="有前置条件的按钮可置灰，输入信息后恢复可点击状态"><a href="#有前置条件的按钮可置灰，输入信息后恢复可点击状态" class="headerlink" title="有前置条件的按钮可置灰，输入信息后恢复可点击状态"></a>有前置条件的按钮可置灰，输入信息后恢复可点击状态</h3><p>例如用户正在输入账号密码进行登陆，当输入结果符合要求的时候，按钮恢复可点击的状态<br>可以减少不必要的点击</p><h3 id="密码提供显示-x2F-隐藏按钮"><a href="#密码提供显示-x2F-隐藏按钮" class="headerlink" title="密码提供显示&#x2F;隐藏按钮"></a>密码提供显示&#x2F;隐藏按钮</h3>]]></content>
    
    
    <summary type="html">暂无描述</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Mac使用指南</title>
    <link href="https://ayou129.github.io/blog/p/614a2564/"/>
    <id>https://ayou129.github.io/blog/p/614a2564/</id>
    <published>2021-03-24T13:56:53.000Z</published>
    <updated>2022-09-29T01:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍使用Mac以来相关的使用技巧和黑科技🫢。</p><span id="more"></span><h2 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h2><blockquote><p><a href="https://brew.sh/" target="_blank" rel="noopener">https://brew.sh/</a></p></blockquote><p>brew 相关指令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索一个包</span></span><br><span class="line"><span class="keyword">brew </span>search * </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装一个包</span></span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>* </span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载一个包</span></span><br><span class="line"><span class="keyword">brew </span>uninstall * </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看包的相关信息（可以从中查看安装路径等）</span></span><br><span class="line"><span class="keyword">brew </span>info *</span><br></pre></td></tr></table></figure><h2 id="Centos-安装"><a href="#Centos-安装" class="headerlink" title="Centos 安装"></a>Centos 安装</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> brew 无法在root用户上安装</span><br><span class="line">sudo adduser liguoxin</span><br><span class="line">sudo passwd liguoxin   <span class="regexp">//</span> jH9gxicnew</span><br><span class="line">sudo usermod -aG wheel liguoxin <span class="regexp">//</span> Centos中给权限</span><br><span class="line">su - liguoxin  <span class="regexp">//</span> 进入到该用户</span><br></pre></td></tr></table></figure><blockquote><p>使用清华大学开元软件镜像站安装 brew   <a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从本镜像下载安装脚本并安装 Homebrew / Linuxbrew</span></span><br><span class="line">git clone --depth=<span class="number">1</span> https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/git/</span>homebrew/install.git brew-install</span><br><span class="line"><span class="regexp">/bin/</span>bash brew-install/install.sh</span><br><span class="line">rm -rf brew-install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可从 GitHub 获取官方安装脚本安装 Homebrew / Linuxbrew</span></span><br><span class="line"><span class="regexp">/bin/</span>bash -c <span class="string">&quot;$(curl -fsSL https://github.com/Homebrew/install/raw/master/install.sh)&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将brew添加到环境变量中</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">HOMEBREW_API_DOMAIN</span>=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">HOMEBREW_BOTTLE_DOMAIN</span>=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">HOMEBREW_BREW_GIT_REMOTE</span>=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">HOMEBREW_CORE_GIT_REMOTE</span>=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">HOMEBREW_PIP_INDEX_URL</span>=<span class="string">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span></span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><blockquote><p>添加brew到环境变量</p></blockquote><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 以下针对基于 Apple Silicon CPU 设备上的 macOS 系统（命令行运行 uname -m 应输出 arm64）上的 Homebrew：</span><br><span class="line"><span class="keyword">test </span>-r ~/.bash_profile &amp;&amp; echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="keyword">test </span>-r ~/.zprofile &amp;&amp; echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27; &gt;&gt; ~/.zprofile</span><br><span class="line"></span><br><span class="line"># linux</span><br><span class="line"><span class="keyword">test </span>-d ~/.linuxbrew &amp;&amp; eval &quot;$(~/.linuxbrew/bin/brew shellenv)&quot;</span><br><span class="line"><span class="keyword">test </span>-d /home/linuxbrew/.linuxbrew &amp;&amp; eval &quot;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)&quot;</span><br><span class="line"><span class="keyword">test </span>-r ~/.bash_profile &amp;&amp; echo &quot;eval \&quot;\$($(brew --prefix)/bin/brew shellenv)\&quot;&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="keyword">test </span>-r ~/.profile &amp;&amp; echo &quot;eval \&quot;\$($(brew --prefix)/bin/brew shellenv)\&quot;&quot; &gt;&gt; ~/.profile</span><br><span class="line"><span class="keyword">test </span>-r ~/.zprofile &amp;&amp; echo &quot;eval \&quot;\$($(brew --prefix)/bin/brew shellenv)\&quot;&quot; &gt;&gt; ~/.zprofile</span><br></pre></td></tr></table></figure><blockquote><p>将后续每个软件添加到环境变量</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/linuxbrew/.linuxbrew/opt/python@3.8/libexec/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="Linux-安装-NVIDIA-驱动"><a href="#Linux-安装-NVIDIA-驱动" class="headerlink" title="Linux 安装 NVIDIA 驱动"></a>Linux 安装 NVIDIA 驱动</h2><h3 id="Centos8"><a href="#Centos8" class="headerlink" title="Centos8"></a>Centos8</h3><div>                <img src="/blog/p/614a2564/Centos8配置.png" alt="Centos8配置.png"></img>                <p style="                display: flex;                color: #999;                justify-content: center;                font-size: 0.8rem;                position: relative;                top: -1rem;                right: 50%;                left: 50%;                transform: translateX(-50%);                ">[Centos8配置.png]</p>            </div><ol><li>先安装NVIDIA驱动<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重装系统时，不要后台安装，手动安装</span></span><br><span class="line"><span class="regexp">//</span> 先查看nvidia-smi</span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>Data Center Driver For Linux X64</li></ol><p>版本:515.105.01<br>发布日期:2023.3.30<br>操作系统:Linux 64-bit<br>CUDA Toolkit:11.7<br>语言:Chinese (Simplified)<br>文件大小:346.89 MB</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>cn.download.nvidia.com<span class="regexp">/tesla/</span><span class="number">535.129</span>.<span class="number">03</span>/NVIDIA-Linux-x86_64-<span class="number">515.105</span>.<span class="number">01</span>.run</span><br><span class="line"></span><br><span class="line">sudo chmod +x NVIDIA-Linux-x86_64-<span class="number">515.105</span>.<span class="number">01</span>.run</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 切换到多用户目标模式，这会关闭图形界面</span><br><span class="line">sudo systemctl isolate multi-user.target </span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 安装新的驱动程序</span><br><span class="line">sudo bash NVIDIA-Linux-x86_64-<span class="number">515.105</span>.<span class="number">01</span>.run</span><br><span class="line"></span><br><span class="line">sudo yum install vulkan</span><br></pre></td></tr></table></figure><blockquote><p>卸载 NVIDIA</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="regexp">/usr/</span>bin/nvidia-uninstall</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line">sudo bash NVIDIA-Linux-x86_64-<span class="number">515.105</span>.<span class="number">01</span>.run --uninstall</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 重新生成内核模块</span><br><span class="line">sudo dracut --force</span><br><span class="line"></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><ol start="2"><li>安装CUDA</li></ol><blockquote><p><a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=CentOS&amp;target_version=7&amp;target_type=rpm_network" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=CentOS&amp;target_version=7&amp;target_type=rpm_network</a></p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里选择 runufile 本地安装</span></span><br><span class="line"><span class="attribute">sudo</span> yum install pkg-config xorg-x11-server-devel</span><br><span class="line"></span><br><span class="line"><span class="attribute">wget</span> https://developer.download.nvidia.com/compute/cuda/<span class="number">12</span>.<span class="number">3</span>.<span class="number">0</span>/local_installers/cuda_12.<span class="number">3</span>.<span class="number">0</span>_545.<span class="number">23</span>.<span class="number">06</span>_linux.run</span><br><span class="line"><span class="attribute">sudo</span> sh cuda_12.<span class="number">3</span>.<span class="number">0</span>_545.<span class="number">23</span>.<span class="number">06</span>_linux.run</span><br><span class="line"><span class="attribute">jH9gxicnew111</span></span><br></pre></td></tr></table></figure><h2 id="pip太慢"><a href="#pip太慢" class="headerlink" title="pip太慢"></a>pip太慢</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 更改pip源</span><br><span class="line">pip install -i https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple 安装的文件</span><br><span class="line">pip install -i https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple modelscope</span><br><span class="line">pip install -i https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2023-11-08 19:59:25 本次未成功测试，环境没配好，要固定nvidia cuda cudnn版本，否则会报错<br>相关链接：<br><a href="https://pytorch.org/get-started/locally/#supported-linux-distributions" target="_blank" rel="noopener">https://pytorch.org/get-started/locally/#supported-linux-distributions</a><br><a href="https://pytorch.org/get-started/previous-versions/" target="_blank" rel="noopener">https://pytorch.org/get-started/previous-versions/</a><br>NVIDIA-Linux-x86_64-460.106.00.run<br>cuda_11.2.2_460.32.03_linux.run</p><h2 id="安装web相关环境"><a href="#安装web相关环境" class="headerlink" title="安装web相关环境"></a>安装web相关环境</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nginx</span></span><br><span class="line">brew install nginx</span><br><span class="line">brew info nginx <span class="regexp">//</span>查看相关信息，拿到安装路径</span><br><span class="line"><span class="regexp">//</span> ps:<span class="variable">$cd</span> <span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/</span>nginx/<span class="number">1.19</span>.<span class="number">8</span></span><br><span class="line">cp homebrew.mxcl.nginx.plist ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.nginx.plist</span><br><span class="line"><span class="comment">## 开机自启</span></span><br><span class="line">launchctl load -w ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.nginx.plist</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mysql</span></span><br><span class="line">brew install mysql</span><br><span class="line">brew info mysql <span class="regexp">//</span>查看mysql相关信息，拿到安装路径</span><br><span class="line"><span class="regexp">//</span> ps:<span class="variable">$cd</span> <span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/my</span>sql/<span class="number">8.0</span>.<span class="number">23</span>_1</span><br><span class="line">cp homebrew.mxcl.mysql.plist ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.mysql.plist</span><br><span class="line"><span class="comment">## 开机自启</span></span><br><span class="line">launchctl load -w ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.mysql.plist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">brew install php@<span class="number">7.4</span></span><br><span class="line">brew info php@<span class="number">7.4</span> <span class="regexp">//</span>查看mysql相关信息，拿到安装路径</span><br><span class="line"><span class="regexp">//</span> ps:<span class="variable">$cd</span> <span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/</span>php@<span class="number">7.4</span>/<span class="number">7.4</span>.<span class="number">16</span></span><br><span class="line">cp homebrew.mxcl.php@<span class="number">7.4</span>.plist ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.php@<span class="number">7.4</span>.plist</span><br><span class="line"><span class="comment">## 开机自启</span></span><br><span class="line">launchctl load -w ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.php@<span class="number">7.4</span>.plist</span><br><span class="line"></span><br><span class="line">pecl install swoole <span class="comment"># 这里需要注意 swoole扩展开启部分功能需要这么写</span></span><br><span class="line">&gt; ln -s <span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/</span>pcre2<span class="regexp">/10.36/i</span>nclude<span class="regexp">/pcre2.h /</span>opt<span class="regexp">/homebrew/</span>Cellar<span class="regexp">/php@7.4/</span><span class="number">7.4</span>.<span class="number">18</span><span class="regexp">/include/</span>php<span class="regexp">/ext/</span>pcre/pcre2.h</span><br><span class="line">&gt; pecl install swoole</span><br><span class="line">&gt; yes</span><br><span class="line">&gt; yes --with-openssl-dir=<span class="regexp">/opt/</span>homebrew<span class="regexp">/opt/</span>openssl@<span class="number">1.1</span>/</span><br><span class="line">&gt; yes</span><br><span class="line">&gt; yes</span><br><span class="line">&gt; yes</span><br><span class="line"></span><br><span class="line">pecl install xdebug</span><br><span class="line">pecl install redis</span><br></pre></td></tr></table></figure><h2 id="安装-部分扩展-shivammathur-x2F-php"><a href="#安装-部分扩展-shivammathur-x2F-php" class="headerlink" title="安装 部分扩展 shivammathur&#x2F;php"></a>安装 部分扩展 shivammathur&#x2F;php</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 教程 <span class="selector-tag">https</span>:<span class="comment">//github.com/shivammathur/homebrew-extensions</span></span><br><span class="line"></span><br><span class="line">## 如果报错：<span class="selector-tag">you</span> <span class="selector-tag">must</span> <span class="selector-tag">configure</span> <span class="selector-tag">with</span> `<span class="selector-tag">--enable-openssl</span>` <span class="selector-tag">to</span> <span class="selector-tag">support</span> <span class="selector-tag">ssl</span> <span class="selector-tag">connection</span> <span class="keyword">when</span> compiling Swoole</span><br><span class="line">### 更新一下swoole就行</span><br><span class="line">brew remove swoole<span class="variable">@7</span>.<span class="number">4</span></span><br><span class="line">brew install shivammathur/extensions/swoole<span class="variable">@7</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure><p>yes --with-openssl-dir&#x3D;&#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;openssl@3<br>yes –with-pcre2-dir&#x3D;&#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;pcre2&#x2F;</p><p>ln -s &#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;pcre2&#x2F;include&#x2F;pcre2.h &#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;<a href="mailto:&#x70;&#x68;&#x70;&#64;&#x38;&#46;&#x31;">&#x70;&#x68;&#x70;&#64;&#x38;&#46;&#x31;</a>&#x2F;include&#x2F;php&#x2F;ext&#x2F;pcre&#x2F;pcre2.h<br>yes</p><h2 id="使用alias添加一个快捷键"><a href="#使用alias添加一个快捷键" class="headerlink" title="使用alias添加一个快捷键"></a>使用alias添加一个快捷键</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 经常会使用到的比如cd一个经常进入的path</span></span><br><span class="line"><span class="built_in">alias</span> cdphpbin=<span class="string">&quot;cd /opt/homebrew/etc/php/7.4/&quot;</span></span><br><span class="line"><span class="built_in">alias</span> cdnginxbin=<span class="string">&quot;cd /opt/homebrew/etc/nginx/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述的快捷键在重启电脑后会失效，所以要编辑 ~/.zshr</span></span><br><span class="line">vim ~/.zshr</span><br><span class="line">添加相应的指令</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="给shell安装一个主题"><a href="#给shell安装一个主题" class="headerlink" title="给shell安装一个主题"></a>给shell安装一个主题</h2><blockquote><p>ohmyz <a href="https://ohmyz.sh/#install" target="_blank" rel="noopener">https://ohmyz.sh/#install</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">安装后根据提示设置 ~/.zshrc</span></span><br></pre></td></tr></table></figure><img src="/blog/p/614a2564/ohmyz.png" class="" title="ohmyz主题"><h2 id="给shell安装自动补全"><a href="#给shell安装自动补全" class="headerlink" title="给shell安装自动补全"></a>给shell安装自动补全</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>zsh zsh-completions</span><br></pre></td></tr></table></figure><img src="/blog/p/614a2564/shell%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8.png" class="" title="shell自动补全"><h2 id="安装cask"><a href="#安装cask" class="headerlink" title="安装cask"></a>安装cask</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>zsh cask</span><br></pre></td></tr></table></figure><h2 id="安装v2ray"><a href="#安装v2ray" class="headerlink" title="安装v2ray"></a>安装v2ray</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>v2ray</span><br><span class="line"><span class="comment"># 设置config.json即可</span></span><br></pre></td></tr></table></figure><h2 id="安装启动命令"><a href="#安装启动命令" class="headerlink" title="安装启动命令"></a>安装启动命令</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>zsh cask</span><br></pre></td></tr></table></figure><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>已损坏，无法打开，您应该将它移到废纸篓<br><code>sudo xattr -d com.apple.quarantine /Applications/xxx.app</code></p>]]></content>
    
    
    <summary type="html">暂无描述</summary>
    
    
    
    
    <category term="Mac" scheme="https://ayou129.github.io/blog/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>生意经</title>
    <link href="https://ayou129.github.io/blog/p/4f959226/"/>
    <id>https://ayou129.github.io/blog/p/4f959226/</id>
    <published>2021-03-24T00:56:38.000Z</published>
    <updated>2021-03-24T00:59:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂无描述</p><span id="more"></span><h2 id="如何发家"><a href="#如何发家" class="headerlink" title="如何发家"></a>如何发家</h2><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><ol><li>创造资源</li><li>对接资源(衍生出平台的概念)</li></ol><p>单纯卖货不行了，必须要“卖货+服务”</p><h3 id="流量"><a href="#流量" class="headerlink" title="流量"></a>流量</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 手下人多了，坏消息也就会逐渐增加</span></span><br><span class="line"><span class="bullet">1.</span> 要会分辨，有一些坏消息是底下人误导你</span><br><span class="line"><span class="bullet">2.</span> 要会拍板，比如有个地方坏账了，现在止损是10W，如果不及时处理，可能打官司后影响更差、损失更多</span><br><span class="line"><span class="bullet">3.</span> 要会预判，</span><br><span class="line"><span class="bullet">4.</span> 要会统筹，人财多，各环节都要争夺资源，如何安排以实现盈利目标</span><br><span class="line"><span class="bullet">5.</span> 分配，赚到钱拿多少分配给底下？</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">暂无描述</summary>
    
    
    
    <category term="Diary" scheme="https://ayou129.github.io/blog/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>K8s学习并实践云原生技术</title>
    <link href="https://ayou129.github.io/blog/p/41057579/"/>
    <id>https://ayou129.github.io/blog/p/41057579/</id>
    <published>2021-03-14T16:37:26.000Z</published>
    <updated>2022-10-23T09:03:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>是时机开始学习分布式相关的技能了，这篇是关于K8s相关的内容，慢慢补充…</p><span id="more"></span><h1 id="学习并实践云原生技术"><a href="#学习并实践云原生技术" class="headerlink" title="学习并实践云原生技术"></a>学习并实践云原生技术</h1><p>基础知识：CNCF X Alibaba云与安生技术公开课 -&gt; 第三讲：Kubernetes 核心概念</p><p>K8s可以管理成百上千个容器组成的应用程序，在物理虚拟机、云环境、混合部署环境等不同环境中管理</p><h2 id="K8S解决了哪些问题？"><a href="#K8S解决了哪些问题？" class="headerlink" title="K8S解决了哪些问题？"></a>K8S解决了哪些问题？</h2><p>微服务的兴起导致增加容器技术的使用，因为容器实际上为微服务等小型独立应用程序提供了完美的宿主</p><p>K8s</p><ul><li>高可用</li><li>可伸缩性</li><li>灾难恢复</li></ul><p>容器编排工具的实际任务是什么？</p><h2 id="1-如何创建k8s集群与应用"><a href="#1-如何创建k8s集群与应用" class="headerlink" title="1. 如何创建k8s集群与应用"></a>1. 如何创建k8s集群与应用</h2><h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>方式1：</p><ol><li>minikube 不适用生产环境</li></ol><ul><li>社区版 <code>https://minikube.sigs.k8s.io/</code></li><li>中国版 <code>https://developer.aliyun.com/article/221687</code></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">启动集群：minikube start</span><br><span class="line">插件系统：minikube addons list</span><br><span class="line">Dashboard界面：minikube dashboard</span><br><span class="line">插件集群状态：minikube status</span><br><span class="line"></span><br><span class="line"><span class="comment"># K8S</span></span><br><span class="line">alias <span class="attribute">k</span>=kubectl</span><br><span class="line">kubectl cluster-<span class="built_in">info</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启服务</span></span><br><span class="line">k apply -f ./k8s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除服务</span></span><br><span class="line">k delete -f ./k8s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有 pod</span></span><br><span class="line">k <span class="built_in">get</span> pods</span><br><span class="line"></span><br><span class="line">minikube ssh</span><br><span class="line">cd build</span><br><span class="line">docker load xxxx</span><br></pre></td></tr></table></figure><ol start="2"><li>阿里云ACK快速创建<br>标准集群</li></ol><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><ol><li><p>应用访问(内外)问题<br>解决方案：设置一个Server</p></li><li><p>应用之间的依赖关系：nginx-&gt;php<br>解决方案：设置参数后，pod不断重启，如果最后还是检测到失败则整体失败</p></li><li><p>应用嗅探其他应用是否存活<br>解决方案：yaml-&gt;server-&gt;containers-&gt;配置 readinessProbe 以及 livenessProbe</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">readinessProbe:</span></span><br><span class="line"><span class="symbol">  tcpSocket:</span></span><br><span class="line"><span class="symbol">    port:</span><span class="number">8888</span></span><br><span class="line"><span class="symbol">  initialDelaySeconds:</span><span class="number">5</span></span><br><span class="line"><span class="symbol">  periodSeconds:</span><span class="number">10</span></span><br><span class="line"><span class="symbol">livenessProbe:</span></span><br><span class="line"><span class="symbol">  tcpSocket:</span></span><br><span class="line"><span class="symbol">    port:</span><span class="number">8888</span></span><br><span class="line"><span class="symbol">  initialDelaySeconds:</span>`<span class="number">5</span></span><br><span class="line"><span class="symbol">  periodSeconds:</span><span class="number">20</span></span><br></pre></td></tr></table></figure></li></ol><p>应用数据存储问题<br>    数据(持久化存储) -<br>    日志</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>一个k8s</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/k8s</span><br><span class="line">    /mysql.yaml</span><br><span class="line">        kind:Service <span class="comment">#</span></span><br><span class="line">        kind:PersistentVolumeClaim <span class="comment">#数据持久化</span></span><br><span class="line">        kind:Deployment <span class="comment">#项目配置启动</span></span><br><span class="line">            环境变量</span><br><span class="line">            镜像</span><br><span class="line">            应用嗅探</span><br><span class="line">    /redis.yaml</span><br><span class="line">    /web.yaml</span><br></pre></td></tr></table></figure><h2 id="2-部署到生产环境注意事项"><a href="#2-部署到生产环境注意事项" class="headerlink" title="2. 部署到生产环境注意事项"></a>2. 部署到生产环境注意事项</h2><ol><li>生产环境的mysql、redis等数据库不建议放在k8s中，应提前构建实例，并且通过external类型的svc指向对应实例</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;cat mysql.yaml</span><br><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span>Service</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  lables:</span></span><br><span class="line"><span class="symbol">    app:</span>mysql</span><br><span class="line"><span class="symbol">  name:</span>mysql</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  type:</span> ExternalName</span><br><span class="line"><span class="symbol">  externalName:</span> 实例的host</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="language-bash"><span class="built_in">cat</span> web.yaml</span></span><br><span class="line">这里修改的是mysql的具体详情</span><br></pre></td></tr></table></figure><ol start="2"><li><p>应用的部署应该与之前保持一致<br><code>k apply -f https://raw.githubusercontent.com/wonderflow/gin-vue-admin/master/k8s/web-server.yaml</code></p></li><li><p>业务高峰期 pod压力大 nod压力就回答 会判定QoS，导致pod会被重启，也就是某个核心业务被重启</p><blockquote><p>我们的目的是提高资源利用率，流量大后会导致该问题</p></blockquote></li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">resources:</span></span><br><span class="line"><span class="symbol">  requests:</span></span><br><span class="line"><span class="symbol">    cpu:</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">    memory:</span> <span class="number">1</span>Gi</span><br><span class="line"><span class="symbol">  limits:</span></span><br><span class="line"><span class="symbol">    cpu:</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">    memory:</span> <span class="number">1</span>Gi</span><br></pre></td></tr></table></figure><p>建议requests &#x3D; limits</p><ol start="4"><li>上下线要变得更优雅一些<br>上线</li></ol><ul><li><p>linveness探针 例如：开始时间 靠后一些 容错率提高</p></li><li><p>readiness探针 例如：<br>检查到pod失效，会自动找到pod对应在service的endpoint列表中拆除，让pod下线，尽量严格一些</p></li></ul><p>下线</p><ul><li><p>服务端负载均衡</p></li><li><p>客户端负载均衡</p></li></ul><img src="/blog/p/41057579/%E5%BA%94%E7%94%A8-%E4%BC%98%E9%9B%85%E4%B8%8A%E4%B8%8B%E7%BA%BF%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81.jpg" class="" title="应用-优雅上下线核心代码.jpg"><img src="/blog/p/41057579/%E5%BA%94%E7%94%A8-%E4%BC%98%E9%9B%85%E4%B8%8A%E4%B8%8B%E7%BA%BF.png" class="" title="应用-优雅上下线.png"><img src="/blog/p/41057579/%E5%BA%94%E7%94%A8-%E4%BC%98%E9%9B%85%E4%B8%8A%E4%B8%8B%E7%BA%BF.jpg" class="" title="应用-优雅上下线.jpg"><img src="/blog/p/41057579/%E5%BA%94%E7%94%A8-%E9%9D%9E%E4%BC%98%E9%9B%85%E4%B8%8A%E4%B8%8B%E7%BA%BF.jpg" class="" title="应用-非优雅上下线.jpg"><ol start="5"><li>集群级别的生产<br>微服务体系<br>日志体系<br>监控体系<br>安全体系<br>弹性体系</li></ol><h2 id="3-k8s监控与日志"><a href="#3-k8s监控与日志" class="headerlink" title="3. k8s监控与日志"></a>3. k8s监控与日志</h2><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><h4 id="如何选型"><a href="#如何选型" class="headerlink" title="如何选型"></a>如何选型</h4><ul><li><p>传统架构</p><ul><li>资源监控</li><li>应用监控</li></ul></li><li><p>容器架构</p><ul><li>资源监控</li><li>管控系统监控</li><li>微服务拓扑监控</li><li>中间件系统监控</li><li>应用监控</li></ul></li></ul><h4 id="采集的方式动态化了，应该如何使用"><a href="#采集的方式动态化了，应该如何使用" class="headerlink" title="采集的方式动态化了，应该如何使用"></a>采集的方式动态化了，应该如何使用</h4><ul><li><p>传统架构：</p><ul><li>配置静态采集对象</li><li>正向拓扑关系配置</li></ul></li><li><p>容器架构</p><ul><li>容器发现动态采集</li><li>反向拓扑关系耦合</li></ul></li></ul><h4 id="可观测能力整合了应该如何运维"><a href="#可观测能力整合了应该如何运维" class="headerlink" title="可观测能力整合了应该如何运维"></a>可观测能力整合了应该如何运维</h4><ul><li><p>传统架构</p><ul><li>报警 运维 报警消除</li></ul></li><li><p>容器架构</p><ul><li>报警 自愈 报警消除 复盘</li><li>报警 自愈失败 运维 报警消除</li></ul></li></ul><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><ul><li><p>日志监控方式 <code>https://developer.aliyun.com/lesson_2174_21488#_21488</code></p><ul><li>资源监控：CPU、内存、网络 以数值 百分比为单位进行统计</li><li>性能监控：应用内部监控，通常是通过勾子在虚拟机层、字节码执行回调，获取更深层次的监控指标</li><li>安全监控：越权管理、安全漏洞扫描</li><li>事件监控：K8s中的口岸空方式，补充未监控到的内容</li></ul></li><li><p>监控接口标准化</p><ul><li>Resource Metrics K8s内置消费链路，无法自定义监控</li><li>Custom Metrics Prometheus 提供资源监控和自定义监控</li><li>External Metrics 云厂商(Aliyun)提供监控指标</li></ul></li><li><p>日志分类</p><ul><li>主机内核日志：网络栈、驱动、文件系统异常</li><li>Runtime：比如Docker运行日志</li><li>核心组件日志：APIServer用来审计，Scheduler日志可以诊断调度，etcd可以查看存储状态，Ingress日志可以分析接入层流量</li><li>部署应用的日志：分析查看业务层的状态，诊断异常</li></ul></li><li><p>日志采集方式</p><ul><li>挂载宿主机采集：将日志目录挂载出来，采集器自动采集</li><li>标准输入输出采集(推荐)：主动提交采集</li><li>Sidecar采集：将采集器注入到pod，一般用于安全或者隔离级别很高的应用</li></ul></li><li><p>核心：</p><ul><li><p>减少出现的问题</p><ol><li>集群组件尽量精简，减少全局组件</li><li>应用配置合理的request、limit 超卖比，高并发请求下可能会导致业务pod被重启</li><li>在线业务配置Readiness、Liveness，因为会导致k8s操作时，pod不可用</li></ol></li><li><p>建立有梯度的管理体系，事件监控最适合容器</p><ol><li>最上层：APM监控</li><li>中层：日志、事件孔安静</li><li>最下层：资源监控</li></ol></li><li><p>标准化的问题如何解决</p><ol><li>资源、容量的问题配置HPA或者资源弹性</li><li>常见的问题固化为自愈脚本、文档、手册</li></ol></li></ul></li></ul><h2 id="4-k8s弹性伸缩"><a href="#4-k8s弹性伸缩" class="headerlink" title="4. k8s弹性伸缩"></a>4. k8s弹性伸缩</h2><h3 id="调度层伸缩"><a href="#调度层伸缩" class="headerlink" title="调度层伸缩"></a>调度层伸缩</h3><img src="/blog/p/41057579/%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9%E7%9A%84%E6%9C%AC%E8%B4%A8-%E5%AE%B9%E9%87%8F%E4%B8%8E%E6%88%90%E6%9C%AC.jpg" class="" title="弹性伸缩的本质-容量与成本.jpg"><img src="/blog/p/41057579/%E8%B0%83%E5%BA%A6%E4%B8%8E%E8%B5%84%E6%BA%90%E8%A7%A3%E8%80%A6%E7%9A%84%E4%B8%A4%E5%B1%82%E6%9E%B6%E6%9E%84.jpg" class="" title="调度与资源解耦的两层架构.jpg"><p>容器水平伸缩(HPA)是k8s常用的弹性伸缩方式，使用注意事项<br>HPA根据统计数据指标进行扩容</p><img src="/blog/p/41057579/%E5%AE%B9%E5%99%A8%E6%B0%B4%E5%B9%B3%E4%BC%B8%E7%BC%A9HPA.jpg" class="" title="容器水平伸缩HPA.jpg"><ol><li>Request的合理设置，建议Request&lt;&#x3D;limit</li><li>弹性指标的合理选择，指标一般有 CPU、Memory、QPS，要根据业务场景去选择</li><li>业务状态的弹性支持</li></ol><p>容器定时水平伸缩(CronHPA) <code>https://github.com/AliyunContainerService/kubernetes-cronhpa-controller</code><br>后台统计出整天或者某个节假日的请求数量分布图时，可以定时伸缩</p><img src="/blog/p/41057579/%E5%AE%B9%E5%99%A8%E5%AE%9A%E6%97%B6%E6%B0%B4%E5%B9%B3%E4%BC%B8%E7%BC%A9CronHPA.jpg" class="" title="容器定时水平伸缩CronHPA.jpg"><h3 id="资源型伸缩"><a href="#资源型伸缩" class="headerlink" title="资源型伸缩"></a>资源型伸缩</h3><p>无服务器弹性伸缩 Virtual-node</p><img src="/blog/p/41057579/%E6%97%A0%E6%9C%8D%E5%8A%A1%E5%9E%8B%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9.jpg" class="" title="无服务型弹性伸缩.jpg"><ul><li><p>1.0版本虚拟化出一个node也就是服务器，进行快速伸缩，普通的Ecs服务器首次上项目的时候用<br>问题：缩的时候检测不到虚拟的，所以可能会有问题</p></li><li><p>2.0版本<br>无服务器弹性伸缩场景介绍：</p></li></ul><ol><li>在线业务，存在资源利用率的波峰波谷、徒增流量毛刺的场景：网站、API、机器学习推理、大数据流式处理等</li><li>离线计算，Spark、机器学习训练、多媒体转码</li><li>定时任务，运行频度不高但是资源需求在容量规划之外，可以通过弹性伸缩降低容量管理的复杂度：离线定时ETL、数据分析与报表</li><li>特殊场景，对稳定性有极高的要求：异地多活弹性、混合云弹性</li></ol><h2 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 pod 环境 (beta/prod/dev)</span></span><br><span class="line">kubectl label nginx1 <span class="attribute">env</span>=dev --overwrite(是否覆盖)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉 label 中的值，增加-即可</span></span><br><span class="line">kubectl label pods tie-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选查询 lables</span></span><br><span class="line">kubectl <span class="built_in">get</span> pods --show-labels -l <span class="attribute">test1</span>=1,test2=2</span><br><span class="line">kubectl <span class="built_in">get</span> pods --show-labels -l env <span class="keyword">in</span> (test1,test2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给 pod 增加非标志性信息</span></span><br><span class="line">kubectl annotate pods pod名称 <span class="attribute">key</span>=<span class="string">&#x27;value&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="服务编排-参数详解"><a href="#服务编排-参数详解" class="headerlink" title="服务编排 参数详解"></a>服务编排 参数详解</h2><p>selector 查询资源<br>pod<br>层级<br>环境</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">资源标签 <span class="built_in">labels</span></span><br><span class="line">pod</span><br><span class="line">    environment: production</span><br><span class="line">    release: stable</span><br><span class="line">    app.k8s.io.version: <span class="number">5.1</span><span class="number">.1</span></span><br><span class="line">node</span><br><span class="line">    www.xxx.<span class="built_in">beta</span>.<span class="built_in">domain</span>/<span class="built_in">region</span>: cn-hangzhou</span><br><span class="line">annotations </span><br><span class="line">    存储资源的非标志性信息</span><br><span class="line">        <span class="built_in">domain</span>/<span class="built_in">domain</span>.cert_id: <span class="string">&quot;asdas,123=&quot;</span></span><br><span class="line">    拓展 资源的 spec/<span class="built_in">status</span></span><br><span class="line">ownerReference</span><br><span class="line">    所有者 pod</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="控制循环例子-扩容-ReplicaSet"><a href="#控制循环例子-扩容-ReplicaSet" class="headerlink" title="控制循环例子-扩容(ReplicaSet)"></a>控制循环例子-扩容(ReplicaSet)</h3><p>ReplicaSet -&gt; selector 选择 pod，然后进行操作<br>replicas: 数量<br>扩容逻辑：</p><ol><li>首先处理 更新事件</li><li>对比新旧文件之后，追加处理一个增加 pod 的事件，并且更新旧文件</li></ol><h3 id="使用k8s"><a href="#使用k8s" class="headerlink" title="使用k8s"></a>使用k8s</h3><ol><li>创建集群部署应用</li></ol>]]></content>
    
    
    <summary type="html">K8s学习并实践云原生技术</summary>
    
    
    
    <category term="编程语言" scheme="https://ayou129.github.io/blog/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="分布式" scheme="https://ayou129.github.io/blog/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>挖矿</title>
    <link href="https://ayou129.github.io/blog/p/c9a57581/"/>
    <id>https://ayou129.github.io/blog/p/c9a57581/</id>
    <published>2021-03-14T16:37:26.000Z</published>
    <updated>2021-05-15T10:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>家里有台无用的高配台式电脑，刚看到新闻比特币已经涨到6w&#x2F;个，好奇驱动，让我把这台windows利用起来，纯粹兴趣</p><span id="more"></span><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>虚拟币<br>    比特币 BTH<br>    以太坊 ETH</p><p>电子钱包</p><p>挖矿软件<br>    HIVE OS<br>    轻松矿工，抽水严重<br>    选用开源的挖矿软件 lolMiner</p><p>挖矿算力来源：GPU(显卡)<br>    首选RTX3060Ti 或3070<br>    次选3080&#x2F;3090，<br>矿池选择大的</p><p>挖矿计算器<br>    <a href="https://www.whattomine.com/" target="_blank" rel="noopener">https://www.whattomine.com</a></p><p>BTC <code>https://btc.com/</code><br>F2pool <code>https://www.f2pool.com/user/worker </code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#URL</span>:https:<span class="comment">//www.bminer.me/zh/</span></span><br><span class="line">wget https:<span class="comment">//www.bminercontent.com/releases/bminer-v16.4.5-53c7f21-amd64.tar.xz</span></span><br><span class="line">tar -zxvf bminer-v16.<span class="number">4.5</span>-<span class="number">53</span>c7f21-amd64<span class="selector-class">.tar</span><span class="selector-class">.xz</span></span><br><span class="line">cd bminer-v16.<span class="number">4.5</span>-<span class="number">53</span>c7f21</span><br><span class="line">vim mine_grin29<span class="selector-class">.sh</span></span><br><span class="line">./bminer -uri ethstratum:<span class="comment">//lee129.001:x@btc.f2pool.com:1314 -api 127.0.0.1:1880 </span></span><br><span class="line">bash mine_grin29.sh</span><br></pre></td></tr></table></figure><h2 id="比特币-点对点电子现金系统"><a href="#比特币-点对点电子现金系统" class="headerlink" title="比特币-点对点电子现金系统"></a>比特币-点对点电子现金系统</h2><p>白皮书 <code>https://wenku.baidu.com/view/c2070d7d657d27284b73f242336c1eb91a3733b0.html?rec_flag=default</code></p><p>传统交易系统：支付者-&gt;金融机构-&gt;接收者|基于信用｜第三方机构随时能够介入并处理|增加交易成本，限制交易规模(小额交易等)<br>新型交易系统：支付者-&gt;接收者|基于密码学｜点对点，属于不可逆支付|会有双重支付的问题</p><p>问题：双重交易<br>解决方案：网络通过随机散列对所有的交易都加上时间戳，作为一个在不断延伸的链条当中的一个块(交易记录)<br>区块中的交易信息如果被证工作量证明，则该区块下的所有交易无法被更改，除非发生系统攻击(完成相同的工作量证明)，下文会介绍相关内容</p><p>基本概念：</p><p>火币是交易所，但是只是平台方，买方卖方均是个人</p><p>区块链底层技术 <a href="https://www.chainnode.com/doc/5068" target="_blank" rel="noopener">https://www.chainnode.com/doc/5068</a><br>    出块时长<br>        采用HPoS共识机制，具有交易成本低、交易延时低、交易并发高等特点； 支持最大的验证人节点数量是 21个。<br>    共识机制<br>    智能合约<br>    密码技术<br>    多链融合<br>        可通过资产跨链桥，将ETH、BTC、稳定币等资产映射到Heco，实现方式为在源链上锁定一定数量的资产后在Heco生成对应数量的Token。 Heco鼓励社区开发者提供更多去中心化的跨链解决方案。</p><p>电子货币：数字签名<br>    当前所有者对<br>        前一次交易<br>        下一位拥有者的公钥<br>        上两个参数加起来 签署一个随机散列的数字签名，添加到电子货币的末尾<br>    发送给下一位拥有者<br>    下一位拥有者<br>        比对签名</p><p>货币交易的方案：<br>    所有交易必须被公开宣布<br>    整个系统中所有的参与者，都有唯一公认的历史交易序列(之前有权威性的交易历史，可供查询)<br>    收款人需要确保在交易期间绝大多数的节点都认为该交易是首次出现的</p><p>时间戳服务器</p><pre><code>              加上时间戳           加上时间戳          加上时间戳</code></pre><p>正常交易的链条：交易1————-&gt;交易2————-&gt;交易3————-&gt;交易n(越往后，工作量证明)<br>恶意攻击，则必须重新从头计算到尾，但是如果正常链条一直在无限传播，并且CPU计算能力相同，恶意攻击的计算出来链条无法超过正常的链条，那就绝对安全<br><code>只要诚实的节点所控制的计算能力的总和，大于有合作关系的(cooperating)攻击者的计算能力的总和，该系统就是安全的。</code></p><p>规定：<br>    每一枚电子货币，都将自己的数字签名放在电子货币的末尾<br>    数字签名：每一位所有者上一次的交易 和 下一位拥有者的公钥 签署一个随机散列的数字签名</p><p>每个人都有公钥</p><p>A的公钥<br>上一个交易<br>B的公钥</p><p>比特币系统由单向列表组成的区块组成<br>    第一个区块叫创世纪块(genesis block)<br>    区块与区块之间由哈希链表关联(哈希指针hash pointers)<br>    每一个区块大小上限1MB，2000-3000笔交易<br>    每一个区块包含区块头和区块体<br>        区块头：<br>            自己区块的hash值<br>            上一个区块的hash值<br>            区块产生的时间戳<br>            难度(防止飞快发展的计算机算力提高减少区块生成的时间，这是个动态配置参数，来保证无论何种情况下比特币系统区块的生成时间始终保持在10分钟一个)<br>            …<br>            默克尔根(所有交易的最终hash值，目的就是为了证明)<br>        区块体：<br>            最下层是交易<br>            上层及以上都是hash值，层层的hash值，最上面是最终hash值</p><p>在比特币区块链网络中有很多节点，包括计算机、手机、矿机、服务器等等。在所有节点中分为：全节点和轻节点。<br>全节点（full node）：保存了区块的所有内容，区块头和区块体。<br>轻节点（light node）：只保存了区块头，比如手机中的比特币钱包。</p><p>由于轻节点中没有存交易具体信息，那有这样一个场景该怎么办呢：<br>zarten1用户转账给zarten2轻节点用户，zarten2如何知道此交易写入区块链了？或者说zarten1如何向zarten2证明交易已经写入区块链了？<br>为了解决上面问题，轻节点向全节点请求这个交易（上图中黄色标记的交易），全节点只需提供这个交易相关的哈希值（上图中红色标记的哈希值）即可。轻节点在本地根据这个交易的merkle proof计算出最后的根哈希值，然后对比本地区块头中的根哈希值是否一样，若一样，则证明此交易写入了区块链中。</p><p>若要证明某个交易不在区块链中，怎么办呢？<br>虽然比特币区块链中没有这个需求，但我们可以思考下如何实现这样需求。<br>第一种方案：全节点将整个区块所有交易信息发给轻节点，这样可以证明某个交易不在区块中，但这是非常不高效的方法且比较笨的方法。<br>第二种方案：思路还是根据merkle proof计算根哈希值，轻节点向全节点对这个交易发出请求，全节点为了证明此交易不在区块链中。</p><p>全节点只需以下这样做即可：<br>对区块中所有交易的哈希值进行排序，然后计算要证明的交易的哈希值，根据二分查找法来确定这个交易哈希值的位置，再将此位置相邻的2个交易merkle proof发送给轻节点。<br>轻节点只需以下这样做即可：<br>轻节点收到merkle proof后，根据merkle proof计算得到最后的根哈希值（root hash），若计算得到的根哈希值跟本地的区块头中的根哈希值比较一样，则证明此交易一定不在区块链中，因为如果在的话，最后计算出来的根哈希值比较必然是不一样的。</p><p>比特币：去中心化(说白了就是没有银行，支付方和接收方，也就是点对点的交易)，多人共同维护的点对点数字现金系统，比特币总量固定2100w个，特点是抗通货膨胀<br>法币：能够看到实物的货币<br>稳定币：具有稳定价值的加密货币，用来当作数字货币世界连接法币世界的媒介，USDT就是其中最出名的 <code>https://baike.baidu.com/item/%E6%B3%B0%E8%BE%BE%E5%B8%81</code><br>公链：就是公有链，而公有链是指全世界任何人都可读取、发送交易且交易能获得有效确认的、也可以参与其中共识过程的区块链。<br>区块链：由多个区块以单链结构组成的链条<br>区块：区块链中的区块<br>正常的交易链条：运行在各大厂商系统中的核心链条，也是最长的链条，基于随机数列的工作量证明<br>攻击者攻击方式：重新计算所有链条中各个区块的工作量，并且超过正常交易链条，需要强大算力<br>pool：cpu计算能力最大的链条<br>nodes：提供计算的节点，一般指所有矿工<br>可以随时离开或加入网络<br>并且将最长的工作量证明链条作为在该节点离线期间发生的交易的证明<br>系统是否安全的评判：诚实的节点所控制的计算机算力的总和 &gt; 攻击者所控制的计算机算力的总和，系统就是安全的<br>注意事项：<br>有关比特币相关的交易，在交易所例如火币平台上提交交易申请成功后，交易所会将该交易发至比特币交易系统，比特币交易不是实时的，每发生一笔比特币交易，在比特币系统当中会将这一笔交易存入分布式系统内存池，连同池内的其他交易等待算力证明，证明完成后交易会被打包进一个区块中，成为区块链当中的一个链节点，同时也更新了该链的长度，成为最新的数据链，最后公开该交易</p><p>职业矿工的入坑逻辑</p><ol><li>大批量购卡</li><li>组建矿机</li><li>假定挖矿过程中，币在交易所中只增不减，然后持续n个月的不停断工作<br> 退出<br> 处理币<br> 处理显卡<br> 超频<br> 设备调频的目的是为了收益最大化，也就是通过调整设备的能效比来优化矿机的收益<br>     以现有的设备整体情况，结合行情得出的设备整体净收益<br>         币池 产出比<br>         币价<br>         电价<br>         设备算力<br> 超频方式：下载官方固件安装，不然风险， 病毒 劫持矿机算力 抽水 设备损坏</li></ol><p>风险<br>    显卡坏</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>介绍比特币——点对点交易系统</li><li>介绍挖矿完整步骤(不深入)</li></ol><div class="tip">虚拟币交易所无论是否受到监管，风险依旧，投机者建议提前查阅相关资料自行判断</div>]]></content>
    
    
    <summary type="html">挖矿</summary>
    
    
    
    <category term="编程语言" scheme="https://ayou129.github.io/blog/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="区块链" scheme="https://ayou129.github.io/blog/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>解耦之道</title>
    <link href="https://ayou129.github.io/blog/p/ec99c691/"/>
    <id>https://ayou129.github.io/blog/p/ec99c691/</id>
    <published>2021-03-01T05:12:44.000Z</published>
    <updated>2021-03-02T05:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂无描述</p><span id="more"></span><h2 id="什么是耦合"><a href="#什么是耦合" class="headerlink" title="什么是耦合"></a>什么是耦合</h2><p>指在程序中，模块与模块之间信息与参数依赖的程度</p><h2 id="耦合度的计算方法"><a href="#耦合度的计算方法" class="headerlink" title="耦合度的计算方法"></a>耦合度的计算方法</h2><p>待补充…</p><h2 id="为什么要解耦"><a href="#为什么要解耦" class="headerlink" title="为什么要解耦"></a>为什么要解耦</h2><p>解耦合是为了更好地应对需求变更</p><h2 id="如何解耦"><a href="#如何解耦" class="headerlink" title="如何解耦"></a>如何解耦</h2><h3 id="单一原则"><a href="#单一原则" class="headerlink" title="单一原则"></a>单一原则</h3><ul><li>一个类只负责一项职责</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 教书(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 讲课(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 听课(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 写作业(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改变为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 教书(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 讲课(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 听课(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 写作业(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖倒置原则-面向接口编程"><a href="#依赖倒置原则-面向接口编程" class="headerlink" title="依赖倒置原则(面向接口编程)"></a>依赖倒置原则(面向接口编程)</h3><ul><li>高层模块不应该依赖于低层模块，二者都应该依赖其抽象</li><li>抽象不依赖细节，细节依赖抽象</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$english</span> = <span class="keyword">new</span> English();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$english</span>-&gt;teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">English</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;教英语&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改变为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params">CourseInterface <span class="variable">$course</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$course</span>-&gt;teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程抽象接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CourseInterface</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">English</span> <span class="keyword">implements</span> <span class="title">CourseInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;教英语&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$teacher</span> = <span class="keyword">new</span> Teacher();</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$teacher</span>-&gt;teach(<span class="keyword">new</span> English());</span><br></pre></td></tr></table></figure><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><ul><li>实现不应该依赖它不需要的接口，一个类对另一个类的依赖应该建立在最小的接口上</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">implements</span> <span class="title">Teach</span>,<span class="title">Study</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 教书(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 讲课(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 听课(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 写作业(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改变为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Teach</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 教书(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 讲课(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Study</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 听课(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 写作业(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><h3 id="最少原则（迪米特法则）"><a href="#最少原则（迪米特法则）" class="headerlink" title="最少原则（迪米特法则）"></a>最少原则（迪米特法则）</h3><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><ul><li>指对象内部有不同的行为，应用在不同的场景中，并且有不同的实现算法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$course</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">CourseInterface <span class="variable">$course</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;<span class="variable">$course</span> = <span class="variable">$course</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;course-&gt;teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程抽象接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CourseInterface</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">English</span> <span class="keyword">implements</span> <span class="title">CourseInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;教英语&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$teacher</span> = <span class="keyword">new</span> Teacher(<span class="keyword">new</span> English());</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$teacher</span>-&gt;teach();</span><br></pre></td></tr></table></figure><h3 id="IOC与DI"><a href="#IOC与DI" class="headerlink" title="IOC与DI"></a>IOC与DI</h3><ul><li>IOC：控制反转，把对象的调用权交给容器，通过容器实现对象的装配和管理</li><li>DI：依赖注入，对象之间的依赖关系有容器在运行期决定，由容器动态的将依赖关系注入到对象中</li><li>DI是对IOC更完善的描述</li></ul><p>IOC容器控制对象，将依赖关系(外部对象)注入进对象<br>反转：获取对象的依赖关系(外部对象)的方式，之前是通过手动引入(耦合度高)，现在是通过容器注入</p>]]></content>
    
    
    <summary type="html">解耦之道</summary>
    
    
    
    <category term="编程语言" scheme="https://ayou129.github.io/blog/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>算法与数据结构</title>
    <link href="https://ayou129.github.io/blog/p/4b0178e0/"/>
    <id>https://ayou129.github.io/blog/p/4b0178e0/</id>
    <published>2020-10-04T14:55:19.000Z</published>
    <updated>2020-12-22T09:58:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂无描述</p><span id="more"></span><blockquote><p>O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n²) &lt; O(n³) &lt; O(n!) &lt; O(nn)</p></blockquote><p>时间复杂度<br>去掉了许多东西，只剩下了一个最高阶项。<br>当要处理的样本量足够大时，低阶项就不那么重要了。这就是时间复杂度的意义，它是衡量算法流程的复杂程度的一种指标，该指标只与数据量有关，与过程之外的优化无关。</p><p>对数器<br>二分法<br>异或</p>]]></content>
    
    
    <summary type="html">暂无描述</summary>
    
    
    
    
    <category term="算法" scheme="https://ayou129.github.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ElementUI工具</title>
    <link href="https://ayou129.github.io/blog/p/801262be/"/>
    <id>https://ayou129.github.io/blog/p/801262be/</id>
    <published>2020-09-10T11:04:59.000Z</published>
    <updated>2020-09-22T11:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>暂无描述</p><span id="more"></span><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line">&lt;template lang=<span class="string">&quot;html&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">class</span>=<span class="string">&quot;main-panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;xxxxxDialog(&#x27;post&#x27;)&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">title</span>=<span class="string">&quot;编辑&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;xxxxxDiaIsShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;diaForm&quot;</span> <span class="attr">:append-to-body</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&quot;xxxxxRef&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:model</span>=<span class="string">&quot;xxxxxForm&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:rules</span>=<span class="string">&quot;xxxxxRules&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label-width</span>=<span class="string">&quot;140px&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;车牌号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;plate_number&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;15&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">v-model</span>=<span class="string">&quot;xxxxxForm.plate_number&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">placeholder</span>=<span class="string">&quot;请输入车牌号&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">click</span>=<span class="string">&quot;editXXXXX()&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span>确认<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;xxxxxDiaIsShow = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-table</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:data</span>=<span class="string">&quot;xxxxxTableData&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">border</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">prop</span>=<span class="string">&quot;create_time&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;创建时间&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">prop</span>=<span class="string">&quot;update_time&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;更新时间&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">fixed</span>=<span class="string">&quot;right&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;xxxxxDialog(&#x27;put&#x27;,scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteXXXXX(scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;margin-top:20px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-pagination</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:current-page</span>=<span class="string">&quot;xxxxxTableDataPaginateCurrentPage&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:page-sizes</span>=<span class="string">&quot;xxxxxTableDataPaginateTotalPageSizes&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:page-size</span>=<span class="string">&quot;xxxxxTableDataPaginateTotalPageSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:total</span>=<span class="string">&quot;xxxxxTableDataPaginateTotal&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">size-change</span>=<span class="string">&quot;xxxxxTableDataHandleSizeChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">current-change</span>=<span class="string">&quot;xxxxxTableDataHandleCurrentChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- &lt;span&gt;当前&#123;&#123; xxxxxTableDataPaginateCurrentPage &#125;&#125;页，&lt;/span&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">                        &lt;span&gt;共&#123;&#123; xxxxxTableDataPaginateLastPage &#125;&#125;页&lt;/span&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">loading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxSearchForm</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableData</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableDataPaginateCurrentPage</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableDataPaginateTotal</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableDataPaginateLastPage</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableDataPaginateTotalPageSize</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableDataPaginateTotalPageSizes</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTab</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxEditType</span>: <span class="string">&#x27;post&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxDiaIsShow</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxForm</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxRules</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">mobile_number</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">password</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">xxxxxTableDataHandleSizeChange</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 改变每页显示的条数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateTotalPageSize</span> = val</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>(<span class="number">1</span>, <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateTotalPageSize</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">xxxxxTableDataHandleCurrentChange</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateCurrentPage</span> = val</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>(val, <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateTotalPageSize</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getXXXXXList</span>(<span class="params">page = <span class="number">1</span>, limit = <span class="number">10</span></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">xxxxxSearchForm</span>.<span class="property">page</span> = page</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">xxxxxSearchForm</span>.<span class="property">limit</span> = limit</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;main/getXXXXXList&#x27;</span>,<span class="variable language_">this</span>.<span class="property">xxxxxSearchForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">xxxxxTableData</span> = res.<span class="property">data</span>.<span class="property">data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateTotal</span> = res.<span class="property">data</span>.<span class="property">total</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateCurrentPage</span> = res.<span class="property">data</span>.<span class="property">current_page</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateLastPage</span> = res.<span class="property">data</span>.<span class="property">last_page</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">deleteXXXXX</span>(<span class="params">row</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// console.log(row)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;确认删除吗？&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;main/deleteXXXXX&#x27;</span>, &#123; <span class="attr">id</span>: row.<span class="property">id</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">xxxxxDiaIsShow</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">message</span>: res.<span class="property">msg</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this.loading = false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">message</span>: <span class="string">&#x27;已取消删除&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">editXXXXX</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">xxxxxEditType</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">case</span> <span class="string">&#x27;post&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;xxxxxRef&#x27;</span>].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (valid) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;xxxxx/postXXXXX&#x27;</span>, <span class="variable language_">this</span>.<span class="property">xxxxxForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">xxxxxForm</span> = &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">xxxxxDiaIsShow</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">message</span>: res.<span class="property">msg</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">break</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">case</span> <span class="string">&#x27;put&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;xxxxxRef&#x27;</span>].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (valid) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;xxxxx/putXXXXX&#x27;</span>, <span class="variable language_">this</span>.<span class="property">xxxxxForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">xxxxxForm</span> = &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">xxxxxDiaIsShow</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">message</span>: res.<span class="property">msg</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">break</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">xxxxxDialog</span>(<span class="params">type, row</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">xxxxxDiaIsShow</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">switch</span> (type) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">case</span> <span class="string">&#x27;post&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">xxxxxEditType</span> = <span class="string">&#x27;post&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">break</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">case</span> <span class="string">&#x27;put&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">xxxxxEditType</span> = <span class="string">&#x27;put&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 这里一定要使用nextTick的方式赋值，不然会卡住input</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//   this.$set(this.xxxxxForm, &#x27;id&#x27;, row.id)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">break</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.main-panel</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">padding</span>: <span class="number">18px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-dialog v-loading=<span class="string">&quot;loading&quot;</span> title=<span class="string">&quot;xxxxxEditType===&#x27;put&#x27;?&#x27;编辑&#x27;:&#x27;添加&#x27;&quot;</span> :visible.<span class="property">sync</span>=<span class="string">&quot;xxxxxDiaIsShow&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;diaForm&quot;</span> :append-to-body=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">ref</span>=<span class="string">&quot;xxxxxForm&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:model</span>=<span class="string">&quot;xxxxxForm&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:rules</span>=<span class="string">&quot;xxxxxRules&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">label-width</span>=<span class="string">&quot;140px&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;车牌号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;plate_number&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-model</span>=<span class="string">&quot;xxxxxForm.plate_number&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;请输入车牌号&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;司机&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-model</span>=<span class="string">&quot;xxxxxForm.driver_id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">filterable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">remote</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">reserve-keyword</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;请选择司机&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:remote-method</span>=<span class="string">&quot;getDriverRemote&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:loading</span>=<span class="string">&quot;loading&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-option</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">v-for</span>=<span class="string">&quot;item in driverOptions&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:label</span>=<span class="string">&quot;item.nickname&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;归属人/受益人&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-model</span>=<span class="string">&quot;xxxxxForm.beneficiary_id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">filterable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">remote</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">reserve-keyword</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;归属人/受益人&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:remote-method</span>=<span class="string">&quot;getBeneficiaryRemote&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:loading</span>=<span class="string">&quot;loading&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-option</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">v-for</span>=<span class="string">&quot;beneficiary in beneficiaryOptions&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:key</span>=<span class="string">&quot;beneficiary.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:label</span>=<span class="string">&quot;beneficiary.nickname&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:value</span>=<span class="string">&quot;beneficiary.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">click</span>=<span class="string">&quot;editXXXXX()&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span>确认<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;xxxxxDiaIsShow = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line">&lt;/el-dialog&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">loading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxEditType</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxDiaIsShow</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxRules</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxForm</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">editXXXXX</span>(<span class="params"></span>)&#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h2><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-checkbox-<span class="keyword">group</span> v-model=<span class="string">&quot;coupon_type&quot;</span> @change=<span class="string">&quot;selectCouponType&quot;</span>&gt;</span><br><span class="line">  &lt;el-checkbox</span><br><span class="line">    v-for=<span class="string">&quot;item in coupon_typeAttr&quot;</span></span><br><span class="line">    :<span class="keyword">key</span>=<span class="string">&quot;item.key&quot;</span></span><br><span class="line">    :<span class="keyword">label</span>=<span class="string">&quot;item.value&quot;</span></span><br><span class="line">  &gt;&#123;&#123;coupon_type&#125;&#125;</span><br><span class="line">  &lt;/el-checkbox&gt;</span><br><span class="line">&lt;/el-checkbox-<span class="keyword">group</span>&gt;</span><br><span class="line"></span><br><span class="line">coupon_typeAttr: [</span><br><span class="line">&#123; <span class="keyword">key</span>: 1, value: <span class="string">&#x27;满减&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="keyword">key</span>: 2, value: <span class="string">&#x27;折扣&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="keyword">key</span>: 3, value: <span class="string">&#x27;随机减金额&#x27;</span> &#125;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">selectCouponType(val) &#123;</span><br><span class="line">  this.coupon_type = val</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;兑换优惠券消耗的积分&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;coupon_exchange_integral&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="language-xml"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;15&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="language-xml"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-for</span>=<span class="string">&quot;item in coupon_typeAttr&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;couponForm.coupon_type&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.key&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span><span class="language-xquery">&#123;&#123;<span class="type">item</span>.<span class="keyword">value</span>&#125;</span><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">coupon_typeAttr: [</span><br><span class="line">&#123;<span class="built_in"> key</span>: <span class="number">1</span>, value: <span class="string">&#x27;满减&#x27;</span> &#125;,</span><br><span class="line">&#123;<span class="built_in"> key</span>: <span class="number">2</span>, value: <span class="string">&#x27;折扣&#x27;</span> &#125;,</span><br><span class="line">&#123;<span class="built_in"> key</span>: <span class="number">3</span>, value: <span class="string">&#x27;随机减金额&#x27;</span> &#125;</span><br><span class="line">],</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="selected"><a href="#selected" class="headerlink" title="selected"></a>selected</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;归属人/受益人&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;beneficiary_id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-model</span>=<span class="string">&quot;xxxxxForm.beneficiary_id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">filterable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">remote</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">reserve-keyword</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;归属人/受益人&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:remote-method</span>=<span class="string">&quot;getXXXXXRemote&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:loading</span>=<span class="string">&quot;loading&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-option</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">v-for</span>=<span class="string">&quot;xxxxx in xxxxxOptions&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:key</span>=<span class="string">&quot;xxxxx.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:label</span>=<span class="string">&quot;xxxxx.nickname&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:value</span>=<span class="string">&quot;xxxxx.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">loading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxOptions</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableData</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxDiaIsShow</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getXXXXXRemote</span>(<span class="params">query</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (query !== <span class="string">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">xxxxxOptions</span> = <span class="variable language_">this</span>.<span class="property">xxxxxTableData</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> item.<span class="property">label</span>.<span class="title function_">toLowerCase</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            .<span class="title function_">indexOf</span>(query.<span class="title function_">toLowerCase</span>()) &gt; -<span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//return item.xxx.indexOf(query) &gt; -1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">xxxxxOptions</span> = <span class="variable language_">this</span>.<span class="property">xxxxxTableData</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getXXXXXList</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;main/getShipCompanyList&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">shipCompanyTableData</span> = res.<span class="property">data</span>.<span class="property">data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">shipCompanyOptions</span> = res.<span class="property">data</span>.<span class="property">data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">carRules</span>: &#123;</span><br><span class="line">  <span class="attr">plate_number</span>: [&#123;</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;请输入&#x27;</span>,</span><br><span class="line">    <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">driver_id</span>: [&#123;</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;请选择&#x27;</span>,</span><br><span class="line">    <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">beneficiary_id</span>: [&#123;</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;请选择&#x27;</span>,</span><br><span class="line">    <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="输入后检测内容"><a href="#输入后检测内容" class="headerlink" title="输入后检测内容"></a>输入后检测内容</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-<span class="keyword">form</span>-item <span class="keyword">label</span>=<span class="string">&quot;运单号&quot;</span> <span class="keyword">prop</span>=<span class="string">&quot;sea_waybill_number&quot;</span>&gt;</span><br><span class="line">  &lt;el-<span class="keyword">input</span></span><br><span class="line">    v-model=<span class="string">&quot;xxxxxForm.sea_waybill_number&quot;</span></span><br><span class="line">    <span class="keyword">type</span>=<span class="string">&quot;text&quot;</span></span><br><span class="line">    placeholder=<span class="string">&quot;请输入运单号&quot;</span></span><br><span class="line">    @<span class="keyword">input</span>=<span class="string">&quot;autoSelectShipCompany()&quot;</span></span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/el-<span class="keyword">form</span>-item&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  autoSelectShipCompany(a) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="横向表单-1行2列"><a href="#横向表单-1行2列" class="headerlink" title="横向表单 1行2列"></a>横向表单 1行2列</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">el</span>-row <span class="built_in">type</span>=<span class="string">&quot;flex&quot;</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">col</span> :span=<span class="string">&quot;12&quot;</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;el-form-item&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    &lt;/<span class="keyword">el</span>-form-item&gt;</span><br><span class="line">  &lt;/<span class="keyword">el</span>-<span class="keyword">col</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">col</span> :span=<span class="string">&quot;12&quot;</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;el-form-item&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    &lt;/<span class="keyword">el</span>-form-item&gt;</span><br><span class="line">  &lt;/<span class="keyword">el</span>-<span class="keyword">col</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">el</span>-row&gt;</span><br></pre></td></tr></table></figure><h2 id="横向表单-1行3列"><a href="#横向表单-1行3列" class="headerlink" title="横向表单 1行3列"></a>横向表单 1行3列</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">el</span>-row <span class="built_in">type</span>=<span class="string">&quot;flex&quot;</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">col</span> :span=<span class="string">&quot;8&quot;</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;el-form-item&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    &lt;/<span class="keyword">el</span>-form-item&gt;</span><br><span class="line">  &lt;/<span class="keyword">el</span>-<span class="keyword">col</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">col</span> :span=<span class="string">&quot;8&quot;</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;el-form-item&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    &lt;/<span class="keyword">el</span>-form-item&gt;</span><br><span class="line">  &lt;/<span class="keyword">el</span>-<span class="keyword">col</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">col</span> :span=<span class="string">&quot;8&quot;</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;el-form-item&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    &lt;/<span class="keyword">el</span>-form-item&gt;</span><br><span class="line">  &lt;/<span class="keyword">el</span>-<span class="keyword">col</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">el</span>-row&gt;</span><br></pre></td></tr></table></figure><h2 id="日期和时间点"><a href="#日期和时间点" class="headerlink" title="日期和时间点"></a>日期和时间点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;预计收/装时间&quot; prop=&quot;estimated_timestamp&quot;&gt;</span><br><span class="line">  &lt;el-col :span=&quot;24&quot;&gt;</span><br><span class="line">    &lt;el-date-picker</span><br><span class="line">      v-model=&quot;importForm.estimated_timestamp&quot;</span><br><span class="line">      type=&quot;datetime&quot;</span><br><span class="line">      placeholder=&quot;预计收/装时间&quot;</span><br><span class="line">      align=&quot;right&quot;</span><br><span class="line">      :picker-options=&quot;estimatedTimestampPickerOptions&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;el-input</span><br><span class="line">      v-model=&quot;importForm.estimated_timestamp&quot;</span><br><span class="line">      type=&quot;text&quot;</span><br><span class="line">      placeholder=&quot;请填写预计收/装时间&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/el-col&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import moment from &#x27;moment&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        estimatedTimestampPickerOptions: &#123;</span><br><span class="line">          shortcuts: [&#123;</span><br><span class="line">            text: &#x27;今天&#x27;,</span><br><span class="line">            onClick(picker) &#123;</span><br><span class="line">              picker.$emit(&#x27;pick&#x27;, new Date());</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            text: &#x27;昨天&#x27;,</span><br><span class="line">            onClick(picker) &#123;</span><br><span class="line">              const date = new Date();</span><br><span class="line">              date.setTime(date.getTime() - 3600 * 1000 * 24);</span><br><span class="line">              picker.$emit(&#x27;pick&#x27;, date);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            text: &#x27;一周前&#x27;,</span><br><span class="line">            onClick(picker) &#123;</span><br><span class="line">              const date = new Date();</span><br><span class="line">              date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);</span><br><span class="line">              picker.$emit(&#x27;pick&#x27;, date);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">             text: &#x27;明天&#x27;,</span><br><span class="line">             onClick(picker) &#123;</span><br><span class="line">               const date = new Date()</span><br><span class="line">               date.setTime(date.getTime() + 3600 * 1000 * 24)</span><br><span class="line">               picker.$emit(&#x27;pick&#x27;, date)</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;, &#123;</span><br><span class="line">             text: &#x27;后天&#x27;,</span><br><span class="line">             onClick(picker) &#123;</span><br><span class="line">               const date = new Date()</span><br><span class="line">               date.setTime(date.getTime() + 3600 * 1000 * 24 * 2)</span><br><span class="line">               picker.$emit(&#x27;pick&#x27;, date)</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;, &#123;</span><br><span class="line">             text: &#x27;一周后&#x27;,</span><br><span class="line">             onClick(picker) &#123;</span><br><span class="line">               const date = new Date()</span><br><span class="line">               date.setTime(date.getTime() + 3600 * 1000 * 24 * 7)</span><br><span class="line">               picker.$emit(&#x27;pick&#x27;, date)</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;, &#123;</span><br><span class="line">              text: &#x27;最近一周&#x27;,</span><br><span class="line">              onClick(picker) &#123;</span><br><span class="line">                const start = moment().week(moment().week()).startOf(&#x27;week&#x27;).valueOf() // 这样是年月日的格式</span><br><span class="line">                const end = moment().week(moment().week()).endOf(&#x27;week&#x27;).valueOf() // 这样是时间戳的格式</span><br><span class="line">                picker.$emit(&#x27;pick&#x27;, [start, end])</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              text: &#x27;最近一个月&#x27;,</span><br><span class="line">              onClick(picker) &#123;</span><br><span class="line">                const start = moment().month(moment().month()).startOf(&#x27;month&#x27;).valueOf()</span><br><span class="line">                const end = moment().month(moment().month()).endOf(&#x27;month&#x27;).valueOf()</span><br><span class="line">                picker.$emit(&#x27;pick&#x27;, [start, end])</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              text: &#x27;最近三个月&#x27;,</span><br><span class="line">              onClick(picker) &#123;</span><br><span class="line">                const start = moment().month(moment().month() - 2).startOf(&#x27;month&#x27;).valueOf()</span><br><span class="line">                const end = moment().month(moment().month()).endOf(&#x27;month&#x27;).valueOf()</span><br><span class="line">                picker.$emit(&#x27;pick&#x27;, [start, end])</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              text: &#x27;今年&#x27;,</span><br><span class="line">              onClick(picker) &#123;</span><br><span class="line">                const start = moment().year(moment().year()).startOf(&#x27;year&#x27;).valueOf()</span><br><span class="line">                const end = moment().year(moment().year()).endOf(&#x27;year&#x27;).valueOf()</span><br><span class="line">                picker.$emit(&#x27;pick&#x27;, [start, end])</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">        value1: &#x27;&#x27;,</span><br><span class="line">        value2: &#x27;&#x27;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="confirm"><a href="#confirm" class="headerlink" title="confirm"></a>confirm</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$confirm(<span class="string">&#x27;确认删除吗？&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">  <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="table-勾选-数据回显-https-element-eleme-cn-2-13-zh-CN-component-table"><a href="#table-勾选-数据回显-https-element-eleme-cn-2-13-zh-CN-component-table" class="headerlink" title="table 勾选 数据回显 https://element.eleme.cn/2.13/#/zh-CN/component/table"></a>table 勾选 数据回显 <a href="https://element.eleme.cn/2.13/#/zh-CN/component/table" target="_blank" rel="noopener">https://element.eleme.cn/2.13/#/zh-CN/component/table</a></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs.productTableData.toggleRowSelection(<span class="keyword">this</span>.productTableData[i], <span class="literal">true</span>) <span class="comment">// 回显</span></span><br></pre></td></tr></table></figure><h3 id="el-select-回显"><a href="#el-select-回显" class="headerlink" title="el-select 回显"></a>el-select 回显</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select</span><br><span class="line">  v-model=<span class="string">&quot;form.type&quot;</span></span><br><span class="line">  placeholder=<span class="string">&quot;请选择类型&quot;</span></span><br><span class="line">  style=<span class="string">&quot;width: 370px&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  &lt;el-option</span><br><span class="line">    v-<span class="keyword">for</span>=<span class="string">&quot;(value, id) in options.types&quot;</span></span><br><span class="line">    <span class="symbol">:key=<span class="string">&quot;&quot;</span></span></span><br><span class="line">    <span class="symbol">:label=<span class="string">&quot;value&quot;</span></span></span><br><span class="line">    <span class="symbol">:value=<span class="string">&quot;id * 1&quot;</span></span> <span class="comment"># 重点</span></span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></table></figure><h3 id="el-select-回显-1"><a href="#el-select-回显-1" class="headerlink" title="el-select 回显"></a>el-select 回显</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-<span class="keyword">select</span></span><br><span class="line">  v-model=<span class="string">&quot;form.type&quot;</span></span><br><span class="line">  placeholder=<span class="string">&quot;请选择类型&quot;</span></span><br><span class="line">  style=<span class="string">&quot;width: 370px&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  &lt;el-<span class="keyword">option</span></span><br><span class="line">    v-<span class="keyword">for</span>=<span class="string">&quot;(value, id) in options.types&quot;</span></span><br><span class="line">    :<span class="keyword">key</span>=<span class="string">&quot;id&quot;</span></span><br><span class="line">    :label=<span class="string">&quot;value&quot;</span></span><br><span class="line">    :<span class="keyword">value</span>=<span class="string">&quot;id * 1&quot;</span></span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/el-<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="el-radio-group-回显"><a href="#el-radio-group-回显" class="headerlink" title="el-radio-group 回显"></a>el-radio-group 回显</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.type&quot;</span> <span class="attr">disabled</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-radio</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-for</span>=<span class="string">&quot;(v, k) in seaWayBillSearchOptions.type_array&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:label</span>=<span class="string">&quot;k * 1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:key</span>=<span class="string">&quot;v&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">v</span> &#125;&#125;</span><span class="language-xml">&lt;/el-radio</span></span><br><span class="line"><span class="language-xml">  &gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="js-语法"><a href="#js-语法" class="headerlink" title="js 语法"></a>js 语法</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 传参</span></span><br><span class="line">:<span class="type">on-success</span>=<span class="string">&quot;(res, file) =&gt; handleSkuLogoSuccess(res, file, index)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 数组去重</span></span><br><span class="line">let <span class="keyword">new</span><span class="type">Arr</span> = <span class="keyword">Array</span>.from(<span class="keyword">new</span> <span class="type">Set</span>(arr))</span><br><span class="line"></span><br><span class="line"><span class="meta"># 判断是否是数组</span></span><br><span class="line"><span class="keyword">Array</span>.isArray(arr)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 判断数组中是否存在</span></span><br><span class="line"><span class="keyword">Array</span>.indexOf(<span class="string">&#x27;3&#x27;</span>) !== <span class="number">-1</span> <span class="comment">//说明存在 </span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 删除数组元素</span></span><br><span class="line"><span class="keyword">Array</span>.remove(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="php-语法"><a href="#php-语法" class="headerlink" title="php 语法"></a>php 语法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多维数组排序</span></span><br><span class="line"><span class="variable">$sortArr</span> = [];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$orderListData</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$orderListItem</span>) &#123;</span><br><span class="line">    <span class="variable">$sortArr</span>[] = <span class="variable">$orderListItem</span>[<span class="string">&#x27;price_total&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">array_multisort(<span class="variable">$sortArr</span>, SORT_ASC, <span class="variable">$orderListData</span>);</span><br></pre></td></tr></table></figure><h2 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Model,修改器</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::boot();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">static</span>::deleting(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$model</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$roles</span> = <span class="variable">$model</span>-&gt;roles();</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$roles</span>-&gt;count() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;该权限已被角色绑定，请删除角色中的对应权限再进行操作&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//dd($model-&gt;id,$roles-&gt;count(),$roles-&gt;get()-&gt;toArray());</span></span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Model,获取器</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$appends</span> = [<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNameAttribute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ticket::addExtDesc(<span class="keyword">$this</span>-&gt;attributes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Laravel-admin $form 如果动态修改字段的值，需要提前该字段为hidden</span></span><br><span class="line"><span class="variable">$form</span>-&gt;hidden(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="variable">$form</span>-&gt;saving(<span class="function"><span class="keyword">function</span> (<span class="params">Form <span class="variable">$form</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$skulistinfo</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$skulistinfo</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$key</span> == <span class="variable">$form</span>-&gt;sku_listinfo_id) &#123;</span><br><span class="line">            <span class="variable">$form</span>-&gt;name = <span class="variable">$item</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$form</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Encore</span>\<span class="title">Admin</span>\<span class="title">Grid</span>;</span><br><span class="line">Grid::init(<span class="function"><span class="keyword">function</span> (<span class="params">Grid <span class="variable">$grid</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableActions();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disablePagination();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableCreateButton();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableFilter(); </span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableRowSelector();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableColumnSelector();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableTools();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableExport();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;actions(<span class="function"><span class="keyword">function</span> (<span class="params">Grid\Displayers\Actions <span class="variable">$actions</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$actions</span>-&gt;disableView();</span><br><span class="line">        <span class="variable">$actions</span>-&gt;disableEdit();</span><br><span class="line">        <span class="variable">$actions</span>-&gt;disableDelete();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="此刻芭蕾"><a href="#此刻芭蕾" class="headerlink" title="此刻芭蕾"></a>此刻芭蕾</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br></pre></td><td class="code"><pre><span class="line">        $test = &lt;&lt;&lt;a</span><br><span class="line">已售的座位id</span><br><span class="line"><span class="number">176</span></span><br><span class="line"><span class="number">175</span></span><br><span class="line">...</span><br><span class="line">a<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        $text_arr = explode(PHP_EOL, $test)<span class="comment">;</span></span><br><span class="line">        $text_arr = array_unique($text_arr, SORT_NUMERIC)<span class="comment">;</span></span><br><span class="line">        dd($text_arr)<span class="comment">;</span></span><br><span class="line"><span class="title">        $seat_models = BalletmeTicketSeat::</span>whereIn(&#x27;id&#x27;, $text_arr)</span><br><span class="line">            -&gt;get()<span class="comment">;</span></span><br><span class="line">        $yishou_arr_id = []<span class="comment">;</span></span><br><span class="line">        foreach ($seat_models as $seat_model) &#123;</span><br><span class="line">            $yishou_arr_id [] = $seat_model-&gt;id<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        # 获取最终的出错ids，执行前先执行下方的逻辑</span><br><span class="line">        $error_ids = []<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        $no_ids_txt = file_get_contents(&#x27;$no_ids.txt&#x27;)<span class="comment">;</span></span><br><span class="line">        $no_ids = explode(PHP_EOL, $no_ids_txt)<span class="comment">;</span></span><br><span class="line">        foreach ($no_ids as $no_id) &#123;</span><br><span class="line">            if (in_array($no_id, $yishou_arr_id)) &#123;</span><br><span class="line">                $error_ids[] = $no_id<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(implode(&#x27; &#x27;, $error_ids))<span class="comment">;</span></span><br><span class="line">        dd(<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        # 下面是获取不能坐的座位ids</span><br><span class="line">        $no_ = [</span><br><span class="line">            <span class="number">5</span> =&gt; [</span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                34,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">6</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                34,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">7</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">8</span> =&gt; [</span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">9</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">10</span> =&gt; [</span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">11</span> =&gt; [</span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">12</span> =&gt; [</span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">13</span> =&gt; [</span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">14</span> =&gt; [</span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">15</span> =&gt; [</span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">16</span> =&gt; [</span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">17</span> =&gt; [</span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">18</span> =&gt; [</span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">19</span> =&gt; [</span><br><span class="line"><span class="built_in">                15,</span></span><br><span class="line"><span class="built_in">                17,</span></span><br><span class="line"><span class="built_in">                16,</span></span><br><span class="line">                <span class="number">18</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">20</span> =&gt; [</span><br><span class="line"><span class="built_in">                1,</span></span><br><span class="line"><span class="built_in">                3,</span></span><br><span class="line"><span class="built_in">                5,</span></span><br><span class="line"><span class="built_in">                7,</span></span><br><span class="line"><span class="built_in">                9,</span></span><br><span class="line"><span class="built_in">                11,</span></span><br><span class="line"><span class="built_in">                13,</span></span><br><span class="line"><span class="built_in">                15,</span></span><br><span class="line"><span class="built_in">                2,</span></span><br><span class="line"><span class="built_in">                4,</span></span><br><span class="line"><span class="built_in">                6,</span></span><br><span class="line"><span class="built_in">                8,</span></span><br><span class="line"><span class="built_in">                10,</span></span><br><span class="line"><span class="built_in">                12,</span></span><br><span class="line"><span class="built_in">                14,</span></span><br><span class="line">                <span class="number">16</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">21</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">                <span class="number">40</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">22</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">                <span class="number">40</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">23</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">                <span class="number">40</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">24</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">                <span class="number">40</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">25</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">                <span class="number">40</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">26</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line">                <span class="number">34</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">27</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line">                <span class="number">34</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">28</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line">                <span class="number">34</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">29</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line">                <span class="number">34</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">30</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                11,</span></span><br><span class="line"><span class="built_in">                12,</span></span><br><span class="line"><span class="built_in">                13,</span></span><br><span class="line"><span class="built_in">                14,</span></span><br><span class="line"><span class="built_in">                15,</span></span><br><span class="line"><span class="built_in">                16,</span></span><br><span class="line"><span class="built_in">                17,</span></span><br><span class="line"><span class="built_in">                18,</span></span><br><span class="line"><span class="built_in">                19,</span></span><br><span class="line"><span class="built_in">                20,</span></span><br><span class="line"><span class="built_in">                21,</span></span><br><span class="line"><span class="built_in">                22,</span></span><br><span class="line"><span class="built_in">                23,</span></span><br><span class="line"><span class="built_in">                24,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line">                <span class="number">34</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">31</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                43,</span></span><br><span class="line"><span class="built_in">                1,</span></span><br><span class="line"><span class="built_in">                2,</span></span><br><span class="line"><span class="built_in">                3,</span></span><br><span class="line"><span class="built_in">                4,</span></span><br><span class="line"><span class="built_in">                5,</span></span><br><span class="line"><span class="built_in">                6,</span></span><br><span class="line"><span class="built_in">                7,</span></span><br><span class="line"><span class="built_in">                8,</span></span><br><span class="line"><span class="built_in">                9,</span></span><br><span class="line"><span class="built_in">                10,</span></span><br><span class="line"><span class="built_in">                11,</span></span><br><span class="line"><span class="built_in">                12,</span></span><br><span class="line"><span class="built_in">                13,</span></span><br><span class="line"><span class="built_in">                14,</span></span><br><span class="line"><span class="built_in">                15,</span></span><br><span class="line"><span class="built_in">                16,</span></span><br><span class="line"><span class="built_in">                17,</span></span><br><span class="line"><span class="built_in">                18,</span></span><br><span class="line"><span class="built_in">                19,</span></span><br><span class="line"><span class="built_in">                20,</span></span><br><span class="line"><span class="built_in">                21,</span></span><br><span class="line"><span class="built_in">                22,</span></span><br><span class="line"><span class="built_in">                23,</span></span><br><span class="line"><span class="built_in">                24,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line"><span class="built_in">                34,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line"><span class="built_in">                42,</span></span><br><span class="line"><span class="built_in">                44,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">32</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                43,</span></span><br><span class="line"><span class="built_in">                1,</span></span><br><span class="line"><span class="built_in">                2,</span></span><br><span class="line"><span class="built_in">                3,</span></span><br><span class="line"><span class="built_in">                4,</span></span><br><span class="line"><span class="built_in">                5,</span></span><br><span class="line"><span class="built_in">                6,</span></span><br><span class="line"><span class="built_in">                7,</span></span><br><span class="line"><span class="built_in">                8,</span></span><br><span class="line"><span class="built_in">                9,</span></span><br><span class="line"><span class="built_in">                10,</span></span><br><span class="line"><span class="built_in">                11,</span></span><br><span class="line"><span class="built_in">                12,</span></span><br><span class="line"><span class="built_in">                13,</span></span><br><span class="line"><span class="built_in">                14,</span></span><br><span class="line"><span class="built_in">                15,</span></span><br><span class="line"><span class="built_in">                16,</span></span><br><span class="line"><span class="built_in">                17,</span></span><br><span class="line"><span class="built_in">                18,</span></span><br><span class="line"><span class="built_in">                19,</span></span><br><span class="line"><span class="built_in">                20,</span></span><br><span class="line"><span class="built_in">                21,</span></span><br><span class="line"><span class="built_in">                22,</span></span><br><span class="line"><span class="built_in">                23,</span></span><br><span class="line"><span class="built_in">                24,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line"><span class="built_in">                34,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line"><span class="built_in">                42,</span></span><br><span class="line"><span class="built_in">                44,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">33</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                43,</span></span><br><span class="line"><span class="built_in">                1,</span></span><br><span class="line"><span class="built_in">                2,</span></span><br><span class="line"><span class="built_in">                3,</span></span><br><span class="line"><span class="built_in">                4,</span></span><br><span class="line"><span class="built_in">                5,</span></span><br><span class="line"><span class="built_in">                6,</span></span><br><span class="line"><span class="built_in">                7,</span></span><br><span class="line"><span class="built_in">                8,</span></span><br><span class="line"><span class="built_in">                9,</span></span><br><span class="line"><span class="built_in">                10,</span></span><br><span class="line"><span class="built_in">                11,</span></span><br><span class="line"><span class="built_in">                12,</span></span><br><span class="line"><span class="built_in">                13,</span></span><br><span class="line"><span class="built_in">                14,</span></span><br><span class="line"><span class="built_in">                15,</span></span><br><span class="line"><span class="built_in">                16,</span></span><br><span class="line"><span class="built_in">                17,</span></span><br><span class="line"><span class="built_in">                18,</span></span><br><span class="line"><span class="built_in">                19,</span></span><br><span class="line"><span class="built_in">                20,</span></span><br><span class="line"><span class="built_in">                21,</span></span><br><span class="line"><span class="built_in">                22,</span></span><br><span class="line"><span class="built_in">                23,</span></span><br><span class="line"><span class="built_in">                24,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line"><span class="built_in">                34,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line"><span class="built_in">                42,</span></span><br><span class="line"><span class="built_in">                44,</span></span><br><span class="line">            ],</span><br><span class="line">        ]</span><br><span class="line">        $no_ids = []<span class="comment">;</span></span><br><span class="line">        foreach ($no_ as $row =&gt; $cols) &#123;</span><br><span class="line">            foreach ($cols as $col) &#123;</span><br><span class="line"><span class="title">                $seat_model = BalletmeTicketSeat::</span>where(&#x27;row&#x27;, $row)</span><br><span class="line">                    -&gt;where(&#x27;col&#x27;, $col)</span><br><span class="line">                    -&gt;select([</span><br><span class="line">                        &#x27;id&#x27;,</span><br><span class="line">                        &#x27;row&#x27;,</span><br><span class="line">                        &#x27;col&#x27;,</span><br><span class="line">                        &#x27;floor&#x27;,</span><br><span class="line">                    ])</span><br><span class="line">                    -&gt;first()<span class="comment">;</span></span><br><span class="line">                if (! $seat_model) &#123;</span><br><span class="line"><span class="title">                    throw new ServiceException(&#x27;row:&#x27; . $row . &#x27; col:</span>&#x27; . $col)<span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">                $no_ids[] = $seat_model-&gt;id<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // file_put_contents(&#x27;$no_ids.txt&#x27;, implode(PHP_EOL, $no_ids))<span class="comment">;</span></span><br><span class="line">        // dd($no_ids)<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">    <span class="variable">$test</span> = <span class="string">&lt;&lt;&lt;a</span></span><br><span class="line"><span class="string">已售的座位id</span></span><br><span class="line"><span class="string">176</span></span><br><span class="line"><span class="string">175</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">a</span>;</span><br><span class="line">    <span class="variable">$text_arr</span> = explode(PHP_EOL, <span class="variable">$test</span>);</span><br><span class="line">    <span class="variable">$text_arr</span> = array_unique(<span class="variable">$text_arr</span>);</span><br><span class="line">    <span class="variable">$seat_models</span> = BalletmeTicketSeat::whereIn(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$text_arr</span>)</span><br><span class="line">        -&gt;get();</span><br><span class="line">    <span class="variable">$yishou_arr_id</span> = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$seat_models</span> <span class="keyword">as</span> <span class="variable">$seat_model</span>) &#123;</span><br><span class="line">        <span class="variable">$yishou_arr_id</span> [] = <span class="variable">$seat_model</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// dd(count($text_arr), count($yishou_arr_id));</span></span><br><span class="line">    <span class="variable">$seat_models_all</span> = BalletmeTicketSeat::select()-&gt;get();</span><br><span class="line">    <span class="comment">// dd(count($seat_models_all) - count($text_arr));</span></span><br><span class="line">    <span class="variable">$un_sale_ids</span> =[];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$seat_models_all</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! in_array(<span class="variable">$item</span>-&gt;id, <span class="variable">$yishou_arr_id</span>)) &#123;</span><br><span class="line">            <span class="variable">$un_sale_ids</span> [] = <span class="variable">$item</span>-&gt;id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$un_sale_models</span> = BalletmeTicketSeat::whereIn(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$un_sale_ids</span>)</span><br><span class="line">        -&gt;get();</span><br><span class="line">    <span class="variable">$seat_area_a</span> = [];</span><br><span class="line">    <span class="variable">$seat_area_b</span> = [];</span><br><span class="line">    <span class="variable">$seat_area_c</span> = [];</span><br><span class="line">    <span class="variable">$seat_area_no</span> = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$un_sale_models</span> <span class="keyword">as</span> <span class="variable">$un_sale_model</span>) &#123;</span><br><span class="line">        <span class="comment">// dd($un_sale_model-&gt;toArray());</span></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$un_sale_model</span>-&gt;area_id) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="variable">$seat_area_a</span>[] = <span class="string">&#x27;座位ID&#x27;</span> . <span class="variable">$un_sale_model</span>-&gt;id . <span class="string">&#x27; 座位名：&#x27;</span>. <span class="variable">$un_sale_model</span>-&gt;extDesc;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="variable">$seat_area_b</span>[] = <span class="string">&#x27;座位ID&#x27;</span> . <span class="variable">$un_sale_model</span>-&gt;id . <span class="string">&#x27; 座位名：&#x27;</span>. <span class="variable">$un_sale_model</span>-&gt;extDesc;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                <span class="variable">$seat_area_c</span>[] = <span class="string">&#x27;座位ID&#x27;</span> . <span class="variable">$un_sale_model</span>-&gt;id . <span class="string">&#x27; 座位名：&#x27;</span>. <span class="variable">$un_sale_model</span>-&gt;extDesc;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$seat_area_no</span>[] = <span class="string">&#x27;座位ID&#x27;</span> . <span class="variable">$un_sale_model</span>-&gt;id . <span class="string">&#x27; 座位名：&#x27;</span>. <span class="variable">$un_sale_model</span>-&gt;extDesc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//         printf(implode(PHP_EOL, $seat_area_a));</span></span><br><span class="line">    <span class="comment">//         printf(implode(PHP_EOL, $seat_area_b));</span></span><br><span class="line">    <span class="comment">//         printf(implode(PHP_EOL, $seat_area_c));</span></span><br><span class="line">    <span class="comment">//         printf(implode(PHP_EOL, $seat_area_no));</span></span><br><span class="line">    dd(PHP_EOL, count(<span class="variable">$seat_area_a</span>),count(<span class="variable">$seat_area_b</span>), count(<span class="variable">$seat_area_c</span>), count(<span class="variable">$seat_area_no</span>));</span><br><span class="line">    dd(count(<span class="variable">$un_sale_ids</span>), count(<span class="variable">$un_sale_models</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ElementUI工具</summary>
    
    
    
    <category term="编程语言" scheme="https://ayou129.github.io/blog/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
</feed>
