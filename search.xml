<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Adobe Photoshop CC2019(V20.0.0)安装中文破解补丁</title>
    <url>/blog/p/470164d9/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>


<h3 id="下载相关安装包并解压"><a href="#下载相关安装包并解压" class="headerlink" title="下载相关安装包并解压"></a>下载相关安装包并解压</h3><ul>
<li>安装包：<a href="https://pan.baidu.com/s/1dQOFbFmKF8cvm4Uv72n5Rg" target="_blank" rel="noopener">Adobe photoshop CC 2019(V20.0.0)百度网盘</a><br>提取码：8892</li>
</ul>
<h3 id="断网"><a href="#断网" class="headerlink" title="断网"></a>断网</h3><ul>
<li>作用是避免加载登录窗口，直接进入安装</li>
</ul>
<h3 id="运行可执行文件Set-up-exe进行安装"><a href="#运行可执行文件Set-up-exe进行安装" class="headerlink" title="运行可执行文件Set-up.exe进行安装"></a>运行可执行文件Set-up.exe进行安装</h3><ul>
<li>安装成功</li>
</ul>
<img src="/blog/p/470164d9/photoshop%202019%20cc%20%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.jpg" class="" title="photoshop 2019 cc 安装成功">
<h3 id="替换应用程序-exe文件"><a href="#替换应用程序-exe文件" class="headerlink" title="替换应用程序(.exe文件)"></a>替换应用程序(.exe文件)</h3><ul>
<li>将安装包中的photoshop.exe替换之前安装主目录下的photoshop.exe</li>
</ul>
<h3 id="修复主屏幕一直加载的问题"><a href="#修复主屏幕一直加载的问题" class="headerlink" title="修复主屏幕一直加载的问题"></a>修复主屏幕一直加载的问题</h3><blockquote>
<p>打开photoshop后会发现主页一直是正在载入的bug</p>
</blockquote>
<img src="/blog/p/470164d9/photoshop%202019%20CC%20%E4%B8%BB%E9%A1%B5%E4%B8%80%E7%9B%B4%E6%AD%A3%E5%9C%A8%E8%BD%BD%E5%85%A5%E7%9A%84bug.png" class="" title="photoshop 2019 CC 主页一直正在载入的bug">
<h4 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h4><ul>
<li>使用主页修复工具<img src="/blog/p/470164d9/%E4%BD%BF%E7%94%A8Adobe%20CC2019%E4%B8%BB%E9%A1%B5%E4%BF%AE%E5%A4%8D%E5%B7%A5%E5%85%B7.jpg" class="" title="使用Adobe CC2019主页修复工具"></li>
<li>点击确认即可</li>
</ul>
<h4 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h4><ul>
<li>停用“主页”屏幕</li>
<li>打开photoshop</li>
<li>编辑-首选项-常规</li>
<li>勾选 停用“主页”屏幕<img src="/blog/p/470164d9/photoshop%E4%B8%BB%E9%A1%B5%E5%B1%8F%E5%B9%95.jpg" class="" title="photoshop主页屏幕"></li>
</ul>
<h4 id="重启photoshop"><a href="#重启photoshop" class="headerlink" title="重启photoshop"></a>重启photoshop</h4><img src="/blog/p/470164d9/photoshop%20cc%202019%20%E4%B8%BB%E9%A1%B5%E9%87%8D%E5%A4%8D%E5%8A%A0%E8%BD%BD%20%E4%BF%AE%E5%A4%8D%E6%88%90%E5%8A%9F.jpg" class="" title="photoshop cc 2019 主页重复加载 修复成功">
<p>相关链接    </p>
<ul>
<li><a href="https://helpx.adobe.com/cn/download-install/kb/troubleshoot-download-install-error.html" target="_blank" rel="noopener">Adobe官方安装错误代码和解决方案</a></li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Adobe</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Adobe-Premiere</title>
    <url>/blog/p/5a8bff59/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>


<h3 id="防止跳帧"><a href="#防止跳帧" class="headerlink" title="防止跳帧"></a>防止跳帧</h3><blockquote>
<p>一段视频中间删掉n个帧后会发生跳帧</p>
</blockquote>
<p>操作：视频过度 -&gt; 溶解 -&gt; MorphCut -&gt; 拖动<br>如果有瑕疵，可以在时间线面板 右键 设置过度持续时间大一些</p>
<p>红色状态：正在处理<br>绿色：处理成功</p>
<h3 id="快速对齐音视频"><a href="#快速对齐音视频" class="headerlink" title="快速对齐音视频"></a>快速对齐音视频</h3><p>在项目中选中音频&amp;&amp;视频 右键 -&gt; 合并剪辑</p>
<h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><p>两种标记(M键)</p>
<ol>
<li><p>适用于采访类节目(单个项目总时间固定)<br>针对音视频的标记</p>
</li>
<li><p>适用于新闻类节目(总时间、单个项目时间固定)<br>针对时间线的标记</p>
</li>
</ol>
<p>标记可以导出，方便沟通吸纳意见<br>操作：文件 -&gt; 导出 -&gt; 标记</p>
<h3 id="批量只做字幕"><a href="#批量只做字幕" class="headerlink" title="批量只做字幕"></a>批量只做字幕</h3><p>编写字幕txt</p>
<ol>
<li>第一行，字幕标题</li>
<li>后面每一行都是一次字幕</li>
</ol>
<p>使用 PS：</p>
<ol>
<li>新建</li>
<li>文档类型：胶片和视频 </li>
<li>背景：透明</li>
<li>增加文字 样式自定义(大小、对齐方式、颜色、描边等)</li>
<li>图像 -&gt; 变量 -&gt; 定义 -&gt; 文本替换：写上字幕标题</li>
<li>点击下一个</li>
<li>导入字幕txt文件，编码utf8</li>
<li>文件 -&gt; 导出 -&gt; 数据组作为文件 -&gt; 选择文件夹 -&gt; 确定</li>
</ol>
<p>使用 Premiere：</p>
<ol>
<li>导入时，右键选中所有字幕右键，设置持续时间(默认是5秒)</li>
<li>拖动时间线</li>
</ol>
<h3 id="制作-静态-分屏效果"><a href="#制作-静态-分屏效果" class="headerlink" title="制作(静态)分屏效果"></a>制作(静态)分屏效果</h3><p>方式1：裁剪</p>
<ol>
<li>缩小所有素材并且摆放</li>
<li>视频效果 -&gt; 变换 -&gt; 裁剪 视频的边缘，制作黑色边框(分屏效果)</li>
</ol>
<p>方式2：遮罩</p>
<p>分屏效果使用场景</p>
<ol>
<li>素材量比较大 但是质量参差不齐</li>
<li>视频有核心主题(线索) 贯穿始终</li>
<li>可以做强调效果</li>
<li>表达同一时间不同空间发生的事情(平行蒙太奇)</li>
<li>阿卡贝拉 纯人声</li>
</ol>
<p>扩展：局部去色</p>
<h3 id="制作-动态-分屏效果"><a href="#制作-动态-分屏效果" class="headerlink" title="制作(动态)分屏效果"></a>制作(动态)分屏效果</h3><p>选中A视频</p>
<ol>
<li>裁剪</li>
<li>位置</li>
<li>选方向并打关键帧</li>
<li>shift + 方向右键 每按一次平移5帧</li>
</ol>
<p>前缓出、后缓入</p>
<h3 id="保留视频单一颜色"><a href="#保留视频单一颜色" class="headerlink" title="保留视频单一颜色"></a>保留视频单一颜色</h3><h3 id="快速删除视频间隙"><a href="#快速删除视频间隙" class="headerlink" title="快速删除视频间隙"></a>快速删除视频间隙</h3><ol>
<li>序列菜单</li>
<li>封闭间隙</li>
</ol>
<h3 id="制作电影职位表字幕"><a href="#制作电影职位表字幕" class="headerlink" title="制作电影职位表字幕"></a>制作电影职位表字幕</h3><p>方式1：内置功能：滚动字幕<br>方式2：PS制作图片，位移动画功能<br>方式3：</p>
<ol>
<li>在节目面板中增加文字工具，把txt文本复制进去</li>
<li>把文字区域拉满，显示全部的字幕</li>
<li>水平、垂直居中对齐</li>
<li>增加滚动效果：基本图形面板 -&gt; 编辑 -&gt; 滚动</li>
<li>通过文字图层的长度决定</li>
</ol>
<h3 id="音频降噪-amp-amp-修复"><a href="#音频降噪-amp-amp-修复" class="headerlink" title="音频降噪 &amp;&amp; 修复"></a>音频降噪 &amp;&amp; 修复</h3><ol>
<li>选中premiere中的音频</li>
<li>右键 -&gt; 在 audition 中编辑</li>
<li>找出有噪音的地方</li>
<li>效果 -&gt; 降噪&#x2F;恢复 -&gt; 降噪(处理)</li>
<li>捕捉 噪声样本</li>
<li>降噪 调低百分比(50% - 60%)</li>
<li>可以重复降噪 ctrl + R</li>
</ol>
<p>消除所有声音：</p>
<ol>
<li>选中某段声音</li>
<li>效果 -&gt; 静音</li>
</ol>
<p>声音更大更稳定：</p>
<ol>
<li>效果组</li>
<li>振幅与压限</li>
<li>语音音量级别</li>
<li>目标音量级别调至 -15</li>
<li>电平值 50</li>
</ol>
<p>去除部分口水音</p>
<ol>
<li>工具栏 -&gt; 污点修复画笔工具</li>
<li>涂抹即可</li>
</ol>
<p>16:9<br>9张长方形的图<br>(320,180) (960,180) (1600,180)<br>(320,540) (960,540) (1600,540)<br>(320,900) (960,900) (1600,900)</p>
<h2 id="Audition"><a href="#Audition" class="headerlink" title="Audition"></a>Audition</h2><h3 id="屏蔽-b一声"><a href="#屏蔽-b一声" class="headerlink" title="屏蔽 b一声"></a>屏蔽 b一声</h3><p>找到所有覆盖的地方<br>效果<br>生成<br>音调<br>基频880hz<br>形状 三角形&#x2F;锯齿<br>振幅 -50</p>
<p>注意事项：</p>
<ol>
<li>将剪辑置于底层</li>
<li>淡入淡出</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>C#</title>
    <url>/blog/p/38ea7f4b/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>


<h3 id="变量-与-常量"><a href="#变量-与-常量" class="headerlink" title="变量 与 常量"></a>变量 与 常量</h3><p>变量：一个供程序操作的存储区的名字 </p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="type">string</span> <span class="keyword">val</span>;</span><br></pre></td></tr></table></figure>
<p>常量：程序运行期间值保持不变的量</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> val;</span><br></pre></td></tr></table></figure>

<p>作用域</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">类成员变量</span><br><span class="line">方法内部的变量</span><br></pre></td></tr></table></figure>


<p>数据类型分类</p>
<ul>
<li>值类型<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="keyword">val</span>; # 单个字符</span><br><span class="line"></span><br><span class="line">short <span class="keyword">val</span>;</span><br><span class="line"><span class="type">int</span> <span class="keyword">val</span>;</span><br><span class="line">long <span class="keyword">val</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="keyword">val</span>; # 要添加f或F，<span class="type">float</span> f = (<span class="type">float</span>)<span class="number">3.4</span>;  作用是解决类型自动转换 <span class="type">double</span>转<span class="type">float</span> 精度问题 </span><br><span class="line"><span class="type">double</span> <span class="keyword">val</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">val</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>引用类型：string 和 class统称为引用类型。当声明一个类时，只在栈中分配一小片内存用于容纳一个地址，而此时并没有为其分配堆上的内存空间。当使用 new 创建一个类的实例时，分配堆上的空间，并把堆上空间的地址保存到栈上分配的小片空间中。<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">object obj <span class="operator">=</span> <span class="string">&quot;name&quot;</span><span class="comment">;</span></span><br><span class="line">string name <span class="operator">=</span> <span class="string">&quot;name&quot;</span>    </span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>类型转换</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 转换为整型</span></span><br><span class="line">string <span class="built_in">str</span> = <span class="string">&#x27;你好&#x27;</span>;</span><br><span class="line"><span class="built_in">int</span> number = <span class="built_in">int</span>.Parse(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 转换为字符串</span></span><br><span class="line"><span class="built_in">int</span> hp = <span class="number">100</span>;</span><br><span class="line">string <span class="built_in">str</span> = hp.ToString();</span><br><span class="line"></span><br><span class="line"><span class="meta"># 获取数值的具体类型</span></span><br><span class="line"><span class="built_in">int</span> hp = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">print</span>(hp.GetType())</span><br></pre></td></tr></table></figure>

<p>循环</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> collection)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
  </entry>
  <entry>
    <title>Apache</title>
    <url>/blog/p/320c859b/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="相关依赖包-root权限"><a href="#相关依赖包-root权限" class="headerlink" title="相关依赖包(root权限)"></a>相关依赖包(root权限)</h2><ol>
<li><p>安装vim及unzip&#x2F;apr、apr-util和pcre软件包和相关依赖包：</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">yum</span> <span class="comment">install</span> <span class="literal">-</span><span class="comment">y wget vim unzip expat</span><span class="literal">-</span><span class="comment">devel</span> <span class="comment">gcc</span> <span class="comment">gcc</span><span class="literal">-</span><span class="comment">c</span>++ <span class="comment">autoconf</span> <span class="comment">libtool</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装apr</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/src/</span></span><br><span class="line">wget http:<span class="regexp">//</span>apache.mirror.gtcomm.net<span class="regexp">/apr/</span>apr-<span class="number">1.6</span>.<span class="number">5</span>.tar.gz</span><br><span class="line">tar zxvf apr-<span class="number">1.6</span>.<span class="number">5</span>.tar.gz</span><br><span class="line">cd apr-<span class="number">1.6</span>.<span class="number">5</span></span><br><span class="line"></span><br><span class="line">./buildconf</span><br><span class="line">.<span class="regexp">/configure --prefix=/u</span>sr<span class="regexp">/local/</span>apr</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装apr-util</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/src/</span></span><br><span class="line">wget http:<span class="regexp">//</span>apache.mirror.rafal.ca<span class="regexp">/apr/</span>apr-util-<span class="number">1.6</span>.<span class="number">1</span>.tar.gz</span><br><span class="line">tar zxvf apr-util-<span class="number">1.6</span>.<span class="number">1</span>.tar.gz</span><br><span class="line">cd apr-util-<span class="number">1.6</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">.<span class="regexp">/configure --prefix=/u</span>sr<span class="regexp">/local/</span>apr-util --with-apr=<span class="regexp">/usr/</span>local/apr</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装pcre</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/src/</span></span><br><span class="line">wget https:<span class="regexp">//</span>ftp.pcre.org<span class="regexp">/pub/</span>pcre/pcre-<span class="number">8.41</span>.tar.gz</span><br><span class="line">tar zxvf pcre-<span class="number">8.41</span>.tar.gz</span><br><span class="line">cd pcre-<span class="number">8.41</span></span><br><span class="line"></span><br><span class="line">.<span class="regexp">/configure --prefix=/u</span>sr<span class="regexp">/local/</span>pcre</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>如果某wget提示不存在(404)，你可以到网址上级目录寻找已更新的版本进行下载<br>例如<code>wget https://ftp.pcre.org/pub/pcre/pcre-8.41.tar.gz</code><br>提示<code>已发出 HTTP 请求，正在等待回应... 404 Not Found</code></p>
<img src="/blog/p/320c859b/404-not-found.jpg" class="" title="yum install 404 Not Found"></li>
</ol>
<p>则需要打开<code>https://ftp.pcre.org/pub/pcre</code></p>
<ol>
<li>进行查找最新版本</li>
<li>更改链接下载</li>
<li>更改相同的文件名</li>
</ol>
<p>再进行安装</p>
<h2 id="Apache-root权限"><a href="#Apache-root权限" class="headerlink" title="Apache(root权限)"></a>Apache(root权限)</h2><ol>
<li>安装<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/src/</span></span><br><span class="line">wget http:<span class="regexp">//</span>www-us.apache.org<span class="regexp">/dist/</span>httpd/httpd-<span class="number">2.4</span>.<span class="number">38</span>.tar.gz</span><br><span class="line">tar zxvf httpd-<span class="number">2.4</span>.<span class="number">38</span>.tar.gz</span><br><span class="line">cd httpd-<span class="number">2.4</span>.<span class="number">38</span></span><br><span class="line"></span><br><span class="line">./configure \</span><br><span class="line">--prefix=<span class="regexp">/usr/</span>local/apache \</span><br><span class="line">--sysconfdir=<span class="regexp">/etc/</span>httpd  \</span><br><span class="line">--with-apr=<span class="regexp">/usr/</span>local/apr \</span><br><span class="line">--with-apr-util=<span class="regexp">/usr/</span>local<span class="regexp">/apr-util/</span>bin/apu-<span class="number">1</span>-config \</span><br><span class="line">--with-pcre=<span class="regexp">/usr/</span>local/pcre \</span><br><span class="line">--enable--ssl \</span><br><span class="line">--enable-so \</span><br><span class="line">--enable-rewrite</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li>
<li>配置Apache<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>httpd/httpd.conf</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>文件末尾增加下方code<br> &#x2F;&#x2F;添加前不要开启服务，注意，如果开启服务会报错<code>make_sock: could not bind to address</code><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定守护进程的进程号</span></span><br><span class="line">PidFile  <span class="string">&quot;/var/run/httpd.pid&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#后缀名是.php的文件交由x-httpd-php处理</span></span><br><span class="line">AddHandler <span class="built_in">application</span>/x-httpd-php .php</span><br></pre></td></tr></table></figure></li>
<li>编辑相关配置<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ServerName</span> localhost:<span class="number">80</span></span><br><span class="line"><span class="attribute">ServerAdmin</span> guoxinlee129@gmail.com</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>启动httpd服务<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/apache/</span>bin/apachectl start</span><br></pre></td></tr></table></figure>
 可能会遇到问题：Address already in use: AH00072: make_sock: could not bind to address 0.0.0.0:80 <img src="/blog/p/320c859b/pidfile_error.jpg" class="" title="Address already in use: AH00072: make_sock"></li>
</ol>
<p>原因：指定守护进程的进程号 前 开启了服务，则造成冲突<br> <b>方案1</b>:</p>
<ol>
<li>添加 <code>PidFile  &quot;/var/run/httpd.pid&quot;</code></li>
<li><code>netstat -ltnp | grep :80</code>找到httpd进程号<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tcp6</span>       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">80</span>                   :::*                    LISTEN      <span class="number">94732</span>/httpd</span><br></pre></td></tr></table></figure></li>
<li>杀死进程号<code>sudo kill -9 94732</code></li>
<li>开启服务 <code>/usr/local/apache/bin/apachectl start</code></li>
</ol>
<p> <b>方案2</b>:</p>
<ol>
<li><p>注释<code>#PidFile  &quot;/var/run/httpd.pid&quot;</code></p>
</li>
<li><p>关闭服务 <code>/usr/local/apache/bin/apachectl stop</code></p>
</li>
<li><p>删除注释<code>PidFile  &quot;/var/run/httpd.pid&quot;</code></p>
</li>
<li><p>开启服务 <code>/usr/local/apache/bin/apachectl start</code></p>
</li>
<li><p>环境变量</p>
 <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/root/</span>.bash_profile</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span><span class="regexp">/bin:/u</span>sr<span class="regexp">/local/</span>apache/bin</span><br><span class="line">source <span class="regexp">/root/</span>.bash_profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>开机自启（该文件作用是机器重启后执行该命令）</p>
 <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>rc.d/rc.local</span><br><span class="line"></span><br><span class="line">apachectl -k start  <span class="regexp">//</span>最后一行添加</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Apache站点添加SSL"><a href="#Apache站点添加SSL" class="headerlink" title="Apache站点添加SSL"></a>Apache站点添加SSL</h2><h3 id="下载证书文件"><a href="#下载证书文件" class="headerlink" title="下载证书文件"></a>下载证书文件</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">#LoadModule ssl_module modules/mod_ssl.<span class="keyword">so</span>  去掉#，启用模块</span><br><span class="line">#<span class="keyword">Include</span> <span class="keyword">conf</span>/extra/httpd-ssl.<span class="keyword">conf</span>  去掉#，包含该文件</span><br><span class="line">#LoadModule socache_shmcb_module modules/mod_socache_shmcb.<span class="keyword">so</span> 去掉#，启用模块</span><br><span class="line"></span><br><span class="line">变更为</span><br><span class="line">LoadModule ssl_module modules/mod_ssl.<span class="keyword">so</span></span><br><span class="line"><span class="keyword">Include</span> <span class="keyword">conf</span>/extra/httpd-ssl.<span class="keyword">conf</span></span><br><span class="line">LoadModule socache_shmcb_module modules/mod_socache_shmcb.<span class="keyword">so</span></span><br></pre></td></tr></table></figure>

<h3 id="httpd-ssl-conf添加如下代码："><a href="#httpd-ssl-conf添加如下代码：" class="headerlink" title="httpd-ssl.conf添加如下代码："></a>httpd-ssl.conf添加如下代码：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:443&gt;</span><br><span class="line">	ServerName www.域名</span><br><span class="line">	ServerAlias 域名</span><br><span class="line">	DirectoryIndex index.html index.php error.html</span><br><span class="line">	DocumentRoot &quot;PATH&quot;</span><br><span class="line">	&lt;Directory  &quot;PATH&quot;&gt;</span><br><span class="line">		Options -Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class="line">		AllowOverride All</span><br><span class="line">		Allow from all</span><br><span class="line">		Require all granted</span><br><span class="line">		Order allow,deny</span><br><span class="line">	&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">	SSLEngine on   </span><br><span class="line">	SSLProtocol all -SSLv2 -SSLv3</span><br><span class="line">	SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM</span><br><span class="line">	SSLHonorCipherOrder on</span><br><span class="line">	SSLCertificateFile 证书文件(*_public.crt)</span><br><span class="line">	SSLCertificateKeyFile 证书文件(*.key)</span><br><span class="line">	SSLCertificateChainFile 证书文件(*_chain.crt)</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>


<h3 id="httpd-conf添加如下代码："><a href="#httpd-conf添加如下代码：" class="headerlink" title="httpd.conf添加如下代码："></a>httpd.conf添加如下代码：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">	RewriteEngine on</span><br><span class="line">	RewriteCond %&#123;SERVER_PORT&#125; !^443$</span><br><span class="line">	RewriteRule ^(.*)$ https://%&#123;SERVER_NAME&#125;$1 [L,R]</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p><code>apachectl -k stop</code><br><code>apachectl -k start</code><br><code>apachectl -k restart</code><br><code>apachectl -T</code> &#x2F;&#x2F;检查配置文件</p>
<h2 id="Apache-x2F-httpd服务器更改网站根目录-假设需要将目录更换为-data-www"><a href="#Apache-x2F-httpd服务器更改网站根目录-假设需要将目录更换为-data-www" class="headerlink" title="Apache&#x2F;httpd服务器更改网站根目录(假设需要将目录更换为 /data/www)"></a>Apache&#x2F;httpd服务器更改网站根目录(假设需要将目录更换为 <code>/data/www</code>)</h2><ol>
<li>提前创建目录 <code>/data/www</code><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/data/</span>www</span><br><span class="line"></span><br><span class="line">echo <span class="string">&quot;this is test content&quot;</span> &gt; <span class="regexp">/data/</span>www/index.html</span><br></pre></td></tr></table></figure></li>
<li>修改配置文件 <code>vim /etc/httpd/httpd.conf</code><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更改DocumentRoot</span></span><br><span class="line"><span class="attribute">DocumentRoot</span> <span class="string">&quot;/data/www&quot;</span></span><br><span class="line"><span class="comment">#设置目录权限(下方code为新增)</span></span><br><span class="line"><span class="section">&lt;Directory <span class="string">&quot;/data/www&quot;</span>&gt;</span></span><br><span class="line">    <span class="attribute">Options</span> FollowSymLinks</span><br><span class="line">    <span class="attribute">AllowOverride</span> None</span><br><span class="line">    <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>重启服务<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/apache/</span>bin/apachectl restart</span><br></pre></td></tr></table></figure>
<img src="/blog/p/320c859b/changed_done.jpg" class="" title="Apache&#x2F;httpd服务器更改网站根目录成功"></li>
</ol>
<h2 id="Apache-x2F-httpd服务器配置-vhosts-conf-多个虚拟域名，实现一台服务器上运行多个网站，一个ip多个域名（虚拟主机）"><a href="#Apache-x2F-httpd服务器配置-vhosts-conf-多个虚拟域名，实现一台服务器上运行多个网站，一个ip多个域名（虚拟主机）" class="headerlink" title="Apache&#x2F;httpd服务器配置(vhosts.conf)多个虚拟域名，实现一台服务器上运行多个网站，一个ip多个域名（虚拟主机）"></a>Apache&#x2F;httpd服务器配置(vhosts.conf)多个虚拟域名，实现一台服务器上运行多个网站，一个ip多个域名（虚拟主机）</h2><blockquote>
<p>默认在每个目录下创建了index.html做标识</p>
</blockquote>
<ol>
<li>准备提供给 <code>www.root.com</code>准备的根目录:&#x2F;data&#x2F;www</li>
<li>准备提供给 <code>www.test.com</code>准备的文件夹:<code>/data/www/www.test.com</code></li>
<li>准备提供给 <code>blog.test.com</code>准备的文件夹:<code>/data/www/blog.test.com</code></li>
<li>准备提供给 <code>www.other.com</code>准备的文件夹:<code>/data/www/www.other.com</code><img src="/blog/p/320c859b/file_path.jpg" class="" title="文件路径情况"></li>
</ol>
<h2 id="预计实现以下效果"><a href="#预计实现以下效果" class="headerlink" title="预计实现以下效果"></a>预计实现以下效果</h2><h3 id="同一台服务能够运行四个不同的网站-包括根目录"><a href="#同一台服务能够运行四个不同的网站-包括根目录" class="headerlink" title="同一台服务能够运行四个不同的网站(包括根目录)"></a>同一台服务能够运行四个不同的网站(包括根目录)</h3><ul>
<li><code>http://www.root.com</code>或 <code>localhost</code>(访问根目录)</li>
<li><code>http://www.test.com</code>(访问 <code>www.test.com</code>目录)</li>
<li><code>http://blog.test.com</code>(是上面的子域名，访问 <code>blog.test.com</code>目录)</li>
<li><code>http://www.other.com</code>(另外一个域名，访问 <code>www.other.com</code>目录)</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="开启vhost-alias模块"><a href="#开启vhost-alias模块" class="headerlink" title="开启vhost_alias模块"></a>开启vhost_alias模块</h3><p>编辑<code>vim /etc/httpd/httpd.conf</code>(去掉#)</p>
<img src="/blog/p/320c859b/vhost_alias.jpg" class="" title="开启vhost_alias模块">


<h3 id="打开并指定vhost-alias配置文件-注意-配置文件默认安装目录是-etc-httpd-extra-下"><a href="#打开并指定vhost-alias配置文件-注意-配置文件默认安装目录是-etc-httpd-extra-下" class="headerlink" title="打开并指定vhost_alias配置文件 (注意:配置文件默认安装目录是 /etc/httpd/extra/下)"></a>打开并指定vhost_alias配置文件 (注意:配置文件默认安装目录是 <code>/etc/httpd/extra/</code>下)</h3><p>编辑<code>vim /etc/httpd/httpd.conf</code></p>
<img src="/blog/p/320c859b/vhost_alias_include.jpg" class="" title="开启vhost_alias配置文件">

<h3 id="配置hosts-conf"><a href="#配置hosts-conf" class="headerlink" title="配置hosts.conf"></a>配置hosts.conf</h3><blockquote>
<p>windows的hosts位于 <code>C:\Windows\System32\drivers\etc</code><br>linux的hosts位于 <code>/etc/hosts</code></p>
</blockquote>
<p>编辑<code>vim /etc/hosts</code></p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span> www.root.com</span><br><span class="line"><span class="number">127.0.0.1</span> www.test.com</span><br><span class="line"><span class="number">127.0.0.1</span> blog.test.com</span><br><span class="line"><span class="number">127.0.0.1</span> www.other.com</span><br></pre></td></tr></table></figure>
<img src="/blog/p/320c859b/hosts.jpg" class="" title="开启hosts配置文件">

<h3 id="配置vhosts-conf"><a href="#配置vhosts-conf" class="headerlink" title="配置vhosts.conf"></a>配置vhosts.conf</h3><p>编辑<code>vim /etc/httpd/vhosts.conf</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute">DocumentRoot</span> <span class="string">&quot;/data/www&quot;</span></span><br><span class="line">    <span class="attribute">DirectoryIndex</span> index.html index.php</span><br><span class="line">    <span class="attribute">ServerName</span> www.root.com</span><br><span class="line">    <span class="attribute">ServerAlias</span> root.com</span><br><span class="line">    <span class="section">&lt;Directory <span class="string">&quot;/data/www&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="attribute">AllowOverride</span> <span class="literal">All</span></span><br><span class="line">        <span class="attribute">Order</span> <span class="literal">allow</span>,<span class="literal">deny</span></span><br><span class="line">        <span class="attribute">Allow</span> from <span class="literal">all</span></span><br><span class="line">        <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line">    <span class="section">&lt;/Directory&gt;</span>  </span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute">DocumentRoot</span> <span class="string">&quot;/data/www/www.other.com&quot;</span></span><br><span class="line">    <span class="attribute">DirectoryIndex</span> index.html index.php</span><br><span class="line">    <span class="attribute">ServerName</span> www.other.com</span><br><span class="line">    <span class="attribute">ServerAlias</span> other.com</span><br><span class="line">	<span class="section">&lt;Directory <span class="string">&quot;/data/www/www.other.com&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="attribute">AllowOverride</span> <span class="literal">All</span></span><br><span class="line">     	 <span class="attribute">Order</span> <span class="literal">allow</span>,<span class="literal">deny</span></span><br><span class="line">     	 <span class="attribute">Allow</span> from <span class="literal">all</span></span><br><span class="line">         <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line">	<span class="section">&lt;/Directory&gt;</span>  </span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute">DocumentRoot</span> <span class="string">&quot;/data/www/www.test.com&quot;</span></span><br><span class="line">    <span class="attribute">DirectoryIndex</span> index.html index.php</span><br><span class="line">    <span class="attribute">ServerName</span> www.test.com</span><br><span class="line">    <span class="attribute">ServerAlias</span> test.com</span><br><span class="line">    <span class="section">&lt;Directory <span class="string">&quot;/data/www/www.test.com&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="attribute">AllowOverride</span> <span class="literal">All</span></span><br><span class="line">        <span class="attribute">Order</span> <span class="literal">allow</span>,<span class="literal">deny</span></span><br><span class="line">        <span class="attribute">Allow</span> from <span class="literal">all</span></span><br><span class="line">        <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line">    <span class="section">&lt;/Directory&gt;</span>  </span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute">DocumentRoot</span> <span class="string">&quot;/data/www/blog.test.com&quot;</span></span><br><span class="line">    <span class="attribute">ServerName</span> blog.test.com</span><br><span class="line">    <span class="attribute">DirectoryIndex</span> index.html index.php</span><br><span class="line">    <span class="section">&lt;Directory <span class="string">&quot;/data/www/blog.test.com&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="attribute">AllowOverride</span> <span class="literal">All</span></span><br><span class="line">     	<span class="attribute">Order</span> <span class="literal">allow</span>,<span class="literal">deny</span></span><br><span class="line">     	<span class="attribute">Allow</span> from <span class="literal">all</span></span><br><span class="line">        <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line">    <span class="section">&lt;/Directory&gt;</span>  </span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="重启apache-x2F-httpd服务"><a href="#重启apache-x2F-httpd服务" class="headerlink" title="重启apache&#x2F;httpd服务"></a>重启apache&#x2F;httpd服务</h3><p><code>/usr/local/apache/bin/apachectl restart</code></p>
<h3 id="浏览器预览"><a href="#浏览器预览" class="headerlink" title="浏览器预览"></a>浏览器预览</h3><img src="/blog/p/320c859b/vhosts_done.jpg" class="" title="Apache&#x2F;httpd服务器配置(vhosts.conf)多个虚拟域名，实现一台服务器上运行多个网站">

<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="建议在部署阶段关闭根目录下的Indexes权限-Indexes的作用是当前根目录下如果不存在任何文件，则显示目录结构"><a href="#建议在部署阶段关闭根目录下的Indexes权限-Indexes的作用是当前根目录下如果不存在任何文件，则显示目录结构" class="headerlink" title="建议在部署阶段关闭根目录下的Indexes权限(Indexes的作用是当前根目录下如果不存在任何文件，则显示目录结构)"></a>建议在部署阶段关闭根目录下的Indexes权限(Indexes的作用是当前根目录下如果不存在任何文件，则显示目录结构)</h3><p>修改配置文件 <code>vim /etc/httpd/httpd.conf</code> 找到根目录权限配置处</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">&lt;<span class="literal">Directory</span> <span class="string">&quot;/data/www&quot;</span>&gt;</span><br><span class="line">    Options Indexes FollowSymLinks <span class="comment">#去掉Indexes</span></span><br><span class="line">    AllowOverride <span class="literal">None</span></span><br><span class="line">    Require <span class="literal">all</span> granted</span><br><span class="line">&lt;/<span class="literal">Directory</span>&gt;</span><br></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="built_in">Directory</span> <span class="string">&quot;/data/www&quot;</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="built_in">Options</span> <span class="variable">FollowSymLinks</span></span><br><span class="line">    <span class="variable">AllowOverride</span> <span class="built_in">None</span></span><br><span class="line">    <span class="variable">Require</span> <span class="variable">all</span> <span class="variable">granted</span></span><br><span class="line"><span class="operator">&lt;/</span><span class="built_in">Directory</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol>
<li>An operation was attempted on something that is not a socket.  : winnt_accept: getsockname error on listening socket, is IPv6 available?<ul>
<li>cmd命令下 <code>&gt;netsh winsock RESET</code></li>
<li>重启即可</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>CharlesProxy抓包指南</title>
    <url>/blog/p/3aa747c4/</url>
    <content><![CDATA[<p>蒸无语辣，大厂的app抓不到包，解决方案跳转到 <a href="/blog/p/5001f0a0/" title="安卓反编译">安卓反编译</a></p>
<span id="more"></span>

<h2 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h2><ol>
<li>Charles是一个运行在自己计算机中的Web代理（http代理&#x2F;http监视器）</li>
<li>将web浏览器(或者其他任何的Internet应用程序,手机或物联网设备)配置通过Charles访问Internet</li>
<li>然后就可以通过Charles看到所有发送和接收的数据</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>官网 <a href="https://charlesproxy.com/" target="_blank" rel="noopener">https://charlesproxy.com</a></p>
</blockquote>
<p>…省略步骤</p>
<h2 id="常见的抓包需求"><a href="#常见的抓包需求" class="headerlink" title="常见的抓包需求"></a>常见的抓包需求</h2><ol>
<li>数据缺陷分析（分析数据结构，一般分析手机或物联网设备）</li>
<li>模拟不同网络速度场景（龟龟）</li>
<li>模拟各种疑难杂症网络场景（各种http错误状态码）</li>
<li>更改请求数据 或 response数据（BreakPoint）</li>
<li>将目的源地址替换成其他，或本地（Map）</li>
<li>压测</li>
</ol>
<h2 id="HTTPS代理-安装SSL"><a href="#HTTPS代理-安装SSL" class="headerlink" title="HTTPS代理 安装SSL"></a>HTTPS代理 安装SSL</h2><blockquote>
<p><a href="https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/" target="_blank" rel="noopener">https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/</a></p>
</blockquote>
<p>如果不安装ssl则无法以纯文本的方式查看内容，通俗点讲就是看不到实际内容，而只能看到加密后的乱码<br>步骤详情：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 手机端安装SSL  https:<span class="comment">//www.charlesproxy.com/documentation/using-charles/ssl-certificates/</span></span><br><span class="line">## 这里是 `iphone` 手机的安装步骤，不同机型进入网站按照提示安装</span><br><span class="line"><span class="number">1.</span> iphone打开Safari(重点)浏览器访问 https:<span class="comment">//chls.pro/ssl 并下载SSL证书</span></span><br><span class="line"><span class="number">2.</span> 进入iphone设置-&gt;已下载描述文件-&gt;安装-&gt;输入密码</span><br><span class="line"><span class="number">3.</span> 进入iphone设置-&gt;通用-&gt;关于本机-&gt;证书信任设置-&gt;信任Charles Proxy CA...</span><br><span class="line"></span><br><span class="line">## 这里是 `android` 手机的安装步骤，不同机型进入网站按照提示安装</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># CharlesProxy客户端安装SSL证书</span><br><span class="line"><span class="number">1.</span> Help-&gt;SSL Proxying-&gt;Install Charles Root Certificate，安装到系统</span><br><span class="line"><span class="number">2.</span> 默认会弹出钥匙串访问的窗口，要点击CharlesProxy的证书，并且添加信任，没有的话自行打开 Mac-&gt;启动台-&gt;钥匙串访问</span><br><span class="line"><span class="number">3.</span> Proxy-&gt;SSL Proxy Settings-&gt;Enable SSL Proxying 并且添加域名</span><br><span class="line">note:域名处觉得麻烦可以直接填写*</span><br><span class="line"></span><br><span class="line"># Charles默认禁止所有IP连接，连接时，会要求授权，若不想授权，可 Proxy -&gt; Access Control Settgings -&gt; Add <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> 以允许所有IP连接</span><br></pre></td></tr></table></figure>
<img src="/blog/p/3aa747c4/%E9%92%A5%E5%8C%99%E4%B8%B2%E8%AE%BF%E9%97%AE%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%AF%81%E4%B9%A6%E5%B9%B6%E4%BF%A1%E4%BB%BB.png" class="" title="钥匙串访问中添加证书并信任.png">

<img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A41.png" class="" title="CharlesProxySSl证书安装步骤1">
<img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A42.png" class="" title="CharlesProxySSl证书安装步骤2">
<img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A43.png" class="" title="CharlesProxySSl证书安装步骤3">
<img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A44.png" class="" title="CharlesProxySSl证书安装步骤4">
<img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A45.png" class="" title="CharlesProxySSl证书安装步骤5">
<img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A46.png" class="" title="CharlesProxySSl证书安装步骤6">
<img src="/blog/p/3aa747c4/CharlesProxySSl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A47.png" class="" title="CharlesProxySSl证书安装步骤7">


<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="网速模拟"><a href="#网速模拟" class="headerlink" title="网速模拟"></a>网速模拟</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Proxy</span>-&gt;Throtte Setting</span><br><span class="line">Bandwidth 带宽</span><br><span class="line">Utilistation 利用百分比</span><br><span class="line">Round-trip 往返延迟</span><br><span class="line">MTU 字节</span><br></pre></td></tr></table></figure>

<h3 id="Map-remote"><a href="#Map-remote" class="headerlink" title="Map remote"></a>Map remote</h3><p>将指定的网络请求重定向到指定网址<br>一般用于正式环境&#x2F;测试环境的切换<br>使用步骤：抓包之后，选中需要替换的请求，Map remote，修改更改后的指定网址，重新请求即可</p>
<h3 id="Map-local"><a href="#Map-local" class="headerlink" title="Map local"></a>Map local</h3><blockquote>
<p>常用操作，一般用在调试服务端代码</p>
</blockquote>
<p>将指定的网络请求的结果重定向到本地文件，<br>每个API都可以 <code>Save response</code><br>保存之后 选中一个网络请求 开启Map local选择本地文件路径保存。重新请求即可</p>
<h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><p>在 请求 与 返回结果中间通过断点停顿编辑所有相关信息<br>操作步骤：抓包之后，选中需要打断点的请求，重新请求即可</p>
]]></content>
  </entry>
  <entry>
    <title>Composer</title>
    <url>/blog/p/d5e309c2/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="安装Composer"><a href="#安装Composer" class="headerlink" title="安装Composer"></a>安装Composer</h2><blockquote>
<p><code>https://getcomposer.org/download/</code></p>
</blockquote>
<ol>
<li><code>curl -sS https://getcomposer.org/installer | php</code></li>
<li><code>mv composer.phar /usr/local/bin/composer</code> 设置全局使用</li>
<li><code>composer config -g repo.packagist composer https://packagist.phpcomposer.com</code> 切换中国镜像</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/blog/p/f255ffad/</url>
    <content><![CDATA[<p>刚入职的公司项目生产和测试环境都是采用Docker容器架构，我了解后发现这简直就是开发神器！与mac的brew相似，不断补充…</p>
<span id="more"></span>


<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ul>
<li>Docker 是一个开源的应用容器引擎，基于Go 语言并遵从Apache2.0协议开源。</li>
<li>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</li>
<li>容器是完全使用沙箱机制，相互之间不会有任何接口,更重要的是容器性能开销极低。</li>
</ul>
<p>|描述|<br>-|-<br>Images|Docker 镜像，用于创建 Docker 容器的模板<br>Container|Docker 容器，独立运行的一个或一组应用<br>Client|Docker 客户端，使用 Docker Api与 Docker 的守护进程通信<br>Host|Docker 主机，一个物理或者虚拟的机器用于执行 Docker 守护进程和容器<br>Registry|Docker 仓库，用来保存镜像<br>Machine|一个简化Docker安装的命令行工具，比如VirtualBox、 Digital Ocean、Microsoft Azure</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p><a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a><br><a href="https://developer.aliyun.com/mirror/docker-ce" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/docker-ce</a><br><a href="https://docker.com/" target="_blank" rel="noopener">https://docker.com/</a><br><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: 添加软件源信息</span></span><br><span class="line">sudo yum-config-manager --add-repo https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/docker-ce/</span>linux<span class="regexp">/centos/</span>docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: 更新并安装Docker-CE</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce-<span class="number">18.03</span>.<span class="number">1</span>.ce-<span class="number">1</span>.el7.centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4: 开启Docker服务</span></span><br><span class="line">systemctl start docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装的版本</span></span><br><span class="line">sudo docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">systemctl enable docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行hello-world镜像</span></span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：</span></span><br><span class="line"><span class="comment"># 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。</span></span><br><span class="line"><span class="comment"># vim /etc/yum.repos.d/docker-ee.repo</span></span><br><span class="line"><span class="comment">#   将[docker-ce-test]下方的enabled=0修改为enabled=1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="comment"># Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="comment"># yum list docker-ce.x86_64 --showduplicates | sort -r</span></span><br><span class="line"><span class="comment">#   Loading mirror speeds from cached hostfile</span></span><br><span class="line"><span class="comment">#   Loaded plugins: branch, fastestmirror, langpacks</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="comment">#   Available Packages</span></span><br><span class="line"><span class="comment"># Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos)</span></span><br><span class="line"><span class="comment"># sudo yum -y install docker-ce-[VERSION]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置加速器加速下载</span></span><br><span class="line"><span class="comment"># https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors 已更新</span></span><br><span class="line">vim <span class="regexp">/etc/</span>docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://cmd8scrk.mirror.aliyuncs.com/&quot;</span>]  <span class="comment">#加速器，用阿里云的比较快 https://9cpn8tt6.mirror.aliyuncs.com/|https://registry.docker-cn.com</span></span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line">echo <span class="string">&quot;&#123;\&quot;registry-mirrors\&quot;: [\&quot;https://cmd8scrk.mirror.aliyuncs.com/\&quot;]&#125;&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>docker/daemon.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置完需要重启</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#版本/信息</span></span><br><span class="line">docker [info|version]</span><br><span class="line"></span><br><span class="line"><span class="comment">#容器操作</span></span><br><span class="line"><span class="comment">##容器生命周期管理</span></span><br><span class="line">docker [run|start|stop|restart|<span class="built_in">kill</span>|<span class="built_in">rm</span>|pause|unpause] </span><br><span class="line"><span class="comment">##容器操作运维</span></span><br><span class="line">docker [ps|inspect|<span class="built_in">exec</span>|logs|<span class="built_in">export</span>|import|port]</span><br><span class="line"><span class="comment">##容器rootfs命令</span></span><br><span class="line">docker [commit|<span class="built_in">cp</span>|diff] </span><br><span class="line"></span><br><span class="line"><span class="comment">#镜像操作</span></span><br><span class="line">docker [images|rmi|tag|build|<span class="built_in">history</span>|save|import]</span><br><span class="line"><span class="comment">##查看镜像组成</span></span><br><span class="line">docker <span class="built_in">history</span> hello-world</span><br><span class="line"><span class="comment">##镜像文件列表</span></span><br><span class="line">docker info 查看配置Docker Root Dir=/var/lib/docker （默认）docker 镜像存放的路径，一般在image/overlay2/imagedb/content/sha256下</span><br><span class="line"><span class="comment">##打开镜像的配置内容</span></span><br><span class="line"><span class="built_in">cat</span> f09fe80eb0e75e97b04b9dfb065ac3fda37a8fac0161f42fca1e6fe4d0977c80</span><br><span class="line">----其中，<span class="built_in">history</span>数组内，标识了镜像的历史记录（与<span class="built_in">history</span>命令内容对应）</span><br><span class="line">----rootfs的diff_ids中，对应了依赖使用中镜像层文件（<span class="built_in">history</span>命令中size大于0的层）</span><br><span class="line"><span class="comment">##查看镜像层文件列表</span></span><br><span class="line">ll /var/lib/docker/image/overlay2/layerdb/sha256</span><br><span class="line"><span class="comment">##镜像层文件结构</span></span><br><span class="line">ll f09fe80eb0e75e97b04b9dfb065ac3fda37a8fac0161f42fca1e6fe4d0977c80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#镜像仓库操作</span></span><br><span class="line">docker [login|pull|push|search] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker pull redis</span><br><span class="line">docker run –d –name redis redis</span><br><span class="line">docker start/stop/pause redis</span><br></pre></td></tr></table></figure>
<h3 id="将任意公开的包复制到自己镜像中"><a href="#将任意公开的包复制到自己镜像中" class="headerlink" title="将任意公开的包复制到自己镜像中"></a>将任意公开的包复制到自己镜像中</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#将某一镜像 复制 并 重新指定(归属于)成我的镜像</span><br><span class="line">docker tag 镜像名 lee129/centos7:tag</span><br><span class="line">docker push lee129/centos7:tag</span><br></pre></td></tr></table></figure>
<h3 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">TODO 待补充.. 没验证通过</span><br><span class="line"><span class="comment"># 私有仓库的位置</span></span><br><span class="line">mkdir -p <span class="regexp">/opt/</span>data/registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull registry:<span class="number">2.8</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动私有仓库</span></span><br><span class="line">docker run -d -p <span class="number">5000</span>:<span class="number">5000</span> -v <span class="regexp">/opt/</span>data<span class="regexp">/registry:/</span>var<span class="regexp">/lib/</span>registry --name registry --restart=always registry:<span class="number">2.8</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置http传输 编辑vim /etc/docker/daemon.json</span></span><br><span class="line">    <span class="string">&quot;insecure-registries&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;119.91.21.199:5000&quot;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置账号密码</span></span><br><span class="line"><span class="comment">## 如果报错则需要安装</span></span><br><span class="line">yum -y install httpd</span><br><span class="line"></span><br><span class="line">mkdir -p <span class="regexp">/registry/</span>auth &amp;&amp; mkdir -p <span class="regexp">/registry/</span>data &amp;&amp; mkdir <span class="regexp">/registry/</span>certs</span><br><span class="line">docker run \</span><br><span class="line">--entrypoint htpasswd \</span><br><span class="line">  httpd:<span class="number">2</span> -Bbn liguoxin jc81jzkaolpkcoka &gt; <span class="regexp">/registry/</span>auth/htpasswd</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">htpasswd -Bbn liguoxin jc81jzkaolpkcoka &gt; <span class="regexp">/registry/</span>auth/htpasswd</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动 registry</span></span><br><span class="line">docker run \</span><br><span class="line">-d \</span><br><span class="line">-p <span class="number">5000</span>:<span class="number">5000</span> \</span><br><span class="line">-v <span class="regexp">/registry/</span>data:<span class="regexp">/var/</span>lib/registry \</span><br><span class="line">-e <span class="string">&quot;REGISTRY_AUTH=htpasswd&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot;</span> \</span><br><span class="line">-e REGISTRY_AUTH_HTPASSWD_PATH=<span class="regexp">/registry/</span>auth/htpasswd \</span><br><span class="line">registry:<span class="number">2.8</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">-e <span class="string">&quot;REGISTRY_HTTP_TLS_CERTIFICATE=/registry/certs/domain.crt&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;REGISTRY_HTTP_TLS_KEY=/registry/certs/domain.key&quot;</span> \</span><br><span class="line"></span><br><span class="line">docker tag hello-world http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">244.5</span>:<span class="number">5000</span>/hello-world</span><br><span class="line">docker push <span class="number">192.168</span>.<span class="number">244.5</span>:<span class="number">5000</span>/hello-world</span><br><span class="line">查询：curl http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">244.5</span>:<span class="number">5000</span><span class="regexp">/v2/</span>_catalog   | http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">244.5</span>:<span class="number">5000</span><span class="regexp">/v2/</span>hello-world<span class="regexp">/tags/</span>list</span><br></pre></td></tr></table></figure>


<h2 id="Docker创建一个全新的镜像-image"><a href="#Docker创建一个全新的镜像-image" class="headerlink" title="Docker创建一个全新的镜像 image"></a>Docker创建一个全新的镜像 image</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Docker升级一个镜像，可以先克隆官方稳定版本作为地基"><a href="#Docker升级一个镜像，可以先克隆官方稳定版本作为地基" class="headerlink" title="Docker升级一个镜像，可以先克隆官方稳定版本作为地基"></a>Docker升级一个镜像，可以先克隆官方稳定版本作为地基</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull 一个稳定的版本</span></span><br><span class="line">docker pull nginx:stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker tag 拉下来的稳定镜像:tag 升级后的镜像后的名称:tag</span></span><br><span class="line">docker <span class="keyword">tag</span> <span class="title">nginx</span>:stable nginx:<span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="数据挂载"><a href="#数据挂载" class="headerlink" title="数据挂载"></a>数据挂载</h2><blockquote>
<p><a href="https://docs.docker.com/compose/compose-file/#volumes" target="_blank" rel="noopener">https://docs.docker.com/compose/compose-file/#volumes</a><br><a href="https://docs.docker.com/storage/volumes/" target="_blank" rel="noopener">https://docs.docker.com/storage/volumes/</a><br><a href="https://www.zsythink.net/archives/4362" target="_blank" rel="noopener">https://www.zsythink.net/archives/4362</a></p>
</blockquote>
<p>数据卷 映射关系 不会被删除，一个卷可以同时被多个容器使用，从而达到数据共享的目的</p>
<ul>
<li>匿名卷：省略卷名(自动创建ID)，如果启动时带<code>--rm</code>删除容器，数据<code>会删除</code>，否则和命名卷一样不会删除<ul>
<li>docker run -v &#x2F;data1</li>
</ul>
</li>
<li>命名卷：不省略卷名，删除容器，数据<code>不会删除</code><ul>
<li>docker volume create 卷A</li>
<li>docker run -v 卷A&#x2F;data1</li>
</ul>
</li>
<li>绑定挂载，没数据卷，会覆盖容器内的数据，用在<code>/etc/localtime</code>等.<ul>
<li>docker valume &#x2F;宿主机目录:&#x2F;data1</li>
</ul>
</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># 首先，查看一下当前卷列表，没有任何卷</span><br><span class="line">[root@cos7-<span class="number">1</span> ~]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"></span><br><span class="line"># 创建一个test1容器，如下，test1容器使用了一个匿名卷，一个testA卷，一个绑定挂载的宿主机目录</span><br><span class="line">[root@cos7-<span class="number">1</span> ~]# docker run -td --name test1 -v <span class="regexp">/data -v testA:/</span>data1 -v <span class="regexp">/root/</span>test1:/data2 alpine</span><br><span class="line">c1fd78c3ef6ac1e0544646deaf65aed24d8aef47d849e5199c954b6a9308dc52</span><br><span class="line"></span><br><span class="line"># 再次查看卷列表，匿名卷和testA卷已经自动创建了</span><br><span class="line">[root@cos7-<span class="number">1</span> ~]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     <span class="number">7</span>f58548a996cb64f17c0a1e4679e9cf88c6fc87751623f090280f9651b85db81</span><br><span class="line">local     testA</span><br><span class="line"></span><br><span class="line">#此时，创建一个test2容器，下例命令中的--volumes-<span class="keyword">from</span> test1表示让test2照抄test1的卷（以及绑定挂载）</span><br><span class="line">[root@cos7-<span class="number">1</span> ~]# docker run -td --name test2 --volumes-<span class="keyword">from</span> test1  alpine</span><br><span class="line">d7ac879750abb71480cfe630c379466db5d2c713b80b39a2451d0493ec814c49</span><br><span class="line"></span><br><span class="line">#查看test1容器和test2容器的挂载列表，发现它们挂载的卷（以及宿主机目录）都是相同的，对应的容器中的目录也是相同的。</span><br><span class="line">[root@cos7-<span class="number">1</span> ~]# docker <span class="keyword">inspect</span> test1 -f <span class="string">&#x27;&#123;&#123;.Mounts&#125;&#125;&#x27;</span></span><br><span class="line">[&#123;volume testA <span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>volumes<span class="regexp">/testA/</span>_data <span class="regexp">/data1 local z true &#125; &#123;bind  /</span>root<span class="regexp">/test1 /</span>data2   <span class="keyword">true</span> rprivate&#125; &#123;volume <span class="number">7</span>f58548a996cb64f17c0a1e4679e9cf88c6fc87751623f090280f9651b85db81 <span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>volumes<span class="regexp">/7f58548a996cb64f17c0a1e4679e9cf88c6fc87751623f090280f9651b85db81/</span>_data /data local  <span class="keyword">true</span> &#125;]</span><br><span class="line"></span><br><span class="line">[root@cos7-<span class="number">1</span> ~]# docker <span class="keyword">inspect</span> test2 -f <span class="string">&#x27;&#123;&#123;.Mounts&#125;&#125;&#x27;</span></span><br><span class="line">[&#123;volume <span class="number">7</span>f58548a996cb64f17c0a1e4679e9cf88c6fc87751623f090280f9651b85db81 <span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>volumes<span class="regexp">/7f58548a996cb64f17c0a1e4679e9cf88c6fc87751623f090280f9651b85db81/</span>_data <span class="regexp">/data local  true &#125; &#123;volume testA /</span>var<span class="regexp">/lib/</span>docker<span class="regexp">/volumes/</span>testA<span class="regexp">/_data /</span>data1 local  <span class="keyword">true</span> &#125; &#123;bind  <span class="regexp">/root/</span>test1 /data2   <span class="keyword">true</span> rprivate&#125;]</span><br><span class="line">[root@cos7-<span class="number">1</span> ~]# </span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过下例查看testCcon容器都使用了哪些卷</span></span><br><span class="line">docker inspect 容器 -f <span class="string">&#x27;&#123;&#123;.Mounts&#125;&#125;&#x27;</span></span><br><span class="line">docker inspect program -f <span class="string">&#x27;&#123;&#123;.Mounts&#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 如下命令其实就是过滤出容器的详细信息中的Mounts段</span></span><br><span class="line"><span class="comment"># 如下示例的testCcon容器使用了两个卷，testA和testB</span></span><br><span class="line">[root@cos7-<span class="number">1</span> ~]<span class="comment"># docker inspect testCcon -f &#x27;&#123;&#123;.Mounts&#125;&#125;&#x27;</span></span><br><span class="line">[&#123;volume testB <span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>volumes<span class="regexp">/testB/</span>_data <span class="regexp">/var/</span>log local z true &#125; &#123;volume testA <span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>volumes<span class="regexp">/testA/</span>_data /data local z true &#125;]</span><br><span class="line"><span class="comment"># 通过下例查看testA卷被哪些容器使用了</span></span><br><span class="line"><span class="comment"># 如下示例中testA卷被testBcon和testCcon两个容器使用了</span></span><br><span class="line">[root@cos7-<span class="number">1</span> ~]<span class="comment"># docker ps -a -f &quot;volume=testA&quot; </span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND     CREATED        STATUS                      PORTS     NAMES</span><br><span class="line"><span class="number">9</span>b6d44174554   alpine    <span class="string">&quot;/bin/sh&quot;</span>   <span class="number">21</span> hours ago   Exited (<span class="number">137</span>) <span class="number">13</span> hours ago             testBcon</span><br><span class="line">d8d7470c5d86   alpine    <span class="string">&quot;/bin/sh&quot;</span>   <span class="number">24</span> hours ago   Exited (<span class="number">137</span>) <span class="number">13</span> hours ago             testCcon</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li>volume文件挂载<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -d -v 这是挂载的路径 <span class="comment">--name 名称 -p 镜像</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">run</span> -d -v 宿主机的路径:这是容器挂载的路径 <span class="comment">--name 名称 -p 镜像</span></span><br></pre></td></tr></table></figure></li>
<li>volumes-from引用数据卷<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># 备份/恢复数据卷   </span><br><span class="line">## 备份：docker run --rm --volumes-<span class="keyword">from</span> data -v $(pwd):<span class="regexp">/backup centos tar cvf /</span>backup<span class="regexp">/data.tar /</span>opt/data</span><br><span class="line">## 恢复：docker run --rm --volumes-<span class="keyword">from</span> data -v $(pwd):<span class="regexp">/backup centos tar xvf /</span>backup<span class="regexp">/data.tar -C /</span></span><br><span class="line"></span><br><span class="line"># 释义：</span><br><span class="line">docker  run --rm ----- 启动一个新的容器，执行完毕删除</span><br><span class="line">--volumes-<span class="keyword">from</span> data ------- data容器中挂载卷</span><br><span class="line">-v $(pwd):/backup   --------挂载当前目录到容器中为backup</span><br><span class="line">cvf <span class="regexp">/backup/</span>data.tar <span class="regexp">/opt/</span>data --------- 备份<span class="regexp">/opt/</span>data目录（即卷中所有的数据）为data.tar</span><br><span class="line">xvf <span class="regexp">/backup/</span>data.tar -C <span class="regexp">/  ---------- 解压data.tar 到根目录/</span> ，因tar归档中已包含了<span class="regexp">/opt/</span>data路径</span><br><span class="line"></span><br><span class="line"># 删除数据卷：</span><br><span class="line">docker rm -v data</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 查看容器元数据</span></span><br><span class="line"><span class="title">docker</span> inspect <span class="class"><span class="keyword">data</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="基本组成部分"><a href="#基本组成部分" class="headerlink" title="基本组成部分"></a>基本组成部分</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &#123;base镜像&#125; <span class="comment">#必须放在DOckerfile的第一行，表示从哪个baseimage开始构建</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> liguoxin <span class="comment">#可选的，用来标识image作者的地方</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> </span></span><br><span class="line"><span class="comment"># RUN都是启动一个容器、执行命令、然后提交存储层文件变更。</span></span><br><span class="line"><span class="comment">#    第一层 RUN command1 的执行仅仅是当前进程，一个内存上的变化而已，其结果不会造成任何文件。</span></span><br><span class="line"><span class="comment">#    而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。</span></span><br><span class="line"><span class="comment">#    而如果需要将两条命令或者多条命令联合起来执行需要加上&amp;&amp;。</span></span><br><span class="line"><span class="comment">#    如：cd /usr/local/src &amp;&amp; wget xxxxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 用于为镜像添加元数据，元数以键值对的形式指定</span></span></span><br><span class="line"><span class="comment"># LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span></span><br><span class="line"><span class="comment"># LABEL version=&quot;1.0&quot; description=&quot;这是一个Web服务器&quot; by=&quot;IT笔录&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># CMD的作用是作为执行container时候的默认行为（容器默认的启动命令）</span></span></span><br><span class="line"><span class="comment"># 当运行container的时候声明了command，则不再用image中的CMD默认所定义的命令</span></span><br><span class="line"><span class="comment"># 一个Dockerfile中只能有一个有效的CMD，当定义多个CMD的时候，只有最后一个才会起作用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> </span><br><span class="line"><span class="comment"># EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。</span></span><br><span class="line"><span class="comment"># 在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；</span></span><br><span class="line"><span class="comment"># 另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">entrypoint</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># entrypoint的作用是，把整个container变成可执行的文件，且不能够通过替换CMD的方法来改变创建container的方式。但是可以通过参数传递的方法影响到container内部</span></span></span><br><span class="line"><span class="comment"># 每个Dockerfile只能够包含一个entrypoint，多个entrypoint只有最后一个有效</span></span><br><span class="line"><span class="comment"># 当定义了entrypoint以后，CMD只能够作为参数进行传递</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> &amp; COPY </span></span><br><span class="line"><span class="comment"># 把host上的文件或者目录复制到image中（能够进行自动解压压缩包）　</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span></span><br><span class="line"><span class="comment"># 用来设置环境变量，后续的RUN可以使用它所创建的环境变量 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 用来指定当前工作目录（或者称为当前目录） </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> </span><br><span class="line"><span class="comment"># 运行RUN指令的用户</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 用来创建一个在image之外的mount point</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># base image</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># put nginx-1.16.1.tar.gz</span></span><br><span class="line"><span class="built_in">ADD</span> nginx-1.16.1.tar.gz /usr/local/src</span><br><span class="line"></span><br><span class="line"><span class="comment"># running required command</span></span><br><span class="line"><span class="built_in">RUN</span> yum install -y gcc gcc-c++ glibc make autoconf openssl openssl-devel</span><br><span class="line"><span class="built_in">RUN</span> yum install -y libxslt-devel -y gd gd-devel GeoIP GeoIP-devel pcre pcre-devel</span><br><span class="line"><span class="built_in">RUN</span> useradd -M -s /sbin/nologin nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># change dir to /usr/local/src/nginx-1.13.2</span></span><br><span class="line">WORKDIR /usr/local/src/nginx-1.13.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># execute command to compile nginx</span></span><br><span class="line"><span class="built_in">RUN</span> ./configure <span class="attribute">--user</span>=nginx <span class="attribute">--group</span>=nginx <span class="attribute">--prefix</span>=/usr/local/nginx --with-file-aio  --with-http_ssl_module  --with-http_realip_module    --with-http_addition_module    --with-http_xslt_module   --with-http_image_filter_module    --with-http_geoip_module  --with-http_sub_module  --with-http_dav_module --with-http_flv_module    --with-http_mp4_module --with-http_gunzip_module  --with-http_gzip_static_module  --with-http_auth_request_module  --with-http_random_index_module   --with-http_secure_link_module   --with-http_degradation_module   --with-http_stub_status_module &amp;&amp; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"><span class="built_in">ADD</span> file:0c3b44c83914e95e4604999a86af05023cdd2b2f795e71d737e428fae4a7e0ac <span class="keyword">in</span> / </span><br><span class="line">CMD [<span class="string">&quot;bash&quot;</span>]</span><br><span class="line">LABEL <span class="attribute">maintainer</span>=liguoxin &lt;1422476675@qq.com&gt;</span><br><span class="line">ENV <span class="attribute">NGINX_VERSION</span>=1.17.10</span><br><span class="line">ENV <span class="attribute">NJS_VERSION</span>=0.3.9</span><br><span class="line">ENV <span class="attribute">PKG_RELEASE</span>=1~buster</span><br></pre></td></tr></table></figure>
<h2 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line">LABEL <span class="attribute">maintainer</span>=liguoxin&lt;1422476675@qq.com&gt;</span><br><span class="line">WORKDIR /usr/src</span><br><span class="line"></span><br><span class="line"><span class="built_in">ADD</span> nginx-1.16.1.tar.gz .</span><br><span class="line"></span><br><span class="line">WORKDIR  /usr/src/nginx-1.16.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装nginx</span></span><br><span class="line"><span class="built_in">RUN</span> yum install -y gcc gcc-c++ glibc make openssl-devel</span><br><span class="line"><span class="built_in">RUN</span> yum install -y libxslt-devel -y gd-devel GeoIP GeoIP-devel pcre pcre-devel</span><br><span class="line"><span class="built_in">RUN</span>  useradd -M -s /sbin/nologin nginx</span><br><span class="line"><span class="built_in">RUN</span> ./configure <span class="attribute">--user</span>=nginx <span class="attribute">--group</span>=nginx <span class="attribute">--prefix</span>=/usr/local/nginx --with-http_ssl_module &amp;&amp; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到Nginx的配置目录</span></span><br><span class="line">WORKDIR /usr/local/nginx/conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立子配置文件夹</span></span><br><span class="line"><span class="built_in">RUN</span> mkdir vhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置变量，执行命令时，就可以省略前缀目录了</span></span><br><span class="line">ENV PATH /usr/local/nginx/sbin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># the command of entrypoint</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;nginx&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令，数组形式， &quot;-g daemon off;&quot; 使我们运行容器时，容器可以前台运行，不会退出</span></span><br><span class="line">CMD [<span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker pull nginx:stable</span><br><span class="line">docker <span class="built_in">run</span> -d --name nginxtest -p 80:80 nginx:stable</span><br></pre></td></tr></table></figure>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker pull php:<span class="number">7.0</span>-fpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> liguoxin &lt;<span class="number">1422476675</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /usr/src/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget http://download.redis.io/releases/redis-5.0.8.tar.gz</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> tar -zxvf redis-5.0.8.tar.gz</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> redis-5.0.8</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> make PREFIX=/usr/local/redis</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> make install</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mv</span> /usr/src/redis-5.0.8 /usr/local/redis</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull redis:<span class="number">5</span>.<span class="number">0</span>.<span class="number">9</span></span><br></pre></td></tr></table></figure>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>如果启用容器后，没有指定工作内容，则容器会被关闭()</li>
</ol>
<h2 id="Docker-Composer"><a href="#Docker-Composer" class="headerlink" title="Docker Composer"></a>Docker Composer</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><blockquote>
<p>运行以下命令以下载Docker Compose的当前稳定版本 docker-compose-Linux-x86_64</p>
</blockquote>
<p>sudo curl -L “<a href="https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$" target="_blank" rel="noopener">https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$</a>(uname -s)-$(uname -m)” -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose -x socks5:&#x2F;&#x2F;192.168.3.3:10808</p>
<p><a href="/downloads/docker-compose-Linux-x86_64">docker文件</a></p>
<blockquote>
<p>将可执行权限应用于二进制文件</p>
</blockquote>
<p>sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</p>
<blockquote>
<p>测试安装</p>
</blockquote>
<p>docker-compose –version</p>
<h2 id="Docker-web环境-文件"><a href="#Docker-web环境-文件" class="headerlink" title="Docker web环境 文件"></a>Docker web环境 文件</h2><p><a href="/downloads/docker.tar.gz">docker文件</a></p>
<h2 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h2><blockquote>
<p><a href="https://app.vagrantup.com/" target="_blank" rel="noopener">https://app.vagrantup.com</a></p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">vagrant --help</span><br><span class="line"></span><br><span class="line"><span class="meta">#创建一台虚拟机，生成Vagrantfile</span></span><br><span class="line">vagrant <span class="keyword">init</span> centos/<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#启动虚拟机(not found download)</span></span><br><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line"><span class="meta">#进入虚拟机</span></span><br><span class="line">vagrant ssh</span><br><span class="line"></span><br><span class="line"><span class="meta">#查看虚拟机的状态</span></span><br><span class="line">vagrant status</span><br><span class="line"></span><br><span class="line"><span class="meta">#停止虚拟机</span></span><br><span class="line">vagrant halt</span><br><span class="line"></span><br><span class="line"><span class="meta">#删除虚拟机</span></span><br><span class="line">vagrant destroy</span><br><span class="line"></span><br><span class="line"><span class="meta">#init下载慢时，通过迅雷下载，并且add box</span></span><br><span class="line">vagrant box <span class="keyword">add</span> centos/<span class="number">7</span> 路径</span><br><span class="line">vagrant <span class="keyword">init</span>后</span><br><span class="line">vagrant up即可</span><br></pre></td></tr></table></figure>

<h2 id="Docker-machine"><a href="#Docker-machine" class="headerlink" title="Docker-machine"></a>Docker-machine</h2><ul>
<li>在Windows平台和MAC平台安装和运行docker</li>
<li>搭建和管理多个docker 主机</li>
<li>搭建swarm集群</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟机</span></span><br><span class="line">docker-machine create NAME  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除虚拟机</span></span><br><span class="line">docker-machine rm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出虚拟机</span></span><br><span class="line">docker-machine ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">docker-machine stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接</span></span><br><span class="line">docker-machine ssh</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看环境变量</span></span><br><span class="line">docker-machine env NAME</span><br><span class="line"></span><br><span class="line"><span class="comment">#本地控制远程 docker</span></span><br><span class="line">eval $(docker-machine env NAME)</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出ssh</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="linux-namespace"><a href="#linux-namespace" class="headerlink" title="linux namespace"></a>linux namespace</h3><img src="/blog/p/f255ffad/linux_network_namespace.jpg" class="" title="Linux Network Namespace">

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建linux虚拟机时，就自动创建了ns</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前镜像ID的网络情况</span></span><br><span class="line">docker exec IMAGE_ID<span class="built_in"> ip </span>addr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个linux ns</span></span><br><span class="line">sudo<span class="built_in"> ip </span>netns <span class="built_in">add</span> NX_NAME</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个linux ns</span></span><br><span class="line">sudo<span class="built_in"> ip </span>netns delete NX_NAME</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有linux ns</span></span><br><span class="line">sudo<span class="built_in"> ip </span>ipnetns list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看ns的ip情况</span></span><br><span class="line">sudo<span class="built_in"> ip </span>netns exec NX_NAME<span class="built_in"> ip </span>a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先添加两个veth，然后在两个虚拟机上添加对应的ip</span></span><br><span class="line">待完善<span class="built_in">..</span>.</span><br></pre></td></tr></table></figure>

<img src="/blog/p/f255ffad/Dockere_DeOps.jpg" class="" title="Dockere_DeOps">



<h2 id="mac-m1"><a href="#mac-m1" class="headerlink" title="mac m1"></a>mac m1</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install mysql</span></span><br><span class="line"><span class="attribute">docker</span> pull --platform linux/x86_64 mysql:<span class="number">8</span>.<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="基本命令-1"><a href="#基本命令-1" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">docker images</span><br><span class="line">docker images pull</span><br><span class="line"></span><br><span class="line">docker rmi</span><br><span class="line"><span class="comment"># 强制删除一个镜像</span></span><br><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span></span><br><span class="line"><span class="comment"># 删除所有镜像</span></span><br><span class="line">docker rmi <span class="variable">$</span>(docker images <span class="literal">-q</span>)</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">ps</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">-a</span></span><br><span class="line">docker version</span><br><span class="line">docker <span class="built_in">history</span></span><br><span class="line"><span class="comment"># 查看元数据</span></span><br><span class="line">docker inspect</span><br><span class="line"><span class="comment"># 进入一个容器</span></span><br><span class="line">docker exec <span class="literal">-ti</span> 容器名sha1 /bin/bash</span><br><span class="line"><span class="comment"># 查看运行的日志</span></span><br><span class="line">docker logs x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有容器</span></span><br><span class="line">docker <span class="built_in">rm</span> <span class="variable">$</span>(docker <span class="built_in">ps</span> <span class="literal">-aq</span>)</span><br><span class="line"><span class="comment"># 打包一个镜像</span></span><br><span class="line">docker build <span class="operator">-f</span> Dockerfile <span class="literal">-t</span> lee129/x .</span><br><span class="line"><span class="comment"># 拉起一个或者所有 compose 项目，后台运行  - 强制重新创建</span></span><br><span class="line">docker<span class="literal">-compose</span> <span class="literal">--env-file</span> docker.env up <span class="literal">--build</span> <span class="literal">-d</span> <span class="literal">--force-recreate</span> [单个服务名]</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch</title>
    <url>/blog/p/2a7b23ef/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<p>核心点是将 <code>索引</code> 存储在内存当中，所以查询快<br>注意事项：</p>
<ul>
<li>在生产环境合理的给ES配置内存大小尤为重要，内存小的时候，ES会根据热点淘汰机制不断更新索引。</li>
<li>查询不到，因为es根据分片算法将数据存储到某个分片，是需要一定耗时的。</li>
<li>es会给每个字段都建立索引，所以要针对性的选择某些字段做分词</li>
<li>es的聚合能力很差文档检索才是它的强项，所以尽量避免用es进行聚合操作<br>业内解决方案用Hbase来存储海量数据，数据ID和文档存储到ES，通过ES获取ID，在通过高性能的getRowkey的能力获取该数据的全集。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Git</title>
    <url>/blog/p/86635873/</url>
    <content><![CDATA[<p>不必多言，代码管理我只爱它🥰！</p>
<span id="more"></span>

<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Git 是一种非常有用的版本控制工具，可以让用户轻松地跟踪文件的更改历史，并与其他用户协作开发项目。</p>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><table>
<thead>
<tr>
<th>软件</th>
<th>介绍</th>
<th>分支</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>Git</td>
<td>分布式(每个本地仓库都是一个完整的备份，可以独立运作，不需要中央服务器)</td>
<td>分支功能强大</td>
<td>性能更快一些</td>
</tr>
<tr>
<td>SVN</td>
<td>集中式(需要中央服务器才能工作)</td>
<td>分支功能较弱</td>
<td>-</td>
</tr>
</tbody></table>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>在本地主机上创建 Git 仓库。<br>在 Git 仓库中编辑文件，并保存更改。<br>提交更改到 Git 仓库，以便将它们记录到版本历史中。<br>通过远程仓库与其他用户协作，以便快速完成项目。</p>
<p>在整个工作流程中，Git 还提供了许多有用的功能，如分支管理、标签和撤销更改等。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="如何在-Git-中跟踪更改？"><a href="#如何在-Git-中跟踪更改？" class="headerlink" title="如何在 Git 中跟踪更改？"></a>如何在 Git 中跟踪更改？</h3><p>可以使用 git log 命令查看所有提交的历史记录，以查看所有已跟踪的更改。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure>
<h3 id="如何在-Git-中撤销更改？"><a href="#如何在-Git-中撤销更改？" class="headerlink" title="如何在 Git 中撤销更改？"></a>如何在 Git 中撤销更改？</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ git revert file.txt</span><br><span class="line">$ git commit -m &quot;Reverted changes to file.txt&quot;</span><br></pre></td></tr></table></figure>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>当前分支合并其他分支</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git merge feature</span><br><span class="line"><span class="comment"># 如果有冲突就先解决冲突</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>git commit -m <span class="string">&quot;Merged feature branch&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>Git 会在冲突的部分添加特殊的标记，例如 &lt;&lt;&lt;&lt;&lt;&lt;&lt; 和 &gt;&gt;&gt;&gt;&gt;&gt;&gt;，表示冲突的两个版本。您需要手动修改文件，解决冲突，并删除这些标记。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> <span class="keyword">install</span> git-all</span><br></pre></td></tr></table></figure>
<h3 id="移除-忽略前的文件"><a href="#移除-忽略前的文件" class="headerlink" title="移除 忽略前的文件"></a>移除 忽略前的文件</h3><blockquote>
<p>不从本地计算机中删除它们</p>
</blockquote>
<p><code>git rm -r --cached 文件名或路径</code></p>
<h3 id="Git-速度慢-卡-解决方案"><a href="#Git-速度慢-卡-解决方案" class="headerlink" title="Git 速度慢,卡 解决方案"></a>Git 速度慢,卡 解决方案</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><ol>
<li>修改本机hosts文件，添加下方两行code，并重启网络服务<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">151.101.72.249 github.global.ssl.fastly.net</span><br><span class="line">192.30.253.112 github.com</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tip:win10中文件路径为C:\Windows\System32\drivers\etc\hosts</p>
</blockquote>
</li>
<li>cmd(命令行)中执行下方code<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ol>
<li>修改本机hosts文件，添加下方两行code，并重启网络服务<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">151.101.72.249 github.global.ssl.fastly.net</span><br><span class="line">192.30.253.112 github.com</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tip:Linux中文件路径为&#x2F;etc&#x2F;hosts</p>
</blockquote>
</li>
<li>cmd(命令行)中执行下方code<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/etc/i</span>nit.d/networking restart</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="存储的逻辑"><a href="#存储的逻辑" class="headerlink" title="存储的逻辑"></a>存储的逻辑</h3><ol>
<li>基于 <code>Git</code> 中 <code>文件的内容或目录结构</code>，存储前计算校验和 <code>(哈希散列)</code>，校验和是 40个十六进制字符（0-9和a-f）组成的字符串</li>
<li>优势：不容易丢失信息或损坏文件</li>
</ol>
<h3 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h3><ul>
<li>已修改(只是修改了文件)</li>
<li>已暂存(对已经修改的文件做标记，之后可以提交到本地数据库当中)</li>
<li>已提交(已经保存至本地数据库当中)</li>
</ul>
<img src="/blog/p/86635873/git%E7%9A%84%E4%B8%89%E4%B8%AA%E7%8A%B6%E6%80%81%E4%BB%A5%E5%8F%8A%E9%98%B6%E6%AE%B5.png" class="" title="git的三个状态以及阶段">

<h2 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h2><ol>
<li>cd ~&#x2F;.ssh</li>
<li>ssh-keygen -t rsa -C “guoxinlee129@gmail”</li>
<li>接着按3个回车</li>
<li>在c&#x2F;Users&#x2F;Administrator&#x2F;.ssh生成了加密文件，复制id_rsa.pub</li>
<li>打开github 添加New SSH key</li>
<li>验证是否连接成功 ssh -T <a href="mailto:&#103;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#111;&#x6d;">&#103;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#111;&#x6d;</a>(gitee site)</li>
</ol>
<h2 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h2><p>跟踪文件	暂存区		仓库<br>(已修改 未提交	已修改	已提交)</p>
<p>未跟踪–&gt;add后跟踪文件，变为未修改，等待commit–&gt;commit后 暂存区(进入暂存区同时将状态更换为未修改)<br>        修改文件后，变为已修改，等待commit–&gt;commit后 暂存区(进入暂存区同时将状态更换为未修改)<br>touch file  add后 进入缓存区 等待commit<br>修改文件后  add后 进入缓存区 等待commit</p>
<ul>
<li>modified 已修改</li>
<li>staged &#x3D;&#x3D; cached缓存</li>
<li>remote 远程</li>
<li>origin 源</li>
<li>master 主</li>
</ul>
<h2 id="核心命令"><a href="#核心命令" class="headerlink" title="核心命令"></a>核心命令</h2><ul>
<li>git init	初始化git项目</li>
<li>git config –list	查看当前git所有配置 VCS</li>
<li>git config –global user.name ‘lee’			设置当前用户名称为lee</li>
<li>git config –global  user.email ‘<a href="mailto:&#x67;&#x75;&#111;&#120;&#x69;&#x6e;&#108;&#101;&#x65;&#x31;&#x32;&#57;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#x75;&#111;&#120;&#x69;&#x6e;&#108;&#101;&#x65;&#x31;&#x32;&#57;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;</a>‘ 设置当前email</li>
<li>git clone -b 版本号 url 项目名称	克隆项目</li>
</ul>
<p>Remote</p>
<ul>
<li>git remote 远程连接列表</li>
<li>git remote add <name> <url> 添加远程连接</li>
<li>git remote add origin <a href="https://gitee.com/lee129/My-blog.git" target="_blank" rel="noopener">https://gitee.com/lee129/My-blog.git</a></li>
<li>git remote rm <name> 移除远程连接</li>
</ul>
<p>Remote 如果先建立了有文件的git，本地有文件添加remote，会出现偏离分支，需要执行pull之前执行以下代码</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先执行下方中的一个</span></span><br><span class="line">git config pull.rebase <span class="literal">false</span>  <span class="comment"># 合并 首选</span></span><br><span class="line">git config pull.rebase <span class="literal">true</span>   <span class="comment"># 变基</span></span><br><span class="line">git config pull.ff only       <span class="comment"># 仅快进</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取</span></span><br><span class="line">git pull origin <span class="keyword">master</span> <span class="title">--allow-unrelated-histories</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送</span></span><br><span class="line">git push origin <span class="keyword">master</span> <span class="title"></span></span><br></pre></td></tr></table></figure>



<p>与源服务器交互</p>
<ul>
<li>git push origin master 上传到远程服务器</li>
<li>git status	查看当前版本库状态</li>
<li>git add		跟踪某文件</li>
<li>git add .	跟踪所有文件</li>
<li>git commit -a -m ‘message’  添加文件到暂存区（-a 将已跟踪的文件直接放入仓库中）</li>
<li>git commit –amend 	    撤销commit并重新提交</li>
<li>git rm 		从git删除某文件记录以及文件</li>
<li>git rm –cached 从git删除某文件记录</li>
<li>git rm -r –cached 从git删除某文件记录（备用）</li>
<li>git mv		将git中的某个文件重命名</li>
</ul>
<p>查看工作区</p>
<ul>
<li>git diff		查看 当前工作区 与 暂存区 的不同处</li>
<li>git diff –cached 	查看 暂存区 	与 HEAD(上次提交时)的不同处</li>
<li>git diff –staged	同上</li>
</ul>
<p>分支相关</p>
<ul>
<li>git branch -a 查看当前所有分支</li>
<li>git branch ask 新建分支</li>
<li>git checkout ask 切换分支</li>
<li>git checkout -b ask 新建并切换到该分支</li>
<li>git branch -d ask 删除分支</li>
<li>git branch -D ask 强制删除分支</li>
<li>git merge ask 合并分支</li>
<li>git branch –merged 查看合并的分支</li>
<li>git branch –no-merged 查看未合并的分支</li>
</ul>
<p>缓存相关</p>
<ul>
<li>git stash 添加缓存</li>
<li>git stash list 查看缓存列表</li>
<li>git stash apply stash@{0}恢复缓存不删除缓存记录   注意切换分支</li>
<li>git stash pop stash@{0}  恢复缓存并且删除缓存记录</li>
<li>git stash drop  stash@{0} 删除缓存 	</li>
<li>git log –name-only</li>
</ul>
<h2 id="解决冲突-1"><a href="#解决冲突-1" class="headerlink" title="解决冲突"></a>解决冲突</h2><ol>
<li>先 <code>git pull</code> 或者在 <code>git push</code> 时会发生代码冲突</li>
<li>使用 <code>git diff</code> 解决冲突（<code>git</code> 会将冲突的代码“合并”到文件当中，修改发生冲突的文件即可）</li>
<li><code>git add *</code></li>
<li><code>git commit -m &quot;*&quot;</code></li>
<li><code>git push origin</code></li>
</ol>
<h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><ol>
<li><p>每次提交前diff</p>
</li>
<li><p>下班前，整理好工作区</p>
<ul>
<li>保留</li>
<li>清除</li>
</ul>
</li>
<li><p>并行的项目，使用分支开发</p>
</li>
<li><p>遇到冲突要及时解决，不能随意丢代码</p>
</li>
<li><p>产品发布后，要打 <code>tag</code>，方便将来拉分支修复 <code>bug</code></p>
</li>
</ol>
<img src="/blog/p/86635873/fetch%E5%92%8Cpull%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" class="" title="fetch和pull的区别.jpg">

<p><code>git pull = git fetch + git merge</code></p>
<h2 id="Yiqi"><a href="#Yiqi" class="headerlink" title="Yiqi"></a>Yiqi</h2><h3 id="上传到DEV"><a href="#上传到DEV" class="headerlink" title="上传到DEV"></a>上传到DEV</h3><ol>
<li><code>git pull master</code> 获取 <code>master</code> 最新的代码</li>
<li><code>git pull origin dev</code> 获取 <code>dev</code> 分支最新的代码</li>
<li><code>git checkout -b 分支名</code> 建立自己的分支</li>
<li><code>git checkout dev</code> + <code>git merge</code> 最新的分支名，进行合并</li>
<li>如果有冲突则处理</li>
<li><code>git push origin dev</code></li>
</ol>
<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><ol>
<li><code>git pull origin dev</code></li>
<li>进行测试</li>
<li>测试完毕 通知管理员 合并主分支</li>
</ol>
<p>删除本地分支 <code>git checkout master</code> + <code>git branch -D 分支名</code><br>删除远程分支 <code>git push origin --delete 分支名</code></p>
<ol>
<li>git rm –cached .&#x2F;vendor&#x2F;*</li>
<li>git reset</li>
<li>git update-index –assume-unchanged<br>modified状态下使用 <code>git update-index --assume-unchanged 文件名</code></li>
</ol>
<h2 id="git库所在的文件夹中的文件大致有4种状态"><a href="#git库所在的文件夹中的文件大致有4种状态" class="headerlink" title="git库所在的文件夹中的文件大致有4种状态"></a>git库所在的文件夹中的文件大致有4种状态</h2><h3 id="Untracked"><a href="#Untracked" class="headerlink" title="Untracked:"></a>Untracked:</h3><p>未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p>
<h3 id="Unmodify"><a href="#Unmodify" class="headerlink" title="Unmodify:"></a>Unmodify:</h3><p>文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改,<br>而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</p>
<h3 id="Modified"><a href="#Modified" class="headerlink" title="Modified:"></a>Modified:</h3><p>文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态,<br>使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改</p>
<h3 id="Staged"><a href="#Staged" class="headerlink" title="Staged:"></a>Staged:</h3><p>暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态.<br>执行git reset HEAD filename取消暂存, 文件状态为Modified</p>
<p>Git 状态 untracked 和 not staged的区别<br>1）untrack     表示是新文件，没有被add过，是为跟踪的意思。<br>2）not staged  表示add过的文件，即跟踪文件，再次修改没有add，就是没有暂存的意思</p>
<h2 id="二次开发不影响依赖项目的更新，比如hyperf"><a href="#二次开发不影响依赖项目的更新，比如hyperf" class="headerlink" title="二次开发不影响依赖项目的更新，比如hyperf"></a>二次开发不影响依赖项目的更新，比如hyperf</h2><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. fork hyper到github上</span><br><span class="line"><span class="number">2</span>. git clone github上的项目，也就是真正的项目代码</span><br><span class="line"><span class="number">3</span>. git <span class="comment">remote add fork git@github.com:hyperf/hyperf.git #将依赖的项目添加到remote，并起名字</span></span><br><span class="line"><span class="number">4</span>. git pull fork master # 依赖的项目更新了，可以拉取</span><br><span class="line"><span class="number">5</span>. 相继处理</span><br></pre></td></tr></table></figure>

<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><ol>
<li><code>git reset --hard 索引</code> 重置目前的版本号</li>
<li><code>git push origin HEAD --force</code> 强推本地版本到远程</li>
<li><code>git push origin -d 分支名</code> 删除远程分支</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Atom</title>
    <url>/blog/p/2ba1f0b7/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><ol>
<li>安装 <code>sync-setting</code></li>
<li>配置 <code>sync-setting</code><ul>
<li><code>personal access token</code> 设置 GITHUB_TOKEN</li>
<li><code>gist id</code> 设置 GIST_ID</li>
<li><code>gist description</code> 如果连接不成功，需要设置一下gist前缀 <code>https://gist.github.com/iyyann/</code></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Atom</tag>
      </tags>
  </entry>
  <entry>
    <title>ElementUI工具</title>
    <url>/blog/p/801262be/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>


<h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template lang=<span class="string">&quot;html&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">class</span>=<span class="string">&quot;main-panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;xxxxxDialog(&#x27;post&#x27;)&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">title</span>=<span class="string">&quot;编辑&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;xxxxxDiaIsShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;diaForm&quot;</span> <span class="attr">:append-to-body</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&quot;xxxxxRef&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:model</span>=<span class="string">&quot;xxxxxForm&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:rules</span>=<span class="string">&quot;xxxxxRules&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label-width</span>=<span class="string">&quot;140px&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;车牌号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;plate_number&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;15&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">v-model</span>=<span class="string">&quot;xxxxxForm.plate_number&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">placeholder</span>=<span class="string">&quot;请输入车牌号&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">click</span>=<span class="string">&quot;editXXXXX()&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span>确认<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;xxxxxDiaIsShow = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-table</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:data</span>=<span class="string">&quot;xxxxxTableData&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">border</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">prop</span>=<span class="string">&quot;create_time&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;创建时间&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">prop</span>=<span class="string">&quot;update_time&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;更新时间&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">fixed</span>=<span class="string">&quot;right&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;xxxxxDialog(&#x27;put&#x27;,scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteXXXXX(scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;margin-top:20px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-pagination</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:current-page</span>=<span class="string">&quot;xxxxxTableDataPaginateCurrentPage&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:page-sizes</span>=<span class="string">&quot;xxxxxTableDataPaginateTotalPageSizes&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:page-size</span>=<span class="string">&quot;xxxxxTableDataPaginateTotalPageSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:total</span>=<span class="string">&quot;xxxxxTableDataPaginateTotal&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">size-change</span>=<span class="string">&quot;xxxxxTableDataHandleSizeChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">current-change</span>=<span class="string">&quot;xxxxxTableDataHandleCurrentChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- &lt;span&gt;当前&#123;&#123; xxxxxTableDataPaginateCurrentPage &#125;&#125;页，&lt;/span&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">                        &lt;span&gt;共&#123;&#123; xxxxxTableDataPaginateLastPage &#125;&#125;页&lt;/span&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">loading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxSearchForm</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableData</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableDataPaginateCurrentPage</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableDataPaginateTotal</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableDataPaginateLastPage</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableDataPaginateTotalPageSize</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableDataPaginateTotalPageSizes</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTab</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxEditType</span>: <span class="string">&#x27;post&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxDiaIsShow</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxForm</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxRules</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">mobile_number</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">password</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">xxxxxTableDataHandleSizeChange</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 改变每页显示的条数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateTotalPageSize</span> = val</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>(<span class="number">1</span>, <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateTotalPageSize</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">xxxxxTableDataHandleCurrentChange</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateCurrentPage</span> = val</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>(val, <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateTotalPageSize</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getXXXXXList</span>(<span class="params">page = <span class="number">1</span>, limit = <span class="number">10</span></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">xxxxxSearchForm</span>.<span class="property">page</span> = page</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">xxxxxSearchForm</span>.<span class="property">limit</span> = limit</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;main/getXXXXXList&#x27;</span>,<span class="variable language_">this</span>.<span class="property">xxxxxSearchForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">xxxxxTableData</span> = res.<span class="property">data</span>.<span class="property">data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateTotal</span> = res.<span class="property">data</span>.<span class="property">total</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateCurrentPage</span> = res.<span class="property">data</span>.<span class="property">current_page</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">xxxxxTableDataPaginateLastPage</span> = res.<span class="property">data</span>.<span class="property">last_page</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">deleteXXXXX</span>(<span class="params">row</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// console.log(row)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;确认删除吗？&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;main/deleteXXXXX&#x27;</span>, &#123; <span class="attr">id</span>: row.<span class="property">id</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">xxxxxDiaIsShow</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">message</span>: res.<span class="property">msg</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this.loading = false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">message</span>: <span class="string">&#x27;已取消删除&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">editXXXXX</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">xxxxxEditType</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">case</span> <span class="string">&#x27;post&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;xxxxxRef&#x27;</span>].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (valid) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;xxxxx/postXXXXX&#x27;</span>, <span class="variable language_">this</span>.<span class="property">xxxxxForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">xxxxxForm</span> = &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">xxxxxDiaIsShow</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">message</span>: res.<span class="property">msg</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">break</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">case</span> <span class="string">&#x27;put&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;xxxxxRef&#x27;</span>].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (valid) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;xxxxx/putXXXXX&#x27;</span>, <span class="variable language_">this</span>.<span class="property">xxxxxForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">xxxxxForm</span> = &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">xxxxxDiaIsShow</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">message</span>: res.<span class="property">msg</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">break</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">xxxxxDialog</span>(<span class="params">type, row</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">xxxxxDiaIsShow</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">switch</span> (type) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">case</span> <span class="string">&#x27;post&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">xxxxxEditType</span> = <span class="string">&#x27;post&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">break</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">case</span> <span class="string">&#x27;put&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">xxxxxEditType</span> = <span class="string">&#x27;put&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 这里一定要使用nextTick的方式赋值，不然会卡住input</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//   this.$set(this.xxxxxForm, &#x27;id&#x27;, row.id)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">break</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.main-panel</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">padding</span>: <span class="number">18px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-dialog v-loading=<span class="string">&quot;loading&quot;</span> title=<span class="string">&quot;xxxxxEditType===&#x27;put&#x27;?&#x27;编辑&#x27;:&#x27;添加&#x27;&quot;</span> :visible.<span class="property">sync</span>=<span class="string">&quot;xxxxxDiaIsShow&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;diaForm&quot;</span> :append-to-body=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">ref</span>=<span class="string">&quot;xxxxxForm&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:model</span>=<span class="string">&quot;xxxxxForm&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:rules</span>=<span class="string">&quot;xxxxxRules&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">label-width</span>=<span class="string">&quot;140px&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;车牌号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;plate_number&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-model</span>=<span class="string">&quot;xxxxxForm.plate_number&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;请输入车牌号&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;司机&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-model</span>=<span class="string">&quot;xxxxxForm.driver_id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">filterable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">remote</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">reserve-keyword</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;请选择司机&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:remote-method</span>=<span class="string">&quot;getDriverRemote&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:loading</span>=<span class="string">&quot;loading&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-option</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">v-for</span>=<span class="string">&quot;item in driverOptions&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:label</span>=<span class="string">&quot;item.nickname&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;归属人/受益人&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-model</span>=<span class="string">&quot;xxxxxForm.beneficiary_id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">filterable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">remote</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">reserve-keyword</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;归属人/受益人&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:remote-method</span>=<span class="string">&quot;getBeneficiaryRemote&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:loading</span>=<span class="string">&quot;loading&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-option</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">v-for</span>=<span class="string">&quot;beneficiary in beneficiaryOptions&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:key</span>=<span class="string">&quot;beneficiary.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:label</span>=<span class="string">&quot;beneficiary.nickname&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:value</span>=<span class="string">&quot;beneficiary.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">click</span>=<span class="string">&quot;editXXXXX()&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span>确认<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;xxxxxDiaIsShow = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line">&lt;/el-dialog&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">loading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxEditType</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxDiaIsShow</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxRules</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxForm</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">editXXXXX</span>(<span class="params"></span>)&#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h2><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">&lt;el-checkbox-<span class="keyword">group</span> v-model=<span class="string">&quot;coupon_type&quot;</span> @change=<span class="string">&quot;selectCouponType&quot;</span>&gt;</span><br><span class="line">  &lt;el-checkbox</span><br><span class="line">    v-for=<span class="string">&quot;item in coupon_typeAttr&quot;</span></span><br><span class="line">    :<span class="keyword">key</span>=<span class="string">&quot;item.key&quot;</span></span><br><span class="line">    :<span class="keyword">label</span>=<span class="string">&quot;item.value&quot;</span></span><br><span class="line">  &gt;&#123;&#123;coupon_type&#125;&#125;</span><br><span class="line">  &lt;/el-checkbox&gt;</span><br><span class="line">&lt;/el-checkbox-<span class="keyword">group</span>&gt;</span><br><span class="line"></span><br><span class="line">coupon_typeAttr: [</span><br><span class="line">&#123; <span class="keyword">key</span>: 1, value: <span class="string">&#x27;满减&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="keyword">key</span>: 2, value: <span class="string">&#x27;折扣&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="keyword">key</span>: 3, value: <span class="string">&#x27;随机减金额&#x27;</span> &#125;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">selectCouponType(val) &#123;</span><br><span class="line">  this.coupon_type = val</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>


<h2 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h2><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;兑换优惠券消耗的积分&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;coupon_exchange_integral&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="language-xml"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;15&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="language-xml"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-for</span>=<span class="string">&quot;item in coupon_typeAttr&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;couponForm.coupon_type&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.key&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span><span class="language-xquery">&#123;&#123;<span class="type">item</span>.<span class="keyword">value</span>&#125;</span><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">coupon_typeAttr: [</span><br><span class="line">&#123;<span class="built_in"> key</span>: <span class="number">1</span>, value: <span class="string">&#x27;满减&#x27;</span> &#125;,</span><br><span class="line">&#123;<span class="built_in"> key</span>: <span class="number">2</span>, value: <span class="string">&#x27;折扣&#x27;</span> &#125;,</span><br><span class="line">&#123;<span class="built_in"> key</span>: <span class="number">3</span>, value: <span class="string">&#x27;随机减金额&#x27;</span> &#125;</span><br><span class="line">],</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="selected"><a href="#selected" class="headerlink" title="selected"></a>selected</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;归属人/受益人&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;beneficiary_id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-model</span>=<span class="string">&quot;xxxxxForm.beneficiary_id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">filterable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">remote</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">reserve-keyword</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;归属人/受益人&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:remote-method</span>=<span class="string">&quot;getXXXXXRemote&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:loading</span>=<span class="string">&quot;loading&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-option</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">v-for</span>=<span class="string">&quot;xxxxx in xxxxxOptions&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:key</span>=<span class="string">&quot;xxxxx.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:label</span>=<span class="string">&quot;xxxxx.nickname&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:value</span>=<span class="string">&quot;xxxxx.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">loading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxOptions</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxTableData</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xxxxxDiaIsShow</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">getXXXXXList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getXXXXXRemote</span>(<span class="params">query</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (query !== <span class="string">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">xxxxxOptions</span> = <span class="variable language_">this</span>.<span class="property">xxxxxTableData</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> item.<span class="property">label</span>.<span class="title function_">toLowerCase</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            .<span class="title function_">indexOf</span>(query.<span class="title function_">toLowerCase</span>()) &gt; -<span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//return item.xxx.indexOf(query) &gt; -1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">xxxxxOptions</span> = <span class="variable language_">this</span>.<span class="property">xxxxxTableData</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getXXXXXList</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;main/getShipCompanyList&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">shipCompanyTableData</span> = res.<span class="property">data</span>.<span class="property">data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">shipCompanyOptions</span> = res.<span class="property">data</span>.<span class="property">data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">carRules</span>: &#123;</span><br><span class="line">  <span class="attr">plate_number</span>: [&#123;</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;请输入&#x27;</span>,</span><br><span class="line">    <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">driver_id</span>: [&#123;</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;请选择&#x27;</span>,</span><br><span class="line">    <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">beneficiary_id</span>: [&#123;</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;请选择&#x27;</span>,</span><br><span class="line">    <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="输入后检测内容"><a href="#输入后检测内容" class="headerlink" title="输入后检测内容"></a>输入后检测内容</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;el-<span class="keyword">form</span>-item <span class="keyword">label</span>=<span class="string">&quot;运单号&quot;</span> <span class="keyword">prop</span>=<span class="string">&quot;sea_waybill_number&quot;</span>&gt;</span><br><span class="line">  &lt;el-<span class="keyword">input</span></span><br><span class="line">    v-model=<span class="string">&quot;xxxxxForm.sea_waybill_number&quot;</span></span><br><span class="line">    <span class="keyword">type</span>=<span class="string">&quot;text&quot;</span></span><br><span class="line">    placeholder=<span class="string">&quot;请输入运单号&quot;</span></span><br><span class="line">    @<span class="keyword">input</span>=<span class="string">&quot;autoSelectShipCompany()&quot;</span></span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/el-<span class="keyword">form</span>-item&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  autoSelectShipCompany(a) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="横向表单-1行2列"><a href="#横向表单-1行2列" class="headerlink" title="横向表单 1行2列"></a>横向表单 1行2列</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">el</span>-row <span class="built_in">type</span>=<span class="string">&quot;flex&quot;</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">col</span> :span=<span class="string">&quot;12&quot;</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;el-form-item&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    &lt;/<span class="keyword">el</span>-form-item&gt;</span><br><span class="line">  &lt;/<span class="keyword">el</span>-<span class="keyword">col</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">col</span> :span=<span class="string">&quot;12&quot;</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;el-form-item&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    &lt;/<span class="keyword">el</span>-form-item&gt;</span><br><span class="line">  &lt;/<span class="keyword">el</span>-<span class="keyword">col</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">el</span>-row&gt;</span><br></pre></td></tr></table></figure>
<h2 id="横向表单-1行3列"><a href="#横向表单-1行3列" class="headerlink" title="横向表单 1行3列"></a>横向表单 1行3列</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">el</span>-row <span class="built_in">type</span>=<span class="string">&quot;flex&quot;</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">col</span> :span=<span class="string">&quot;8&quot;</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;el-form-item&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    &lt;/<span class="keyword">el</span>-form-item&gt;</span><br><span class="line">  &lt;/<span class="keyword">el</span>-<span class="keyword">col</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">col</span> :span=<span class="string">&quot;8&quot;</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;el-form-item&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    &lt;/<span class="keyword">el</span>-form-item&gt;</span><br><span class="line">  &lt;/<span class="keyword">el</span>-<span class="keyword">col</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">el</span>-<span class="keyword">col</span> :span=<span class="string">&quot;8&quot;</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;el-form-item&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    &lt;/<span class="keyword">el</span>-form-item&gt;</span><br><span class="line">  &lt;/<span class="keyword">el</span>-<span class="keyword">col</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">el</span>-row&gt;</span><br></pre></td></tr></table></figure>

<h2 id="日期和时间点"><a href="#日期和时间点" class="headerlink" title="日期和时间点"></a>日期和时间点</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;预计收/装时间&quot; prop=&quot;estimated_timestamp&quot;&gt;</span><br><span class="line">  &lt;el-col :span=&quot;24&quot;&gt;</span><br><span class="line">    &lt;el-date-picker</span><br><span class="line">      v-model=&quot;importForm.estimated_timestamp&quot;</span><br><span class="line">      type=&quot;datetime&quot;</span><br><span class="line">      placeholder=&quot;预计收/装时间&quot;</span><br><span class="line">      align=&quot;right&quot;</span><br><span class="line">      :picker-options=&quot;estimatedTimestampPickerOptions&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;el-input</span><br><span class="line">      v-model=&quot;importForm.estimated_timestamp&quot;</span><br><span class="line">      type=&quot;text&quot;</span><br><span class="line">      placeholder=&quot;请填写预计收/装时间&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/el-col&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import moment from &#x27;moment&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        estimatedTimestampPickerOptions: &#123;</span><br><span class="line">          shortcuts: [&#123;</span><br><span class="line">            text: &#x27;今天&#x27;,</span><br><span class="line">            onClick(picker) &#123;</span><br><span class="line">              picker.$emit(&#x27;pick&#x27;, new Date());</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            text: &#x27;昨天&#x27;,</span><br><span class="line">            onClick(picker) &#123;</span><br><span class="line">              const date = new Date();</span><br><span class="line">              date.setTime(date.getTime() - 3600 * 1000 * 24);</span><br><span class="line">              picker.$emit(&#x27;pick&#x27;, date);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            text: &#x27;一周前&#x27;,</span><br><span class="line">            onClick(picker) &#123;</span><br><span class="line">              const date = new Date();</span><br><span class="line">              date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);</span><br><span class="line">              picker.$emit(&#x27;pick&#x27;, date);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">             text: &#x27;明天&#x27;,</span><br><span class="line">             onClick(picker) &#123;</span><br><span class="line">               const date = new Date()</span><br><span class="line">               date.setTime(date.getTime() + 3600 * 1000 * 24)</span><br><span class="line">               picker.$emit(&#x27;pick&#x27;, date)</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;, &#123;</span><br><span class="line">             text: &#x27;后天&#x27;,</span><br><span class="line">             onClick(picker) &#123;</span><br><span class="line">               const date = new Date()</span><br><span class="line">               date.setTime(date.getTime() + 3600 * 1000 * 24 * 2)</span><br><span class="line">               picker.$emit(&#x27;pick&#x27;, date)</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;, &#123;</span><br><span class="line">             text: &#x27;一周后&#x27;,</span><br><span class="line">             onClick(picker) &#123;</span><br><span class="line">               const date = new Date()</span><br><span class="line">               date.setTime(date.getTime() + 3600 * 1000 * 24 * 7)</span><br><span class="line">               picker.$emit(&#x27;pick&#x27;, date)</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;, &#123;</span><br><span class="line">              text: &#x27;最近一周&#x27;,</span><br><span class="line">              onClick(picker) &#123;</span><br><span class="line">                const start = moment().week(moment().week()).startOf(&#x27;week&#x27;).valueOf() // 这样是年月日的格式</span><br><span class="line">                const end = moment().week(moment().week()).endOf(&#x27;week&#x27;).valueOf() // 这样是时间戳的格式</span><br><span class="line">                picker.$emit(&#x27;pick&#x27;, [start, end])</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              text: &#x27;最近一个月&#x27;,</span><br><span class="line">              onClick(picker) &#123;</span><br><span class="line">                const start = moment().month(moment().month()).startOf(&#x27;month&#x27;).valueOf()</span><br><span class="line">                const end = moment().month(moment().month()).endOf(&#x27;month&#x27;).valueOf()</span><br><span class="line">                picker.$emit(&#x27;pick&#x27;, [start, end])</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              text: &#x27;最近三个月&#x27;,</span><br><span class="line">              onClick(picker) &#123;</span><br><span class="line">                const start = moment().month(moment().month() - 2).startOf(&#x27;month&#x27;).valueOf()</span><br><span class="line">                const end = moment().month(moment().month()).endOf(&#x27;month&#x27;).valueOf()</span><br><span class="line">                picker.$emit(&#x27;pick&#x27;, [start, end])</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              text: &#x27;今年&#x27;,</span><br><span class="line">              onClick(picker) &#123;</span><br><span class="line">                const start = moment().year(moment().year()).startOf(&#x27;year&#x27;).valueOf()</span><br><span class="line">                const end = moment().year(moment().year()).endOf(&#x27;year&#x27;).valueOf()</span><br><span class="line">                picker.$emit(&#x27;pick&#x27;, [start, end])</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">        value1: &#x27;&#x27;,</span><br><span class="line">        value2: &#x27;&#x27;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="confirm"><a href="#confirm" class="headerlink" title="confirm"></a>confirm</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$confirm(<span class="string">&#x27;确认删除吗？&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">  <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="table-勾选-数据回显-https-element-eleme-cn-2-13-zh-CN-component-table"><a href="#table-勾选-数据回显-https-element-eleme-cn-2-13-zh-CN-component-table" class="headerlink" title="table 勾选 数据回显 https://element.eleme.cn/2.13/#/zh-CN/component/table"></a>table 勾选 数据回显 <a href="https://element.eleme.cn/2.13/#/zh-CN/component/table" target="_blank" rel="noopener">https://element.eleme.cn/2.13/#/zh-CN/component/table</a></h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs.productTableData.toggleRowSelection(<span class="keyword">this</span>.productTableData[i], <span class="literal">true</span>) <span class="comment">// 回显</span></span><br></pre></td></tr></table></figure>

<h3 id="el-select-回显"><a href="#el-select-回显" class="headerlink" title="el-select 回显"></a>el-select 回显</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">&lt;el-select</span><br><span class="line">  v-model=<span class="string">&quot;form.type&quot;</span></span><br><span class="line">  placeholder=<span class="string">&quot;请选择类型&quot;</span></span><br><span class="line">  style=<span class="string">&quot;width: 370px&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  &lt;el-option</span><br><span class="line">    v-<span class="keyword">for</span>=<span class="string">&quot;(value, id) in options.types&quot;</span></span><br><span class="line">    <span class="symbol">:key=<span class="string">&quot;&quot;</span></span></span><br><span class="line">    <span class="symbol">:label=<span class="string">&quot;value&quot;</span></span></span><br><span class="line">    <span class="symbol">:value=<span class="string">&quot;id * 1&quot;</span></span> <span class="comment"># 重点</span></span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></table></figure>
<h3 id="el-select-回显-1"><a href="#el-select-回显-1" class="headerlink" title="el-select 回显"></a>el-select 回显</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;el-<span class="keyword">select</span></span><br><span class="line">  v-model=<span class="string">&quot;form.type&quot;</span></span><br><span class="line">  placeholder=<span class="string">&quot;请选择类型&quot;</span></span><br><span class="line">  style=<span class="string">&quot;width: 370px&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  &lt;el-<span class="keyword">option</span></span><br><span class="line">    v-<span class="keyword">for</span>=<span class="string">&quot;(value, id) in options.types&quot;</span></span><br><span class="line">    :<span class="keyword">key</span>=<span class="string">&quot;id&quot;</span></span><br><span class="line">    :label=<span class="string">&quot;value&quot;</span></span><br><span class="line">    :<span class="keyword">value</span>=<span class="string">&quot;id * 1&quot;</span></span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/el-<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="el-radio-group-回显"><a href="#el-radio-group-回显" class="headerlink" title="el-radio-group 回显"></a>el-radio-group 回显</h3><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.type&quot;</span> <span class="attr">disabled</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-radio</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-for</span>=<span class="string">&quot;(v, k) in seaWayBillSearchOptions.type_array&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:label</span>=<span class="string">&quot;k * 1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:key</span>=<span class="string">&quot;v&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">v</span> &#125;&#125;</span><span class="language-xml">&lt;/el-radio</span></span><br><span class="line"><span class="language-xml">  &gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="js-语法"><a href="#js-语法" class="headerlink" title="js 语法"></a>js 语法</h2><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 传参</span></span><br><span class="line">:<span class="type">on-success</span>=<span class="string">&quot;(res, file) =&gt; handleSkuLogoSuccess(res, file, index)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 数组去重</span></span><br><span class="line">let <span class="keyword">new</span><span class="type">Arr</span> = <span class="keyword">Array</span>.from(<span class="keyword">new</span> <span class="type">Set</span>(arr))</span><br><span class="line"></span><br><span class="line"><span class="meta"># 判断是否是数组</span></span><br><span class="line"><span class="keyword">Array</span>.isArray(arr)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 判断数组中是否存在</span></span><br><span class="line"><span class="keyword">Array</span>.indexOf(<span class="string">&#x27;3&#x27;</span>) !== <span class="number">-1</span> <span class="comment">//说明存在 </span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 删除数组元素</span></span><br><span class="line"><span class="keyword">Array</span>.remove(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="php-语法"><a href="#php-语法" class="headerlink" title="php 语法"></a>php 语法</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多维数组排序</span></span><br><span class="line"><span class="variable">$sortArr</span> = [];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$orderListData</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$orderListItem</span>) &#123;</span><br><span class="line">    <span class="variable">$sortArr</span>[] = <span class="variable">$orderListItem</span>[<span class="string">&#x27;price_total&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">array_multisort(<span class="variable">$sortArr</span>, SORT_ASC, <span class="variable">$orderListData</span>);</span><br></pre></td></tr></table></figure>


<h2 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Model,修改器</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::boot();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">static</span>::deleting(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$model</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$roles</span> = <span class="variable">$model</span>-&gt;roles();</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$roles</span>-&gt;count() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;该权限已被角色绑定，请删除角色中的对应权限再进行操作&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//dd($model-&gt;id,$roles-&gt;count(),$roles-&gt;get()-&gt;toArray());</span></span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Model,获取器</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$appends</span> = [<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNameAttribute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ticket::addExtDesc(<span class="keyword">$this</span>-&gt;attributes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Laravel-admin $form 如果动态修改字段的值，需要提前该字段为hidden</span></span><br><span class="line"><span class="variable">$form</span>-&gt;hidden(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="variable">$form</span>-&gt;saving(<span class="function"><span class="keyword">function</span> (<span class="params">Form <span class="variable">$form</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$skulistinfo</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$skulistinfo</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$key</span> == <span class="variable">$form</span>-&gt;sku_listinfo_id) &#123;</span><br><span class="line">            <span class="variable">$form</span>-&gt;name = <span class="variable">$item</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$form</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Encore</span>\<span class="title">Admin</span>\<span class="title">Grid</span>;</span><br><span class="line">Grid::init(<span class="function"><span class="keyword">function</span> (<span class="params">Grid <span class="variable">$grid</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableActions();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disablePagination();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableCreateButton();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableFilter(); </span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableRowSelector();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableColumnSelector();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableTools();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;disableExport();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;actions(<span class="function"><span class="keyword">function</span> (<span class="params">Grid\Displayers\Actions <span class="variable">$actions</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$actions</span>-&gt;disableView();</span><br><span class="line">        <span class="variable">$actions</span>-&gt;disableEdit();</span><br><span class="line">        <span class="variable">$actions</span>-&gt;disableDelete();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="此刻芭蕾"><a href="#此刻芭蕾" class="headerlink" title="此刻芭蕾"></a>此刻芭蕾</h2><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">        $test = &lt;&lt;&lt;a</span><br><span class="line">已售的座位id</span><br><span class="line"><span class="number">176</span></span><br><span class="line"><span class="number">175</span></span><br><span class="line">...</span><br><span class="line">a<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        $text_arr = explode(PHP_EOL, $test)<span class="comment">;</span></span><br><span class="line">        $text_arr = array_unique($text_arr, SORT_NUMERIC)<span class="comment">;</span></span><br><span class="line">        dd($text_arr)<span class="comment">;</span></span><br><span class="line"><span class="title">        $seat_models = BalletmeTicketSeat::</span>whereIn(&#x27;id&#x27;, $text_arr)</span><br><span class="line">            -&gt;get()<span class="comment">;</span></span><br><span class="line">        $yishou_arr_id = []<span class="comment">;</span></span><br><span class="line">        foreach ($seat_models as $seat_model) &#123;</span><br><span class="line">            $yishou_arr_id [] = $seat_model-&gt;id<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        # 获取最终的出错ids，执行前先执行下方的逻辑</span><br><span class="line">        $error_ids = []<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        $no_ids_txt = file_get_contents(&#x27;$no_ids.txt&#x27;)<span class="comment">;</span></span><br><span class="line">        $no_ids = explode(PHP_EOL, $no_ids_txt)<span class="comment">;</span></span><br><span class="line">        foreach ($no_ids as $no_id) &#123;</span><br><span class="line">            if (in_array($no_id, $yishou_arr_id)) &#123;</span><br><span class="line">                $error_ids[] = $no_id<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(implode(&#x27; &#x27;, $error_ids))<span class="comment">;</span></span><br><span class="line">        dd(<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        # 下面是获取不能坐的座位ids</span><br><span class="line">        $no_ = [</span><br><span class="line">            <span class="number">5</span> =&gt; [</span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                34,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">6</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                34,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">7</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">8</span> =&gt; [</span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">9</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">10</span> =&gt; [</span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">11</span> =&gt; [</span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">12</span> =&gt; [</span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">13</span> =&gt; [</span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">14</span> =&gt; [</span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">15</span> =&gt; [</span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">16</span> =&gt; [</span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">17</span> =&gt; [</span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">18</span> =&gt; [</span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">19</span> =&gt; [</span><br><span class="line"><span class="built_in">                15,</span></span><br><span class="line"><span class="built_in">                17,</span></span><br><span class="line"><span class="built_in">                16,</span></span><br><span class="line">                <span class="number">18</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">20</span> =&gt; [</span><br><span class="line"><span class="built_in">                1,</span></span><br><span class="line"><span class="built_in">                3,</span></span><br><span class="line"><span class="built_in">                5,</span></span><br><span class="line"><span class="built_in">                7,</span></span><br><span class="line"><span class="built_in">                9,</span></span><br><span class="line"><span class="built_in">                11,</span></span><br><span class="line"><span class="built_in">                13,</span></span><br><span class="line"><span class="built_in">                15,</span></span><br><span class="line"><span class="built_in">                2,</span></span><br><span class="line"><span class="built_in">                4,</span></span><br><span class="line"><span class="built_in">                6,</span></span><br><span class="line"><span class="built_in">                8,</span></span><br><span class="line"><span class="built_in">                10,</span></span><br><span class="line"><span class="built_in">                12,</span></span><br><span class="line"><span class="built_in">                14,</span></span><br><span class="line">                <span class="number">16</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">21</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">                <span class="number">40</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">22</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">                <span class="number">40</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">23</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">                <span class="number">40</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">24</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">                <span class="number">40</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">25</span> =&gt; [</span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line">                <span class="number">40</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">26</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line">                <span class="number">34</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">27</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line">                <span class="number">34</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">28</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line">                <span class="number">34</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">29</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line">                <span class="number">34</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">30</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                11,</span></span><br><span class="line"><span class="built_in">                12,</span></span><br><span class="line"><span class="built_in">                13,</span></span><br><span class="line"><span class="built_in">                14,</span></span><br><span class="line"><span class="built_in">                15,</span></span><br><span class="line"><span class="built_in">                16,</span></span><br><span class="line"><span class="built_in">                17,</span></span><br><span class="line"><span class="built_in">                18,</span></span><br><span class="line"><span class="built_in">                19,</span></span><br><span class="line"><span class="built_in">                20,</span></span><br><span class="line"><span class="built_in">                21,</span></span><br><span class="line"><span class="built_in">                22,</span></span><br><span class="line"><span class="built_in">                23,</span></span><br><span class="line"><span class="built_in">                24,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line">                <span class="number">34</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">31</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                43,</span></span><br><span class="line"><span class="built_in">                1,</span></span><br><span class="line"><span class="built_in">                2,</span></span><br><span class="line"><span class="built_in">                3,</span></span><br><span class="line"><span class="built_in">                4,</span></span><br><span class="line"><span class="built_in">                5,</span></span><br><span class="line"><span class="built_in">                6,</span></span><br><span class="line"><span class="built_in">                7,</span></span><br><span class="line"><span class="built_in">                8,</span></span><br><span class="line"><span class="built_in">                9,</span></span><br><span class="line"><span class="built_in">                10,</span></span><br><span class="line"><span class="built_in">                11,</span></span><br><span class="line"><span class="built_in">                12,</span></span><br><span class="line"><span class="built_in">                13,</span></span><br><span class="line"><span class="built_in">                14,</span></span><br><span class="line"><span class="built_in">                15,</span></span><br><span class="line"><span class="built_in">                16,</span></span><br><span class="line"><span class="built_in">                17,</span></span><br><span class="line"><span class="built_in">                18,</span></span><br><span class="line"><span class="built_in">                19,</span></span><br><span class="line"><span class="built_in">                20,</span></span><br><span class="line"><span class="built_in">                21,</span></span><br><span class="line"><span class="built_in">                22,</span></span><br><span class="line"><span class="built_in">                23,</span></span><br><span class="line"><span class="built_in">                24,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line"><span class="built_in">                34,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line"><span class="built_in">                42,</span></span><br><span class="line"><span class="built_in">                44,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">32</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                43,</span></span><br><span class="line"><span class="built_in">                1,</span></span><br><span class="line"><span class="built_in">                2,</span></span><br><span class="line"><span class="built_in">                3,</span></span><br><span class="line"><span class="built_in">                4,</span></span><br><span class="line"><span class="built_in">                5,</span></span><br><span class="line"><span class="built_in">                6,</span></span><br><span class="line"><span class="built_in">                7,</span></span><br><span class="line"><span class="built_in">                8,</span></span><br><span class="line"><span class="built_in">                9,</span></span><br><span class="line"><span class="built_in">                10,</span></span><br><span class="line"><span class="built_in">                11,</span></span><br><span class="line"><span class="built_in">                12,</span></span><br><span class="line"><span class="built_in">                13,</span></span><br><span class="line"><span class="built_in">                14,</span></span><br><span class="line"><span class="built_in">                15,</span></span><br><span class="line"><span class="built_in">                16,</span></span><br><span class="line"><span class="built_in">                17,</span></span><br><span class="line"><span class="built_in">                18,</span></span><br><span class="line"><span class="built_in">                19,</span></span><br><span class="line"><span class="built_in">                20,</span></span><br><span class="line"><span class="built_in">                21,</span></span><br><span class="line"><span class="built_in">                22,</span></span><br><span class="line"><span class="built_in">                23,</span></span><br><span class="line"><span class="built_in">                24,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line"><span class="built_in">                34,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line"><span class="built_in">                42,</span></span><br><span class="line"><span class="built_in">                44,</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="number">33</span> =&gt; [</span><br><span class="line"><span class="built_in">                25,</span></span><br><span class="line"><span class="built_in">                27,</span></span><br><span class="line"><span class="built_in">                29,</span></span><br><span class="line"><span class="built_in">                31,</span></span><br><span class="line"><span class="built_in">                33,</span></span><br><span class="line"><span class="built_in">                35,</span></span><br><span class="line"><span class="built_in">                37,</span></span><br><span class="line"><span class="built_in">                39,</span></span><br><span class="line"><span class="built_in">                41,</span></span><br><span class="line"><span class="built_in">                43,</span></span><br><span class="line"><span class="built_in">                1,</span></span><br><span class="line"><span class="built_in">                2,</span></span><br><span class="line"><span class="built_in">                3,</span></span><br><span class="line"><span class="built_in">                4,</span></span><br><span class="line"><span class="built_in">                5,</span></span><br><span class="line"><span class="built_in">                6,</span></span><br><span class="line"><span class="built_in">                7,</span></span><br><span class="line"><span class="built_in">                8,</span></span><br><span class="line"><span class="built_in">                9,</span></span><br><span class="line"><span class="built_in">                10,</span></span><br><span class="line"><span class="built_in">                11,</span></span><br><span class="line"><span class="built_in">                12,</span></span><br><span class="line"><span class="built_in">                13,</span></span><br><span class="line"><span class="built_in">                14,</span></span><br><span class="line"><span class="built_in">                15,</span></span><br><span class="line"><span class="built_in">                16,</span></span><br><span class="line"><span class="built_in">                17,</span></span><br><span class="line"><span class="built_in">                18,</span></span><br><span class="line"><span class="built_in">                19,</span></span><br><span class="line"><span class="built_in">                20,</span></span><br><span class="line"><span class="built_in">                21,</span></span><br><span class="line"><span class="built_in">                22,</span></span><br><span class="line"><span class="built_in">                23,</span></span><br><span class="line"><span class="built_in">                24,</span></span><br><span class="line"><span class="built_in">                26,</span></span><br><span class="line"><span class="built_in">                28,</span></span><br><span class="line"><span class="built_in">                30,</span></span><br><span class="line"><span class="built_in">                32,</span></span><br><span class="line"><span class="built_in">                34,</span></span><br><span class="line"><span class="built_in">                36,</span></span><br><span class="line"><span class="built_in">                38,</span></span><br><span class="line"><span class="built_in">                40,</span></span><br><span class="line"><span class="built_in">                42,</span></span><br><span class="line"><span class="built_in">                44,</span></span><br><span class="line">            ],</span><br><span class="line">        ]</span><br><span class="line">        $no_ids = []<span class="comment">;</span></span><br><span class="line">        foreach ($no_ as $row =&gt; $cols) &#123;</span><br><span class="line">            foreach ($cols as $col) &#123;</span><br><span class="line"><span class="title">                $seat_model = BalletmeTicketSeat::</span>where(&#x27;row&#x27;, $row)</span><br><span class="line">                    -&gt;where(&#x27;col&#x27;, $col)</span><br><span class="line">                    -&gt;select([</span><br><span class="line">                        &#x27;id&#x27;,</span><br><span class="line">                        &#x27;row&#x27;,</span><br><span class="line">                        &#x27;col&#x27;,</span><br><span class="line">                        &#x27;floor&#x27;,</span><br><span class="line">                    ])</span><br><span class="line">                    -&gt;first()<span class="comment">;</span></span><br><span class="line">                if (! $seat_model) &#123;</span><br><span class="line"><span class="title">                    throw new ServiceException(&#x27;row:&#x27; . $row . &#x27; col:</span>&#x27; . $col)<span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">                $no_ids[] = $seat_model-&gt;id<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // file_put_contents(&#x27;$no_ids.txt&#x27;, implode(PHP_EOL, $no_ids))<span class="comment">;</span></span><br><span class="line">        // dd($no_ids)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">    <span class="variable">$test</span> = <span class="string">&lt;&lt;&lt;a</span></span><br><span class="line"><span class="string">已售的座位id</span></span><br><span class="line"><span class="string">176</span></span><br><span class="line"><span class="string">175</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">a</span>;</span><br><span class="line">    <span class="variable">$text_arr</span> = explode(PHP_EOL, <span class="variable">$test</span>);</span><br><span class="line">    <span class="variable">$text_arr</span> = array_unique(<span class="variable">$text_arr</span>);</span><br><span class="line">    <span class="variable">$seat_models</span> = BalletmeTicketSeat::whereIn(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$text_arr</span>)</span><br><span class="line">        -&gt;get();</span><br><span class="line">    <span class="variable">$yishou_arr_id</span> = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$seat_models</span> <span class="keyword">as</span> <span class="variable">$seat_model</span>) &#123;</span><br><span class="line">        <span class="variable">$yishou_arr_id</span> [] = <span class="variable">$seat_model</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// dd(count($text_arr), count($yishou_arr_id));</span></span><br><span class="line">    <span class="variable">$seat_models_all</span> = BalletmeTicketSeat::select()-&gt;get();</span><br><span class="line">    <span class="comment">// dd(count($seat_models_all) - count($text_arr));</span></span><br><span class="line">    <span class="variable">$un_sale_ids</span> =[];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$seat_models_all</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! in_array(<span class="variable">$item</span>-&gt;id, <span class="variable">$yishou_arr_id</span>)) &#123;</span><br><span class="line">            <span class="variable">$un_sale_ids</span> [] = <span class="variable">$item</span>-&gt;id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$un_sale_models</span> = BalletmeTicketSeat::whereIn(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$un_sale_ids</span>)</span><br><span class="line">        -&gt;get();</span><br><span class="line">    <span class="variable">$seat_area_a</span> = [];</span><br><span class="line">    <span class="variable">$seat_area_b</span> = [];</span><br><span class="line">    <span class="variable">$seat_area_c</span> = [];</span><br><span class="line">    <span class="variable">$seat_area_no</span> = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$un_sale_models</span> <span class="keyword">as</span> <span class="variable">$un_sale_model</span>) &#123;</span><br><span class="line">        <span class="comment">// dd($un_sale_model-&gt;toArray());</span></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$un_sale_model</span>-&gt;area_id) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="variable">$seat_area_a</span>[] = <span class="string">&#x27;座位ID&#x27;</span> . <span class="variable">$un_sale_model</span>-&gt;id . <span class="string">&#x27; 座位名：&#x27;</span>. <span class="variable">$un_sale_model</span>-&gt;extDesc;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="variable">$seat_area_b</span>[] = <span class="string">&#x27;座位ID&#x27;</span> . <span class="variable">$un_sale_model</span>-&gt;id . <span class="string">&#x27; 座位名：&#x27;</span>. <span class="variable">$un_sale_model</span>-&gt;extDesc;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                <span class="variable">$seat_area_c</span>[] = <span class="string">&#x27;座位ID&#x27;</span> . <span class="variable">$un_sale_model</span>-&gt;id . <span class="string">&#x27; 座位名：&#x27;</span>. <span class="variable">$un_sale_model</span>-&gt;extDesc;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$seat_area_no</span>[] = <span class="string">&#x27;座位ID&#x27;</span> . <span class="variable">$un_sale_model</span>-&gt;id . <span class="string">&#x27; 座位名：&#x27;</span>. <span class="variable">$un_sale_model</span>-&gt;extDesc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//         printf(implode(PHP_EOL, $seat_area_a));</span></span><br><span class="line">    <span class="comment">//         printf(implode(PHP_EOL, $seat_area_b));</span></span><br><span class="line">    <span class="comment">//         printf(implode(PHP_EOL, $seat_area_c));</span></span><br><span class="line">    <span class="comment">//         printf(implode(PHP_EOL, $seat_area_no));</span></span><br><span class="line">    dd(PHP_EOL, count(<span class="variable">$seat_area_a</span>),count(<span class="variable">$seat_area_b</span>), count(<span class="variable">$seat_area_c</span>), count(<span class="variable">$seat_area_no</span>));</span><br><span class="line">    dd(count(<span class="variable">$un_sale_ids</span>), count(<span class="variable">$un_sale_models</span>));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
  </entry>
  <entry>
    <title>Gitlab</title>
    <url>/blog/p/4adbd460/</url>
    <content><![CDATA[<p>用过Gitlab之后就喜欢上了它，但是由于老大的原因🤷🏻，就陆续换成了阿里云云效产品噜，整体上流程更容易管控，但是少了点什么…</p>
<span id="more"></span>

<h2 id="安装-最新"><a href="#安装-最新" class="headerlink" title="安装 最新"></a>安装 最新</h2><blockquote>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ee/yum/el7/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ee/yum/el7/</a></p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> yum install -y curl policycoreutils-python policycoreutils-python-utils openssh-server</span><br><span class="line"></span><br><span class="line"><span class="attribute">cd</span> /usr/src</span><br><span class="line"><span class="attribute">wget</span> https://mirrors.tuna.tsinghua.edu.cn/gitlab-ee/yum/el7/gitlab-ee-<span class="number">13</span>.<span class="number">0</span>.<span class="number">0</span>-ee.<span class="number">0</span>.el7.x86_64.rpm</span><br><span class="line"><span class="attribute">sudo</span> EXTERNAL_URL=<span class="string">&quot;http://47.107.177.200:8888&quot;</span> rpm -i gitlab-ee-<span class="number">13</span>.<span class="number">0</span>.<span class="number">0</span>-ee.<span class="number">0</span>.el7.x86_64.rpm </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p><a href="https://about.gitlab.com/install/#centos-7" target="_blank" rel="noopener">https://about.gitlab.com/install/#centos-7</a></p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line">sudo systemctl enable sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo firewall-cmd --permanent --add-service=https</span><br><span class="line">sudo systemctl reload firewalld</span><br><span class="line"></span><br><span class="line">sudo yum install postfix</span><br><span class="line"></span><br><span class="line">vim  <span class="regexp">/etc/</span>postfix/main.cf</span><br><span class="line"><span class="comment">#改成：</span></span><br><span class="line">inet_interfaces = all</span><br><span class="line">inet_protocols = all</span><br><span class="line"></span><br><span class="line">service postfix start</span><br><span class="line">sudo systemctl enable postfix</span><br><span class="line"></span><br><span class="line">curl https:<span class="regexp">//</span>packages.gitlab.com<span class="regexp">/install/</span>repositories<span class="regexp">/gitlab/gi</span>tlab-ee/script.rpm.sh | sudo bash</span><br><span class="line"></span><br><span class="line">sudo EXTERNAL_URL=<span class="string">&quot;http://设置的ID+端口&quot;</span> yum install -y gitlab-ee</span><br><span class="line">sudo EXTERNAL_URL=<span class="string">&quot;http://47.107.177.200:8888&quot;</span> yum install -y gitlab-ee</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab<span class="selector-class">.rb</span></span><br><span class="line"></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line">sudo gitlab-ctl restart</span><br><span class="line"></span><br><span class="line">#增加邮箱</span><br><span class="line">gitlab_rails<span class="selector-attr">[<span class="string">&#x27;smtp_enable&#x27;</span>]</span> = true</span><br><span class="line">gitlab_rails<span class="selector-attr">[<span class="string">&#x27;smtp_address&#x27;</span>]</span> = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">gitlab_rails<span class="selector-attr">[<span class="string">&#x27;smtp_port&#x27;</span>]</span> = <span class="number">465</span></span><br><span class="line">gitlab_rails<span class="selector-attr">[<span class="string">&#x27;smtp_user_name&#x27;</span>]</span> = <span class="string">&quot;1422476675@qq.com&quot;</span></span><br><span class="line">gitlab_rails<span class="selector-attr">[<span class="string">&#x27;smtp_password&#x27;</span>]</span> = <span class="string">&quot;dltkahdadlikjaah&quot;</span></span><br><span class="line">gitlab_rails<span class="selector-attr">[<span class="string">&#x27;smtp_domain&#x27;</span>]</span> = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">gitlab_rails<span class="selector-attr">[<span class="string">&#x27;smtp_authentication&#x27;</span>]</span> = <span class="string">&quot;login&quot;</span></span><br><span class="line">gitlab_rails<span class="selector-attr">[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>]</span> = true</span><br><span class="line">gitlab_rails<span class="selector-attr">[<span class="string">&#x27;smtp_tls&#x27;</span>]</span> = true</span><br><span class="line">gitlab_rails<span class="selector-attr">[<span class="string">&#x27;gitlab_email_from&#x27;</span>]</span> = <span class="string">&#x27;1422476675@qq.com&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="开启xftp-公钥登录"><a href="#开启xftp-公钥登录" class="headerlink" title="开启xftp 公钥登录"></a>开启xftp 公钥登录</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#生成一个.ssh文件</span><br><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line">/etc/ssh/sshd_config</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">systemctl start sshd.service</span><br><span class="line"></span><br><span class="line">adduser liguoxin</span><br><span class="line">passwd liguoxin</span><br><span class="line">abcABC123</span><br><span class="line">#将某个用户的公钥放进去</span><br><span class="line">vim /home/liguoxin/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-port=22/tcp --permanent</span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">#生成指定邮箱的ssh文件</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;1422476675@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line">cat /root/.ssh/id_rsa<span class="selector-class">.pub</span></span><br><span class="line"></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&quot;Administrator&quot;</span></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">&quot;1422476675@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line">git remote add origin git@<span class="number">120.78</span>.<span class="number">175.202</span>:enticementchina/web<span class="selector-class">.git</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>


<h2 id="添加某个用户到linux服务器"><a href="#添加某个用户到linux服务器" class="headerlink" title="添加某个用户到linux服务器"></a>添加某个用户到linux服务器</h2><p>前置条件：</p>
<ol>
<li>公钥</li>
<li>注册gitlab账号</li>
</ol>
<h3 id="1-添加用户，让其能登陆Linux"><a href="#1-添加用户，让其能登陆Linux" class="headerlink" title="1.添加用户，让其能登陆Linux"></a>1.添加用户，让其能登陆Linux</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">useradd username</span><br><span class="line">passwd password</span><br><span class="line">mkdir -p <span class="regexp">/home/u</span>sername/.ssh</span><br><span class="line">vim <span class="regexp">/home/u</span>sername<span class="regexp">/.ssh/</span>authorized_keys</span><br></pre></td></tr></table></figure>
<h3 id="2-关闭sudoers报告，关闭密码输入"><a href="#2-关闭sudoers报告，关闭密码输入" class="headerlink" title="2.关闭sudoers报告，关闭密码输入"></a>2.关闭sudoers报告，关闭密码输入</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">vim /etc/sudoers</span><br><span class="line"></span><br><span class="line">username <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure>
<h3 id="3-gitlab给权限"><a href="#3-gitlab给权限" class="headerlink" title="3.gitlab给权限"></a>3.gitlab给权限</h3><h2 id="Gitlab-Runner"><a href="#Gitlab-Runner" class="headerlink" title="Gitlab Runner"></a>Gitlab Runner</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前置条件</span></span><br><span class="line">安装Docker</span><br><span class="line">安装Gitlab ci runner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gitlab ci runner</span></span><br><span class="line">sudo curl -L <span class="params">--output</span> <span class="string">/usr/local/bin/gitlab-runner</span> https:<span class="string">//gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64</span> -x socks:<span class="string">//192.168.3.3</span><span class="function">:10808</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 授予其执行权限</span></span><br><span class="line">sudo chmod +x <span class="string">/usr/local/bin/gitlab-runner</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个GitLab CI用户</span></span><br><span class="line">sudo useradd <span class="params">--comment</span> &#x27;GitLab Runner&#x27; <span class="params">--create-home</span> gitlab-runner <span class="params">--shell</span> <span class="string">/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装并作为服务运行</span></span><br><span class="line">sudo gitlab-runner install <span class="params">--user=gitlab-runner</span> <span class="params">--working-directory=/home/gitlab-runner</span></span><br><span class="line"></span><br><span class="line">sudo gitlab-runner start</span><br><span class="line"></span><br><span class="line"><span class="comment"># ci-runner 帮助</span></span><br><span class="line">gitlab-ci<span class="params">--multi-runner</span> h</span><br></pre></td></tr></table></figure>

<h2 id="GitLab-CI-服务器的搭建"><a href="#GitLab-CI-服务器的搭建" class="headerlink" title="GitLab CI 服务器的搭建"></a>GitLab CI 服务器的搭建</h2><figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装gitlab ci runner</span></span><br><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh -x socks://192.168.3.3:10808  | sudo bash</span><br><span class="line"><span class="attribute">sudo yum install gitlab-ci-multi-runner -y</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute"># 查看是否运行正常</span></span><br><span class="line"><span class="attribute">gitlab-ci-multi-runner status</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute"># 设置Docker权限</span></span><br><span class="line"><span class="attribute">&gt; 为了能让gitlab-runner能正确的执行docker命令，需要把gitlab-runner用户添加到docker group里, 然后重启docker和gitlab ci runner</span></span><br><span class="line"><span class="attribute">sudo usermod -aG docker gitlab-runner</span></span><br><span class="line"><span class="attribute">sudo service docker restart</span></span><br><span class="line"><span class="attribute">sudo gitlab-ci-multi-runner restart</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute"># ci-runner 注册</span></span><br><span class="line"><span class="attribute">gitlab-ci-multi-runner register</span></span><br><span class="line"><span class="attribute">输入url/token/desc/tags/untagged builds/是否只为当前项目使用</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">输入tags &amp;&amp; 以及shell</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute"># ci-runner 列表</span></span><br><span class="line"><span class="attribute">gitlab-ci-multi-runner list</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute"># 使用 ci-runner 前必须创建该文件</span></span><br><span class="line"><span class="attribute">.gitlab-ci.yml</span></span><br><span class="line"><span class="attribute">/**</span></span><br><span class="line"><span class="attribute"># 三个阶段</span></span><br><span class="line"><span class="attribute">stages</span><span class="punctuation">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pro</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">dev_pull</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">stage</span><span class="punctuation">:</span> <span class="string">build</span></span><br><span class="line">    <span class="attribute">tags</span><span class="punctuation">: </span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line">    <span class="attribute">only</span><span class="punctuation">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line">    <span class="attribute">script</span><span class="punctuation">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cd /docker/web/project1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">git pull origin dev</span></span><br><span class="line"><span class="attribute">pro_pull</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">stage</span><span class="punctuation">:</span> <span class="string">build</span></span><br><span class="line">    <span class="attribute">tags</span><span class="punctuation">: </span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line">    <span class="attribute">only</span><span class="punctuation">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="attribute">script</span><span class="punctuation">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cd /docker/web/project1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">git pull origin master</span></span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Gitlab备份"><a href="#Gitlab备份" class="headerlink" title="Gitlab备份"></a>Gitlab备份</h2><blockquote>
<p>使用以上命令会在&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups目录下创建一个名称类似为1502357536_2017_08_10_9.4.3_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分, 其中开头的1502357536_2017_08_10_9.4.3是备份创建的日期</p>
</blockquote>
<ul>
<li>&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb 配置文件须备份</li>
<li>&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;nginx&#x2F;conf nginx配置文件</li>
<li>&#x2F;etc&#x2F;postfix&#x2F;main.cfpostfix 邮件配置备份</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.创建备份文件</span></span><br><span class="line">gitlab-rake gitlab:backup:create</span><br><span class="line"></span><br><span class="line"><span class="comment">#备份 gitlab.rb and gitlab-secrets.json</span></span><br><span class="line">cd <span class="regexp">/etc/gi</span>tlab</span><br><span class="line">sz gitlab.rb</span><br><span class="line">sz gitlab-secrets.json</span><br><span class="line"></span><br><span class="line"><span class="comment">#新linux安装后,修改 gitlab.rb external_url</span></span><br><span class="line"><span class="comment">##如果有存档，则直接用存档的文件替换安装好的文件</span></span><br><span class="line">rz 选中的gitlab.rb 和 gitlab-secrets.json</span><br><span class="line">chmod <span class="number">600</span> <span class="regexp">/etc/gi</span>tlab/gitlab.rb</span><br><span class="line">chmod <span class="number">600</span> <span class="regexp">/etc/gi</span>tlab/gitlab-secrets.json</span><br><span class="line"></span><br><span class="line"><span class="comment">##没有存档，则需要修改文件内容</span></span><br><span class="line">vim cd <span class="regexp">/etc/gi</span>tlab/gitlab.rb</span><br><span class="line">/external_url</span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_from&#x27;</span>] = <span class="string">&#x27;1422476675@qq.com&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = true</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = <span class="number">465</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;1422476675@qq.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;dltkahdadlikjaah&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = true</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = true</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.从备份恢复(需要提前将备份文件拷贝到<span class="regexp">/var/</span>opt<span class="regexp">/gitlab/</span>backups下)</span><br><span class="line">&gt; 文件名：<span class="number">1590655270</span>_2020_05_28_13.<span class="number">0.0</span>-ee_gitlab_backup.tar</span><br><span class="line"><span class="comment">#停止相关数据连接服务</span></span><br><span class="line">sudo gitlab-ctl stop unicorn</span><br><span class="line">sudo gitlab-ctl stop sidekiq</span><br><span class="line"></span><br><span class="line"><span class="comment">#从备份恢复</span></span><br><span class="line">sudo gitlab-rake gitlab:backup:restore BACKUP=<span class="number">1500809139</span> <span class="comment">#从指定时间戳的备份恢复（backups目录下有多个备份文件时）</span></span><br><span class="line">sudo gitlab-rake gitlab:backup:restore <span class="comment">#从默认备份恢复（backups目录下只有一个备份文件时）</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.启动Gitlab</span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line">sudo gitlab-ctl start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.修改默认备份目录【可选】</span><br><span class="line">vim <span class="regexp">/etc/gi</span>tlab/gitlab.rb</span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_path&#x27;</span>] = <span class="string">&#x27;/home/backup&#x27;</span></span><br></pre></td></tr></table></figure>
<img src="/blog/p/4adbd460/gitlab%E5%A4%87%E4%BB%BD%E9%94%99%E8%AF%AF.png" class="" title="gitlab备份错误.png">

<blockquote>
<p>gitlab-secrets.json</p>
</blockquote>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;gitlab_workhorse&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;secret_token&quot;</span>: <span class="string">&quot;ETLdYBi1muZ1gCJ5BqvPkXCSW9AjXeMUueEZEaDZPWE=&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;gitlab_shell&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;secret_token&quot;</span>: <span class="string">&quot;9cadb3e105f0fc900a90da5cc9d8ab44d7e2389e4b3ec35e5e46f1d6bc61d2a432eda4179577b333295f44273748d8b4ebcb533444f0bebe73643fc8285ec2e1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;gitlab_rails&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;secret_key_base&quot;</span>: <span class="string">&quot;fb142afb8863c8b4a5e0da7cf752bc8751193f956338e005f9f350a425b04693cd8dd3ab6304b83ddd4a52579583e7132a0d8af64880acdafac3712b9fecf504&quot;</span>,</span><br><span class="line">    <span class="string">&quot;db_key_base&quot;</span>: <span class="string">&quot;42f186f6219c01e061f2870d84177d61dfafea0839b6c74c8db8b03588f53b5c3bf4f49c33dedbbf2510f2ae06f3c6d839fb18d703dbc47d523821561a13d7da&quot;</span>,</span><br><span class="line">    <span class="string">&quot;otp_key_base&quot;</span>: <span class="string">&quot;899cb449fc99606065e197a02781dc86a9b8929ca5829147d8bf7e41b72d21cbfacde7217766b03e41f080c4ace75e5da00822ad4cdc99414a8d2ca59e37de94&quot;</span>,</span><br><span class="line">    <span class="string">&quot;openid_connect_signing_key&quot;</span>: <span class="string">&quot;-----BEGIN RSA PRIVATE KEY-----<span class="char escape_">\n</span>MIIJJwIBAAKCAgEA4avMWJqz7R63QVV6i9uz2gKFbJkM13B91dRJBQy03+OxbNj8<span class="char escape_">\n</span>PFsXaoWySWeyptiPhemr1n9TZuDUwF1cf0kp1NhwggAkWc2X77LKh4gZds7kwpoF<span class="char escape_">\n</span>wNS2K7pBCwAKcYe/4VLzuyBk9qIjjmSX5QjBnP+vEYbJAjycfTHwkat7zvGD2db3<span class="char escape_">\n</span>hkQpWf9dkpNF8fQo6td/pnbsNHv/TiJXiexGYdQgJVcxtLcs0wl28ox8PYh0oIxw<span class="char escape_">\n</span>IZC60K1NZQ2WDyM4RrDTLj5IVd8OAymdG779Zkb5NaGs1BmAHkkv3QficUaTmbU4<span class="char escape_">\n</span>3GHh1eW4W4u6Zb0T+MrejtbHyWUwEoPG+FdnTcm3/Zen+6Cy/tT4BUJHpnFvxfrf<span class="char escape_">\n</span>v36jzQkjK9Bos4yer9rtnZUh/6X+syUr3RLOLPTlSEGtZ58MaHT74qqVp1j39Ivq<span class="char escape_">\n</span>oGaQrLbMuLJi3X39woKdlJXdTEqS1n6mdb3fbZAqSDQLs9hepCD8Gil0HDM8m/Lk<span class="char escape_">\n</span>Fgc3BV1APkaY5K1c8wF0inPDzNZU0FOEXUPLDrU3V9F/I4VN/6fJmy4z7MVdTpWY<span class="char escape_">\n</span>XbkkBLg0TEoENPyWAyGddXhwp0TfITSyR2dqh2KeR2tk27U0gjhstvzFfFPqiyQK<span class="char escape_">\n</span>4PTF5YL3hBHzAQKz5kiG2VaIKpl9F3d5Hsngz4DW1W2MnpC/vbxRz4R9fT0CAwEA<span class="char escape_">\n</span>AQKCAgAx5gXSFarxJFiK5rapFBRJgUM1RwYy4NnCHSVkK3IXC0ag9b2YLuAXmqZY<span class="char escape_">\n</span>WsiC4eGiT4/CZvbvCYmhW0NnlardOFpwNE3VWYNd6d+kZjCTN54XdW0OPTpmotFc<span class="char escape_">\n</span>+E5W2hhQX0IrPzdz3VgVVSLM7sm4yERSkMYDa5mCiTdTTmKa2IY59bFXi9zE3JU5<span class="char escape_">\n</span>Ir1ViZI+kxXTnfoOhNhn02odwhOx7/CHsSb5eYM8ypv1d6DFDlYTZdopYdIc8CTr<span class="char escape_">\n</span>0jw67qOz5cdcM0NVUXPMuTfW+b0YD1ttQ2luoJDWoYIm0mZ8e4mJdCu1dyMzY48H<span class="char escape_">\n</span>FvdJJayz10+sr8sPOgOOJHsrUFAz1ZhH3CYWI26DmYZvnckfXMYmqGGsAcCXqRKU<span class="char escape_">\n</span>XRpAkXvMeMHRu9TBncDAhwgeR6Xcgi/O1GRM3IQX4eUQrFi1CMKZ3f3QSAYzqD0G<span class="char escape_">\n</span>QipTTZNdUp2dY80GIM6YdpKP792g/BXc7CtTpnNVesxBQ1oHGiUVFGY/Oeyhmbzp<span class="char escape_">\n</span>D7Q9V01OPREljRxV1BsVJKU06jN4s0wEs+9/ay4SObb3pY2JTYf4SiUY+fIQLhyi<span class="char escape_">\n</span>nB92+hUNrOM5XjMLc2T1C2NUkyTQhM+DucGB6nnmKBIv6FOmG3lq1DvLtNb3E/Tl<span class="char escape_">\n</span>UiQsZq5Vx7DOQ16Tv3QCuLqntYg0KHTxFpera6e3E6YExt9qQQKCAQEA/LSa8sJx<span class="char escape_">\n</span>tH+7LuQtqgxVjrFjp99Q1XuqRetxwkih5ztqqhwfclYKeZouWEhVcCuUF0jgpvuq<span class="char escape_">\n</span>HbHflrBav8xIEHR0o+R7oir/ffZ751NZsbk9cR6lnGAwSMMtJJh+oyZ5IsCCOBPS<span class="char escape_">\n</span>1VPVmyDRTWua9VeM8ynuREGQbPnB6hr4diJEXqcFEoiDe5kS+It6XaRs717yDjJK<span class="char escape_">\n</span>FEGK9AfD1SA9tXWcVVTrAXnRJrqEjzgAYjJTwCYruy6joPst7MDDBqm6vAtIE4K9<span class="char escape_">\n</span>SRWCOK9pCyZGNcdEANt/qXFGZKCyVHLUI/ciMJCCYGaOoSxrCyw+Ox7ESVEbe33x<span class="char escape_">\n</span>X84DF4lmjxkxEQKCAQEA5Jz3eUemwyZ5MbE+tT5+RZglnS0M0XXXgr/szEXPQukF<span class="char escape_">\n</span>eg6XWgeyWeBe/6ZdORhbWfCMWKfuWvvNQRE9hIvDfrhGZIFXqosHSzuh4CBBChHW<span class="char escape_">\n</span>YsvnnjxdQEiU2yiCKicWkDxfCwh4fDtxXfQWN7cgaR7btKPrlnFSjcKKe7zrW7LI<span class="char escape_">\n</span>4ZlgmChZec9GJil1U5FxcT9EdomLQch4KyQ8NmCa0Md1cTEbyBf6Akb6MD2n2OjJ<span class="char escape_">\n</span>OjIn6zfGJ372ggFhx34Uk36DTffstcrKwPcyYCYsSw2zwUk1gZ/YbcjCz8tIOEYl<span class="char escape_">\n</span>u+BCAZ36Dy3r0FG+y1q4VVdOyn1NORYAnOJoM2oJbQKCAQAZsCpIHyf71zgp7hwO<span class="char escape_">\n</span>Oy6/UJz2xaar7OREM0jfHQ8IOGwBWtZ/guuRrPClHMVCn8twCoJ7tv12A0zdPpQb<span class="char escape_">\n</span>ByMUOSJaPrGqrIBIR7QUsc5eWJw8UYc4PDbsTpraK35EC3co5zTVin5WHS2LlWxx<span class="char escape_">\n</span>WEzqP7oeRdborVmHGmRx7cfwCk+053mGhsYG3GqnRVZtCnfgZWBpvQb2xCrh36Ay<span class="char escape_">\n</span>nBJpzcjUi8tP3Rg7vZ4YCPNRCBinYbn0TytnA+GJPZcVqE9JKkRrZ1DiiwMvy/T7<span class="char escape_">\n</span>oypj8Ruikq2JhfBH7mXyW7Hg7hBVq3r1XbeF/sPq4NZ6oAgIA+ytQwI0YPbDf74j<span class="char escape_">\n</span>McZhAoIBACGE5kARAmFwnapsi341iHwZv8IY3d1EQvH3w/d7cNUlp1jrFMPthvfo<span class="char escape_">\n</span>juU69kYtzQ8V1u4UyTzr2H9m0LdDasmEqUWJNVpbAhnEx4o+EGsyjFV2AiLQRPfs<span class="char escape_">\n</span>7G5ptRQLISLKx0Ct4ESOzqNw62UF46mmDZ6hviQTv3/rezSDUZrjTtLNEz2cBOp4<span class="char escape_">\n</span>OpfT0lELbS+mkBo1NobRptTkfjOW3HwqEo0jHyiqY0y8LWivUZHbJ83xlqrFRbd6<span class="char escape_">\n</span>xRfwre57DPdHQGdJJ5rL/ghm9irkze+/NZDsc/zqe+g03GNtMcyWdGfkjKkCCaz6<span class="char escape_">\n</span>Fa44nhng1lAk+fd0gcMR98sI4zBOps0CggEAQPzUT54i01Z//pCj1MhkvuMsLVcm<span class="char escape_">\n</span>2vX8XoGHWSLRn7WJwWXtuRhpokUdkPF2p+QJEtzDx4ESKY2I8BNv2J251QCGwvUM<span class="char escape_">\n</span>b9Ahwq//NBRgkdbsUUdQjKiDf/Qxpl4QQlHFOkLcQs00mOFqJeaC9qqtUk/Ym1fG<span class="char escape_">\n</span>junnlL8f74G2XzKFMriNDK4PdAgvNUjP8MVHAx3TzRrTpBaRrQETtspyDRPaSmhp<span class="char escape_">\n</span>Vm5dQfDCi+ho+BTq0fVc7AipxthDmZn1remqNHSdguqbHkZYJMUwQ04ID+xUO6Wd<span class="char escape_">\n</span>PzTHZPjeLv68KQ6P2I/w0Tz5GDUnaBPGdYG4gPhTaejpjKgFZkQOufHORw==<span class="char escape_">\n</span>-----END RSA PRIVATE KEY-----<span class="char escape_">\n</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ci_jwt_signing_key&quot;</span>: <span class="string">&quot;-----BEGIN RSA PRIVATE KEY-----<span class="char escape_">\n</span>MIIJKAIBAAKCAgEAqB+KcC2gj8pnrZhyYwrHgVCtSamvpKreWmQlyIFSVy3bhqZA<span class="char escape_">\n</span>PMyZ46UOQjt//6AEYK3a4kTNd4yojC7YUvjc93C+3eCr+HVfrhGYaBqyWUqSV3dO<span class="char escape_">\n</span>wA5IL6QNkr7G6fseTJNZ3KcAohhxF77F29fdzeg7410YkfDkAO65ZI5Fuh3n2bVX<span class="char escape_">\n</span>TNiterBdUvtD14servdKh8HMtuzw26Yiy+rolu2KaDQgR0A9NmT/nOjjUfulvnhM<span class="char escape_">\n</span>G/pdYXCvKQNSI4bgzUF84mCAO7Wt9wZ9PHGYSsnCo+kiQc46kvcevPIRRmMyc0cF<span class="char escape_">\n</span>aKUtZZ6xp3+veKO95DveJtWRc6T8q7cHmR5zrgw7Hz0mjpejgLNgidSOx69x0W66<span class="char escape_">\n</span>yeguDtEXmrBW4fKEOF1LDcdNZWjeJpidjBxL8JvCkkcJvCtgows4BhiEJrztEyep<span class="char escape_">\n</span>Xx2EWa197CqE4026oj4pBMA9uyASgCO/PDZTwkaZa3Pr8KuvZG5Q768VR2+qE90V<span class="char escape_">\n</span>IOHesB2Vol+vKS7WskMwNzFOpKNw2RIzefgyxCIG0crqmxddBAxdfmzNrGpUWdnd<span class="char escape_">\n</span>x6XWrkd+iuq/2YDU6F6i0eblQeX8/s+xCyeNaBq+TQn7RxETC/5emmjmgV8Ad4uT<span class="char escape_">\n</span>OIBp8gxUtkAM+1sFmyVls+4AG3waFRuZI8k9/iiRhIC+dbUo+3MJJJ6Sh6UCAwEA<span class="char escape_">\n</span>AQKCAgBPmBcfgsp4KNgq3HiTIUBQnZRcwoQQToDUhINKyMbl1SUQO1dAMZFNsA/v<span class="char escape_">\n</span>FWJE8EoCR2zQIMixp5sIOwlZRs6+KteCDeL8zvzMWTIxXyo+kcp0tFxJGrncLCvs<span class="char escape_">\n</span>5HshvSycDkrF5x6qny2zkzLzIOC2ohLwUlvWhBg9xMdqrtyd/5iLfonlLNP8uNCF<span class="char escape_">\n</span>/8Ufn5KYPSVA3mR/2e8x3hatOfqBsdYL/Vmmwef4/5nwfGVao+vVH/jQahiZkBKt<span class="char escape_">\n</span>NRBHF40IP8/TEOLE4f+Jar4RxqnWBm0q0q3QP8WFXI9l3qiFDWOOJfqOj1zNtnLf<span class="char escape_">\n</span>HNlDISo+ioVjF0s0V9DzrsRfHoafBCOQQicjigJkxy79uAWmI3u14BzI3QQ8wN7p<span class="char escape_">\n</span>p15nOE2OL63RvFSAd15BSNwXY4jwvM3+SeGduwlms5a+tFkrr6FngZyUpxExEZ1f<span class="char escape_">\n</span>9Kud2DhitR6V50Jj4I4XC5ijwifJxZlaHu6Cg4X5AWHw/7IUTozdEVkHu8c1SIN4<span class="char escape_">\n</span>iMptbtzCfbzF65SNX8ryPAyS0einncdeEbawvKKa+NNXQMjU2L+EbCb0w0uMBSQf<span class="char escape_">\n</span>7zyeGkf+FV128dyqgu2tbpC+Xta+ynmdEYpl4BPO6KUkhQuoFXnBL7Kop7Py7jnr<span class="char escape_">\n</span>nEMzrzElGVcgkDioQ2XXWH2ZZZdiCmGmDjDPDIBe0q1EaC2TYQKCAQEA2lrSaoQg<span class="char escape_">\n</span>ZQpikDGfihmqwEgsd+YUPwQEhiQvJ6WXpNS5swCe+1IVzBdBPPmaJMytsYRupWyi<span class="char escape_">\n</span>UE1Ie2GkjSNd9GG19bBEHrAgkbK+C9YYkjLM8RIpPskqjQbpZsev8qd8DKaQBqVW<span class="char escape_">\n</span>PxJ5tSLEdU70cKnlwn612P0VVx2B6wCTaLTsNPE9B4ZivEPmLxj6QSFa1ybB++VX<span class="char escape_">\n</span>4xlOAS9y8er/H98/7PyduzpwI7vWFaciKlY2fassW2ujzUooJR8850I3tde+Hk/t<span class="char escape_">\n</span>CF3fnpaWUeiIOXMn6FJUz5UyFQtvhaRn1XBzPtyiO0xyVmBNNKmw67W4YlQvYkKc<span class="char escape_">\n</span>jlNawnzj1m50LQKCAQEAxRu6Vss1dqCNs3fg5rfDJacYlc/GmftVeVC3duc2j8CN<span class="char escape_">\n</span>tn5m00HKqsXRY9BdqQuIRiSq/woGJ9Dg61PmM4gwslLzoAXG0Ir4fUH0gOvYG8qs<span class="char escape_">\n</span>lk4fI7CfK6/RTjOYSZ4Irgu2Ci+QJtKxFooa8QJyxfYCiZgViEzQ5SPJMT1XA/AK<span class="char escape_">\n</span>7gyEhO8elAMoaR2o+UkgCaCfO6dSkqbXJIQGzxn6M2SqA1wtQYfggMefjwRsqPYu<span class="char escape_">\n</span>WTxj8pkGjDWWVQocvKiCcGYlN6Ge16iqRUM3e6Shs+n6v7qBI6dOmw8kVkTmX7Zn<span class="char escape_">\n</span>jVM3aPIEUbGbOqYyxV4H9fLferiyTdMd41kH6b80WQKCAQAxAdNaDr+KjfMjM8//<span class="char escape_">\n</span>2dTmBQzd+CixIAC37qUau+K2HvxyvX/xHjJANTPyMH81JS8SuYtv21rutPnAn2Ck<span class="char escape_">\n</span>QLzUnZ2OP/p5/MPCj6Bx3aJ0JayzqoTRT6saLePyqnzF9Gs2F6gZpcAetdHVIrF/<span class="char escape_">\n</span>NrJMGwWzSmccBWllvPysttte08Rz+XTeHH5KjN670VpRhd/yjANbutSn5sUIJRMi<span class="char escape_">\n</span>UsDh8WRSlzv7ipkinATnpTRY1jKyr9lrx1PjPnKWKlWr/cOtL3e/K+ciSpdm65tf<span class="char escape_">\n</span>VNZGNp9NWDUqxeyQpploIEchs3RaNoC+2GCNHF4XpMJNlOKGRyi/X/3tP64OGqO0<span class="char escape_">\n</span>O+QdAoIBADba+6XyEeP81NLQlw++rpnJAieXVp89+lCz7QszV9Tz8ryKOxWqJrwW<span class="char escape_">\n</span>J6sOrzI/mmJjDA/Ee2gTUrVLeTJ4QY0vVsv/L5CUTImXlHNYr6E0a4m9Hh9xpSqk<span class="char escape_">\n</span>WKzZ4RUD3UiKy9PT3ttfIZezQcI3OzfqulQOtldjgXNz3SdN+eyHnpMXer4ASlNI<span class="char escape_">\n</span>+bMfZQpTlo33XLleXLWhpxhrgfWbNi2dY09iFNo69XkBlV9ZDOCM+uMs0mgOvGrC<span class="char escape_">\n</span>8x6hnNPIVdzwIIV1/l3oe9Kg3U0UyUfn4zf+sLf6dP7kXOmBbVfPzMvhD/et+xO9<span class="char escape_">\n</span>SQUugcy52Z9SQ23E/yJ3kcbW3UPpSakCggEBAKn7F02fpfiUXlxGVGatB5B/S6E7<span class="char escape_">\n</span>3oL1aQuzxnjT8okumFfbwK10fEWGLZ3vo4HrcCtPreLD0BuLC3VDM3dAXGQUd7fB<span class="char escape_">\n</span>GYCFLzO8/5N6PtbmZ7N2Ipe/d4uZeCY3QrmeJXJGKH3I86cSX+AwbUrEt5A9+noK<span class="char escape_">\n</span>SuuYVIkpSWQ1TTeppt+nwNlhcjZ14l1/WKEYNGXAdKdjeyLEHIDhH0pey+rjbadY<span class="char escape_">\n</span>mGvzQdqLkELFN0f8yjajK7XTMjNCSP9BuLS3kcmYlK62+YXMa9VnG9cJ3k/45I0C<span class="char escape_">\n</span>JlAS3ZO/fFNBOjZcjPtor2Ba+vq/20GzUrys54GFJIDHDMs/77AOltSI5ok=<span class="char escape_">\n</span>-----END RSA PRIVATE KEY-----<span class="char escape_">\n</span>&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;gitlab_pages&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;gitlab_secret&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;gitlab_id&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;auth_secret&quot;</span>: <span class="string">&quot;7c3eedd0076efc3a714f39259e8681f1898382b66b9b23bcb9d3982ba3d8fd1bbe6920b17103f0a725f7780e0ee1ec23024ac05f35f741db4086d4c3453c8ef6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;api_secret_key&quot;</span>: <span class="string">&quot;FEiJdskUbfzFgaBu1kpWde1cMwQRyERnoty8vOGOto8=&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;grafana&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;secret_key&quot;</span>: <span class="string">&quot;73e0634e677fec56e5ed34d64ad991f4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gitlab_secret&quot;</span>: <span class="string">&quot;7437406e9e6dbe90c61bd9ea2da52de6a55ad812ba30274d41467c428d0d1f5c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gitlab_application_id&quot;</span>: <span class="string">&quot;2b96e1ec552e90f95315516c25f383d90884b080c16f4cc2a46b29d0abdd431d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;admin_password&quot;</span>: <span class="string">&quot;83ffce7cb0acb1712db3bb10c49b37fb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;metrics_basic_auth_password&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;registry&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;http_secret&quot;</span>: <span class="string">&quot;d1b0e2f03f7e92fbdd2774c87dd7d9a908348153f7652e608a9c4ba2a769008271696b81ec9aef01355841288c0b5caccf32510fabaebb3d0d48bf99544e049c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;internal_certificate&quot;</span>: <span class="string">&quot;-----BEGIN CERTIFICATE-----<span class="char escape_">\n</span>MIIFBTCCAu2gAwIBAgIBADANBgkqhkiG9w0BAQsFADBGMQwwCgYDVQQGEwNVU0Ex<span class="char escape_">\n</span>DzANBgNVBAoMBkdpdExhYjESMBAGA1UECwwJQ29udGFpbmVyMREwDwYDVQQDDAhS<span class="char escape_">\n</span>ZWdpc3RyeTAeFw0yMDA1MjMwOTU0NTlaFw0zMDA1MjEwOTU0NTlaMEYxDDAKBgNV<span class="char escape_">\n</span>BAYTA1VTQTEPMA0GA1UECgwGR2l0TGFiMRIwEAYDVQQLDAlDb250YWluZXIxETAP<span class="char escape_">\n</span>BgNVBAMMCFJlZ2lzdHJ5MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA<span class="char escape_">\n</span>r/1QQaPDiZpB2259AJoGPgDOQ9OykQBQupJZfvAi2c/sFqCyJgh7VTOSlaxrrfiu<span class="char escape_">\n</span>+pw3pIR36B6uNI0WtiQS86dlMTvq/i6JoslB953K0+7ZUIxcX/gCFux2XSK74pqR<span class="char escape_">\n</span>kTq2m3Lrj06WM9H+5OycoEGiLtS5G4TjPCJ5rjri8DBgJGjhR5rhoyJFYCkfR/YK<span class="char escape_">\n</span>9PsqeS0sgpPsOsH1PE/Q3gwknq71Ipwr/1R0SNqe+cC50ZBndIIGWmeWebxtrhrb<span class="char escape_">\n</span>YUEb6vPTAYM9xJuvHEBwO2VfccJ6qo7yrCCVumtWDDrfryW7rN3Pq4/gvCSev0sw<span class="char escape_">\n</span>xDofIu6U0kwxlyLkfXLx7tu/aRuwfzw21j4zIdvHFqp48jBpAfMr0XRKLgkGz1bf<span class="char escape_">\n</span>EhzS3hSYjI94J3/g69n7vJ5fflg+xnaIZb7cHNQTwQB2kjxCHMnhUmL3thmu+PMd<span class="char escape_">\n</span>wY8SkJvUL4/pnWrCnGNjzs9IB7S6REYcF68fYRFz6WOMtGsb7B9fnSDcRMpELGv8<span class="char escape_">\n</span>8oeKRBAcDc8tIIpEkYUpoBpl9dkcKuUIEDLb2ccoVJJGXnteffglq0CV+k+cC+Rm<span class="char escape_">\n</span>7vl7cw6M6n8SWBye3dMkd/jAkdx22+C4Q5zdii5xudy/z3+DX0vwbGmBZwQdUmYX<span class="char escape_">\n</span>7hl0t0rZISPgIV4F92ezM0OqZRg6l6UFK6gzGotaAbUCAwEAATANBgkqhkiG9w0B<span class="char escape_">\n</span>AQsFAAOCAgEAQcMaqRBqELWYWhTanfJSon+MjHFUIoU8EW+RnJs0xAiJLxfkX807<span class="char escape_">\n</span>EqiCvKSo32K8Oxq6f8+5R1k9OHVbaNMSFWn55KwO3fWbgPjVS6DvaWORvFv+tjKj<span class="char escape_">\n</span>HHdnrRLUazV5xBg8RYtdhk94qbxpoG83eDUFrreBZTF45dqcjLr2JTcEcEREXVCn<span class="char escape_">\n</span>XV7e4Tdjzj+DJfkDtQTj1paTtpe9is5tb4sPsc2n/M78AUZhNu/wfGRaJEpGwlSp<span class="char escape_">\n</span>Ura3xxGwtDBgaBmbFY9JPaIapFX4kXSmXH4rPSf6s8hHT6TORxhOroak0l9bNmqD<span class="char escape_">\n</span>WVRAOe06Q5fPuFdoeQOwWlYhy5BLrR4lCIGobQjQ8NzUc938ahZwDId98c006Bt+<span class="char escape_">\n</span>mJpKKE/S0v+7qqs/+xbquO+g8pM6ZJiaWdWMlVp3ZO/lV4aryxCmXcwQXJdFH8dz<span class="char escape_">\n</span>BrR8EZ5oOK5kuBiasmVJdBJK9sKCEBI+Y+X+LazCutOuA1thMS+gSH7AF9stFA09<span class="char escape_">\n</span>isXoHjLSqDJr4kQoYAVE7nmIDzedrdfkxF6g5wwW+qdbq/k2eVY9BXTEeqfrB4Ef<span class="char escape_">\n</span>bnw2bxytMZPHnDeLV5vmhpzOCMfPUES0q3rlSTmpn7WFrIoxB+tJuEOEnHaohNhA<span class="char escape_">\n</span>uSF4DrPScAmUcr10FSz9x4H4mge6tmnjdCrk2zHvT8nlqBqAqUL7pyQ=<span class="char escape_">\n</span>-----END CERTIFICATE-----<span class="char escape_">\n</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;internal_key&quot;</span>: <span class="string">&quot;-----BEGIN RSA PRIVATE KEY-----<span class="char escape_">\n</span>MIIJKQIBAAKCAgEAr/1QQaPDiZpB2259AJoGPgDOQ9OykQBQupJZfvAi2c/sFqCy<span class="char escape_">\n</span>Jgh7VTOSlaxrrfiu+pw3pIR36B6uNI0WtiQS86dlMTvq/i6JoslB953K0+7ZUIxc<span class="char escape_">\n</span>X/gCFux2XSK74pqRkTq2m3Lrj06WM9H+5OycoEGiLtS5G4TjPCJ5rjri8DBgJGjh<span class="char escape_">\n</span>R5rhoyJFYCkfR/YK9PsqeS0sgpPsOsH1PE/Q3gwknq71Ipwr/1R0SNqe+cC50ZBn<span class="char escape_">\n</span>dIIGWmeWebxtrhrbYUEb6vPTAYM9xJuvHEBwO2VfccJ6qo7yrCCVumtWDDrfryW7<span class="char escape_">\n</span>rN3Pq4/gvCSev0swxDofIu6U0kwxlyLkfXLx7tu/aRuwfzw21j4zIdvHFqp48jBp<span class="char escape_">\n</span>AfMr0XRKLgkGz1bfEhzS3hSYjI94J3/g69n7vJ5fflg+xnaIZb7cHNQTwQB2kjxC<span class="char escape_">\n</span>HMnhUmL3thmu+PMdwY8SkJvUL4/pnWrCnGNjzs9IB7S6REYcF68fYRFz6WOMtGsb<span class="char escape_">\n</span>7B9fnSDcRMpELGv88oeKRBAcDc8tIIpEkYUpoBpl9dkcKuUIEDLb2ccoVJJGXnte<span class="char escape_">\n</span>ffglq0CV+k+cC+Rm7vl7cw6M6n8SWBye3dMkd/jAkdx22+C4Q5zdii5xudy/z3+D<span class="char escape_">\n</span>X0vwbGmBZwQdUmYX7hl0t0rZISPgIV4F92ezM0OqZRg6l6UFK6gzGotaAbUCAwEA<span class="char escape_">\n</span>AQKCAgAh0boEgyXmYYBaXKck4HRmod0BZ8Me3kKlN85++EKaPLyPtJ3HdUXOH7UB<span class="char escape_">\n</span>kjq3Gdz2R+LheJtaPdsYOiytH82MiRSHG46S/fpxD9/fZ7E8fN/B/NcbkhtEsHgm<span class="char escape_">\n</span>ebBFYZKrp+7DfJgL1/xBRQ+IinemzDYQbcyMn0LToYRkmOhXY9R16rmv+vF1Wfae<span class="char escape_">\n</span>/ggG2h9M6J9G3gl5pld1CyTHTEdFBGxdGh39YqmJzX7zKR/3urN6tBdNalcyNEnU<span class="char escape_">\n</span>ZwNku8CAtfRZeDWKSuAp0gkakr9+ioKG5+qOsB2uOizLwCiu/PlTPRsNoypvO5zi<span class="char escape_">\n</span>St8+v4JFky28lsB+kSnOc2QZP2eCP40QU42V1ficsjNz61dDX4UIByuyktgPpCEw<span class="char escape_">\n</span>Uol/tP6lY7VqfOIef3R6HzNcwMLeIvhTIlwzvuUbBQFFF+NsNAgY5IHPfZVEQ6Jl<span class="char escape_">\n</span>5wa6MIcVpRLLmVLqGz1/Lt8Tj291le/UNUH9EQO5XUiVNqKYJYPdYGb8xXz33AHp<span class="char escape_">\n</span>kCFmhcmvGvHifr49UDdeQAhFORGZUaNJrB+Ac1to2jh8JFULV4xu3ipFMbq3apuF<span class="char escape_">\n</span>HL1mxdwEq2jUHhEONH2LOXsMUdPxMxYrfV7MaklEJ1RLd7RjGEEb/589O34TloBo<span class="char escape_">\n</span>wKHZbetic5m1j5Phc9gC/ePs+6vIKCFrKddccXbS+EK/+TcWQQKCAQEA3YbtgzwA<span class="char escape_">\n</span>6KIH4/cDDq4Dl6BlU11aekjClcXvcrx1aymbDwGSY2P3/LQgYmVHlew7Oa/H52SV<span class="char escape_">\n</span>bEQhCuLMduA85ZQZ+LfHgAnT8Muf/NJBBlOmKKGJaoQRjxQfHGIgMhAC9tpXB0Ng<span class="char escape_">\n</span>KYgv3jtIa9N1ur0FtdA/oJAQ054mQIG6UkqnsIBBLgzZxCyn8tWE9t2ZGbm0Hfvp<span class="char escape_">\n</span>AEXpm/ygulSTF66hx2+qq72/ikjf6lTqiUB3omyauYU00jHrAi1G8qBksTY/efs9<span class="char escape_">\n</span>1yrTXOiwoOf7Gyhy4GsGtRw4xGTP56sNnww5ql9Hyfta+tNMRwnFWOHABhFZPwXq<span class="char escape_">\n</span>4zLGrrbwKbnTOQKCAQEAy2BJK/NY5JYDGu7f7vrFxh+ATBPz7pF0gENZ3yWDdZna<span class="char escape_">\n</span>XXvLtNoYtVe7v6nTbBzcyZS3UkDNAh5W9F1H4moxtbsOl1CF14wVVht323owPHIr<span class="char escape_">\n</span>FumtJBcCb780y7VxnLcYCzeyxP/O3qUtB5zcIO9i8sLbtQDtaRtM3HjqAw1mH7WG<span class="char escape_">\n</span>ytKcYX7hI78W6VdxrS1yjHh6K8u5uZYeLnHQl7f+2tNzJakTXp7xf672siUIALgU<span class="char escape_">\n</span>PI/E9mddGU6GFbjmqd8J6HZ4hxtFY5FKrFTmUX6hWaJVVFjtp07Vb++Z5STxZnmq<span class="char escape_">\n</span>x2Gt7BU/B/frSfzUCGEV0aDyk5hQDG/2K2oHa1x2XQKCAQEAtEFJXKLjnmfSAdYJ<span class="char escape_">\n</span>39UKyUNTj60DpUM1SofAGl1tMeCt8lz2D/fVXwP24fnFcSHC42K8R/XZfDpHpML9<span class="char escape_">\n</span>WrGF+80yAOcR54aXtXULXr56+LnyF1eyKEEExKa71e2mgvXyY4kwjZFuWv0c7jjQ<span class="char escape_">\n</span>6iQrxOJwFgw46d6wQnGKcKzevn1Oy9jgsKb2P6GSm47QXcvc+0jXXhqP8o/w0eOT<span class="char escape_">\n</span>qWqOMhQAQfcEKjEA/XXk9ZlZKouRjVHP6KuSWoMR1jifZWfL50LcDda48C9Bw3T3<span class="char escape_">\n</span>3EZHVkboiuGrmI05R908KydNsyBQf+h90sW7tyNeCuPReExhYs6VDyoygeLcNmhX<span class="char escape_">\n</span>LayuSQKCAQEAqjMUSWHH3NTmGF4creTUKrAmMITqOZclBkpXJfZBA+QT6PQ3UEzN<span class="char escape_">\n</span>LMYVa5r2Qp4M7+4zVPTCHKnDX5HJHOR+YXYACgXrXK3xFTS7o8OoJo3tHanFqlRP<span class="char escape_">\n</span>R7Gev3RDdkGML6cXRuJF//H/s0VEu5NbHYqRT/NMvA+KzV+rh45pDtRdz9Nd6AHE<span class="char escape_">\n</span>7KN4yyLREXrdSE1zAL/n2DaXX4sEZFQpRnx6+uN6QE+ID7Ee54syHVfwJ5ax4Pwz<span class="char escape_">\n</span>33/lmrw43aS4qACtcXQTJ/ZppbsPXNg6s8a03nflu4Sv/pNoGWpHU9kyYNWQNei5<span class="char escape_">\n</span>7TM/h5W85J5LIjoth/OJ2j7Apyh+uQySSQKCAQA/resJCx7BheqBk0TSG6ob/jnJ<span class="char escape_">\n</span>HWlz8sYedRwMrSzthZk0LGK+pp1DNqdbn71e3DrKOxnrmV+jX7ZJVm7PMReWTmUh<span class="char escape_">\n</span>R/FKCXNrKNraEU8fVKEIHpRP7H/M7B5mlRir2sXT6d7L1tZEcLSIzgnemG54iR96<span class="char escape_">\n</span>zBq1qd77UfHDkqkw8Aqn8N/D2ukQohKfqWIvls9u3xUFEacfnd7+Go6nbreZZ3si<span class="char escape_">\n</span>n1eLmy4X10bgTCTKFJAljpeah7kbIDJefUYt2iay+WnK0EJiHl4LAsdEtKa8rUGn<span class="char escape_">\n</span>/7w25kWgT+fx2X33BsGlUZN5IxFPmPuRfoBmuPFA4o9KNQn4m0bSUOC7X8TA<span class="char escape_">\n</span>-----END RSA PRIVATE KEY-----<span class="char escape_">\n</span>&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;letsencrypt&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;auto_enabled&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;mattermost&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;email_invite_salt&quot;</span>: <span class="string">&quot;e41e9e776a03c0a7ca1749585139ecb9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;file_public_link_salt&quot;</span>: <span class="string">&quot;5ff6a916dbc759eb690a79f2974f19e4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sql_at_rest_encrypt_key&quot;</span>: <span class="string">&quot;bef621cf1b26936cacdac3859078fe3d&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;postgresql&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;internal_certificate&quot;</span>: <span class="string">&quot;-----BEGIN CERTIFICATE-----<span class="char escape_">\n</span>MIIFBzCCAu+gAwIBAgIBADANBgkqhkiG9w0BAQsFADBHMQwwCgYDVQQGEwNVU0Ex<span class="char escape_">\n</span>DzANBgNVBAoMBkdpdExhYjERMA8GA1UECwwIRGF0YWJhc2UxEzARBgNVBAMMClBv<span class="char escape_">\n</span>c3RncmVTUUwwHhcNMjAwNTIzMDk1NDU5WhcNMzAwNTIxMDk1NDU5WjBHMQwwCgYD<span class="char escape_">\n</span>VQQGEwNVU0ExDzANBgNVBAoMBkdpdExhYjERMA8GA1UECwwIRGF0YWJhc2UxEzAR<span class="char escape_">\n</span>BgNVBAMMClBvc3RncmVTUUwwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC<span class="char escape_">\n</span>AQDa5sfD99KS7JONPxGgWe5lemV8UXyUvJIJ2iA2NeQDIab/lvb9wnaVEQVPxAdh<span class="char escape_">\n</span>HUiTienw1dpIU1xozVX4TqyTLQEjeRiP9RHE527d9zPUPVCFy6AZ6ouOUmlEjPNx<span class="char escape_">\n</span>rJ6btHZUzPCZJaFi6wlNMz9A1Nn7/C0yIewrMiDzJ1LtOSE2nANxSicab8KAPZ3Q<span class="char escape_">\n</span>+wMkW2/15u7dDh3StC9Cgg8Rdjv2/4/mqdAd0cCzdY2tiqVC/7l1u/z73CaKAXQB<span class="char escape_">\n</span>Z+bEz8nM2FAD9wMP58Vw9VN+lgTYvIdDGKloG4Z3vl7rbQRfqxiu/pPwe+yxayPg<span class="char escape_">\n</span>9y9A9ieVeF8GWXBb8pG3UcC9zvwBE46z5DtuqaRcjoNMxGQrz1lBQkS+C3hftNm6<span class="char escape_">\n</span>36BNy7QRwDhWejBjUbUHCqA+hyPwUZUvuK5ePvt/rYwfK89HN8UN3gz1YRpIB0jt<span class="char escape_">\n</span>ZvXz7FbMx4kf7bil5PLNwM6Uxhw4YzeLituOiY0MHaCseBfegHwIFWA9YA7oQdgM<span class="char escape_">\n</span>qRzd0BgjcxxhPsLKsCgEpbm9LakDmX/nTtGl+wlzIAnVFRasokEGTJJ48ke/8to+<span class="char escape_">\n</span>BgEawGuNGVEo7v5NS0GhdTGZoIZk5r4mr5kGcK1/Ev5oepfDM/wBsU5xfghJ+kjl<span class="char escape_">\n</span>WkXPbtnLu5gRv44BbHF/lDUkhmNRR0P1zky2ib4tnBekkQIDAQABMA0GCSqGSIb3<span class="char escape_">\n</span>DQEBCwUAA4ICAQDC35E9Ettw1KSoLb+Qu8nDmqKTMdbdlCuf76sM/HoOHl4QvHOM<span class="char escape_">\n</span>PnNl1QglQ+NI3Pu1SrjvNmnWFyQMNZuw4Jh9h17gVKq27BJFARJbS4ksCPtlJ93/<span class="char escape_">\n</span>EYL2NlINn0LLD1i0cFbFCPYPCSdU5QOBbO/LLH5F53lHCnOzoePmGt86r7z5BWDQ<span class="char escape_">\n</span>tH6wUupVmOZ2TrrPdO7w+VIeJblBySM0ckEumPXnG09RvIcI8kOWGEksPf0fFt5e<span class="char escape_">\n</span>v2tFoTLZRQ9CQdJ4Tpaq2MFf3vdxYLNOkzNCTFpFgfntgNQ56lPBjC4VesVE1IeA<span class="char escape_">\n</span>KkEDcyMznav7SBleKHjzH83sezeS6EXOEOrfbB5murVNZEKJ0xKLM4LEy+uDFTPZ<span class="char escape_">\n</span>ayOD6H4WhAGHcmPaQ8IFsOYnbELTSowM+28Nv+KvqpHM6TiSN00I9Hz1qTbguhrA<span class="char escape_">\n</span>TRFfanikuHcwJP0Xigzj2OKdgE2njoeku+sgUi/eKkBepwen3xdKhulUVROb6VIf<span class="char escape_">\n</span>WwXUCXF0bfo33p6sJEoibVIbeA5RNMzAvbYUGM6qMdTMnvJqBkEpxc78EfmlWjG1<span class="char escape_">\n</span>Vn+UPzUyAuqQ8rdvxsI0XJ83ZouZLaQ2TZZRkxe7V5R6dg1PgzpsXIUGPAR/N316<span class="char escape_">\n</span>2Po+C7OxWJ3HxjtNzKLnaQuJb7qWnVMcpcXggalYPT6dhok/snaIOjciaw==<span class="char escape_">\n</span>-----END CERTIFICATE-----<span class="char escape_">\n</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;internal_key&quot;</span>: <span class="string">&quot;-----BEGIN RSA PRIVATE KEY-----<span class="char escape_">\n</span>MIIJKgIBAAKCAgEA2ubHw/fSkuyTjT8RoFnuZXplfFF8lLySCdogNjXkAyGm/5b2<span class="char escape_">\n</span>/cJ2lREFT8QHYR1Ik4np8NXaSFNcaM1V+E6sky0BI3kYj/URxOdu3fcz1D1Qhcug<span class="char escape_">\n</span>GeqLjlJpRIzzcayem7R2VMzwmSWhYusJTTM/QNTZ+/wtMiHsKzIg8ydS7TkhNpwD<span class="char escape_">\n</span>cUonGm/CgD2d0PsDJFtv9ebu3Q4d0rQvQoIPEXY79v+P5qnQHdHAs3WNrYqlQv+5<span class="char escape_">\n</span>dbv8+9wmigF0AWfmxM/JzNhQA/cDD+fFcPVTfpYE2LyHQxipaBuGd75e620EX6sY<span class="char escape_">\n</span>rv6T8HvssWsj4PcvQPYnlXhfBllwW/KRt1HAvc78AROOs+Q7bqmkXI6DTMRkK89Z<span class="char escape_">\n</span>QUJEvgt4X7TZut+gTcu0EcA4VnowY1G1BwqgPocj8FGVL7iuXj77f62MHyvPRzfF<span class="char escape_">\n</span>Dd4M9WEaSAdI7Wb18+xWzMeJH+24peTyzcDOlMYcOGM3i4rbjomNDB2grHgX3oB8<span class="char escape_">\n</span>CBVgPWAO6EHYDKkc3dAYI3McYT7CyrAoBKW5vS2pA5l/507RpfsJcyAJ1RUWrKJB<span class="char escape_">\n</span>BkySePJHv/LaPgYBGsBrjRlRKO7+TUtBoXUxmaCGZOa+Jq+ZBnCtfxL+aHqXwzP8<span class="char escape_">\n</span>AbFOcX4ISfpI5VpFz27Zy7uYEb+OAWxxf5Q1JIZjUUdD9c5Mtom+LZwXpJECAwEA<span class="char escape_">\n</span>AQKCAgEAlRpdN762UB2U48Dx4KdhGv4j4moe0bEgSFWrW0GZ7ggeGDpcQr0SyLav<span class="char escape_">\n</span>R4XfAOdRaC2oi8Mey+T8LOawiFIOerFM9Tym3mevks+RVN/tDcQ19OyeQQjhxi+c<span class="char escape_">\n</span>RHU93VAXOTfS4jA2MhrPsvElhNBDZYWWdW1v25X/p+ydRQKkGbGwTeI29hPsTrWR<span class="char escape_">\n</span>ZoiR1qcjnMArovOKAEh9R+gzyLmOSfafIb8x5YwFlkopWBPaTTsDFn/Zc7h4uZVb<span class="char escape_">\n</span>KuWSfuKm7agbbMxqtEisbUkR079HABJverHv8GP8AE2/ahDh1rqLIB8K0SfW3ReM<span class="char escape_">\n</span>Qc0Yw0ObjEQe8lDraQfC4N55IsUs4tongnAt3GUIg1/SAtvc77bk/HyFWXynPHyZ<span class="char escape_">\n</span>scEQJKilmVgHR1K3F8iF2JjwlfdDnH2P5cz4yA1KTFN2+Z06QPnqZg6q2K1Z3Wu+<span class="char escape_">\n</span>8bLJVsex0KPtxx08+8Pe/gV1DtXoXWm9wsURmrQacC0kBiEkZTrS22jw1En/vPcQ<span class="char escape_">\n</span>Pt9EAdTbDIkH+BXLJxjnGNbJVL5Zwl0kj0yxq1l8x4G/xJFmvjz8FU+uL9eks8Au<span class="char escape_">\n</span>flMkHv5MI+fWExP7dXTyhOJ5tDXLbKt+Ch/SLEsZZ1OL4o5S8iDT9iKpSVderCAF<span class="char escape_">\n</span>P7LC9YgOJf6RxRtotNM/y9FJMghtEsrGkoRaZ9Vb3G5aK6ipmgECggEBAPew6Oz2<span class="char escape_">\n</span>E85PT+IqgFh/SCwLHpU5IaGl1xvoHMOupMc+ilqzsG2Cka62HGqFsXwdyJDftiOM<span class="char escape_">\n</span>BS95FmjEIaB7uVQ2mZmaRDFlOQuT2QuU+ykhu99cFD4EdHRPLLzDAR6i10nsdQry<span class="char escape_">\n</span>QnFpS6h7kOVvu1ICsiTmUXfP4i06thHG0YB/O2ibQpxsAyCEOHhy4clb+19mJSLC<span class="char escape_">\n</span>V7RF4qDD5+3dbunXzwKJ7Y81cUMLQ9Boa4yaOpWtHCTf2SQ4PwatbQXO9T79UI4H<span class="char escape_">\n</span>PTaO+c2mQeLQ+MyPD4YuT/DY2GF4X0J3OqY4MkNpzL+2PqmYwlDhPSEM9hzl+Lrq<span class="char escape_">\n</span>RxEFrv7zBBdXAi0CggEBAOI+opEfnlNe82wly8x/RaDarxOTyzM+OvZo6FEibawM<span class="char escape_">\n</span>+B+EsklcJ4bbiD2RD5fn1HbWd6yq51XnJBCN6QmlmpP/oP7IBBN/2gfrkEfjmsq3<span class="char escape_">\n</span>oov6qFMszrQqhIJdj6T5WND/Pncq3G1fs7IoIFnlqlFA57+Hak3N+f1Z2dRLZfVA<span class="char escape_">\n</span>CPbghOljfmShv+yjc+3meET0QRg52DXvOKAl8X9eCpMlb6Hltij3qm6ggf9hM7jV<span class="char escape_">\n</span>VmsCAMVhSr4/wopSYJKfL+cSOQ+ynyp2lUeHYzVgREHpAYrBg4C8C/93sd/+NnoK<span class="char escape_">\n</span>x9rsNoM8NADrV5mzG6CsVnbskezNxrBpD47igKu3/nUCggEBANUGvT3X4m7k/bJp<span class="char escape_">\n</span>lVsHlV3z7kivC0LIrDofJmYSFTwbiMi7lHiK/JrDm6rt8xjpUK9xCGiIK4mJ3gEa<span class="char escape_">\n</span>9kTdRCaukuptqErHYQmZDeoNJvpYPgm7Wtl/4VyLH9H08UiVCw5UJNHWS9jYk66D<span class="char escape_">\n</span>H7qEnxnIochkohqmm0MFJMQjN9oJE2JDbkW0C/hyX1MQkyooRwjkg/niJaYxGNnl<span class="char escape_">\n</span>w9prQNIzvqHTWJJ7hz7/OELNG/qgRtSmPvdj4pBpI6Otkn+VYI3dNeQBS99ZlnUN<span class="char escape_">\n</span>kcruqZzdSZ/AwxZEmc0yxtMWUkXVPT2HiAY2Sqx4al8/aOC9EgsGqyavCZIVTk2N<span class="char escape_">\n</span>Wq5sMb0CggEBAMcgvdDhdWaHwdREB/X7ZvtGvqWKhWSatya9+wu+M60k1RZYotry<span class="char escape_">\n</span>o0+M1YLqtEDNKTFXXom4+lefUxzG6n81JLJyYe8deIj5FJu394tuhoU5z3VIrvJW<span class="char escape_">\n</span>E7B7Y5miY5WeaU+59+7G6K/TdcOukZrOC3Psnozy0NueGROmC5VQr3KGY912i0Un<span class="char escape_">\n</span>7sz/mH7c9mJDYUO/f7Ok5enCnaJHAyFJUiFk57YlColQQs+PshtmIDHkg2U3pBoV<span class="char escape_">\n</span>ocWFNOKt0pX6Sh0k6tgoLPMg4A7O2MDX8/vW6yaHYAjkeeLmJMazZptP9ct38Brd<span class="char escape_">\n</span>2B+fA8Eh5YUragbN/Tnhe6k1Lx5huUJqdSkCggEAFSpGIAhoDUv0CbgsPRoylpp0<span class="char escape_">\n</span>O/Hjv/YWTB/1sy1rjPH4ZMawGDZweitjMC/DHsX8s+P1PUuZyw7Oabeo0wMv0C2J<span class="char escape_">\n</span>Z19AnEr54BaLjpdNnYu8rOzm/FsHzZRln3Elqd7+rTmkiQnKIcekSXivFYqe8l4L<span class="char escape_">\n</span>pTn6iKr81pta5OXMcbE7u4T3SXHqaEBulKNHJd7SBpFGsz+aRjs/ItF25RTnIL5r<span class="char escape_">\n</span>vRjso0+lfNJWejgReYY71XILRu+pbu1KE1F2+AUIos+rEIyf+Wa7Sy7YgCSx5RWr<span class="char escape_">\n</span>e09GGV+ES9pTiG2ML+qsynZhK3xJxch8g4PCXKSdUk7jjfhqI7MgGWoG7z9etA==<span class="char escape_">\n</span>-----END RSA PRIVATE KEY-----<span class="char escape_">\n</span>&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP(超文本传输协议)详解</title>
    <url>/blog/p/e6337b7f/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h2><ul>
<li>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。</li>
<li>HTTP协议采用了请求&#x2F;响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。</li>
<li>服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</li>
</ul>
<h2 id="HTTP-请求-x2F-响应的步骤"><a href="#HTTP-请求-x2F-响应的步骤" class="headerlink" title="HTTP 请求&#x2F;响应的步骤"></a>HTTP 请求&#x2F;响应的步骤</h2><ol>
<li><p>客户端连接到Web服务器</p>
<ul>
<li>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接</li>
</ul>
</li>
<li><p>发送HTTP请求</p>
<ul>
<li>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</li>
</ul>
</li>
<li><p>服务器接受请求并返回HTTP响应</p>
<ul>
<li>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。</li>
</ul>
</li>
<li><p>释放连接TCP连接</p>
<ul>
<li>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</li>
</ul>
</li>
<li><p>客户端浏览器解析HTML内容</p>
<ul>
<li>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。</li>
<li>解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。</li>
<li>客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</li>
</ul>
</li>
</ol>
<ul>
<li><strong>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</strong><ol>
<li>浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</li>
<li>解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;</li>
<li>浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</li>
<li>服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</li>
<li>释放 TCP连接;</li>
<li>浏览器将该 html 文本并显示内容;</li>
</ol>
</li>
</ul>
<h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><blockquote>
<p>HTTP&#x2F;1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：</p>
</blockquote>
<ul>
<li><p>GET</p>
<ul>
<li>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。</li>
</ul>
</li>
<li><p>HEAD</p>
<ul>
<li>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</li>
</ul>
</li>
<li><p>POST</p>
<ul>
<li>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</li>
</ul>
</li>
<li><p>PUT</p>
<ul>
<li>向指定资源位置上传其最新内容。</li>
</ul>
</li>
<li><p>DELETE</p>
<ul>
<li>请求服务器删除Request-URI所标识的资源。</li>
</ul>
</li>
<li><p>TRACE</p>
<ul>
<li>回显服务器收到的请求，主要用于测试或诊断。</li>
</ul>
</li>
<li><p>OPTIONS</p>
<ul>
<li>这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*‘来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</li>
</ul>
</li>
<li><p>CONNECT</p>
<ul>
<li>HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。</li>
</ul>
</li>
<li><p>注意事项：</p>
<ol>
<li>方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。</li>
<li>HTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。当然，所有的方法支持的实现都应当匹配下述的方法各自的语义定义。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。例如PATCH（由 RFC 5789 指定的方法）用于将局部修改应用到资源。</li>
</ol>
</li>
<li><p>请求方式: get与post请求</p>
<ol>
<li>GET提交的数据会放在URL之后，也就是请求行里面，以?分割URL和传输数据，参数之间以&amp;相连， POST方法是把提交的数据放在HTTP包的请求体中.</li>
<li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</li>
<li>GET与POST请求在服务端获取请求数据方式不同，就是我们自己在服务端取请求数据的时候的方式不同了</li>
</ol>
</li>
</ul>
<h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><ul>
<li>所有HTTP响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。</li>
</ul>
<h3 id="状态代码的第一个数字代表当前响应的类型"><a href="#状态代码的第一个数字代表当前响应的类型" class="headerlink" title="状态代码的第一个数字代表当前响应的类型"></a>状态代码的第一个数字代表当前响应的类型</h3><ul>
<li>1xx消息——请求已被服务器接收，继续处理</li>
</ul>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态消息</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>100</td>
<td>Continue(继续)</td>
<td>收到了请求的起始部分，客户端应该继续请求</td>
</tr>
<tr>
<td>101</td>
<td>Switching Protocols（切换协议）</td>
<td>服务器正根据客户端的指示将协议切换成Update Header列出的协议</td>
</tr>
</tbody></table>
<ul>
<li>2xx成功——请求已成功被服务器接收、理解、并接受</li>
</ul>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态消息</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td>服务器成功处理了请求（这个是我们见到最多的）</td>
</tr>
<tr>
<td>201</td>
<td>Created（已创建）</td>
<td>对于那些要服务器创建对象的请求来说，资源已创建完毕。</td>
</tr>
<tr>
<td>202</td>
<td>Accepted（已接受）</td>
<td>请求已接受， 但服务器尚未处理</td>
</tr>
<tr>
<td>203</td>
<td>Non-Authoritative Information（非权威信息）</td>
<td>服务器已将事务成功处理，只是实体Header包含的信息不是来自原始服务器，而是来自资源的副本。</td>
</tr>
<tr>
<td>204</td>
<td>No Content(没有内容)</td>
<td>Response中包含一些Header和一个状态行， 但不包括实体的主题内容（没有response body）</td>
</tr>
<tr>
<td>205</td>
<td>Reset Content(重置内容)</td>
<td>另一个主要用于浏览器的代码。意思是浏览器应该重置当前页面上所有的HTML表单。</td>
</tr>
<tr>
<td>206</td>
<td>Partial Content（部分内容）</td>
<td>部分请求成功</td>
</tr>
</tbody></table>
<ul>
<li>3xx重定向——需要后续操作才能完成这一请求</li>
</ul>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态消息</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>300</td>
<td>Multiple Choices（多项选择）</td>
<td>客户端请求了实际指向多个资源的URL。这个代码是和一个选项列表一起返回的，然后用户就可以选择他希望的选项了</td>
</tr>
<tr>
<td>301</td>
<td>Moved Permanently（永久移除)</td>
<td>请求的URL已移走。Response中应该包含一个Location URL, 说明资源现在所处的位置</td>
</tr>
<tr>
<td>302</td>
<td>Found（已找到）</td>
<td>与状态码301类似。但这里的移除是临时的。 客户端会使用Location中给出的URL，重新发送新的HTTP request</td>
</tr>
<tr>
<td>303</td>
<td>See Other（参见其他）</td>
<td>类似302</td>
</tr>
<tr>
<td>304</td>
<td>Not Modified（未修改）</td>
<td>客户的缓存资源是最新的， 要客户端使用缓存</td>
</tr>
<tr>
<td>305</td>
<td>Use Proxy（使用代理）</td>
<td>必须通过代理访问资源， 代理的地址在Response 的Location中</td>
</tr>
<tr>
<td>306</td>
<td>未使用</td>
<td>这个状态码当前没使用</td>
</tr>
<tr>
<td>307</td>
<td>Temporary Redirect（临时重定向）</td>
<td>类似302</td>
</tr>
</tbody></table>
<ul>
<li>4xx请求错误——请求含有词法错误或者无法被执行</li>
</ul>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态消息</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>400</td>
<td>Bad Request（坏请求）</td>
<td>告诉客户端，它发送了一个错误的请求。	状态码400</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized（未授权）</td>
<td>需要客户端对自己认证	HTTP协议之基本认证-401</td>
</tr>
<tr>
<td>402</td>
<td>Payment Required（要求付款）</td>
<td>这个状态还没被使用， 保留给将来用</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden（禁止）</td>
<td>请求被服务器拒绝了</td>
</tr>
<tr>
<td>404</td>
<td>Not Found（未找到）</td>
<td>未找到资源</td>
</tr>
<tr>
<td>405</td>
<td>Method Not Allowed（不允许使用的方法）</td>
<td>不支持该Request的方法</td>
</tr>
<tr>
<td>406</td>
<td>Not Acceptable（无法接受）</td>
<td></td>
</tr>
<tr>
<td>407</td>
<td>Proxy Authentication Required(要求进行代理认证)</td>
<td>与状态码401类似， 用于需要进行认证的代理服务器</td>
</tr>
<tr>
<td>408</td>
<td>Request Timeout（请求超时）</td>
<td>如果客户端完成请求时花费的时间太长， 服务器可以回送这个状态码并关闭连接</td>
</tr>
<tr>
<td>409</td>
<td>Conflict（冲突）</td>
<td>发出的请求在资源上造成了一些冲突</td>
</tr>
<tr>
<td>410</td>
<td>Gone（消失了）</td>
<td>服务器曾经有这个资源，现在没有了， 与状态码404类似</td>
</tr>
<tr>
<td>411</td>
<td>Length Required（要求长度指示）</td>
<td>服务器要求在Request中包含Content-Length。</td>
</tr>
<tr>
<td>412</td>
<td>Precondition Failed（先决条件失败）</td>
<td></td>
</tr>
<tr>
<td>413</td>
<td>Request Entity Too Large（请求实体太大）</td>
<td>客户端发送的实体主体部分比服务器能够或者希望处理的要大	状态码413</td>
</tr>
<tr>
<td>414</td>
<td>Request URI Too Long（请求URI太长）</td>
<td>客户端发送的请求所携带的URL超过了服务器能够或者希望处理的长度	状态码414</td>
</tr>
<tr>
<td>415</td>
<td>Unsupported Media Type（不支持的媒体类型）</td>
<td>服务器无法理解或不支持客户端所发送的实体的内容类型</td>
</tr>
<tr>
<td>416</td>
<td>Requested Range Not Satisfiable（所请求的范围未得到满足）</td>
<td></td>
</tr>
<tr>
<td>417</td>
<td>Expectation Failed（无法满足期望）</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>5xx服务器错误——服务器在处理某个正确请求时发生错误</li>
</ul>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态消息</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>500</td>
<td>Internal Server Error(内部服务器错误)</td>
<td>服务器遇到一个错误，使其无法为请求提供服务</td>
</tr>
<tr>
<td>501</td>
<td>Not Implemented（未实现）</td>
<td>客户端发起的请求超出服务器的能力范围(比如，使用了服务器不支持的请求方法)时，使用此状态码</td>
</tr>
<tr>
<td>502</td>
<td>Bad Gateway（网关故障）</td>
<td>代理使用的服务器遇到了上游的无效响应	状态码502</td>
</tr>
<tr>
<td>503</td>
<td>Service Unavailable（未提供此服务）</td>
<td>服务器目前无法为请求提供服务，但过一段时间就可以恢复服务</td>
</tr>
<tr>
<td>504</td>
<td>Gateway Timeout（网关超时）</td>
<td>与408类似， 但是响应来自网关或代理，此网关或代理在等待另一台服务器的响应时出现了超时</td>
</tr>
<tr>
<td>505</td>
<td>HTTP Version Not Supported（不支持的HTTP版本）</td>
<td>服务器收到的请求使用了它不支持的HTTP协议版本。 有些服务器不支持HTTP早期的HTTP协议版本，也不支持太高的协议版本</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="HTTP请求格式-请求协议"><a href="#HTTP请求格式-请求协议" class="headerlink" title="HTTP请求格式(请求协议)"></a>HTTP请求格式(请求协议)</h2><img src="/blog/p/e6337b7f/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E7%9A%84%E6%9E%84%E6%88%90.png" class="" title="请求报文的构成.png">

<h2 id="HTTP响应格式-响应协议"><a href="#HTTP响应格式-响应协议" class="headerlink" title="HTTP响应格式(响应协议)"></a>HTTP响应格式(响应协议)</h2><img src="/blog/p/e6337b7f/%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E7%9A%84%E6%9E%84%E6%88%90.png" class="" title="响应报文的构成.png">

]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hyperf</title>
    <url>/blog/p/cc1b7711/</url>
    <content><![CDATA[<p>第一次认识swoole是在学习游戏开发时，由于PHP是建立在C++程序基础上运行的，脚本执行效率相对较低，对于游戏这种天然高并发的场景而言，php绝不是第一选择。</p>
<p>但是就是在这时产生了Swoole，极高性能异步并发的网络通信框架，让我们也可以用PHP开发一款热门游戏，简直是雪中送炭，虽然现有项目没有游戏相关的，但是在我们产品中已经用上了基于Swoole的携程框架Hyperf。</p>
<p>开心😜~</p>
<span id="more"></span>

<h2 id="Hyperf"><a href="#Hyperf" class="headerlink" title="Hyperf"></a>Hyperf</h2><p>一款基于Swoole的携程框架</p>
<h2 id="使用前说明"><a href="#使用前说明" class="headerlink" title="使用前说明"></a>使用前说明</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>hyperf是长生命周期框架，下面的都是单例存储在进程中</p>
<ul>
<li>request</li>
<li>service</li>
</ul>
<p>长生命周期的数据()</p>
<ul>
<li>以单例注册到hyperf生命周期中，单例的成员变量也算</li>
</ul>
<p>短生命周期的数据</p>
<ul>
<li>写入上下文中 Context::set</li>
</ul>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>AOP必须通过DI创建，直接new不行</p>
<p>使用场景：<br>参数校验、<br>异常处理、<br>日志、<br>缓存、<br>连接池管理<br>安全控制、<br>事务处理、<br>资源池、<br>无侵入埋点、<br>无侵入监控、<br>性能统计、</p>
<h4 id="数据埋点"><a href="#数据埋点" class="headerlink" title="数据埋点"></a>数据埋点</h4><p>在特定情况下收集用户操作行为、数据</p>
<p>整理需求输出到文档，可以交给产品做PRD<br>埋点文档<br>待补充…</p>
<h2 id="开启Hyperf"><a href="#开启Hyperf" class="headerlink" title="开启Hyperf"></a>开启Hyperf</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nginx.conf</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> hyperf-project.com;</span><br><span class="line">    <span class="attribute">index</span>  index.php index.html;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment">#if (!-e $request_filename) &#123;</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:9501;</span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;keep-alive&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#hyperf</span></span><br><span class="line"><span class="attribute">php</span> bin/hyperf.php start</span><br></pre></td></tr></table></figure>

<h2 id="热重载"><a href="#热重载" class="headerlink" title="热重载"></a>热重载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#php ext</span></span><br><span class="line">brew install fswatch</span><br><span class="line"></span><br><span class="line">composer require hyperf/watcher --dev</span><br><span class="line">php bin/hyperf.php vendor:publish hyperf/watcher</span><br><span class="line"></span><br><span class="line"><span class="comment">#run</span></span><br><span class="line">php bin/hyperf.php server:watch</span><br></pre></td></tr></table></figure>
<h2 id="IDE使用注解功能"><a href="#IDE使用注解功能" class="headerlink" title="IDE使用注解功能"></a>IDE使用注解功能</h2><blockquote>
<p>IDE中搜索插件 <code>PHP Annotations</code> 安装重启即可</p>
</blockquote>
<h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer require hyperf/translation</span><br><span class="line">php bin/hyperf.php vendor:publish hyperf/translation</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">php bin<span class="regexp">/hyperf.php vendor:publish hyperf/</span>view</span><br></pre></td></tr></table></figure>
<h2 id="模型缓存-字段添加-Redis中页自动添加"><a href="#模型缓存-字段添加-Redis中页自动添加" class="headerlink" title="模型缓存 字段添加(Redis中页自动添加)"></a>模型缓存 字段添加(Redis中页自动添加)</h2><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># composer </span></span><br><span class="line">composer <span class="built_in">require</span> hyperf/model-cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># config/autoload/databases.php</span></span><br><span class="line"><span class="string">&#x27;cache&#x27;</span> =&gt; [</span><br><span class="line">    <span class="string">&#x27;handler&#x27;</span> =&gt; <span class="string">\Hyperf\ModelCache\Handler\RedisHandler::class,</span></span><br><span class="line">    <span class="string">&#x27;cache_key&#x27;</span> =&gt; <span class="string">&#x27;mc:%s:m:%s:%s:%s&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ttl&#x27;</span> =&gt; <span class="number">3600</span> * <span class="number">24</span>,</span><br><span class="line">    <span class="string">&#x27;empty_model_ttl&#x27;</span> =&gt; <span class="number">3600</span>,</span><br><span class="line">    <span class="string">&#x27;load_script&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;use_default_value&#x27;</span> =&gt; <span class="literal">false</span>, <span class="comment">#这里是重点，要添加该key</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听器</span></span><br><span class="line">Hyperf<span class="string">\DbConnection\Listener\InitTableCollectorListener::class</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mysql Table中添加字段后，生成新的模型</span></span><br><span class="line">php bin/hyperf.php gen:model</span><br><span class="line"></span><br><span class="line"><span class="comment"># FromCache获取即可</span></span><br></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常处理思路：</p>
<h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">composer require hyperf-<span class="keyword">ext/jwt</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">php <span class="keyword">bin/hyperf.php </span>vendor:publish hyperf-<span class="keyword">ext/jwt</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">php <span class="keyword">bin/hyperf.php </span>gen:<span class="keyword">jwt-secret</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">php <span class="keyword">bin/hyperf.php </span>gen:<span class="keyword">jwt-keypair</span></span><br></pre></td></tr></table></figure>

<h2 id="阿里云配置中心-ACM"><a href="#阿里云配置中心-ACM" class="headerlink" title="阿里云配置中心 ACM"></a>阿里云配置中心 ACM</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer require hyperf/config-aliyun-acm</span><br><span class="line"></span><br><span class="line">php bin/hyperf.php vendor:publish hyperf/config-aliyun-acm</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Swoole</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/blog/p/b132932/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><blockquote>
<p><a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></p>
</blockquote>
<p>vue官网基于 VitePress 和 @vue&#x2F;theme 建立</p>
<h2 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-archive --save</span><br><span class="line"></span><br><span class="line">config.yml &gt;</span><br><span class="line"><span class="symbol">    archive_generator:</span></span><br><span class="line"><span class="symbol">        enabled:</span> true <span class="meta">#是否开启</span></span><br><span class="line"><span class="symbol">        per_page:</span> <span class="number">10</span> <span class="meta">#每页数量</span></span><br><span class="line"><span class="symbol">        yearly:</span> true <span class="meta">#生成年度存档</span></span><br><span class="line"><span class="symbol">        monthly:</span> true <span class="meta">#生成每月存档</span></span><br><span class="line"><span class="symbol">        daily:</span> false <span class="meta">#生成每日存档</span></span><br><span class="line"><span class="symbol">        order_by:</span> -date <span class="meta">#默认排序按照日期降序</span></span><br></pre></td></tr></table></figure>

<h2 id="seo优化url"><a href="#seo优化url" class="headerlink" title="seo优化url"></a>seo优化url</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#编辑config.yml</span></span><br><span class="line"><span class="meta">##逻辑：执行hexo g 或者hexo server后 触发钩子before_post_render，判断文章的abbrlink属性是否存在，存在的略过，否则就生成连接</span></span><br><span class="line"><span class="symbol">permalink:</span> posts/:abbrlink/</span><br><span class="line"><span class="symbol">abbrlink:</span></span><br><span class="line"><span class="symbol">	alg:</span> crc32  <span class="meta">#support crc16(default) and crc32，crc16的最大帖子数为65535。</span></span><br><span class="line"><span class="symbol">	rep:</span> hex    <span class="meta">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure>


<h2 id="添加版权信息"><a href="#添加版权信息" class="headerlink" title="添加版权信息"></a>添加版权信息</h2><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">vim themes\<span class="keyword">next</span>\layout\_partials\footer.swig</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  粤ICP备 -</span></span><br><span class="line"><span class="language-xml">  </span><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.beian.miit.gov.cn&quot;</span>&gt;</span>18045940号-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="添加404-html"><a href="#添加404-html" class="headerlink" title="添加404.html"></a>添加404.html</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#source目录下添加404.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#_config.yml</span></span><br><span class="line">skip_render:</span><br><span class="line">  - <span class="string">&quot;404.html&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改vhost</span></span><br><span class="line">ErrorDocument <span class="number">404</span> /<span class="number">404.</span>html</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">div</span>&gt;</span><br><span class="line">  粤ICP备 -</span><br><span class="line">  &lt;<span class="keyword">a</span> href=<span class="string">&quot;http://www.beian.miit.gov.cn&quot;</span>&gt;<span class="number">18045940</span>号<span class="number">-2</span>&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h2><img src="/blog/p/b132932/%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1.jpg" class="" title="百度统计">

<h2 id="添加百度-x2F-谷歌-x2F-本地-自定义站点内容搜索-Local-Search"><a href="#添加百度-x2F-谷歌-x2F-本地-自定义站点内容搜索-Local-Search" class="headerlink" title="添加百度&#x2F;谷歌&#x2F;本地 自定义站点内容搜索(Local Search)"></a>添加百度&#x2F;谷歌&#x2F;本地 自定义站点内容搜索(Local Search)</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-searchdb</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#base _config.yml</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#themes _config.yml</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="加载本地图片"><a href="#加载本地图片" class="headerlink" title="加载本地图片"></a>加载本地图片</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image <span class="comment">--save</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#base _config.yml</span></span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#图片无法缩小，则加一层div包裹即可</span></span><br><span class="line">&lt;<span class="keyword">div</span> style=<span class="string">&quot;width:50%;margin:0 auto;&quot;</span>&gt;</span><br><span class="line">&#123;%asset_img <span class="string">&quot;拼手气红包.png&quot;</span> <span class="string">&quot;拼手气红包&quot;</span>%&#125;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">#当设置post_asset_folder为<span class="literal">true</span>参数后，在建立文件时(hexo <span class="keyword">new</span> pages <span class="string">&quot;test&quot;</span>)，</span><br><span class="line">Hexo会自动建立一个与文章同名的文件夹，可以把与该文章相关的所有资源都放到那个文件夹，</span><br><span class="line">文件中使用图片只需要</span><br><span class="line">    <span class="number">1</span>. 将图片保存至与文章名相关的文件夹中</span><br><span class="line">    <span class="number">2</span>. md文件中: &#123;%asset_img <span class="string">&quot;wenjianming.jpg&quot;</span> <span class="string">&quot;wenjianming.jpg&quot;</span>%&#125;</span><br><span class="line"></span><br><span class="line">如此一来，便可以更方便的使用资源。</span><br></pre></td></tr></table></figure>
<h3 id="学习-Jade"><a href="#学习-Jade" class="headerlink" title="学习 Jade"></a>学习 Jade</h3><blockquote>
<p><a href="https://blog.csdn.net/qq20004604/article/details/51773574" target="_blank" rel="noopener">https://blog.csdn.net/qq20004604/article/details/51773574</a></p>
</blockquote>
<h3 id="Aplayer-插件"><a href="#Aplayer-插件" class="headerlink" title="Aplayer 插件"></a>Aplayer 插件</h3><blockquote>
<p><a href="https://easyhexo.com/3-Plugins-use-and-config/3-1-hexo-tag-aplayer/#metingjs" target="_blank" rel="noopener">https://easyhexo.com/3-Plugins-use-and-config/3-1-hexo-tag-aplayer/#metingjs</a></p>
</blockquote>
<p>hexo-tag-aplayer (opens new window)是 APlayer (opens new window)播放器的 Hexo 标签插件，可以十分方便地在文章内插入音乐播放器。</p>
<h3 id="Dplayer-插件"><a href="#Dplayer-插件" class="headerlink" title="Dplayer 插件"></a>Dplayer 插件</h3><blockquote>
<p><a href="https://easyhexo.com/3-Plugins-use-and-config/3-2-hexo-tag-dplayer/" target="_blank" rel="noopener">https://easyhexo.com/3-Plugins-use-and-config/3-2-hexo-tag-dplayer/</a></p>
</blockquote>
<p>hexo-tag-dplayer (opens new window)是 APlayer (opens new window)播放器的 Hexo 标签插件，可以十分方便地在文章内插入视频播放器。</p>
<h3 id="其他好看的网站"><a href="#其他好看的网站" class="headerlink" title="其他好看的网站"></a>其他好看的网站</h3><p><a href="https://docsify.js.org/#/zh-cn/" target="_blank" rel="noopener">https://docsify.js.org/#/zh-cn/</a></p>
<p><a href="https://probberechts.github.io/hexo-theme-cactus/cactus-white/public/" target="_blank" rel="noopener">https://probberechts.github.io/hexo-theme-cactus/cactus-white/public/</a></p>
<p><a href="https://alili.tech/archive/" target="_blank" rel="noopener">https://alili.tech/archive/</a></p>
<p><a href="https://blogs.nearsyh.me/2020/12/26/2020-12-26-Hexo-Theme-Tweaking/" target="_blank" rel="noopener">https://blogs.nearsyh.me/2020/12/26/2020-12-26-Hexo-Theme-Tweaking/</a></p>
<p><a href="https://jiaohongwei.github.io/tags/" target="_blank" rel="noopener">https://jiaohongwei.github.io/tags/</a></p>
<p><a href="https://jiaohongwei.github.io/" target="_blank" rel="noopener">https://jiaohongwei.github.io/</a></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">page.posts</span><br><span class="line">page.tag</span><br><span class="line">page.category</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看对象所有的实体 </span></span><br><span class="line">!= JSON.stringify(years[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看js数据类型</span></span><br><span class="line"><span class="regexp">//</span> - var a = typeof posts</span><br><span class="line"><span class="regexp">//</span> != a</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">- postData.sort(<span class="keyword">function</span> (a, b) &#123;</span><br><span class="line">    <span class="regexp">//</span> - return new Date(a.date) - new Date(b.date);<span class="regexp">//</span>升序</span><br><span class="line">    - return new Date(b.date) - new Date(a.date);<span class="regexp">//</span>降序</span><br><span class="line">-&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个category：name-_id-slug-path-permalink-posts-length-_model-_schema</span></span><br><span class="line">- var categorys = site.categories;</span><br><span class="line">- categorys.each(<span class="keyword">function</span>(item) &#123;</span><br><span class="line">    - categorysData.push(item);</span><br><span class="line">- &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># posts data-length-_model-_schema-size-each-random</span></span><br><span class="line">- var posts = site.posts;</span><br><span class="line"><span class="comment"># 单个post：title-description-abbrlink-keywords-date-updated-</span></span><br><span class="line">        <span class="regexp">//</span>      _content-source-raw-slug-published-_id-</span><br><span class="line">        <span class="regexp">//</span>      comments-layout-photos-link-content-site-excerpt-more-path-</span><br><span class="line">        <span class="regexp">//</span>      permalink-full_source-asset_dir-tags-categories-</span><br><span class="line">        <span class="regexp">//</span>      prev-__post-_model-_schema-setTags-setCategories</span><br><span class="line"></span><br><span class="line"><span class="comment"># tags: data-length-_model-_schema-size-each-random</span></span><br><span class="line"><span class="comment"># 单个tag：name-_id-slug-path-permalink-posts-length-_model-_schema</span></span><br><span class="line">- var tags = site.tags;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/blog/p/cc1b9611/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="number">1.</span><span class="type">JavaScript</span>于<span class="type">Java</span>无关</span><br><span class="line">    <span class="number">2.</span>&lt;script&gt;代码块，告诉浏览器这是需要处理的脚本代码，不是显示的<span class="type">HTML</span>&lt;/script&gt;</span><br><span class="line">    <span class="number">3.</span><span class="type">DHTML</span>(<span class="type">Dynamic</span> <span class="type">HTML</span>)，动态html(<span class="type">HTML</span> + <span class="type">CSS</span> + <span class="type">JavaScript</span>)</span><br><span class="line">    <span class="number">4.</span><span class="type">JavaScript</span>的实现由三个部分：</span><br><span class="line">        <span class="type">ECMAScript</span>：遵循<span class="type">ECMA</span>-<span class="number">262</span>标准化的脚本语言</span><br><span class="line">        <span class="type">DOM</span>(document <span class="keyword">object</span> model)：文档对象模型(页面上所有元素由树形数据结构中的对象构成，页面中的图片、链接等是数组方式存储)</span><br><span class="line">        <span class="type">BOM</span>(browser <span class="keyword">object</span> model)：浏览器对象模型。整个窗口是对象树的顶层</span><br><span class="line">            window窗口-&gt;</span><br><span class="line">                -&gt;navigator导航器</span><br><span class="line">                -&gt;frames帧框架</span><br><span class="line">                -&gt;document文档</span><br><span class="line">                -&gt;history历史记录</span><br><span class="line">                -&gt;location位置</span><br><span class="line">                -&gt;screen显示器</span><br><span class="line">    <span class="number">5.</span>匈牙利命名法：变量名=属性+类型+对象描述</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="number">1</span>.js数据类型： <span class="number">9</span>种</span><br><span class="line">        未定义(<span class="name">Undefined</span>)、空(<span class="name">Null</span>)、布尔型(<span class="name">Boolean</span>)、字符串(<span class="name">String</span>)、数值(<span class="name">Number</span>)、对象(<span class="name">Object</span>)、</span><br><span class="line">        引用(<span class="name">Reference</span>)、列表(<span class="name">List</span>)、完成(<span class="name">Completion</span>)</span><br><span class="line">        后三种是js运行结果才会出现的类型</span><br><span class="line">    <span class="number">2</span>.字符串命名</span><br><span class="line">        var test = <span class="string">&quot;test&quot;</span><span class="comment">;</span></span><br><span class="line">        var test = &#x27;test&#x27;;</span><br><span class="line">        var test = new String(<span class="name">&#x27;test&#x27;</span>)<span class="comment">;</span></span><br><span class="line">        + 对于字符串是拼接的功能</span><br><span class="line">    <span class="number">3</span>.字符串操作</span><br><span class="line">        获取字符串长度 test.length</span><br><span class="line">        字符串大小写转换 test.toLowerCase()<span class="comment">;小 test.toUpperCase();大</span></span><br><span class="line">        获取字符的Unicode编码 test.charCodeAt(<span class="number">2</span>)<span class="comment">;</span></span><br><span class="line">        获取Unicode编码所对应的字符串</span><br><span class="line">            var str = String.fromCharCode(<span class="number">72</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">111</span>)<span class="comment">;</span></span><br><span class="line">            //str == &#x27;hello&#x27;</span><br><span class="line">    <span class="number">4</span>.数值类型：正数、负数、指数类型(<span class="number">5</span>/<span class="number">12</span>/<span class="number">-5</span>/<span class="number">2</span>e5)</span><br><span class="line">    <span class="number">5</span>.布尔型操作</span><br><span class="line">        转换字符串 test.toString()<span class="comment">;</span></span><br><span class="line">    <span class="number">6</span>.类型转换</span><br><span class="line">        转换成字符串</span><br><span class="line">            <span class="number">1</span>.ECMAScript的Boolean/数值/和字符串 都可以转成字符串</span><br><span class="line">            <span class="number">2</span>.Boolean的toString()只是输出<span class="literal">true</span> 或 <span class="literal">false</span> 结果由变量的值决定</span><br><span class="line">            <span class="number">3</span>.Number的toString(),加参数<span class="number">2</span>、<span class="number">8</span>、<span class="number">16</span>则是基模式，输出进制数</span><br><span class="line">        转换成数字</span><br><span class="line">            parseInt()<span class="comment">;</span></span><br><span class="line">            parseFloat()<span class="comment">;</span></span><br><span class="line">    <span class="number">7</span>.数组</span><br><span class="line">        获取数组元素个数 test.length</span><br><span class="line">        删除数组中的第一个元素并返回该元素的值 test.shift()<span class="comment">;</span></span><br><span class="line">        unshift()<span class="comment">;</span></span><br><span class="line">        push()<span class="comment">;</span></span><br><span class="line">        pop()<span class="comment">;</span></span><br><span class="line">        返回链接两个或者多个数组的副本 test.concat()<span class="comment">;</span></span><br><span class="line">    条件语句</span><br><span class="line">        for(变量 in 对象)</span><br><span class="line"></span><br><span class="line">    时间日期</span><br><span class="line">        var myDate = new Date()<span class="comment">;</span></span><br><span class="line">        获取当前时间 Date()<span class="comment">;</span></span><br><span class="line">        返回毫秒数getTime()<span class="comment">;</span></span><br><span class="line">        var myDate = new Date()<span class="comment">;</span></span><br><span class="line">        console.log(<span class="name">myDate.getDate</span>())<span class="comment">;日</span></span><br><span class="line">        console.log(<span class="name">myDate.getDay</span>())<span class="comment">;星期</span></span><br><span class="line">        console.log(<span class="name">myDate.getFullYear</span>())<span class="comment">;年</span></span><br><span class="line">    数学计算：MATH对象</span><br><span class="line">        Math.PI</span><br><span class="line">        Math.round 四舍五入</span><br><span class="line">        Math.random 范围内取随机数</span><br><span class="line">        Math.max 取两个数中较大的数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BOM基础"><a href="#BOM基础" class="headerlink" title="BOM基础"></a>BOM基础</h2><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    window对象</span><br><span class="line">        常用函数</span><br><span class="line">            alert()<span class="comment">;弹出消息对话框</span></span><br><span class="line">            confirm(<span class="name"><span class="built_in">str</span></span>)<span class="comment">;弹出消息对话框，ok，cancel按钮</span></span><br><span class="line">                单击ok时，返回<span class="literal">true</span>,单击Cancel按钮时，返回<span class="literal">false</span></span><br><span class="line">                if(<span class="name">confirm</span>(<span class="string">&quot;是否继续?&quot;</span>))&#123;</span><br><span class="line">                    //确认</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    //取消</span><br><span class="line">                &#125;</span><br><span class="line">            prompt(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>)<span class="comment">;弹出消息对话框，ok，cancel按钮，文本输入框</span></span><br><span class="line">                var sResult = prompt(<span class="string">&quot;请在下面输入你的姓名&quot;</span>, <span class="string">&quot;默认值&quot;</span>)<span class="comment">;</span></span><br><span class="line">                if (<span class="name">sResult</span> != null) &#123;</span><br><span class="line">                    alert(<span class="string">&quot;输入了内容&quot;</span>)<span class="comment">;</span></span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    alert(<span class="string">&quot;点击了取消&quot;</span>)<span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">    document对象(<span class="name">body/cookie</span>等属性,close/getElementById等方法)</span><br><span class="line">    location对象，存在于 window和document当中</span><br><span class="line">    navigator对象 包含有关访问者浏览器的信息</span><br><span class="line">        userAgent包含浏览器版本等信息的字符串</span><br><span class="line">        cookieEnabled是否开启cookie</span><br><span class="line">    screen对象</span><br><span class="line">        availHeight 窗口可以使用的屏幕高度，单位像素</span><br><span class="line">        availWidth 窗口可以使用的屏幕宽度，单位像素</span><br><span class="line">        colorDepth 用户浏览器的颜色位数</span><br><span class="line">        pixelDepth 用户浏览器的颜色位数</span><br><span class="line">        height 屏幕的高度，单位像素</span><br><span class="line">        width 屏幕的宽度，单位像素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript应用环境"><a href="#JavaScript应用环境" class="headerlink" title="JavaScript应用环境"></a>JavaScript应用环境</h2><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    宿主环境(<span class="name">host</span> environment)</span><br><span class="line">        外壳程序(<span class="name">shell</span>)和Web浏览器</span><br><span class="line">    运行期环境</span><br><span class="line">        JavaScript引擎内建</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">可以通过document.form1.input1获取该元素</span><br><span class="line">&lt;form <span class="type">name</span>=&quot;form1&quot;&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=&quot;text&quot; <span class="type">name</span>=&quot;input1&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h2><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ①<span class="number">1</span><span class="number">-9</span>/<span class="number">1</span><span class="number">-9</span></span><br><span class="line">    ②如果里面的大于外循环的值则跳过</span><br><span class="line">    for (<span class="name"><span class="built_in">var</span></span> i = <span class="number">1</span><span class="comment">; i &lt;= 9; i++) &#123;</span></span><br><span class="line">        document.write(<span class="string">&quot;&lt;br&gt;&quot;</span>)<span class="comment">;</span></span><br><span class="line">        for (<span class="name"><span class="built_in">var</span></span> j = <span class="number">1</span><span class="comment">; j &lt;= 9; j++) &#123;</span></span><br><span class="line">            if (<span class="name">j</span> &gt; i) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            document.write(<span class="name">j</span> + <span class="string">&quot;x&quot;</span> + i + <span class="string">&quot;=&quot;</span> + i * j + <span class="string">&quot;&amp;nbsp;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="chrome浏览器支持断点调试以及变量监测"><a href="#chrome浏览器支持断点调试以及变量监测" class="headerlink" title="chrome浏览器支持断点调试以及变量监测"></a>chrome浏览器支持断点调试以及变量监测</h2><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &lt;div style=<span class="string">&quot;color: red;&quot;</span>&gt;</span><br><span class="line">        <span class="comment">//行内式</span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">//导入式</span></span><br><span class="line">        @import <span class="string">&quot;test.css&quot;</span>;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">//内嵌式</span></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">    选择器：&#123;</span><br><span class="line">        标签选择器/标记选择器 h1 h2 body</span><br><span class="line">        类别选择器 .<span class="keyword">test</span>&#123;&#125;  <span class="keyword">class</span>=<span class="string">&quot;test&quot;</span></span><br><span class="line">        <span class="built_in">id</span>选择器 #<span class="keyword">test</span>&#123;&#125; <span class="built_in">id</span>=<span class="string">&quot;test&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    盒子模型&#123;</span><br><span class="line">        盒子高度 = 内容 + padding(内边距) + border + margin(外边距)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    浮动定位<span class="keyword">float</span>&#123;</span><br><span class="line">        默认状态 多个div会换行,多个span会在一行</span><br><span class="line">        position:(</span><br><span class="line">        默认<span class="keyword">static</span></span><br><span class="line">        |relative偏离某个距离</span><br><span class="line">        |absolute脱离文档流</span><br><span class="line">        |<span class="keyword">fixed</span>悬浮，不随滚动条变化</span><br><span class="line">        |<span class="keyword">inherit</span>从上级元素继承得到</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DOM模型"><a href="#DOM模型" class="headerlink" title="DOM模型"></a>DOM模型</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    节点&#123;</span><br><span class="line">        间接引用节点</span><br><span class="line">            element.parentNode 引用父节点</span><br><span class="line">            element.childNodes 返回所有的子节点的数组</span><br><span class="line">            element.nextSibling 对下一个兄弟节点的引用</span><br><span class="line">            element.nextPreviousSibling 对上一个兄弟节点的引用</span><br><span class="line">        获得节点信息</span><br><span class="line">            nodeName 获得节点名称</span><br><span class="line">            nodeType 获得节点类型&#123;</span><br><span class="line">                元素element ==》<span class="number">1</span></span><br><span class="line">                属性attr ==》<span class="number">2</span></span><br><span class="line">                文本text ==》<span class="number">3</span></span><br><span class="line">                注释comments ==》<span class="number">8</span></span><br><span class="line">                文档document ==》 <span class="number">9</span></span><br><span class="line">            &#125;</span><br><span class="line">            nodeValue 获得节点的值</span><br><span class="line">            hasChildNodes 判断是否存在子节点</span><br><span class="line">            tagName 获得标记名称</span><br><span class="line">        处理节点信息</span><br><span class="line">            elementNode.set<span class="constructor">Attribute(<span class="params">attributeName</span>,<span class="params">attributeValue</span>)</span> 设置元素节点的属性</span><br><span class="line">            elementNode.get<span class="constructor">Attribute(<span class="params">attributeName</span>)</span> 获取属性值</span><br><span class="line">        处理文本节点</span><br><span class="line">            innerHTML 设置或返回节点开始和结束标签之间的html(设置的话将全部元素都会替换)</span><br><span class="line">            innerText 设置或返回开始合结束标签之间的文本，不包括HTML标签</span><br><span class="line">        文档层级结构相关</span><br><span class="line">            document.create<span class="constructor">Element()</span> 创建元素节点</span><br><span class="line">            document.create<span class="constructor">TextNode()</span> 创建文本节点</span><br><span class="line">            appendChild 添加子节点</span><br><span class="line">            insertBefore 插入子节点，在refNode节点前插入newNode节点</span><br><span class="line">            replaceChild 取代子节点，oldNode必须是parentNode的子节点</span><br><span class="line">            cloneNode 复制节点 includeChildren为<span class="built_in">bool</span>，表示是否复制其子节点</span><br><span class="line">            removeChild 删除子节点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    var test1 = document.create<span class="constructor">Element(<span class="string">&quot;p&quot;</span>)</span>; 创建元素节点</span><br><span class="line">    var test2 = document.create<span class="constructor">TextNode(<span class="string">&quot;你好&quot;</span>)</span>; 创建文本节点</span><br><span class="line">    test1.append<span class="constructor">Child(<span class="params">test2</span>)</span>; 添加子节点</span><br><span class="line">    document.body.append<span class="constructor">Child(<span class="params">test1</span>)</span>; 添加子节点</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="表格与表单"><a href="#表格与表单" class="headerlink" title="表格与表单"></a>表格与表单</h2><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    table&gt;summary(表格内容的摘要)&gt;caption表标题&gt;tr&gt;th标头&gt;td(顺序由大到小)</span><br><span class="line">    colspan=<span class="string">&quot;2&quot;</span>合并单元格</span><br><span class="line">    动态添加表格&#123;</span><br><span class="line">        createTextNode 文本节点</span><br><span class="line">        createElement(<span class="string">&quot;td&quot;</span>)<span class="comment">;</span></span><br><span class="line">        createElement(<span class="string">&quot;tr&quot;</span>)<span class="comment">;</span></span><br><span class="line">        使用appendChild将下文本嵌入到上节点中</span><br><span class="line">        document.getElementById(<span class="string">&quot;table1&quot;</span>).appendChild(<span class="name">trNode</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        insertCell</span><br><span class="line">        insertRow</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable"></span></span><br><span class="line"><span class="template-variable">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    选择元素&#123;</span><br><span class="line">        $(<span class="string">&quot;#showDiv&quot;</span>)<span class="comment">; id选择器</span></span><br><span class="line">        $(<span class="string">&quot;OneClass&quot;</span>)<span class="comment">; 所有节点中的OneClass类</span></span><br><span class="line">        $(<span class="string">&quot;p:odd&quot;</span>)/$(<span class="string">&quot;p:even&quot;</span>)<span class="comment">;选择奇偶行数中 p 标签</span></span><br><span class="line">        $(<span class="string">&quot;td:nth-child(1)&quot;</span>) 选择表格中的第一个单元格</span><br><span class="line">        $(<span class="string">&quot;div&gt;d&quot;</span>) 选择div下的所有子元素d,不包括子孙元素</span><br><span class="line">        $(<span class="string">&quot;a[href$=pdf]&quot;</span>) 选择所有超链接属性为“pdf”的href</span><br><span class="line">        $(<span class="string">&quot;div:has(div)&quot;</span>) 选取至少包括一个子div的div元素</span><br><span class="line">    &#125;</span><br><span class="line">    功能函数&#123;</span><br><span class="line">        $.trim:去除首位的空格</span><br><span class="line">        $(<span class="name">document</span>).ready(<span class="name">function</span>()&#123;&#125;) 解决windows.onload函数的冲突</span><br><span class="line">        $(<span class="string">&quot;代码块&quot;</span>) $创建DOM元素</span><br><span class="line">        $.fn.extend 自定义扩展</span><br><span class="line">        $j 之后使用 可以避免与其他JavaScript库冲突</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $().each() 遍历元素</span><br><span class="line">    $().attr() 获取属性值</span><br><span class="line">    $().attr(<span class="name"><span class="built_in">name</span></span>,value) 设置属性值</span><br><span class="line">    $().removeAttr() 删除属性值</span><br><span class="line">    $().addClass 给一个元素添加一个或者多个类名</span><br><span class="line">    $().toggleClass() 删除、添加之间切换，操作类名</span><br><span class="line">    $().css 设置元素样式</span><br><span class="line">    $().HTML 获取元素的纯文本内容</span><br><span class="line">    $().text 获取元素不含html实体的内容</span><br><span class="line">    $().val 获取表单的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="jQuery动画与特效"><a href="#jQuery动画与特效" class="headerlink" title="jQuery动画与特效"></a>jQuery动画与特效</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">hide</span>(<span class="number">100</span>,callback function)隐藏</span><br><span class="line">    <span class="built_in">show</span>(<span class="number">100</span>,callback function)显示</span><br><span class="line">    <span class="built_in">toggle</span>(<span class="number">100</span>,callback function) 自定显隐变换</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fadeOut</span>(); 淡出，隐藏</span><br><span class="line">    <span class="built_in">fadeIn</span>(); 淡入，显示</span><br><span class="line">    <span class="built_in">fadeTo</span>(speed,opacity,callback); 自定义变换目标透明度</span><br><span class="line"></span><br><span class="line">    <span class="built_in">slideUp</span>(); 幻灯片效果，隐藏</span><br><span class="line">    <span class="built_in">slideDown</span>(); 幻灯片效果，显示</span><br><span class="line"></span><br><span class="line">    <span class="built_in">shop</span>() 停止动画</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="jQuery功能函数"><a href="#jQuery功能函数" class="headerlink" title="jQuery功能函数"></a>jQuery功能函数</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    浏览器的检测&#123;</span><br><span class="line">        $.browser.<span class="literal">[&#x27;关键字&#x27;]</span></span><br><span class="line">    &#125;</span><br><span class="line">    数组和对象的操作&#123;</span><br><span class="line">        $.make<span class="constructor">Array(<span class="params">object</span>)</span> 将类数组对象转为数组对象</span><br><span class="line">        $.merge<span class="literal">()</span> 合并数组</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>ceil 四舍五入为正数、随机数</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor 向下舍入</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>round 四舍五入</span><br><span class="line">        <span class="constructor">$()</span>.text<span class="literal">()</span>.substr<span class="literal">()</span>;截取字符串</span><br><span class="line">        <span class="constructor">$()</span>.text<span class="literal">()</span>.replace<span class="literal">()</span>;替换字符串</span><br><span class="line"></span><br><span class="line">        url 操作 &#123;</span><br><span class="line">            $.param(<span class="keyword">object</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $.is<span class="constructor">Array()</span></span><br><span class="line"></span><br><span class="line">        过滤数据: $.grep(<span class="built_in">array</span>,fn)</span><br><span class="line">        转化数据: $.map(<span class="built_in">array</span>,fn)</span><br><span class="line">        搜索数组数据: $.<span class="keyword">in</span><span class="constructor">Array(<span class="params">value</span>,<span class="params">array</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    获取外部代码&#123;</span><br><span class="line">        $.get<span class="constructor">Scrip(<span class="params">url</span>,<span class="params">callback</span>)</span>实现外部代码的加载</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jQuery访问原生属性和方法&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="jQuery与ajax的综合运用"><a href="#jQuery与ajax的综合运用" class="headerlink" title="jQuery与ajax的综合运用"></a>jQuery与ajax的综合运用</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable"></span></span><br><span class="line"><span class="template-variable">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">JAVASCRIPT正则表达式集 :</span><br><span class="line">　　验证数字：^<span class="comment">[0-9]</span>*$</span><br><span class="line">　　验证n位的数字：^\d&#123;n&#125;$</span><br><span class="line">　　验证至少n位数字：^\d&#123;n,&#125;$</span><br><span class="line">　　验证m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line">　　验证零和非零开头的数字：^(0|<span class="comment">[1-9]</span><span class="comment">[0-9]</span>*)$</span><br><span class="line">　　验证有两位小数的正实数：^<span class="comment">[0-9]</span>+(.<span class="comment">[0-9]</span>&#123;2&#125;)?$</span><br><span class="line">　　验证有1-3位小数的正实数：^<span class="comment">[0-9]</span>+(.<span class="comment">[0-9]</span>&#123;1,3&#125;)?$</span><br><span class="line">　　验证非零的正整数：^\+?<span class="comment">[1-9]</span><span class="comment">[0-9]</span>*$</span><br><span class="line">　　验证非零的负整数：^\-<span class="comment">[1-9]</span><span class="comment">[0-9]</span>*$</span><br><span class="line">　　验证非负整数（正整数 + 0） ^\d+$</span><br><span class="line">　　验证非正整数（负整数 + 0） ^((-\d+)|(0+))$</span><br><span class="line">　　验证长度为3的字符：^.&#123;3&#125;$</span><br><span class="line">　　验证由26个英文字母组成的字符串：^<span class="comment">[A-Za-z]</span>+$</span><br><span class="line">　　验证由26个大写英文字母组成的字符串：^<span class="comment">[A-Z]</span>+$</span><br><span class="line">　　验证由26个小写英文字母组成的字符串：^<span class="comment">[a-z]</span>+$</span><br><span class="line">　　验证由数字和26个英文字母组成的字符串：^<span class="comment">[A-Za-z0-9]</span>+$</span><br><span class="line">　　验证由数字、26个英文字母或者下划线组成的字符串：^\w+$</span><br><span class="line">　　验证用户密码:^<span class="comment">[a-zA-Z]</span>\w&#123;5,17&#125;$ 正确格式为：以字母开头，长度在6-18之间，只能包含字符、数字和下划线。</span><br><span class="line">　　验证是否含有 ^%&amp;&#x27;,;=?$\<span class="string">&quot; 等字符：<span class="subst">[^%&amp;&#x27;,;=?$\x22]</span>+</span></span><br><span class="line"><span class="string">　　验证汉字：^<span class="subst">[\u4e00-\u9fa5]</span>,&#123;0,&#125;$</span></span><br><span class="line"><span class="string">　　验证Email地址：^\w+<span class="subst">[-+.]</span>\w+)*@\w+(<span class="subst">[-.]</span>\w+)*\.\w+(<span class="subst">[-.]</span>\w+)*$</span></span><br><span class="line"><span class="string">　　验证InternetURL：^http://(<span class="subst">[\w-]</span>+\.)+<span class="subst">[\w-]</span>+(/<span class="subst">[\w-./?%&amp;=]</span>*)?$ ；^<span class="subst">[a-zA-z]</span>+://(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$</span></span><br><span class="line"><span class="string">　　验证电话号码：^(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-)?\d&#123;7,8&#125;$：--正确格式为：XXXX-XXXXXXX，XXXX-XXXXXXXX，XXX-XXXXXXX，XXX-XXXXXXXX，XXXXXXX，XXXXXXXX。</span></span><br><span class="line"><span class="string">　　验证身份证号（15位或18位数字）：^\d&#123;15&#125;|\d&#123;&#125;18$</span></span><br><span class="line"><span class="string">　　验证一年的12个月：^(0?<span class="subst">[1-9]</span>|1<span class="subst">[0-2]</span>)$ 正确格式为：“01”-“09”和“1”“12”</span></span><br><span class="line"><span class="string">　　验证一个月的31天：^((0?<span class="subst">[1-9]</span>)|((1|2)<span class="subst">[0-9]</span>)|30|31)$ 正确格式为：01、09和1、31。</span></span><br><span class="line"><span class="string">　　整数：^-?\d+$</span></span><br><span class="line"><span class="string">　　非负浮点数（正浮点数 + 0）：^\d+(\.\d+)?$</span></span><br><span class="line"><span class="string">　　正浮点数 ^((<span class="subst">[0-9]</span>+\.<span class="subst">[0-9]</span>*<span class="subst">[1-9]</span><span class="subst">[0-9]</span>*)|(<span class="subst">[0-9]</span>*<span class="subst">[1-9]</span><span class="subst">[0-9]</span>*\.<span class="subst">[0-9]</span>+)|(<span class="subst">[0-9]</span>*<span class="subst">[1-9]</span><span class="subst">[0-9]</span>*))$</span></span><br><span class="line"><span class="string">　　非正浮点数（负浮点数 + 0） ^((-\d+(\.\d+)?)|(0+(\.0+)?))$</span></span><br><span class="line"><span class="string">　　负浮点数 ^(-((<span class="subst">[0-9]</span>+\.<span class="subst">[0-9]</span>*<span class="subst">[1-9]</span><span class="subst">[0-9]</span>*)|(<span class="subst">[0-9]</span>*<span class="subst">[1-9]</span><span class="subst">[0-9]</span>*\.<span class="subst">[0-9]</span>+)|(<span class="subst">[0-9]</span>*<span class="subst">[1-9]</span><span class="subst">[0-9]</span>*)))$</span></span><br><span class="line"><span class="string">　　浮点数 ^(-?\d+)(\.\d+)?$</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>K8s学习并实践云原生技术</title>
    <url>/blog/p/41057579/</url>
    <content><![CDATA[<p>是时机开始学习分布式相关的技能了，这篇是关于K8s相关的内容，慢慢补充…</p>
<span id="more"></span>

<h1 id="学习并实践云原生技术"><a href="#学习并实践云原生技术" class="headerlink" title="学习并实践云原生技术"></a>学习并实践云原生技术</h1><p>基础知识：CNCF X Alibaba云与安生技术公开课 -&gt; 第三讲：Kubernetes 核心概念</p>
<p>K8s可以管理成百上千个容器组成的应用程序，在物理虚拟机、云环境、混合部署环境等不同环境中管理</p>
<h2 id="K8S解决了哪些问题？"><a href="#K8S解决了哪些问题？" class="headerlink" title="K8S解决了哪些问题？"></a>K8S解决了哪些问题？</h2><p>微服务的兴起导致增加容器技术的使用，因为容器实际上为微服务等小型独立应用程序提供了完美的宿主</p>
<p>K8s</p>
<ul>
<li>高可用</li>
<li>可伸缩性</li>
<li>灾难恢复</li>
</ul>
<p>容器编排工具的实际任务是什么？</p>
<h2 id="1-如何创建k8s集群与应用"><a href="#1-如何创建k8s集群与应用" class="headerlink" title="1. 如何创建k8s集群与应用"></a>1. 如何创建k8s集群与应用</h2><h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>方式1：</p>
<ol>
<li>minikube 不适用生产环境</li>
</ol>
<ul>
<li>社区版 <code>https://minikube.sigs.k8s.io/</code></li>
<li>中国版 <code>https://developer.aliyun.com/article/221687</code></li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">启动集群：minikube start</span><br><span class="line">插件系统：minikube addons list</span><br><span class="line">Dashboard界面：minikube dashboard</span><br><span class="line">插件集群状态：minikube status</span><br><span class="line"></span><br><span class="line"><span class="comment"># K8S</span></span><br><span class="line">alias <span class="attribute">k</span>=kubectl</span><br><span class="line">kubectl cluster-<span class="built_in">info</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启服务</span></span><br><span class="line">k apply -f ./k8s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除服务</span></span><br><span class="line">k delete -f ./k8s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有 pod</span></span><br><span class="line">k <span class="built_in">get</span> pods</span><br><span class="line"></span><br><span class="line">minikube ssh</span><br><span class="line">cd build</span><br><span class="line">docker load xxxx</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>阿里云ACK快速创建<br>标准集群</li>
</ol>
<h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><ol>
<li><p>应用访问(内外)问题<br>解决方案：设置一个Server</p>
</li>
<li><p>应用之间的依赖关系：nginx-&gt;php<br>解决方案：设置参数后，pod不断重启，如果最后还是检测到失败则整体失败</p>
</li>
<li><p>应用嗅探其他应用是否存活<br>解决方案：yaml-&gt;server-&gt;containers-&gt;配置 readinessProbe 以及 livenessProbe</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">readinessProbe:</span></span><br><span class="line"><span class="symbol">  tcpSocket:</span></span><br><span class="line"><span class="symbol">    port:</span><span class="number">8888</span></span><br><span class="line"><span class="symbol">  initialDelaySeconds:</span><span class="number">5</span></span><br><span class="line"><span class="symbol">  periodSeconds:</span><span class="number">10</span></span><br><span class="line"><span class="symbol">livenessProbe:</span></span><br><span class="line"><span class="symbol">  tcpSocket:</span></span><br><span class="line"><span class="symbol">    port:</span><span class="number">8888</span></span><br><span class="line"><span class="symbol">  initialDelaySeconds:</span>`<span class="number">5</span></span><br><span class="line"><span class="symbol">  periodSeconds:</span><span class="number">20</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>应用数据存储问题<br>    数据(持久化存储) -<br>    日志</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>一个k8s</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/k8s</span><br><span class="line">    /mysql.yaml</span><br><span class="line">        kind:Service <span class="comment">#</span></span><br><span class="line">        kind:PersistentVolumeClaim <span class="comment">#数据持久化</span></span><br><span class="line">        kind:Deployment <span class="comment">#项目配置启动</span></span><br><span class="line">            环境变量</span><br><span class="line">            镜像</span><br><span class="line">            应用嗅探</span><br><span class="line">    /redis.yaml</span><br><span class="line">    /web.yaml</span><br></pre></td></tr></table></figure>
<h2 id="2-部署到生产环境注意事项"><a href="#2-部署到生产环境注意事项" class="headerlink" title="2. 部署到生产环境注意事项"></a>2. 部署到生产环境注意事项</h2><ol>
<li>生产环境的mysql、redis等数据库不建议放在k8s中，应提前构建实例，并且通过external类型的svc指向对应实例</li>
</ol>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">&gt;cat mysql.yaml</span><br><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span>Service</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  lables:</span></span><br><span class="line"><span class="symbol">    app:</span>mysql</span><br><span class="line"><span class="symbol">  name:</span>mysql</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  type:</span> ExternalName</span><br><span class="line"><span class="symbol">  externalName:</span> 实例的host</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="language-bash"><span class="built_in">cat</span> web.yaml</span></span><br><span class="line">这里修改的是mysql的具体详情</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>应用的部署应该与之前保持一致<br><code>k apply -f https://raw.githubusercontent.com/wonderflow/gin-vue-admin/master/k8s/web-server.yaml</code></p>
</li>
<li><p>业务高峰期 pod压力大 nod压力就回答 会判定QoS，导致pod会被重启，也就是某个核心业务被重启</p>
<blockquote>
<p>我们的目的是提高资源利用率，流量大后会导致该问题</p>
</blockquote>
</li>
</ol>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">resources:</span></span><br><span class="line"><span class="symbol">  requests:</span></span><br><span class="line"><span class="symbol">    cpu:</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">    memory:</span> <span class="number">1</span>Gi</span><br><span class="line"><span class="symbol">  limits:</span></span><br><span class="line"><span class="symbol">    cpu:</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">    memory:</span> <span class="number">1</span>Gi</span><br></pre></td></tr></table></figure>
<p>建议requests &#x3D; limits</p>
<ol start="4">
<li>上下线要变得更优雅一些<br>上线</li>
</ol>
<ul>
<li><p>linveness探针 例如：开始时间 靠后一些 容错率提高</p>
</li>
<li><p>readiness探针 例如：<br>检查到pod失效，会自动找到pod对应在service的endpoint列表中拆除，让pod下线，尽量严格一些</p>
</li>
</ul>
<p>下线</p>
<ul>
<li><p>服务端负载均衡</p>
</li>
<li><p>客户端负载均衡</p>
</li>
</ul>
<img src="/blog/p/41057579/%E5%BA%94%E7%94%A8-%E4%BC%98%E9%9B%85%E4%B8%8A%E4%B8%8B%E7%BA%BF%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81.jpg" class="" title="应用-优雅上下线核心代码.jpg">
<img src="/blog/p/41057579/%E5%BA%94%E7%94%A8-%E4%BC%98%E9%9B%85%E4%B8%8A%E4%B8%8B%E7%BA%BF.png" class="" title="应用-优雅上下线.png">
<img src="/blog/p/41057579/%E5%BA%94%E7%94%A8-%E4%BC%98%E9%9B%85%E4%B8%8A%E4%B8%8B%E7%BA%BF.jpg" class="" title="应用-优雅上下线.jpg">
<img src="/blog/p/41057579/%E5%BA%94%E7%94%A8-%E9%9D%9E%E4%BC%98%E9%9B%85%E4%B8%8A%E4%B8%8B%E7%BA%BF.jpg" class="" title="应用-非优雅上下线.jpg">


<ol start="5">
<li>集群级别的生产<br>微服务体系<br>日志体系<br>监控体系<br>安全体系<br>弹性体系</li>
</ol>
<h2 id="3-k8s监控与日志"><a href="#3-k8s监控与日志" class="headerlink" title="3. k8s监控与日志"></a>3. k8s监控与日志</h2><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><h4 id="如何选型"><a href="#如何选型" class="headerlink" title="如何选型"></a>如何选型</h4><ul>
<li><p>传统架构</p>
<ul>
<li>资源监控</li>
<li>应用监控</li>
</ul>
</li>
<li><p>容器架构</p>
<ul>
<li>资源监控</li>
<li>管控系统监控</li>
<li>微服务拓扑监控</li>
<li>中间件系统监控</li>
<li>应用监控</li>
</ul>
</li>
</ul>
<h4 id="采集的方式动态化了，应该如何使用"><a href="#采集的方式动态化了，应该如何使用" class="headerlink" title="采集的方式动态化了，应该如何使用"></a>采集的方式动态化了，应该如何使用</h4><ul>
<li><p>传统架构：</p>
<ul>
<li>配置静态采集对象</li>
<li>正向拓扑关系配置</li>
</ul>
</li>
<li><p>容器架构</p>
<ul>
<li>容器发现动态采集</li>
<li>反向拓扑关系耦合</li>
</ul>
</li>
</ul>
<h4 id="可观测能力整合了应该如何运维"><a href="#可观测能力整合了应该如何运维" class="headerlink" title="可观测能力整合了应该如何运维"></a>可观测能力整合了应该如何运维</h4><ul>
<li><p>传统架构</p>
<ul>
<li>报警 运维 报警消除</li>
</ul>
</li>
<li><p>容器架构</p>
<ul>
<li>报警 自愈 报警消除 复盘</li>
<li>报警 自愈失败 运维 报警消除</li>
</ul>
</li>
</ul>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><ul>
<li><p>日志监控方式 <code>https://developer.aliyun.com/lesson_2174_21488#_21488</code></p>
<ul>
<li>资源监控：CPU、内存、网络 以数值 百分比为单位进行统计</li>
<li>性能监控：应用内部监控，通常是通过勾子在虚拟机层、字节码执行回调，获取更深层次的监控指标</li>
<li>安全监控：越权管理、安全漏洞扫描</li>
<li>事件监控：K8s中的口岸空方式，补充未监控到的内容</li>
</ul>
</li>
<li><p>监控接口标准化</p>
<ul>
<li>Resource Metrics K8s内置消费链路，无法自定义监控</li>
<li>Custom Metrics Prometheus 提供资源监控和自定义监控</li>
<li>External Metrics 云厂商(Aliyun)提供监控指标</li>
</ul>
</li>
<li><p>日志分类</p>
<ul>
<li>主机内核日志：网络栈、驱动、文件系统异常</li>
<li>Runtime：比如Docker运行日志</li>
<li>核心组件日志：APIServer用来审计，Scheduler日志可以诊断调度，etcd可以查看存储状态，Ingress日志可以分析接入层流量</li>
<li>部署应用的日志：分析查看业务层的状态，诊断异常</li>
</ul>
</li>
<li><p>日志采集方式</p>
<ul>
<li>挂载宿主机采集：将日志目录挂载出来，采集器自动采集</li>
<li>标准输入输出采集(推荐)：主动提交采集</li>
<li>Sidecar采集：将采集器注入到pod，一般用于安全或者隔离级别很高的应用</li>
</ul>
</li>
<li><p>核心：</p>
<ul>
<li><p>减少出现的问题</p>
<ol>
<li>集群组件尽量精简，减少全局组件</li>
<li>应用配置合理的request、limit 超卖比，高并发请求下可能会导致业务pod被重启</li>
<li>在线业务配置Readiness、Liveness，因为会导致k8s操作时，pod不可用</li>
</ol>
</li>
<li><p>建立有梯度的管理体系，事件监控最适合容器</p>
<ol>
<li>最上层：APM监控</li>
<li>中层：日志、事件孔安静</li>
<li>最下层：资源监控</li>
</ol>
</li>
<li><p>标准化的问题如何解决</p>
<ol>
<li>资源、容量的问题配置HPA或者资源弹性</li>
<li>常见的问题固化为自愈脚本、文档、手册</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="4-k8s弹性伸缩"><a href="#4-k8s弹性伸缩" class="headerlink" title="4. k8s弹性伸缩"></a>4. k8s弹性伸缩</h2><h3 id="调度层伸缩"><a href="#调度层伸缩" class="headerlink" title="调度层伸缩"></a>调度层伸缩</h3><img src="/blog/p/41057579/%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9%E7%9A%84%E6%9C%AC%E8%B4%A8-%E5%AE%B9%E9%87%8F%E4%B8%8E%E6%88%90%E6%9C%AC.jpg" class="" title="弹性伸缩的本质-容量与成本.jpg">
<img src="/blog/p/41057579/%E8%B0%83%E5%BA%A6%E4%B8%8E%E8%B5%84%E6%BA%90%E8%A7%A3%E8%80%A6%E7%9A%84%E4%B8%A4%E5%B1%82%E6%9E%B6%E6%9E%84.jpg" class="" title="调度与资源解耦的两层架构.jpg">

<p>容器水平伸缩(HPA)是k8s常用的弹性伸缩方式，使用注意事项<br>HPA根据统计数据指标进行扩容</p>
<img src="/blog/p/41057579/%E5%AE%B9%E5%99%A8%E6%B0%B4%E5%B9%B3%E4%BC%B8%E7%BC%A9HPA.jpg" class="" title="容器水平伸缩HPA.jpg">

<ol>
<li>Request的合理设置，建议Request&lt;&#x3D;limit</li>
<li>弹性指标的合理选择，指标一般有 CPU、Memory、QPS，要根据业务场景去选择</li>
<li>业务状态的弹性支持</li>
</ol>
<p>容器定时水平伸缩(CronHPA) <code>https://github.com/AliyunContainerService/kubernetes-cronhpa-controller</code><br>后台统计出整天或者某个节假日的请求数量分布图时，可以定时伸缩</p>
<img src="/blog/p/41057579/%E5%AE%B9%E5%99%A8%E5%AE%9A%E6%97%B6%E6%B0%B4%E5%B9%B3%E4%BC%B8%E7%BC%A9CronHPA.jpg" class="" title="容器定时水平伸缩CronHPA.jpg">

<h3 id="资源型伸缩"><a href="#资源型伸缩" class="headerlink" title="资源型伸缩"></a>资源型伸缩</h3><p>无服务器弹性伸缩 Virtual-node</p>
<img src="/blog/p/41057579/%E6%97%A0%E6%9C%8D%E5%8A%A1%E5%9E%8B%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9.jpg" class="" title="无服务型弹性伸缩.jpg">

<ul>
<li><p>1.0版本虚拟化出一个node也就是服务器，进行快速伸缩，普通的Ecs服务器首次上项目的时候用<br>问题：缩的时候检测不到虚拟的，所以可能会有问题</p>
</li>
<li><p>2.0版本<br>无服务器弹性伸缩场景介绍：</p>
</li>
</ul>
<ol>
<li>在线业务，存在资源利用率的波峰波谷、徒增流量毛刺的场景：网站、API、机器学习推理、大数据流式处理等</li>
<li>离线计算，Spark、机器学习训练、多媒体转码</li>
<li>定时任务，运行频度不高但是资源需求在容量规划之外，可以通过弹性伸缩降低容量管理的复杂度：离线定时ETL、数据分析与报表</li>
<li>特殊场景，对稳定性有极高的要求：异地多活弹性、混合云弹性</li>
</ol>
<h2 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 pod 环境 (beta/prod/dev)</span></span><br><span class="line">kubectl label nginx1 <span class="attribute">env</span>=dev --overwrite(是否覆盖)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉 label 中的值，增加-即可</span></span><br><span class="line">kubectl label pods tie-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选查询 lables</span></span><br><span class="line">kubectl <span class="built_in">get</span> pods --show-labels -l <span class="attribute">test1</span>=1,test2=2</span><br><span class="line">kubectl <span class="built_in">get</span> pods --show-labels -l env <span class="keyword">in</span> (test1,test2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给 pod 增加非标志性信息</span></span><br><span class="line">kubectl annotate pods pod名称 <span class="attribute">key</span>=<span class="string">&#x27;value&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="服务编排-参数详解"><a href="#服务编排-参数详解" class="headerlink" title="服务编排 参数详解"></a>服务编排 参数详解</h2><p>selector 查询资源<br>pod<br>层级<br>环境</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">资源标签 <span class="built_in">labels</span></span><br><span class="line">pod</span><br><span class="line">    environment: production</span><br><span class="line">    release: stable</span><br><span class="line">    app.k8s.io.version: <span class="number">5.1</span><span class="number">.1</span></span><br><span class="line">node</span><br><span class="line">    www.xxx.<span class="built_in">beta</span>.<span class="built_in">domain</span>/<span class="built_in">region</span>: cn-hangzhou</span><br><span class="line">annotations </span><br><span class="line">    存储资源的非标志性信息</span><br><span class="line">        <span class="built_in">domain</span>/<span class="built_in">domain</span>.cert_id: <span class="string">&quot;asdas,123=&quot;</span></span><br><span class="line">    拓展 资源的 spec/<span class="built_in">status</span></span><br><span class="line">ownerReference</span><br><span class="line">    所有者 pod</span><br></pre></td></tr></table></figure>






<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="控制循环例子-扩容-ReplicaSet"><a href="#控制循环例子-扩容-ReplicaSet" class="headerlink" title="控制循环例子-扩容(ReplicaSet)"></a>控制循环例子-扩容(ReplicaSet)</h3><p>ReplicaSet -&gt; selector 选择 pod，然后进行操作<br>replicas: 数量<br>扩容逻辑：</p>
<ol>
<li>首先处理 更新事件</li>
<li>对比新旧文件之后，追加处理一个增加 pod 的事件，并且更新旧文件</li>
</ol>
<h3 id="使用k8s"><a href="#使用k8s" class="headerlink" title="使用k8s"></a>使用k8s</h3><ol>
<li>创建集群部署应用</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java</title>
    <url>/blog/p/c8447915/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><blockquote>
<p><a href="https://www.oracle.com/downloads/" target="_blank" rel="noopener">https://www.oracle.com/downloads/</a><br><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a><br><a href="https://jdk.java.net/java-se-ri/8-MR3" target="_blank" rel="noopener">https://jdk.java.net/java-se-ri/8-MR3</a></p>
</blockquote>
<ul>
<li>环境变量<ol>
<li>系统变量 <code>JAVA_HOME</code>  -&gt;  <code>D:\Java\jdk</code></li>
<li>用户变量 <code>CLASSPATH</code>  -&gt;  <code>%JAVA_HOME%lib</code></li>
</ol>
</li>
</ul>
<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#下载好包jdk-8u251-linux-x64.tar.gz</span><br><span class="line">rz</span><br><span class="line">tar -zxvf jdk-8u251-linux-x64.tar.gz</span><br><span class="line">mkdir /usr/local/java</span><br><span class="line">mv jdk1.8.0_251 /usr/local/java</span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_251</span><br><span class="line">export JRE_HOME=/usr/local/java/jdk1.8.0_251/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib #似乎可有可无</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
<h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">cd /usr/src/</span><br><span class="line">wget https://download.java.net/openjdk/jdk8u41/ri/openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz</span><br><span class="line">tar -zxvf openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz</span><br><span class="line">mv ./java-se-8u41-ri /usr/local/java</span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h2><h3 id="安装7-jdk"><a href="#安装7-jdk" class="headerlink" title="安装7 jdk"></a>安装7 jdk</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># oracle 存档下载 java7</span></span><br><span class="line">https:<span class="regexp">//</span>www.oracle.com<span class="regexp">/java/</span>technologies<span class="regexp">/javase/</span>javase7-archive-downloads.html</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line">ls <span class="regexp">/Library/</span>Java/JavaVirtualMachines</span><br><span class="line">&gt; jdk1.<span class="number">7.0</span>_80.jdk  jdk1.<span class="number">8.0</span>_351.jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改环境变量</span></span><br><span class="line">vim <span class="regexp">/Users/</span>liguoxin/.zshrc</span><br><span class="line">    export JAVA_HOME=<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">7.0</span>_80.jdk<span class="regexp">/Contents/</span>Home/</span><br><span class="line">    export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># check</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
<h3 id="安装8-jdk"><a href="#安装8-jdk" class="headerlink" title="安装8 jdk"></a>安装8 jdk</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官网下载 或者去oracle下载</span></span><br><span class="line">https:<span class="regexp">//</span>www.oracle.com<span class="regexp">/java/</span>technologies<span class="regexp">/downloads/</span><span class="comment">#java8-mac</span></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line">ls <span class="regexp">/Library/</span>Java/JavaVirtualMachines</span><br><span class="line">&gt; jdk1.<span class="number">7.0</span>_80.jdk jdk1.<span class="number">8.0</span>_351.jdk jdk-<span class="number">19</span>.jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改环境变量</span></span><br><span class="line">vim <span class="regexp">/Users/</span>liguoxin/.zshrc</span><br><span class="line">    export JAVA_HOME=<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_351.jdk<span class="regexp">/Contents/</span>Home/</span><br><span class="line">    export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># check</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
<h3 id="安装8-jre"><a href="#安装8-jre" class="headerlink" title="安装8 jre"></a>安装8 jre</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官网下载 或者去oracle下载</span></span><br><span class="line">https:<span class="regexp">//</span>www.oracle.com<span class="regexp">/java/</span>technologies<span class="regexp">/downloads/</span><span class="comment">#java8-mac</span></span><br><span class="line"><span class="comment"># 安装</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel学习指南</title>
    <url>/blog/p/41057581/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">php artisan optimize</span></span><br></pre></td></tr></table></figure>
<h3 id="laravel-ORM-模型关联-select时，无法查询倒数据"><a href="#laravel-ORM-模型关联-select时，无法查询倒数据" class="headerlink" title="laravel ORM 模型关联 select时，无法查询倒数据"></a>laravel ORM 模型关联 select时，无法查询倒数据</h3><blockquote>
<p>即使数据库有记录，sql也记录了对应的查询语句，但是profile关联却是空的</p>
</blockquote>
<blockquote>
<p>懒加载要用with不能用whereHas，has出来的数据不是一次性获取的</p>
</blockquote>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">-&gt;select<span class="function"><span class="params">([<span class="string">&#x27;搜索的字段&#x27;</span>])</span>-&gt;</span>where(<span class="string">&#x27;条件&#x27;</span>)</span><br><span class="line"></span><br><span class="line">解决办法应该在select搜索出关联的id(外键)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后台编辑页面字段获取不到</span></span><br><span class="line">不要用<span class="built_in">disable</span>,用<span class="built_in">readonly</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表单联动BUG</span></span><br><span class="line">需要多个when一个字段时会有显示的问题</span><br><span class="line">type_value</span><br><span class="line">⬇️</span><br><span class="line">type_value</span><br><span class="line">type_value_a</span><br><span class="line">type_value_b</span><br><span class="line"></span><br><span class="line">具体操作</span><br><span class="line">第一步(改写)：</span><br><span class="line"><span class="variable">$form</span>-&gt;when(BalletmeCourseCalendar::TYPE_EXCHANGE_A_DAY_OFF, <span class="function"><span class="keyword">function</span> (<span class="params">Form <span class="variable">$form</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$form</span>-&gt;date(<span class="string">&#x27;type_value_a&#x27;</span>, <span class="string">&#x27;日期(格式必须Y-m-d，比如2021-08-02)&#x27;</span>)-&gt;default(<span class="string">&#x27;2021-08-03&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    -&gt;when(BalletmeCourseCalendar::TYPE_GIVE_COUPON, <span class="function"><span class="keyword">function</span> (<span class="params">Form <span class="variable">$form</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$form</span>-&gt;number(<span class="string">&#x27;type_value_b&#x27;</span>, <span class="string">&#x27;数量&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">第二步(隐藏原字段)：</span><br><span class="line"><span class="variable">$form</span>-&gt;hidden(<span class="string">&#x27;type_value&#x27;</span>);</span><br><span class="line"></span><br><span class="line">第三步(赋值)：</span><br><span class="line"><span class="variable">$form</span>-&gt;saving(<span class="function"><span class="keyword">function</span> (<span class="params">Form <span class="variable">$form</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>((<span class="keyword">int</span>)<span class="variable">$form</span>-&gt;type) &#123;</span><br><span class="line">        <span class="keyword">case</span> BalletmeCourseCalendar::TYPE_EXCHANGE_A_DAY_OFF:</span><br><span class="line">            <span class="variable">$type_value</span> = request(<span class="string">&#x27;type_value_a&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BalletmeCourseCalendar::TYPE_GIVE_COUPON:</span><br><span class="line">            <span class="variable">$type_value</span> = request(<span class="string">&#x27;type_value_b&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$type_value</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$form</span>-&gt;type_value = <span class="variable">$type_value</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">第四步(隐藏字段)：</span><br><span class="line"><span class="variable">$form</span>-&gt;submitted(<span class="function"><span class="keyword">function</span> (<span class="params">Form <span class="variable">$form</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$form</span>-&gt;ignore([<span class="string">&#x27;type_value_a&#x27;</span>, <span class="string">&#x27;type_value_b&#x27;</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加自定义验证规则</span></span><br><span class="line"><span class="comment">// 在App\Rules\下生成规则</span></span><br><span class="line">php artisan make:rule Phone</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加规则详情</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">passes</span>(<span class="params"><span class="variable">$attribute</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$isMob</span> = <span class="string">&quot;/^1[3-9]&#123;1&#125;[0-9]&#123;9&#125;$/&quot;</span>;</span><br><span class="line">    <span class="variable">$isTel</span> = <span class="string">&quot;/^([0-9]&#123;3,4&#125;-)?[0-9]&#123;7,8&#125;$/&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="variable">$isMob</span>, <span class="variable">$value</span>) &amp;&amp; !preg_match(<span class="variable">$isTel</span>, <span class="variable">$value</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加规则error message</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">message</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;手机号格式错误&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在服务提供者中注册</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bootstrap any application services.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">#注册手机号验证rule</span></span><br><span class="line">        \Illuminate\Support\Facades\Validator::extend(<span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;App\Rules\Phone@passes&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register any application services.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">DB::beginTransaction();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    DB::commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    DB::rollBack();</span><br><span class="line">    <span class="keyword">throw</span> <span class="variable">$e</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;app = Reuse::getWechatOfficialAccountFuwuhao();</span><br><span class="line">        <span class="variable">$menu</span> = <span class="keyword">$this</span>-&gt;app-&gt;menu-&gt;current();</span><br><span class="line">        <span class="variable">$button</span> = <span class="variable">$menu</span>[<span class="string">&#x27;selfmenu_info&#x27;</span>][<span class="string">&#x27;button&#x27;</span>];</span><br><span class="line">        <span class="comment">// dd($button);</span></span><br><span class="line">        <span class="variable">$mini_program_config</span> = Reuse::getWechatMiniProgramDefault(<span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$button</span> = [</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;miniprogram&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;我要约课&quot;</span>,</span><br><span class="line">                <span class="string">&quot;url&quot;</span> =&gt; <span class="string">&quot;https://mp.weixin.qq.com/mp/homepage?__biz=MzU3NDY4NDgxNQ==&amp;hid=9&amp;sn=19687767d45bf9c2867dd1185819a8d7&quot;</span>,</span><br><span class="line">                <span class="string">&quot;appid&quot;</span> =&gt; <span class="variable">$mini_program_config</span>[<span class="string">&#x27;app_id&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;pagepath&quot;</span> =&gt; <span class="string">&quot;pages/main/home/index&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;view&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;近期课表&quot;</span>,</span><br><span class="line">                <span class="string">&quot;url&quot;</span> =&gt; <span class="string">&quot;https://mp.weixin.qq.com/mp/homepage?__biz=MzU3NDY4NDgxNQ==&amp;hid=9&amp;sn=19687767d45bf9c2867dd1185819a8d7&amp;scene=18&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;关于此刻&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sub_button&quot;</span> =&gt; [</span><br><span class="line">                    [</span><br><span class="line">                        <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;view&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;课程简介&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;url&quot;</span> =&gt; <span class="string">&quot;http://mp.weixin.qq.com/mp/homepage?__biz=MzU3NDY4NDgxNQ==&amp;hid=1&amp;sn=3b23c6917ca352e3ee89b00768439cd8&amp;scene=18#wechat_redirect&quot;</span>,</span><br><span class="line">                    ],</span><br><span class="line">                    [</span><br><span class="line">                        <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;view&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;教师介绍&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;url&quot;</span> =&gt; <span class="string">&quot;https://mp.weixin.qq.com/s?__biz=MzUwOTkzNzY1Mg==&amp;mid=100000031&amp;idx=1&amp;sn=6576cb1897d8b98a5d1c5b5ef8f8cb6c&amp;chksm=790bd3844e7c5a92bc361c153484f5203903eaf2fe3d5c836043023b3cc5a5fcab91f24c7428#rd&quot;</span>,</span><br><span class="line">                    ],</span><br><span class="line">                    [</span><br><span class="line">                        <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;view&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;详细地址&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;url&quot;</span> =&gt; <span class="string">&quot;http://mp.weixin.qq.com/mp/homepage?__biz=MzU3NDY4NDgxNQ==&amp;hid=8&amp;sn=150abc50adb1dbc3fe9fd5f14c614e85&amp;scene=18#wechat_redirect&quot;</span></span><br><span class="line">                    ],</span><br><span class="line">                    [</span><br><span class="line">                        <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;view&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;此刻记事本&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;url&quot;</span> =&gt; <span class="string">&quot;https://mp.weixin.qq.com/mp/homepage?__biz=MzU3NDY4NDgxNQ==&amp;hid=3&amp;sn=08fcd2ad97614c9902437058425ccbd4&amp;scene=18&quot;</span>,</span><br><span class="line">                    ],</span><br><span class="line">                    [</span><br><span class="line">                        <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;view&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;加入我们&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;url&quot;</span> =&gt; <span class="string">&quot;https://rzjvwngxxi.jiandaoyun.com/f/5fc0df6d7a37f000066e8e60&quot;</span>,</span><br><span class="line">                    ],</span><br><span class="line">                ],</span><br><span class="line">            ],</span><br><span class="line">        ];</span><br><span class="line">        dd(<span class="keyword">$this</span>-&gt;app-&gt;menu-&gt;create(<span class="variable">$button</span>));</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseInfoTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试 最新活跃年期 字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testActiveSemesterId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Reuse::currentEnvIsProduct()) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;正式环境不能执行该脚本&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$allow_user_id</span> = <span class="number">21</span>;</span><br><span class="line">        <span class="variable">$allow_semester</span> = <span class="string">&#x27;2021S5&#x27;</span>;</span><br><span class="line">        <span class="variable">$allow_course_types</span> = [</span><br><span class="line">            BalletmeCourse::TYPE_SINGLE,</span><br><span class="line">            BalletmeCourse::TYPE_SEMESTER_COURSE,</span><br><span class="line">            <span class="comment">// BalletmeCourse::TYPE_SHORT,</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将这个用户的订单 学期/单次 设置为退款，则字段是0</span></span><br><span class="line">        <span class="built_in">self</span>::quickRefundCourseOrder(<span class="variable">$allow_user_id</span>, <span class="string">&#x27;&#x27;</span>, [</span><br><span class="line">            BalletmeOrder::TYPE_SINGLE,</span><br><span class="line">            BalletmeOrder::TYPE_SEMESTER_COURSE,</span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$user_model</span> = BalletmeUser::ID(<span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$user_model</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;用户不存在&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="variable">$user_model</span>-&gt;active_semester_id == <span class="number">0</span>);</span><br><span class="line">        <span class="variable">$semester_repository</span> = (<span class="keyword">new</span> Semester())-&gt;get();</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 买一节 S5，则字段会变成 S5</span></span><br><span class="line">        <span class="built_in">self</span>::quickInputCourseOrder(<span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester</span>, <span class="variable">$allow_course_types</span>);</span><br><span class="line">        <span class="variable">$user_model</span> = BalletmeUser::ID(<span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$user_model</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;用户不存在&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="variable">$user_model</span>-&gt;active_semester_id == <span class="variable">$semester_repository</span>-&gt;where(<span class="string">&#x27;semester&#x27;</span>, <span class="variable">$allow_semester</span>)</span><br><span class="line">                -&gt;first()-&gt;id);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 买一节 S6，则字段会变成 S6</span></span><br><span class="line">        <span class="variable">$allow_semester_s6</span> = <span class="string">&#x27;2021S6&#x27;</span>;</span><br><span class="line">        <span class="built_in">self</span>::quickInputCourseOrder(<span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester_s6</span>, <span class="variable">$allow_course_types</span>);</span><br><span class="line">        <span class="variable">$user_model</span> = BalletmeUser::ID(<span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$user_model</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;用户不存在&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="variable">$user_model</span>-&gt;active_semester_id == <span class="variable">$semester_repository</span>-&gt;where(<span class="string">&#x27;semester&#x27;</span>, <span class="variable">$allow_semester_s6</span>)</span><br><span class="line">                -&gt;first()-&gt;id);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 再买一节 S5，字段不会发生变化</span></span><br><span class="line">        <span class="built_in">self</span>::quickInputCourseOrder(<span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester</span>, <span class="variable">$allow_course_types</span>);</span><br><span class="line">        <span class="variable">$user_model</span> = BalletmeUser::ID(<span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$user_model</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;用户不存在&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="variable">$user_model</span>-&gt;active_semester_id != <span class="variable">$semester_repository</span>-&gt;where(<span class="string">&#x27;semester&#x27;</span>, <span class="variable">$allow_semester</span>)</span><br><span class="line">                -&gt;first()-&gt;id);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># S6课程退款，变成 S5</span></span><br><span class="line">        <span class="built_in">self</span>::quickRefundCourseOrder(<span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester_s6</span>, [</span><br><span class="line">            BalletmeOrder::TYPE_SINGLE,</span><br><span class="line">            BalletmeOrder::TYPE_SEMESTER_COURSE,</span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$user_model</span> = BalletmeUser::ID(<span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$user_model</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;用户不存在&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="variable">$user_model</span>-&gt;active_semester_id == <span class="variable">$semester_repository</span>-&gt;where(<span class="string">&#x27;semester&#x27;</span>, <span class="variable">$allow_semester</span>)</span><br><span class="line">                -&gt;first()-&gt;id);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># S5课程退款一次，不会变</span></span><br><span class="line">        <span class="built_in">self</span>::quickRefundCourseOrder(<span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester</span>, [</span><br><span class="line">            BalletmeOrder::TYPE_SINGLE,</span><br><span class="line">            BalletmeOrder::TYPE_SEMESTER_COURSE,</span><br><span class="line">        ], <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$user_model</span> = BalletmeUser::ID(<span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$user_model</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;用户不存在&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="variable">$user_model</span>-&gt;active_semester_id == <span class="variable">$semester_repository</span>-&gt;where(<span class="string">&#x27;semester&#x27;</span>, <span class="variable">$allow_semester</span>)</span><br><span class="line">                -&gt;first()-&gt;id);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># S5课程退款二次，变为0</span></span><br><span class="line">        <span class="built_in">self</span>::quickRefundCourseOrder(<span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester</span>, [</span><br><span class="line">            BalletmeOrder::TYPE_SINGLE,</span><br><span class="line">            BalletmeOrder::TYPE_SEMESTER_COURSE,</span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$user_model</span> = BalletmeUser::ID(<span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$user_model</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;用户不存在&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="variable">$user_model</span>-&gt;active_semester_id == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清空测试数据</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;deleteTestData(<span class="variable">$allow_user_id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 福利等级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServiceException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testGrowthLevel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$user_id</span> = <span class="number">5</span>;</span><br><span class="line">        <span class="comment"># 0 0-6</span></span><br><span class="line">        <span class="variable">$v</span> = <span class="number">0</span>;</span><br><span class="line">        BalletmeUser::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$user_id</span>)-&gt;update([</span><br><span class="line">            <span class="string">&#x27;growth_value&#x27;</span> =&gt; <span class="variable">$v</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">new</span> User())-&gt;getGrowthComputeInfo(<span class="string">&#x27;&#x27;</span>, <span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_completed_count&#x27;</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_need_up_count&#x27;</span>], <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;is_full_level&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable">$v</span> = <span class="number">1</span>;</span><br><span class="line">        BalletmeUser::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$user_id</span>)-&gt;update([</span><br><span class="line">            <span class="string">&#x27;growth_value&#x27;</span> =&gt; <span class="variable">$v</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">new</span> User())-&gt;getGrowthComputeInfo(<span class="string">&#x27;&#x27;</span>, <span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_completed_count&#x27;</span>], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_need_up_count&#x27;</span>], <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;is_full_level&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$v</span> = <span class="number">5</span>;</span><br><span class="line">        BalletmeUser::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$user_id</span>)-&gt;update([</span><br><span class="line">            <span class="string">&#x27;growth_value&#x27;</span> =&gt; <span class="variable">$v</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">new</span> User())-&gt;getGrowthComputeInfo(<span class="string">&#x27;&#x27;</span>, <span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_completed_count&#x27;</span>], <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_need_up_count&#x27;</span>], <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;is_full_level&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$v</span> = <span class="number">6</span>;</span><br><span class="line">        BalletmeUser::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$user_id</span>)-&gt;update([</span><br><span class="line">            <span class="string">&#x27;growth_value&#x27;</span> =&gt; <span class="variable">$v</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">new</span> User())-&gt;getGrowthComputeInfo(<span class="string">&#x27;&#x27;</span>, <span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_completed_count&#x27;</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_need_up_count&#x27;</span>], <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;is_full_level&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable">$v</span> = <span class="number">7</span>;</span><br><span class="line">        BalletmeUser::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$user_id</span>)-&gt;update([</span><br><span class="line">            <span class="string">&#x27;growth_value&#x27;</span> =&gt; <span class="variable">$v</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">new</span> User())-&gt;getGrowthComputeInfo(<span class="string">&#x27;&#x27;</span>, <span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_completed_count&#x27;</span>], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_need_up_count&#x27;</span>], <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;is_full_level&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable">$v</span> = <span class="number">11</span>;</span><br><span class="line">        BalletmeUser::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$user_id</span>)-&gt;update([</span><br><span class="line">            <span class="string">&#x27;growth_value&#x27;</span> =&gt; <span class="variable">$v</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">new</span> User())-&gt;getGrowthComputeInfo(<span class="string">&#x27;&#x27;</span>, <span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_completed_count&#x27;</span>], <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_need_up_count&#x27;</span>], <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;is_full_level&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$v</span> = <span class="number">12</span>;</span><br><span class="line">        BalletmeUser::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$user_id</span>)-&gt;update([</span><br><span class="line">            <span class="string">&#x27;growth_value&#x27;</span> =&gt; <span class="variable">$v</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">new</span> User())-&gt;getGrowthComputeInfo(<span class="string">&#x27;&#x27;</span>, <span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_completed_count&#x27;</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_need_up_count&#x27;</span>], <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;is_full_level&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$v</span> = <span class="number">18</span>;</span><br><span class="line">        BalletmeUser::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$user_id</span>)-&gt;update([</span><br><span class="line">            <span class="string">&#x27;growth_value&#x27;</span> =&gt; <span class="variable">$v</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">new</span> User())-&gt;getGrowthComputeInfo(<span class="string">&#x27;&#x27;</span>, <span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_completed_count&#x27;</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_need_up_count&#x27;</span>], <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;is_full_level&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$v</span> = <span class="number">24</span>;</span><br><span class="line">        BalletmeUser::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$user_id</span>)-&gt;update([</span><br><span class="line">            <span class="string">&#x27;growth_value&#x27;</span> =&gt; <span class="variable">$v</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">new</span> User())-&gt;getGrowthComputeInfo(<span class="string">&#x27;&#x27;</span>, <span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_completed_count&#x27;</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_need_up_count&#x27;</span>], <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;is_full_level&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$v</span> = <span class="number">24</span>;</span><br><span class="line">        BalletmeUser::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$user_id</span>)-&gt;update([</span><br><span class="line">            <span class="string">&#x27;growth_value&#x27;</span> =&gt; <span class="variable">$v</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">new</span> User())-&gt;getGrowthComputeInfo(<span class="string">&#x27;&#x27;</span>, <span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_completed_count&#x27;</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_need_up_count&#x27;</span>], <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;is_full_level&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$v</span> = <span class="number">30</span>;</span><br><span class="line">        BalletmeUser::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$user_id</span>)-&gt;update([</span><br><span class="line">            <span class="string">&#x27;growth_value&#x27;</span> =&gt; <span class="variable">$v</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">new</span> User())-&gt;getGrowthComputeInfo(<span class="string">&#x27;&#x27;</span>, <span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_completed_count&#x27;</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_need_up_count&#x27;</span>], <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;is_full_level&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$v</span> = <span class="number">35</span>;</span><br><span class="line">        BalletmeUser::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$user_id</span>)-&gt;update([</span><br><span class="line">            <span class="string">&#x27;growth_value&#x27;</span> =&gt; <span class="variable">$v</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">new</span> User())-&gt;getGrowthComputeInfo(<span class="string">&#x27;&#x27;</span>, <span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_completed_count&#x27;</span>], <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_need_up_count&#x27;</span>], <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;is_full_level&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$v</span> = <span class="number">36</span>;</span><br><span class="line">        BalletmeUser::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$user_id</span>)-&gt;update([</span><br><span class="line">            <span class="string">&#x27;growth_value&#x27;</span> =&gt; <span class="variable">$v</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">new</span> User())-&gt;getGrowthComputeInfo(<span class="string">&#x27;&#x27;</span>, <span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_completed_count&#x27;</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;current_need_up_count&#x27;</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertSame(<span class="variable">$data</span>[<span class="string">&#x27;is_full_level&#x27;</span>], <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testUpdateExperienceInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Reuse::currentEnvIsProduct()) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;正式环境不能执行该脚本&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$allow_user_id</span> = <span class="number">13</span>;</span><br><span class="line">        <span class="variable">$allow_semester</span> = <span class="string">&#x27;2021S5&#x27;</span>;</span><br><span class="line">        <span class="variable">$allow_course_types</span> = [</span><br><span class="line">            <span class="comment">// BalletmeCourse::TYPE_SINGLE,</span></span><br><span class="line">            BalletmeCourse::TYPE_SEMESTER_COURSE,</span><br><span class="line">            <span class="comment">// BalletmeCourse::TYPE_SHORT,</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// User::updateExperienceInfo(13);dd(1);</span></span><br><span class="line">        <span class="comment">// User::checkNewPeopleInfo(13);dd(1);</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">self</span>::quickInputCourseSemesterOrder(<span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester</span>, <span class="variable">$allow_course_types</span>); dd(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// self::quickInputCourseOrder($allow_user_id, $allow_semester, $allow_course_types); dd(1);</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$semester_repository</span> = (<span class="keyword">new</span> Semester())-&gt;get();</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 买一节 S5，则字段会变成 S5</span></span><br><span class="line">        <span class="built_in">self</span>::quickInputCourseOrder(<span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester</span>, <span class="variable">$allow_course_types</span>);</span><br><span class="line">        <span class="variable">$user_model</span> = BalletmeUser::ID(<span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$user_model</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;用户不存在&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="variable">$user_model</span>-&gt;active_semester_id == <span class="variable">$semester_repository</span>-&gt;where(<span class="string">&#x27;semester&#x27;</span>, <span class="variable">$allow_semester</span>)</span><br><span class="line">                -&gt;first()-&gt;id);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 买一节 S6，则字段会变成 S6</span></span><br><span class="line">        <span class="variable">$allow_semester_s6</span> = <span class="string">&#x27;2021S6&#x27;</span>;</span><br><span class="line">        <span class="built_in">self</span>::quickInputCourseOrder(<span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester_s6</span>, <span class="variable">$allow_course_types</span>);</span><br><span class="line">        <span class="variable">$user_model</span> = BalletmeUser::ID(<span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$user_model</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;用户不存在&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="variable">$user_model</span>-&gt;active_semester_id == <span class="variable">$semester_repository</span>-&gt;where(<span class="string">&#x27;semester&#x27;</span>, <span class="variable">$allow_semester_s6</span>)</span><br><span class="line">                -&gt;first()-&gt;id);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 再买一节 S5，字段不会发生变化</span></span><br><span class="line">        <span class="built_in">self</span>::quickInputCourseOrder(<span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester</span>, <span class="variable">$allow_course_types</span>);</span><br><span class="line">        <span class="variable">$user_model</span> = BalletmeUser::ID(<span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$user_model</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;用户不存在&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="variable">$user_model</span>-&gt;active_semester_id != <span class="variable">$semester_repository</span>-&gt;where(<span class="string">&#x27;semester&#x27;</span>, <span class="variable">$allow_semester</span>)</span><br><span class="line">                -&gt;first()-&gt;id);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># S6课程退款，变成 S5</span></span><br><span class="line">        <span class="built_in">self</span>::quickRefundCourseOrder(<span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester_s6</span>, [</span><br><span class="line">            BalletmeOrder::TYPE_SINGLE,</span><br><span class="line">            BalletmeOrder::TYPE_SEMESTER_COURSE,</span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$user_model</span> = BalletmeUser::ID(<span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$user_model</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;用户不存在&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="variable">$user_model</span>-&gt;active_semester_id == <span class="variable">$semester_repository</span>-&gt;where(<span class="string">&#x27;semester&#x27;</span>, <span class="variable">$allow_semester</span>)</span><br><span class="line">                -&gt;first()-&gt;id);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># S5课程退款一次，不会变</span></span><br><span class="line">        <span class="built_in">self</span>::quickRefundCourseOrder(<span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester</span>, [</span><br><span class="line">            BalletmeOrder::TYPE_SINGLE,</span><br><span class="line">            BalletmeOrder::TYPE_SEMESTER_COURSE,</span><br><span class="line">        ], <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$user_model</span> = BalletmeUser::ID(<span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$user_model</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;用户不存在&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="variable">$user_model</span>-&gt;active_semester_id == <span class="variable">$semester_repository</span>-&gt;where(<span class="string">&#x27;semester&#x27;</span>, <span class="variable">$allow_semester</span>)</span><br><span class="line">                -&gt;first()-&gt;id);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># S5课程退款二次，变为0</span></span><br><span class="line">        <span class="built_in">self</span>::quickRefundCourseOrder(<span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester</span>, [</span><br><span class="line">            BalletmeOrder::TYPE_SINGLE,</span><br><span class="line">            BalletmeOrder::TYPE_SEMESTER_COURSE,</span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$user_model</span> = BalletmeUser::ID(<span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$user_model</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;fail(<span class="string">&#x27;用户不存在&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="variable">$user_model</span>-&gt;active_semester_id == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速录课方法，非生产模式谨慎使用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $allow_user_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $allow_semester</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $allow_course_types</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServiceException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">quickInputCourseSemesterOrder</span>(<span class="params"><span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester</span>, <span class="variable">$allow_course_types</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$semester_repository</span> = <span class="keyword">new</span> Semester();</span><br><span class="line">        <span class="variable">$semester_model</span> = <span class="variable">$semester_repository</span>-&gt;get()</span><br><span class="line">            -&gt;where(<span class="string">&#x27;semester&#x27;</span>, <span class="variable">$allow_semester</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;user_id&#x27;</span>] = <span class="variable">$allow_user_id</span>;</span><br><span class="line">        <span class="comment"># 用户来源</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;user_source_type&#x27;</span>] = BalletmeUser::SOURCE_TYPE_MEITUAN;</span><br><span class="line">        <span class="variable">$courses</span> = BalletmeCourse::where(<span class="string">&#x27;semester_id&#x27;</span>, <span class="variable">$semester_model</span>-&gt;id)</span><br><span class="line">            -&gt;whereIn(<span class="string">&#x27;type&#x27;</span>, <span class="variable">$allow_course_types</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">        <span class="variable">$course</span> = <span class="variable">$courses</span>[mt_rand(<span class="number">0</span>,<span class="variable">$courses</span>-&gt;count() - <span class="number">1</span>)];</span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;course_id&#x27;</span>] = <span class="variable">$course</span>-&gt;id;</span><br><span class="line">        <span class="comment"># 购买类型  0 =&gt; &#x27;购买剩余课程&#x27;, 1 =&gt; &#x27;购买完整课程&#x27;,</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;is_complete&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># 支付渠道</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;channel&#x27;</span>] = BalletmeSelf::CHANNEL_DAZHONG;</span><br><span class="line">        <span class="comment"># 支付订单号</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;pay_no&#x27;</span>] = BalletmeSelf::CHANNEL_DAZHONG;</span><br><span class="line">        <span class="comment"># 是否直接购买</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;is_farther&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># ME豆支付(会扣款)</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;integral&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># 钱包余额支付(会扣款)</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;balance&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># 订单总价(必填)</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;total&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># 备注</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;remark&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="comment"># 购买时间</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;purchase_data&#x27;</span>] = date(<span class="string">&#x27;Y-m-d&#x27;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            (<span class="keyword">new</span> OrderSelf)-&gt;create(<span class="variable">$params</span> + [<span class="string">&#x27;type&#x27;</span> =&gt; BalletmeOrder::TYPE_SEMESTER_COURSE]);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(\<span class="built_in">Exception</span> <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="variable">$exception</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速录课方法，非生产模式谨慎使用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $allow_user_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $allow_semester</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $allow_course_types</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServiceException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">quickInputCourseOrder</span>(<span class="params"><span class="variable">$allow_user_id</span>, <span class="variable">$allow_semester</span>, <span class="variable">$allow_course_types</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$semester_repository</span> = <span class="keyword">new</span> Semester();</span><br><span class="line">        <span class="variable">$semester_model</span> = <span class="variable">$semester_repository</span>-&gt;get()</span><br><span class="line">            -&gt;where(<span class="string">&#x27;semester&#x27;</span>, <span class="variable">$allow_semester</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;user_id&#x27;</span>] = <span class="variable">$allow_user_id</span>;</span><br><span class="line">        <span class="comment"># 用户来源</span></span><br><span class="line">        <span class="variable">$courses</span> = BalletmeCourse::where(<span class="string">&#x27;semester_id&#x27;</span>, <span class="variable">$semester_model</span>-&gt;id)</span><br><span class="line">            -&gt;whereIn(<span class="string">&#x27;type&#x27;</span>, <span class="variable">$allow_course_types</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">        <span class="variable">$course</span> = <span class="variable">$courses</span>[mt_rand(<span class="number">0</span>,<span class="variable">$courses</span>-&gt;count() - <span class="number">1</span>)];</span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;course_id&#x27;</span>] = <span class="variable">$course</span>-&gt;id;</span><br><span class="line">        <span class="comment">// $params[&#x27;coupin_id&#x27;] = 227;</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;course_details_id&#x27;</span>] = <span class="variable">$course</span>-&gt;Details-&gt;first()-&gt;id;</span><br><span class="line">        <span class="comment"># 用户来源</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;user_source_type&#x27;</span>] = BalletmeUser::SOURCE_TYPE_MEITUAN;</span><br><span class="line">        <span class="comment"># 是否体验</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;is_experience&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># 是否使用补课券抵消</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;lessons&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># 支付订单号</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;pay_no&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># 是否发送通知 (包含体验短信，如果是体验课，本选项需要选择是)</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;is_notice&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># 是否直接购买</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;is_farther&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># ME豆支付(会扣款)</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;integral&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># 钱包余额支付(会扣款)</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;balance&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># 订单总价(必填)</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;total&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># 备注</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;remark&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="comment"># 支付渠道</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;channel&#x27;</span>] = BalletmeSelf::CHANNEL_DAZHONG;</span><br><span class="line">        <span class="comment"># 购买时间</span></span><br><span class="line">        <span class="variable">$params</span>[<span class="string">&#x27;purchase_data&#x27;</span>] = date(<span class="string">&#x27;Y-m-d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            (<span class="keyword">new</span> OrderSelf())-&gt;create(<span class="variable">$params</span> + [<span class="string">&#x27;type&#x27;</span> =&gt; BalletmeOrder::TYPE_SINGLE]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="variable">$exception</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将用户的所有课程订单设置成已退款</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $allow_user_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $allow_semester</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $allow_course_types</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">quickRefundCourseOrder</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$allow_user_id</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$allow_semester</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">array</span> <span class="variable">$allow_course_types</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$number</span> = <span class="number">0</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) </span>&#123;</span><br><span class="line">        <span class="variable">$user_order_models</span> = BalletmeOrder::whereIn(<span class="string">&#x27;type&#x27;</span>, <span class="variable">$allow_course_types</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$allow_semester</span>) &#123;</span><br><span class="line">            <span class="variable">$semester_repository</span> = <span class="keyword">new</span> Semester();</span><br><span class="line">            <span class="variable">$semester_model</span> = <span class="variable">$semester_repository</span>-&gt;get()</span><br><span class="line">                -&gt;where(<span class="string">&#x27;semester&#x27;</span>, <span class="variable">$allow_semester</span>)</span><br><span class="line">                -&gt;first();</span><br><span class="line">            <span class="variable">$user_order_models</span> = <span class="variable">$user_order_models</span>-&gt;where(<span class="string">&#x27;semester_id&#x27;</span>, <span class="variable">$semester_model</span>-&gt;id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$user_order_models</span> = <span class="variable">$user_order_models</span>-&gt;where(<span class="string">&#x27;status&#x27;</span>, BalletmeOrder::STATUS_YES)</span><br><span class="line">            -&gt;where(<span class="string">&#x27;user_id&#x27;</span>, <span class="variable">$allow_user_id</span>)</span><br><span class="line">            -&gt;orderBy(<span class="string">&#x27;semester_id&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)</span><br><span class="line">            -&gt;whereHas(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">            -&gt;with([</span><br><span class="line">                <span class="string">&#x27;user&#x27;</span> =&gt; <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$q</span></span>) </span>&#123;</span><br><span class="line">                    <span class="variable">$q</span>-&gt;select([</span><br><span class="line">                        <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;active_semester_id&#x27;</span>,</span><br><span class="line">                    ]);</span><br><span class="line">                &#125;,</span><br><span class="line">            ])</span><br><span class="line">            -&gt;select([</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;type&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;status&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;user_id&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;semester_id&#x27;</span>,</span><br><span class="line">            ])</span><br><span class="line">            -&gt;get();</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$user_order_models</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">            <span class="variable">$item</span>-&gt;status = BalletmeOrder::STATUS_REFUND;</span><br><span class="line">            <span class="variable">$item</span>-&gt;save();</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$item</span>-&gt;type, [</span><br><span class="line">                BalletmeOrder::TYPE_SEMESTER_COURSE,</span><br><span class="line">                BalletmeOrder::TYPE_SINGLE,</span><br><span class="line">                <span class="comment">// BalletmeOrder::TYPE_TRAINING,</span></span><br><span class="line">            ])) &#123;</span><br><span class="line">                event(<span class="keyword">new</span> OrderCourseUpdate(<span class="variable">$item</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$i</span> &gt;= <span class="variable">$number</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++<span class="variable">$i</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除测试相关数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $allow_user_id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteTestData</span>(<span class="params"><span class="variable">$allow_user_id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">        UPDATE balletme_users</span></span><br><span class="line"><span class="string">        SET </span></span><br><span class="line"><span class="string">            active_semester_id = 0,</span></span><br><span class="line"><span class="string">            start_semester_id = 0,</span></span><br><span class="line"><span class="string">            active_status = 0,</span></span><br><span class="line"><span class="string">            add_customer_datetime = NULL,</span></span><br><span class="line"><span class="string">            add_customer_number = NULL,</span></span><br><span class="line"><span class="string">            appointment_status = 0,</span></span><br><span class="line"><span class="string">            appointment_datetime = NULL,</span></span><br><span class="line"><span class="string">            experience_status = 0,</span></span><br><span class="line"><span class="string">            experience_datetime = NULL,</span></span><br><span class="line"><span class="string">            experience_course_alias = NULL,</span></span><br><span class="line"><span class="string">            first_periods_course_datetime = NULL,</span></span><br><span class="line"><span class="string">            first_periods_course_alias = NULL,</span></span><br><span class="line"><span class="string">            cur_periods_sign_up_status = 0,</span></span><br><span class="line"><span class="string">            next_periods_sign_up_status = 0</span></span><br><span class="line"><span class="string">        WHERE</span></span><br><span class="line"><span class="string">            id = <span class="subst">&#123;$allow_user_id&#125;</span>;</span></span><br><span class="line"><span class="string">        &quot;</span>;</span><br><span class="line">        DB::select(<span class="variable">$sql</span>);</span><br><span class="line">        DB::select(<span class="string">&quot;delete from balletme_order where user_id = <span class="subst">&#123;$allow_user_id&#125;</span>&quot;</span>);</span><br><span class="line">        DB::select(<span class="string">&quot;delete from balletme_orderinfo where user_id = <span class="subst">&#123;$allow_user_id&#125;</span>&quot;</span>);</span><br><span class="line">        DB::select(<span class="string">&quot;delete from balletme_order_wait where user_id = <span class="subst">&#123;$allow_user_id&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检测公众号服务号通知通信问题</span></span><br><span class="line"><span class="regexp">//</span> <span class="variable">$data</span> = [</span><br><span class="line"><span class="regexp">//</span>     <span class="string">&#x27;course_detail_id&#x27;</span> =&gt; <span class="string">&#x27;ceshiID&#x27;</span>,</span><br><span class="line"><span class="regexp">//</span>     <span class="string">&#x27;course_name&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="regexp">//</span>     <span class="string">&#x27;class_start_time&#x27;</span> =&gt; <span class="string">&#x27;class_start_time&#x27;</span>,</span><br><span class="line"><span class="regexp">//</span>     <span class="string">&#x27;class_address&#x27;</span> =&gt; <span class="string">&#x27;class_address&#x27;</span>,</span><br><span class="line"><span class="regexp">//</span>     <span class="string">&#x27;class_number&#x27;</span> =&gt; <span class="string">&#x27;0人&#x27;</span>,</span><br><span class="line"><span class="regexp">//</span>     <span class="string">&#x27;course_number&#x27;</span> =&gt; <span class="string">&#x27;class_address&#x27;</span>,</span><br><span class="line"><span class="regexp">//</span> ];</span><br><span class="line"><span class="regexp">//</span> <span class="variable">$data</span>[<span class="string">&#x27;openid&#x27;</span>] = <span class="string">&#x27;o9GU10YqmGyqLHtlePn6PdL3GC9s&#x27;</span>;</span><br><span class="line"><span class="regexp">//</span> <span class="variable">$data</span>[<span class="string">&#x27;appid&#x27;</span>] = config(<span class="string">&#x27;wechat.mini_program.default.app_id&#x27;</span>);</span><br><span class="line"><span class="regexp">//</span> <span class="variable">$data</span>[<span class="string">&#x27;pagepath&#x27;</span>] = <span class="string">&#x27;pages/main/home/index&#x27;</span>;</span><br><span class="line"><span class="regexp">//</span> <span class="variable">$key</span> = BalletmeTemplateNoticeLog::TYPE_COURSE_CANCEL_NOONEINCLASS;</span><br><span class="line"><span class="regexp">//</span> <span class="variable">$send_status</span> =  WechatTemplateNotice::sendTemplateNotice(<span class="variable">$data</span>, <span class="variable">$key</span>);</span><br><span class="line"><span class="regexp">//</span> dd(<span class="variable">$send_status</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">## 小程序上传图片获取mediaid</span></span><br><span class="line"><span class="comment"># https://api.weixin.qq.com/cgi-bin/media/upload?=&amp;=image</span></span><br><span class="line"><span class="comment"># 文档：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/customer-message/customerServiceMessage.uploadTempMedia.html</span></span><br></pre></td></tr></table></figure>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会员身份过期提醒 使用 NoticeClient</span></span><br><span class="line">        $pass_identity_data = [</span><br><span class="line">            <span class="number">3</span> =&gt; [</span><br><span class="line">                <span class="number">7</span> =&gt; [</span><br><span class="line">                    <span class="number">0</span> =&gt; [</span><br><span class="line">                        <span class="string">&quot;identity_expire_day&quot;</span> =&gt; <span class="number">7</span>,</span><br><span class="line">                        <span class="string">&quot;identity_id&quot;</span> =&gt; <span class="number">6</span>,</span><br><span class="line">                        <span class="string">&quot;identity_type&quot;</span> =&gt; <span class="number">7</span>,</span><br><span class="line">                        <span class="string">&quot;identity_name&quot;</span> =&gt; <span class="string">&quot;时间卡2.0&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;identity_expire_time&quot;</span> =&gt; <span class="string">&quot;2021-10-17 00:00&quot;</span>,</span><br><span class="line">                    ],</span><br><span class="line">                    <span class="number">1</span> =&gt; [</span><br><span class="line">                        <span class="string">&quot;identity_expire_day&quot;</span> =&gt; <span class="number">7</span>,</span><br><span class="line">                        <span class="string">&quot;identity_id&quot;</span> =&gt; <span class="number">7</span>,</span><br><span class="line">                        <span class="string">&quot;identity_type&quot;</span> =&gt; <span class="number">7</span>,</span><br><span class="line">                        <span class="string">&quot;identity_name&quot;</span> =&gt; <span class="string">&quot;时间卡2.0&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;identity_expire_time&quot;</span> =&gt; <span class="string">&quot;2021-10-17 00:00&quot;</span>,</span><br><span class="line">                    ],</span><br><span class="line">                ],</span><br><span class="line">                <span class="number">30</span> =&gt; [</span><br><span class="line">                    <span class="number">0</span> =&gt; [</span><br><span class="line">                        <span class="string">&quot;identity_expire_day&quot;</span> =&gt; <span class="number">30</span>,</span><br><span class="line">                        <span class="string">&quot;identity_id&quot;</span> =&gt; <span class="number">3</span>,</span><br><span class="line">                        <span class="string">&quot;identity_type&quot;</span> =&gt; <span class="number">7</span>,</span><br><span class="line">                        <span class="string">&quot;identity_name&quot;</span> =&gt; <span class="string">&quot;时间卡2.0&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;identity_expire_time&quot;</span> =&gt; <span class="string">&quot;2021S5结束后&quot;</span>,</span><br><span class="line">                    ],</span><br><span class="line">                ],</span><br><span class="line">            ],</span><br><span class="line">        ];</span><br><span class="line">        </span><br><span class="line">        $a = [</span><br><span class="line">            <span class="string">&quot;user_id&quot;</span> =&gt; <span class="number">3</span>,</span><br><span class="line">            <span class="string">&quot;identity_type&quot;</span> =&gt; <span class="string">&quot;时间卡2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;identity_number_count&quot;</span> =&gt; <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;term_of_validity&quot;</span> =&gt; <span class="string">&quot;7天&quot;</span>,</span><br><span class="line">            <span class="string">&quot;expiration_time&quot;</span> =&gt; <span class="string">&quot;2021-10-17 00:00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;union_key&quot;</span> =&gt; <span class="string">&quot;notice_scene|identity_expire|day:7|uid:3|date:2021-10-09&quot;</span>,</span><br><span class="line">        ];</span><br><span class="line">        $notice_type_class = <span class="keyword">new</span> IdentityExpirationTipsStrategy($a);</span><br><span class="line">        $notice_concrete_service = <span class="keyword">new</span> NoticeSceneClient($notice_type_class);</span><br><span class="line">        $exec = $notice_concrete_service-&gt;smsNotice([]);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速生成通知场景</span></span><br><span class="line">        <span class="variable">$scenes</span> = BalletmeNoticeScene::getSceneTypeArray();</span><br><span class="line">        <span class="variable">$types</span> = BalletmeNoticeScene::getTypeArray();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$scenes</span> <span class="keyword">as</span> <span class="variable">$scene_key</span> =&gt; <span class="variable">$scene</span>) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$types</span> <span class="keyword">as</span> <span class="variable">$type_key</span> =&gt; <span class="variable">$type</span>) &#123;</span><br><span class="line">                <span class="variable">$pre_data</span> = [</span><br><span class="line">                    <span class="string">&#x27;type&#x27;</span> =&gt; <span class="variable">$scene_key</span>,</span><br><span class="line">                    <span class="string">&#x27;notice_type&#x27;</span> =&gt; <span class="variable">$type_key</span>,</span><br><span class="line">                    <span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">                ];</span><br><span class="line">                <span class="variable">$model</span> = <span class="keyword">new</span> BalletmeNoticeScene();</span><br><span class="line">                <span class="variable">$model</span>-&gt;create(<span class="variable">$pre_data</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dd(<span class="variable">$pre_data</span>);</span><br></pre></td></tr></table></figure>

<h3 id="批量更新方法"><a href="#批量更新方法" class="headerlink" title="批量更新方法"></a>批量更新方法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成并执行批量更新SQL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $table</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $multipleData</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> false|int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">genBatchUpdateSql</span>(<span class="params"><span class="variable">$table</span>, <span class="variable">$multipleData</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$table_class</span> = <span class="keyword">new</span> <span class="variable">$table</span>();</span><br><span class="line">    <span class="variable">$table_class</span>-&gt;getRouteKey() . <span class="variable">$table_class</span>-&gt;getTable();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$multipleData</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&quot;数据不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$tableName</span> = config(<span class="string">&#x27;database.connections.mysql.prefix&#x27;</span>) . <span class="variable">$table_class</span>-&gt;getTable();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$updateColumn</span> = array_keys(<span class="variable">$multipleData</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="variable">$referenceColumn</span> = <span class="variable">$updateColumn</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$updateColumn</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="variable">$whereIn</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$q</span> = <span class="string">&quot;UPDATE &quot;</span> . <span class="variable">$tableName</span> . <span class="string">&quot; SET &quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$updateColumn</span> <span class="keyword">as</span> <span class="variable">$uColumn</span>) &#123;</span><br><span class="line">            <span class="variable">$q</span> .= <span class="variable">$uColumn</span> . <span class="string">&quot; = CASE &quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$multipleData</span> <span class="keyword">as</span> <span class="variable">$data</span>) &#123;</span><br><span class="line">                <span class="variable">$q</span> .= <span class="string">&quot;WHEN &quot;</span> . <span class="variable">$referenceColumn</span> . <span class="string">&quot; = &quot;</span> . <span class="variable">$data</span>[<span class="variable">$referenceColumn</span>] . <span class="string">&quot; THEN &#x27;&quot;</span> . <span class="variable">$data</span>[<span class="variable">$uColumn</span>] . <span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$q</span> .= <span class="string">&quot;ELSE &quot;</span> . <span class="variable">$uColumn</span> . <span class="string">&quot; END, &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$multipleData</span> <span class="keyword">as</span> <span class="variable">$data</span>) &#123;</span><br><span class="line">            <span class="variable">$whereIn</span> .= <span class="string">&quot;&#x27;&quot;</span> . <span class="variable">$data</span>[<span class="variable">$referenceColumn</span>] . <span class="string">&quot;&#x27;, &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$q</span> = rtrim(<span class="variable">$q</span>, <span class="string">&quot;, &quot;</span>) . <span class="string">&quot; WHERE &quot;</span> . <span class="variable">$referenceColumn</span> . <span class="string">&quot; IN (&quot;</span> . rtrim(<span class="variable">$whereIn</span>, <span class="string">&#x27;, &#x27;</span>) . <span class="string">&quot;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DB::update(DB::raw(<span class="variable">$q</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="批量新增"><a href="#批量新增" class="headerlink" title="批量新增"></a>批量新增</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$scenes</span> = BalletmeNoticeScene::getSceneTypeArray();</span><br><span class="line"><span class="variable">$types</span> = BalletmeNoticeScene::getTypeArray();</span><br><span class="line"><span class="variable">$insert_data</span> = [];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$scenes</span> <span class="keyword">as</span> <span class="variable">$scene_key</span> =&gt; <span class="variable">$scene</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$types</span> <span class="keyword">as</span> <span class="variable">$type_key</span> =&gt; <span class="variable">$type</span>) &#123;</span><br><span class="line">        <span class="variable">$insert_data</span>[] = [</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span> =&gt; <span class="variable">$scene_key</span>,</span><br><span class="line">            <span class="string">&#x27;notice_type&#x27;</span> =&gt; <span class="variable">$type_key</span>,</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$model</span> = <span class="keyword">new</span> BalletmeNoticeScene();</span><br><span class="line"><span class="variable">$model</span>-&gt;insert(<span class="variable">$insert_data</span>);</span><br><span class="line">dump(<span class="variable">$insert_data</span>);</span><br></pre></td></tr></table></figure>


<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"># 表格相关</span><br><span class="line"><span class="attribute">Grid</span>::init(function (Grid <span class="variable">$grid</span>) &#123;</span><br><span class="line">    <span class="variable">$grid</span>-&gt;<span class="built_in">disableActions</span>();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;<span class="built_in">disablePagination</span>();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;<span class="built_in">disableCreateButton</span>();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;<span class="built_in">disableFilter</span>();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;<span class="built_in">disableRowSelector</span>();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;<span class="built_in">disableColumnSelector</span>();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;<span class="built_in">disableTools</span>();</span><br><span class="line">    <span class="variable">$grid</span>-&gt;<span class="built_in">disableExport</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$grid</span>-&gt;<span class="built_in">actions</span>(function (Grid\Displayers\Actions $actions) &#123;</span><br><span class="line">        <span class="variable">$actions</span>-&gt;<span class="built_in">disableView</span>();</span><br><span class="line">        <span class="variable">$actions</span>-&gt;<span class="built_in">disableEdit</span>();</span><br><span class="line">        <span class="variable">$actions</span>-&gt;<span class="built_in">disableDelete</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    # 自定义批量操作</span><br><span class="line">    <span class="variable">$grid</span>-&gt;<span class="built_in">batchActions</span>(function ($batch) &#123;</span><br><span class="line">        <span class="variable">$batch</span>-&gt;<span class="built_in">add</span>(new BatchChangeTicketSeatType());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"><span class="bullet">* </span>success 绿色</span><br><span class="line"><span class="bullet">* </span>danger 红色</span><br><span class="line"><span class="bullet">* </span>warning 黄色</span><br><span class="line"><span class="bullet">* </span>info 蓝色</span><br><span class="line"><span class="bullet">* </span>primary 深蓝</span><br><span class="line"><span class="bullet">* </span>default 灰色</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表格内添加操作 按钮</span></span><br><span class="line"><span class="variable">$grid</span>-&gt;actions(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$actions</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$actions</span>-&gt;add(<span class="keyword">new</span> Upload());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按钮文件</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Admin</span>\<span class="title">Actions</span>\<span class="title">RowAction</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Encore</span>\<span class="title">Admin</span>\<span class="title">Actions</span>\<span class="title">RowAction</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upload</span> <span class="keyword">extends</span> <span class="title">RowAction</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$selector</span> = <span class="string">&#x27;.replicate--grid-row&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array|null|string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;测试&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">Model <span class="variable">$model</span>,Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// $request ...</span></span><br><span class="line">        dd(<span class="variable">$model</span>-&gt;id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response()-&gt;success(<span class="string">&#x27;Success message...&#x27;</span>)-&gt;refresh();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">html</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&lt;&lt;&lt;HTML</span></span><br><span class="line"><span class="string">        &lt;a class=&quot;btn btn-sm btn-default replicate--grid-row&quot;&gt;测试 rowAction&lt;/a&gt;</span></span><br><span class="line"><span class="string">HTML</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="laravel创建composer包"><a href="#laravel创建composer包" class="headerlink" title="laravel创建composer包"></a>laravel创建composer包</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Composer 安装加速</span><br><span class="line">composer <span class="built_in">config</span> -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 全局安装composer第三方打包工具，记得composer环境变量</span><br><span class="line">composer global <span class="built_in">require</span> overtrue/<span class="built_in">package</span>-builder </span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 创建composer包</span><br><span class="line"><span class="built_in">package</span>-builder build liguoxin129/包名</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> laravel项目导入<span class="built_in">path</span>，并且安装</span><br><span class="line">composer <span class="built_in">config</span> repositories.liguoxin_model_cache <span class="built_in">path</span> ../liguoxin129/model-cache/</span><br><span class="line">composer <span class="built_in">require</span> liguoxin129/model-cache:dev-master</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> coding composer 代码...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Study</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/blog/p/a28b9864/</url>
    <content><![CDATA[<p>编程基础哦，大学主修的也是它，要不断维护下去，💪🏻</p>
<span id="more"></span>


<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>真题：尽可能写出多的Linux命令</p>
<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h4 id="系统安全"><a href="#系统安全" class="headerlink" title="系统安全"></a>系统安全</h4><ul>
<li><code>sudo</code> 以系统管理者的身份执行指令</li>
<li><code>su</code> 用于变更为其他使用者的身份</li>
</ul>
<h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><ul>
<li><p><code>chmod</code> 控制文件的权限</p>
<ul>
<li>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</li>
<li><ul>
<li>表示增加权限、- 表示取消权限、&#x3D; 表示唯一设定权限。</li>
</ul>
</li>
<li>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</li>
</ul>
</li>
<li><p><code>setfacl</code> 可以更精确的控制权限的分配。</p>
</li>
</ul>
<h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><ul>
<li><p><code>w</code> 显示目前登入系统的用户信息。</p>
</li>
<li><p><code>top</code> 实时显示 process 的动态。 <a href="https://www.runoob.com/linux/linux-comm-top.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-comm-top.html</a></p>
</li>
<li><p><code>ps</code> 显示当前进程 process 的状态。</p>
</li>
<li><p><code>kill</code> 用于删除执行中的程序或工作。</p>
<ul>
<li>@param [-s &lt;信息名称或编号&gt;][程序]　或　kill [-l &lt;信息编号&gt;]</li>
</ul>
</li>
<li><p><code>pkill</code> 终止进程，按终端号踢出用户</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>信号编号</th>
<th>信号名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>EXIT</td>
<td>程序退出时收到该信息。</td>
</tr>
<tr>
<td>1</td>
<td>HUP</td>
<td>挂掉电话线或终端连接的挂起信号，这个信号也会造成某些进程在没有终止的情况下重新初始化。</td>
</tr>
<tr>
<td>2</td>
<td>INT</td>
<td>表示结束进程，但并不是强制性的，常用的 “Ctrl+C” 组合键发出就是一个 kill -2 的信号。</td>
</tr>
<tr>
<td>3</td>
<td>QUIT</td>
<td>退出。</td>
</tr>
<tr>
<td>9</td>
<td>KILL</td>
<td>杀死进程，即强制结束进程。</td>
</tr>
<tr>
<td>11</td>
<td>SEGV</td>
<td>段错误。</td>
</tr>
<tr>
<td>15</td>
<td>TERM</td>
<td>正常结束进程，是 kill 命令的默认信号。</td>
</tr>
</tbody></table>
<ul>
<li><code>pstree</code> 将所有行程以树状图显示</li>
<li><code>killall</code> 根据名字来杀死进程，它会给指定名字的所有进程发送信息。</li>
</ul>
<p>问题：有&#x2F;无pid，如何杀掉一个进程</p>
<h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><ul>
<li><code>id</code> 显示用户的ID，以及所属群组的ID。</li>
<li><code>usermod</code> 用于修改用户帐号。</li>
<li><code>useradd</code> 用于建立用户帐号。</li>
<li><code>groupadd</code> 用于创建一个新的工作组，新工作组的信息将被添加到系统文件中。</li>
<li><code>userdel</code> 用于删除用户帐号。加 <code>-r</code> 连同用户文件一起删除</li>
</ul>
<h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><ul>
<li><code>mount</code> 用于挂载Linux系统外的文件。</li>
<li><code>umount</code> 用于卸除文件系统。</li>
<li><code>fsck</code> 用于 检查与修复 Linux 档案系统，可以同时检查一个或多个 Linux 档案系统。</li>
<li><code>df</code> 用于显示目前在Linux系统上的文件系统的磁盘使用情况统计。</li>
<li><code>du</code> 用于显示目录或文件的大小。</li>
</ul>
<p>####系统关机和重启</p>
<ul>
<li><code>shutdown</code> 用来进行关机程序，并且在关机以前传送讯息给所有使用者正在执行的程序，shutdown 也可以用来重开机。</li>
<li><code>reboot</code> 重新启动计算机。</li>
</ul>
<h4 id="网络应用"><a href="#网络应用" class="headerlink" title="网络应用"></a>网络应用</h4><ul>
<li><code>curl</code> 利用URL规则在命令行下工作的文件传输工具</li>
<li><code>telnet</code> 用于远端登入。</li>
<li><code>mail</code> 邮件命令</li>
<li><code>elinks</code> 文本编辑器</li>
</ul>
<h4 id="网络测试"><a href="#网络测试" class="headerlink" title="网络测试"></a>网络测试</h4><ul>
<li><code>ping</code> 用于检测主机</li>
<li><code>netstat</code> 用于显示网络状态。</li>
<li><code>host</code> 测试域名系统工作是否正常。</li>
</ul>
<h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><ul>
<li><code>hostname</code> 查看更改hostname命令解析</li>
<li><code>ipconfig</code> 网络配置命令</li>
</ul>
<h4 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h4><ul>
<li><code>ssh</code> 远程连接工具 <a href="https://www.cnblogs.com/ftl1012/p/ssh.html" target="_blank" rel="noopener">https://www.cnblogs.com/ftl1012/p/ssh.html</a></li>
<li><code>screen</code> 由GNU计划开发的用于命令行终端切换的自由软件。 <a href="https://idc.wanyunshuju.com/cym/68.html" target="_blank" rel="noopener">https://idc.wanyunshuju.com/cym/68.html</a></li>
<li><code>clear</code> 用于清除屏幕。</li>
<li><code>who</code> 用于显示系统中有哪些使用者正在上面，显示的资料包含了使用者 ID、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU 使用量、动作等等。</li>
<li><code>date</code> 显示或设定系统的日期与时间</li>
</ul>
<h4 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h4><ul>
<li><code>yum</code> 一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。</li>
<li><code>rpm</code> RPM软件包的管理工具。</li>
<li><code>apt-get</code> deb包管理式的操作系统，主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。</li>
</ul>
<h4 id="文件查找和比较"><a href="#文件查找和比较" class="headerlink" title="文件查找和比较"></a>文件查找和比较</h4><ul>
<li><code>locate</code> 用于查找符合条件的文档，他会去保存文档和目录名称的数据库内，查找合乎范本样式条件的文档或目录。</li>
<li><code>find</code> 用来在指定目录下查找文件。 <a href="https://www.runoob.com/linux/linux-comm-find.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-comm-find.html</a></li>
</ul>
<h4 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h4><ul>
<li><code>head</code></li>
<li><code>tail</code></li>
<li><code>less</code></li>
<li><code>more</code></li>
</ul>
<h4 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h4><ul>
<li><code>touch</code></li>
<li><code>unlink</code></li>
<li><code>rename</code></li>
<li><code>ln</code></li>
<li><code>cat</code></li>
</ul>
<h4 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h4><ul>
<li><code>cd</code></li>
<li><code>mv</code></li>
<li><code>rm</code></li>
<li><code>pwd</code></li>
<li><code>tree</code></li>
<li><code>cp</code></li>
<li><code>ls</code></li>
</ul>
<h4 id="文件权限属性"><a href="#文件权限属性" class="headerlink" title="文件权限属性"></a>文件权限属性</h4><ul>
<li><code>setfacl</code></li>
<li><code>chmod</code></li>
<li><code>chown</code></li>
<li><code>chgrp</code></li>
</ul>
<h4 id="压缩-x2F-解压"><a href="#压缩-x2F-解压" class="headerlink" title="压缩&#x2F;解压"></a>压缩&#x2F;解压</h4><ul>
<li><code>bzip2/bunzip2</code></li>
<li><code>gzip/gunzip</code></li>
<li><code>zip/unzip</code></li>
<li><code>tar</code></li>
</ul>
<h4 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h4><ul>
<li><code>ftp</code></li>
<li><code>scp</code></li>
</ul>
<hr>
<h3 id="系统定时任务"><a href="#系统定时任务" class="headerlink" title="系统定时任务"></a>系统定时任务</h3><h4 id="开启定时任务"><a href="#开启定时任务" class="headerlink" title="开启定时任务"></a>开启定时任务</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span></span><br><span class="line">*<span class="regexp">/1 * * * * root /u</span>sr<span class="regexp">/local/</span>php<span class="regexp">/bin/</span>php <span class="regexp">/home/</span>wwwroot<span class="regexp">/app.enticementchina.com/</span>think activity</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>crontab</code></p>
<ul>
<li>crontab -e #编写定时任务 命令(分时日月周)</li>
<li>在以上各个字段中，还可以使用以下特殊字符：</li>
<li>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li>
<li>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</li>
<li>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</li>
<li>正斜线（&#x2F;）：可以用正斜线指定时间的间隔频率，例如“0-23&#x2F;2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*&#x2F;10，如果用在minute字段，表示每十分钟执行一次。</li>
</ul>
  <img src="/blog/p/a28b9864/crontab%E6%A0%BC%E5%BC%8F.png" class="" title="crontab格式">
</li>
<li><p><code>at</code></p>
<ul>
<li>at 2:00 tomorrow<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">at&gt;/home/do_job</span><br><span class="line">at&gt;Ctrl+D</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="vi-x2F-vim编辑器"><a href="#vi-x2F-vim编辑器" class="headerlink" title="vi&#x2F;vim编辑器"></a>vi&#x2F;vim编辑器</h3><h4 id="模式-vim还有视图模式"><a href="#模式-vim还有视图模式" class="headerlink" title="模式(vim还有视图模式)"></a>模式(vim还有视图模式)</h4><ul>
<li>一般模式<ul>
<li>删除</li>
<li>复制</li>
<li>粘贴</li>
</ul>
</li>
<li>编辑模式<ul>
<li>切换成编辑模式: i&#x2F;I&#x2F;o&#x2F;O&#x2F;a&#x2F;A&#x2F;r&#x2F;R</li>
</ul>
</li>
<li>命令行模式<ul>
<li>: &#x2F; ？</li>
</ul>
</li>
<li>移动光标<ul>
<li>ctrl+f</li>
<li>ctrl+b</li>
<li>0或者功能键home</li>
<li>$或者功能键End</li>
<li>G</li>
<li>N+enter</li>
</ul>
</li>
<li>查找和替换<ul>
<li>&#x2F;word</li>
<li>?word</li>
<li>:n1,n2s&#x2F;word&#x2F;1&#x2F;word2&#x2F;g</li>
<li>:1,$s&#x2F;word1&#x2F;word2&#x2F;g</li>
<li>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc</li>
</ul>
</li>
</ul>
<h4 id="删除、复制、粘贴"><a href="#删除、复制、粘贴" class="headerlink" title="删除、复制、粘贴"></a>删除、复制、粘贴</h4><ul>
<li>x,X</li>
<li>dd</li>
<li>ndd</li>
<li>yy</li>
<li>nyy</li>
<li>p</li>
<li>P</li>
<li>ctrl+r</li>
<li>.</li>
</ul>
<h4 id="保存和退出"><a href="#保存和退出" class="headerlink" title="保存和退出"></a>保存和退出</h4><ul>
<li>w</li>
<li>q</li>
<li>wd</li>
</ul>
<h4 id="视图模式-vim"><a href="#视图模式-vim" class="headerlink" title="视图模式(vim)"></a>视图模式(vim)</h4><ul>
<li>v</li>
<li>V</li>
<li>ctrl+v</li>
<li>y</li>
<li>d</li>
</ul>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul>
<li>:setnu</li>
<li>:setnonu</li>
</ul>
<hr>
<h3 id="shell基础"><a href="#shell基础" class="headerlink" title="shell基础"></a>shell基础</h3><h4 id="脚本执行方式"><a href="#脚本执行方式" class="headerlink" title="脚本执行方式"></a>脚本执行方式</h4><ol>
<li><p>赋予权限，直接执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;<span class="built_in">chmod</span> +x test.sh;</span><br><span class="line">&gt;./test.sh</span><br></pre></td></tr></table></figure></li>
<li><p>调用解释器使得脚本运行</p>
<ul>
<li>bash</li>
<li>csh</li>
<li>ash</li>
<li>bsh</li>
<li>ksh</li>
</ul>
</li>
<li><p>使用 <code>source test.sh</code></p>
</li>
</ol>
<h4 id="编写基础"><a href="#编写基础" class="headerlink" title="编写基础"></a>编写基础</h4><ol>
<li>开头用 <code>#!</code> 指定脚本解释器，例如：<code>#!/bin/sh</code></li>
</ol>
<p>真题：如何实现每天0点钟重启服务器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;crontab -e</span><br><span class="line">&gt;0 0 * * * reboot</span><br><span class="line"><span class="comment">#分时日月周</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua</title>
    <url>/blog/p/6fbb57c1/</url>
    <content><![CDATA[<p>学习一下lua语言，使用到的场景有许多，游戏开发、redis中并发问题。</p>
<span id="more"></span>
<h2 id="有关游戏的"><a href="#有关游戏的" class="headerlink" title="有关游戏的"></a>有关游戏的</h2><p>在编写<code>第三人称游戏</code>的开发核心代码时，我们可以考虑以下几个方面：</p>
<ul>
<li>使用<code>变量</code>来存储<code>玩家的位置和姿势</code>，并根据键盘或控制器的输入来更新玩家的位置。</li>
<li>使用<code>函数</code>来封装<code>游戏世界中的各种对象</code>，例如：敌人、道具、建筑物等。</li>
<li>使用<code>循环</code>来处理<code>游戏世界中各个对象的逻辑</code>，例如：敌人的移动、道具的消失、建筑物的损坏等。</li>
<li>使用<code>条件语句</code>来处理游戏<code>世界中各种事件的发生</code>，例如：玩家的死亡、敌人的攻击、道具的收集等。</li>
</ul>
<p>以下是一段基本的第三人称游戏开发核心代码的例子：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 定义玩家的位置和姿势变量</span></span><br><span class="line"><span class="keyword">local</span> playerPosition = &#123;x = <span class="number">0</span>, y = <span class="number">0</span>, z = <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">local</span> playerRotation = &#123;x = <span class="number">0</span>, y = <span class="number">0</span>, z = <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义游戏世界中各种对象的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createEnemy</span><span class="params">(position, rotation)</span></span></span><br><span class="line"><span class="keyword">local</span> enemy = &#123;</span><br><span class="line">    position = position,</span><br><span class="line">    rotation = rotation,</span><br><span class="line">    health = <span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> enemy</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createItem</span><span class="params">(position, rotation)</span></span></span><br><span class="line"><span class="keyword">local</span> item = &#123;</span><br><span class="line">    position = position,</span><br><span class="line">    rotation = rotation,</span><br><span class="line">    duration = <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> item</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBuilding</span><span class="params">(position, rotation)</span></span></span><br><span class="line"><span class="keyword">local</span> building = &#123;</span><br><span class="line">    position = position,</span><br><span class="line">    rotation = rotation,</span><br><span class="line">    health = <span class="number">1000</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> building</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 初始化游戏世界中的各种对象</span></span><br><span class="line"><span class="keyword">local</span> enemies = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> items = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> buildings = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 处理游戏世界中各个对象</span></span><br></pre></td></tr></table></figure>

<h3 id="计算炮弹的轨迹"><a href="#计算炮弹的轨迹" class="headerlink" title="计算炮弹的轨迹"></a>计算炮弹的轨迹</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 炮弹的初始位置</span></span><br><span class="line"><span class="keyword">local</span> bullet_x = <span class="number">10</span></span><br><span class="line"><span class="keyword">local</span> bullet_y = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 炮弹的初始速度和方向</span></span><br><span class="line"><span class="keyword">local</span> bullet_speed = <span class="number">100</span></span><br><span class="line"><span class="keyword">local</span> bullet_angle = <span class="number">45</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 炮弹的重力加速度</span></span><br><span class="line"><span class="keyword">local</span> gravity = <span class="number">9.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算炮弹的位移</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">time</span> = <span class="number">0.1</span></span><br><span class="line">bullet_x = bullet_x + bullet_speed * <span class="built_in">math</span>.<span class="built_in">cos</span>(bullet_angle) * <span class="built_in">time</span></span><br><span class="line">bullet_y = bullet_y + bullet_speed * <span class="built_in">math</span>.<span class="built_in">sin</span>(bullet_angle) * <span class="built_in">time</span> - <span class="number">0.5</span> * gravity * <span class="built_in">time</span> * <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 输出炮弹的新位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bullet_x = &quot;</span> .. bullet_x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bullet_y = &quot;</span> .. bullet_y)</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p><a href="http://www.lua.org/start.html" target="_blank" rel="noopener">http://www.lua.org/start.html</a></p>
</blockquote>
<h3 id="MAC源代码编译"><a href="#MAC源代码编译" class="headerlink" title="MAC源代码编译"></a>MAC源代码编译</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">curl -R -O http://www.lua.org/ftp/lua-<span class="number">5</span>.<span class="number">4</span>.<span class="number">4</span>.tar.gz</span><br><span class="line">tar zxf lua-<span class="number">5</span>.<span class="number">4</span>.<span class="number">4</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> lua-<span class="number">5</span>.<span class="number">4</span>.<span class="number">4</span></span><br><span class="line">make all test</span><br><span class="line"></span><br><span class="line"># 出现这个说明成功</span><br><span class="line">lua -v</span><br><span class="line">Lua <span class="number">5</span>.<span class="number">4</span>.<span class="number">4</span>  Copyright (C) <span class="number">1994</span>-<span class="number">2022</span> Lua.org, PUC-Rio</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">sudo make all install</span><br><span class="line"></span><br><span class="line">lua -v</span><br></pre></td></tr></table></figure>

<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ol>
<li><a href="https://www.lua.org/download.html" target="_blank" rel="noopener">https://www.lua.org/download.html</a> 选择 <code>Building</code> -&gt; <code>get a binary</code></li>
<li>Download</li>
<li>lua-5.4.2_Win64_bin.zip</li>
<li>Windows 高级系统设置 环境变量 系统变量 Path + <code>C:\Users\lee\lua-5.4.2_Win64_bin</code><figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line">lua54 -v</span><br><span class="line"><span class="meta">&gt;</span> <span class="language-javascript"><span class="title class_">Lua</span> <span class="number">5.4</span><span class="number">.2</span>  <span class="title class_">Copyright</span> (C) <span class="number">1994</span>-<span class="number">2020</span> <span class="title class_">Lua</span>.<span class="property">org</span>, <span class="variable constant_">PUC</span>-<span class="title class_">Rio</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>注释</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    多行注释</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure>

<p>类型和值</p>
<blockquote>
<p>使用 type 可以获取 <code>值</code> 对应的类型名称(return string)</p>
</blockquote>
<p>8中基本类型</p>
<ul>
<li>nil(空，主要作用是和其他值进行区分，初始化的时候会被回收内存)</li>
<li>boolean</li>
<li>number</li>
<li>string</li>
<li>userdata(用户数据，例如，标准I&#x2F;O库使用用户数据来表示打开的文件)</li>
<li>function(函数)</li>
<li>thread(线程)</li>
<li>table(表)</li>
</ul>
<p>数值常量<br>整型 和 浮点型 都是”number”，可以相互转换，也相等</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">1</span> == <span class="number">1.0</span> <span class="comment">--&gt; true</span></span><br><span class="line">&gt; <span class="number">-3</span> == <span class="number">-3.0</span> <span class="comment">--&gt; true</span></span><br><span class="line">&gt; <span class="number">0.2e3</span> == <span class="number">200</span> <span class="comment">--&gt; true</span></span><br></pre></td></tr></table></figure>
<p>如果要区分整型 和 浮点型，则使用<code>math.type</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">math</span>.<span class="built_in">type</span>(<span class="number">3</span>)  <span class="comment">--&gt; integer</span></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">type</span>(<span class="number">3.0</span>) <span class="comment">--&gt; float</span></span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"># 幂运算 ^ <span class="keyword">return</span> float</span><br><span class="line">x^<span class="number">0.5</span> 计算x的平方根</span><br><span class="line">x^(<span class="number">1</span>/<span class="number">3</span>) 计算x的立方根</span><br></pre></td></tr></table></figure>

<p>关系运算</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">== 相等性测试</span><br><span class="line">~= 不等性测试</span><br><span class="line">&lt;=</span><br><span class="line">&gt;=</span><br><span class="line">&gt;</span><br><span class="line">&lt;</span><br></pre></td></tr></table></figure>
<p>数学库(math)<br>数学函数、<br>指数函数、<br>取整函数</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">floor</span> 向负无穷取整</span><br><span class="line"><span class="built_in">ceil</span> 向正无穷取整</span><br><span class="line"><span class="built_in">modf</span> 向零取整，额外返回小数部分</span><br></pre></td></tr></table></figure>
<p>最大和最小函数maxmin、<br>随机数random</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">random</span>() 不带参数[<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">random</span>() 带<span class="number">1</span>参数：整型，[<span class="number">1</span>,n]</span><br><span class="line"><span class="built_in">random</span>() 带<span class="number">2</span>参数：整型，[n,y]</span><br><span class="line">例子：<span class="built_in">random</span>(<span class="number">6</span>) 模拟筛子</span><br><span class="line"></span><br><span class="line"><span class="built_in">randomseed</span> 设置伪随机数发生器的种子，，通常调用<span class="built_in">math</span>.<span class="built_in">randomseed</span>(<span class="built_in">os</span>.<span class="built_in">time</span>())来使用当前系统时间作为种子初始化随机数发生器</span><br></pre></td></tr></table></figure>
<p>πpi、<br>huge(最大可表示数值，大多数平台代表inf)</p>
<p>表示范围</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>整型存储</th>
<th>浮点型存储</th>
</tr>
</thead>
<tbody><tr>
<td>标准Lua</td>
<td>64个比特位 最大值是2^63-1</td>
<td>双精度，64个比特位，11位为指数；16个有效十进制位</td>
</tr>
<tr>
<td>精简Lua</td>
<td>32个比特位 最大值是2^31-1</td>
<td>单精度，32个比特位；7个有效十进制位</td>
</tr>
</tbody></table>
<p>双精度浮点数的限制：</p>
<ul>
<li>回环</li>
<li>超过表示范围之后不可控，会导致精度缺失，要谨慎思考所使用的表示方式</li>
</ul>
<p>强制转换<br>对于整型 可以使用 + 0.0 强制转换成浮点型</p>
<p>但是如果精度缺失后，可以使用 与零进行按位或运算，可以讲浮点型强制转换成整型</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;<span class="number">2</span>^<span class="number">53</span>         <span class="comment">--&gt; 9.007199254741e+15 (浮点型值)</span></span><br><span class="line">&gt;<span class="number">2</span>^<span class="number">53</span> | <span class="number">0</span>     <span class="comment">--&gt; 9007199254740992 (整型值)</span></span><br></pre></td></tr></table></figure>
<p>练习：<br>练习3.1：以下哪些是有效的数值常量？它们的值分别是多少？</p>
<img src="/blog/p/6fbb57c1/3.9%E7%BB%83%E4%B9%A0-%E6%9C%89%E6%95%88%E6%95%B0%E5%80%BC1.png" class="" title="3.9练习-有效数值1.png">

<p>练习3.2：解释下列表达式之所以得出相应结果的原因。（注意：整型算术运算总是会回环。）</p>
<img src="/blog/p/6fbb57c1/3.9%E7%BB%83%E4%B9%A0-%E6%9C%89%E6%95%88%E6%95%B0%E5%80%BC2.png" class="" title="3.9练习-有效数值2.png">

<p>练习3.3：下列代码的输出结果是什么？</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">-10</span>, <span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i, i%<span class="number">3</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<img src="/blog/p/6fbb57c1/3.9%E7%BB%83%E4%B9%A0-%E6%9C%89%E6%95%88%E6%95%B0%E5%80%BC3.png" class="" title="3.9练习-有效数值3.png">

<h2 id="3-7-运算符优先级"><a href="#3-7-运算符优先级" class="headerlink" title="3.7 运算符优先级"></a>3.7 运算符优先级</h2><p>TODO</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="33-线程和状态"><a href="#33-线程和状态" class="headerlink" title="33 线程和状态"></a>33 线程和状态</h2><p>多线程：共享内存(重点1)的抢占式线程(重点2)</p>
<p><code>Lua协程</code> 本质就是<code>线程(thread)</code></p>
<p>lua_pushnumber时 lua_State这些函数的第一个参数，不仅表示的lua状态</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux测试机构建</title>
    <url>/blog/p/aa9fa5e8/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="Linux版本选择"><a href="#Linux版本选择" class="headerlink" title="Linux版本选择"></a>Linux版本选择</h2><blockquote>
<p><code>https://developer.aliyun.com/mirror/</code> 选择 <code>OS</code> 镜像</p>
</blockquote>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">初始化</span></span><br><span class="line">output=`yum install -y lrzsz vim wget autoconf`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">设置Centos源</span></span><br><span class="line">cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"><span class="meta"># </span><span class="language-bash">非阿里云服务器</span></span><br><span class="line">output=`sed -i -e &#x27;/mirrors.cloud.aliyuncs.com/d&#x27; -e &#x27;/mirrors.aliyuncs.com/d&#x27; /etc/yum.repos.d/CentOS-Base.repo`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">阿里云服务器</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">output=`<span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup`</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">output=`curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo`</span></span><br><span class="line"></span><br><span class="line">output=`yum makecache`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">git</span></span><br><span class="line">output=`yum install -y git-all`</span><br><span class="line"></span><br><span class="line">output=` `</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">-N 密码 -f 保存文件 -q静默模式</span></span><br><span class="line">output=`ssh-keygen -t rsa -C &quot;guoxinle****e129@gmail&quot; -N &#x27;sisi5201314&#x27; -f id_rsa -q`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">docker</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">step 1: 安装必要的一些系统工具</span></span><br><span class="line">output=`sudo yum install -y yum-utils device-mapper-persistent-data lvm2`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Step 2: 添加软件源信息</span></span><br><span class="line">output=`sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Step 3: 更新并安装Docker-CE</span></span><br><span class="line">output=`sudo yum makecache fast`</span><br><span class="line">output=`sudo yum -y install docker-ce-18.03.1.ce-1.el7.centos`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Step 4: 开启Docker服务</span></span><br><span class="line">output=`systemctl start docker.service`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看安装的版本</span></span><br><span class="line">output=`sudo docker version`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">开机自启</span></span><br><span class="line">output=`systemctl enable docker.service`</span><br><span class="line"></span><br><span class="line">output=`echo &quot;&#123;\&quot;registry-mirrors\&quot;: [\&quot;https://9cpn8tt6.mirror.aliyuncs.com/\&quot;]&#125;&quot; &gt;&gt; /etc/docker/daemon.json`</span><br><span class="line">output=`sudo systemctl daemon-reload`</span><br><span class="line">output=`sudo systemctl restart docker`</span><br></pre></td></tr></table></figure>

<h2 id="设置-Linux-网络"><a href="#设置-Linux-网络" class="headerlink" title="设置 Linux 网络"></a>设置 Linux 网络</h2><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="comment">#要保证linux是桥接模式，才能自定义IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改Linux IP</span></span><br><span class="line"><span class="string">vim</span> /<span class="string">etc</span>/<span class="string">sysconfig</span>/<span class="string">network-scripts</span>/<span class="string">ifcfg-ens33</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改Linux 主机名 hostname</span></span><br><span class="line"><span class="string">hostnamectl</span> <span class="built_in">set-hostname</span> <span class="string">xxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#子网掩码(24=255.255.255.0)</span></span><br></pre></td></tr></table></figure>

<h2 id="安装基础软件包"><a href="#安装基础软件包" class="headerlink" title="安装基础软件包"></a>安装基础软件包</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">yum install -y vim wget <span class="built_in">auto</span>conf</span><br></pre></td></tr></table></figure>

<h2 id="设置Centos源"><a href="#设置Centos源" class="headerlink" title="设置Centos源"></a>设置Centos源</h2><blockquote>
<p><a href="https://developer.aliyun.com/mirror/centos" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/centos</a></p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">mv <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/CentOS-Base.repo /</span>etc<span class="regexp">/yum.repos.d/</span>CentOS-Base.repo.backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非阿里云ECS用户会出现 Couldn&#x27;t resolve host &#x27;mirrors.cloud.aliyuncs.com&#x27; 信息，不影响使用。用户也可自行修改相关配置: eg:</span></span><br><span class="line">sed -i -e <span class="string">&#x27;/mirrors.cloud.aliyuncs.com/d&#x27;</span> -e <span class="string">&#x27;/mirrors.aliyuncs.com/d&#x27;</span> <span class="regexp">/etc/yum</span>.repos.d/CentOS-Base.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Centos7</span></span><br><span class="line">curl -o <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/CentOS-Base.repo https:/</span><span class="regexp">/mirrors.aliyun.com/</span>repo/Centos-<span class="number">7</span>.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Centos8</span></span><br><span class="line">curl -o <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/CentOS-Base.repo https:/</span><span class="regexp">/mirrors.aliyun.com/</span>repo/Centos-<span class="number">8</span>.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑文件</span></span><br><span class="line">vim /etc<span class="built_in">/profile</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="comment">#http代理</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">http_proxy</span>=<span class="string">&quot;http://192.168.3.3:10808&quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">https_proxy</span>=<span class="string">&quot;http://192.168.3.3:10808&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sock5代理</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">http_proxy</span>=<span class="string">&quot;socks5://192.168.3.3:10808&quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">https_proxy</span>=<span class="string">&quot;socks5://192.168.3.3:10808&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上面只能选择一种代理</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h2 id="安装-VMwareTools"><a href="#安装-VMwareTools" class="headerlink" title="安装 VMwareTools"></a>安装 VMwareTools</h2><blockquote>
<p><a href="https://docs.vmware.com/en/VMware-Workstation-Pro/15.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html" target="_blank" rel="noopener">https://docs.vmware.com/en/VMware-Workstation-Pro/15.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html</a></p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/mnt/</span>cdrom</span><br><span class="line">mount <span class="regexp">/dev/</span>cdrom <span class="regexp">/mnt/</span>cdrom</span><br><span class="line">VM软件上点击安装tools</span><br><span class="line">cd /tmp</span><br><span class="line">tar zxpf <span class="regexp">/mnt/</span>cdrom/VMwareTools-*****.tar.gz</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="安装Php"><a href="#安装Php" class="headerlink" title="安装Php"></a>安装Php</h2><a href="/blog/p/1417dc7c/" title="PHP">PHP</a>

<h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><a href="/blog/p/c8447915/" title="Java">Java</a>

<h2 id="安装Composer"><a href="#安装Composer" class="headerlink" title="安装Composer"></a>安装Composer</h2><a href="/blog/p/d5e309c2/" title="Composer">Composer</a>

<h2 id="安装NodeJs"><a href="#安装NodeJs" class="headerlink" title="安装NodeJs"></a>安装NodeJs</h2><a href="/blog/p/aaeff957/" title="NodeJs">NodeJs</a>

<h2 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h2><a href="/blog/p/e4d2e8fb/" title="Mysql">Mysql</a>

<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><a href="/blog/p/f3599f9d/" title="Redis">Redis</a>

<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><a href="/blog/p/65b69107/" title="Nginx">Nginx</a>

<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><a href="/blog/p/86635873/" title="Git">Git</a>

<h2 id="安装Gitlab"><a href="#安装Gitlab" class="headerlink" title="安装Gitlab"></a>安装Gitlab</h2><a href="/blog/p/4adbd460/" title="Gitlab">Gitlab</a>

<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><a href="/blog/p/f255ffad/" title="Docker">Docker</a>

<h2 id="安装文件传输工具"><a href="#安装文件传输工具" class="headerlink" title="安装文件传输工具"></a>安装文件传输工具</h2><ol>
<li><code>yum install lrzsz</code> 安装</li>
<li><code>rz</code> 向 <code>Linux</code> 传输文件</li>
<li><code>sz /path/file</code> 向 <code>Windows</code> 传输文件</li>
</ol>
<h2 id="安装V2ray"><a href="#安装V2ray" class="headerlink" title="安装V2ray"></a>安装V2ray</h2><blockquote>
<p><a href="https://www.v2ray.com/chapter_00/install.html" target="_blank" rel="noopener">https://www.v2ray.com/chapter_00/install.html</a></p>
</blockquote>
<ol>
<li><code>bash &lt;(curl -L -s https://install.direct/go.sh)</code> 下载并安装</li>
<li><code>vim /etc/v2ray/config.json</code> 修改config.json</li>
</ol>
<h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><ul>
<li><code>systemctl restart v2ray.service</code></li>
<li><code>systemctl status v2ray.service</code></li>
<li><code>chmod 777 -R /usr/bin/v2ray</code> 给予权限</li>
<li><code>vim /etc/rc.d/rc.local</code> 开机自启，增加下行代码</li>
<li><code>/bin/systemctl status v2ray.service</code> 开启服务</li>
<li><code>curl https://github.com/iyyann</code> 或者 <code>curl https://www.youtube.com</code> 测试</li>
</ul>
<h3 id="vim-x2F-etc-x2F-v2ray-x2F-config-json"><a href="#vim-x2F-etc-x2F-v2ray-x2F-config-json" class="headerlink" title="vim &#x2F;etc&#x2F;v2ray&#x2F;config.json"></a>vim &#x2F;etc&#x2F;v2ray&#x2F;config.json</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将下方的socks方式修改成http即可</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;inbounds&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;tag&quot;</span>: <span class="string">&quot;proxy&quot;</span>,</span><br><span class="line">      <span class="string">&quot;port&quot;</span>: <span class="number">10808</span>,</span><br><span class="line">      <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;http&quot;</span>,<span class="comment">#已经将socks修改成了http</span></span><br><span class="line">      <span class="string">&quot;sniffing&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;destOverride&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;http&quot;</span>,</span><br><span class="line">          <span class="string">&quot;tls&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="vim-x2F-etc-x2F-profile"><a href="#vim-x2F-etc-x2F-profile" class="headerlink" title="vim &#x2F;etc&#x2F;profile"></a>vim &#x2F;etc&#x2F;profile</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">export http_proxy=&quot;http://192.168.3.150:10808&quot;</span><br><span class="line">export https_proxy=&quot;http://192.168.3.150:10808&quot;</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="开机自启-vim-x2F-etc-x2F-init-d-x2F-v2ray"><a href="#开机自启-vim-x2F-etc-x2F-init-d-x2F-v2ray" class="headerlink" title="开机自启 vim &#x2F;etc&#x2F;init.d&#x2F;v2ray"></a>开机自启 vim &#x2F;etc&#x2F;init.d&#x2F;v2ray</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">#</span><br><span class="line"># v2ray        Startup script for v2ray</span><br><span class="line">#</span><br><span class="line"># chkconfig: - 24 76</span><br><span class="line"># processname: v2ray</span><br><span class="line"># pidfile: /var/run/v2ray.pid</span><br><span class="line"># description: V2Ray proxy services</span><br><span class="line">#</span><br><span class="line"> </span><br><span class="line">### BEGIN INIT INFO</span><br><span class="line"># Provides:          v2ray</span><br><span class="line"># Required-Start:    $network $local_fs $remote_fs</span><br><span class="line"># Required-Stop:     $remote_fs</span><br><span class="line"># Default-Start:     2 3 4 5</span><br><span class="line"># Default-Stop:      0 1 6</span><br><span class="line"># Short-Description: V2Ray proxy services</span><br><span class="line"># Description:       V2Ray proxy services</span><br><span class="line">### END INIT INFO</span><br><span class="line"> </span><br><span class="line">DESC=v2ray</span><br><span class="line">NAME=v2ray</span><br><span class="line">DAEMON=/usr/bin/v2ray/v2ray</span><br><span class="line">PIDFILE=/var/run/$NAME.pid</span><br><span class="line">LOCKFILE=/var/lock/subsys/$NAME</span><br><span class="line">SCRIPTNAME=/etc/init.d/$NAME</span><br><span class="line">RETVAL=0</span><br><span class="line"> </span><br><span class="line">DAEMON_OPTS=&amp;quot;-config /etc/v2ray/config.json&amp;quot;</span><br><span class="line"> </span><br><span class="line"># Exit if the package is not installed</span><br><span class="line">[ -x $DAEMON ] || exit 0</span><br><span class="line"> </span><br><span class="line"># Read configuration variable file if it is present</span><br><span class="line">[ -r /etc/default/$NAME ] &amp;amp;&amp;amp; . /etc/default/$NAME</span><br><span class="line"> </span><br><span class="line"># Source function library.</span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"> </span><br><span class="line">start() &#123;</span><br><span class="line">  local pids=$(pgrep -f $DAEMON)</span><br><span class="line">  if [ -n &amp;quot;$pids&amp;quot; ]; then</span><br><span class="line">    echo &amp;quot;$NAME (pid $pids) is already running&amp;quot;</span><br><span class="line">    RETVAL=0</span><br><span class="line">    return 0</span><br><span class="line">  fi</span><br><span class="line"> </span><br><span class="line">  echo -n $&amp;quot;Starting $NAME: &amp;quot;</span><br><span class="line"> </span><br><span class="line">  mkdir -p /var/log/v2ray</span><br><span class="line">  $DAEMON $DAEMON_OPTS 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;</span><br><span class="line">  echo $! &amp;gt; $PIDFILE</span><br><span class="line"> </span><br><span class="line">  sleep 2</span><br><span class="line">  pgrep -f $DAEMON &amp;gt;/dev/null 2&amp;gt;&amp;amp;1</span><br><span class="line">  RETVAL=$?</span><br><span class="line">  if [ $RETVAL -eq 0 ]; then</span><br><span class="line">    success; echo</span><br><span class="line">    touch $LOCKFILE</span><br><span class="line">  else</span><br><span class="line">    failure; echo</span><br><span class="line">  fi</span><br><span class="line">  return $RETVAL</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">stop() &#123;</span><br><span class="line">  local pids=$(pgrep -f $DAEMON)</span><br><span class="line">  if [ -z &amp;quot;$pids&amp;quot; ]; then</span><br><span class="line">    echo &amp;quot;$NAME is not running&amp;quot;</span><br><span class="line">    RETVAL=0</span><br><span class="line">    return 0</span><br><span class="line">  fi</span><br><span class="line"> </span><br><span class="line">  echo -n $&amp;quot;Stopping $NAME: &amp;quot;</span><br><span class="line">  killproc -p $&#123;PIDFILE&#125; $&#123;NAME&#125;</span><br><span class="line">  RETVAL=$?</span><br><span class="line">  echo</span><br><span class="line">  [ $RETVAL = 0 ] &amp;amp;&amp;amp; rm -f $&#123;LOCKFILE&#125; $&#123;PIDFILE&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">reload() &#123;</span><br><span class="line">  echo -n $&amp;quot;Reloading $NAME: &amp;quot;</span><br><span class="line">  killproc -p $&#123;PIDFILE&#125; $&#123;NAME&#125; -HUP</span><br><span class="line">  RETVAL=$?</span><br><span class="line">  echo</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">rh_status() &#123;</span><br><span class="line">  status -p $&#123;PIDFILE&#125; $&#123;DAEMON&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"># See how we were called.</span><br><span class="line">case &amp;quot;$1&amp;quot; in</span><br><span class="line">  start)</span><br><span class="line">    rh_status &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; exit 0</span><br><span class="line">    start</span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">    stop</span><br><span class="line">    ;;</span><br><span class="line">  status)</span><br><span class="line">    rh_status</span><br><span class="line">    RETVAL=$?</span><br><span class="line">    ;;</span><br><span class="line">  restart)</span><br><span class="line">    stop</span><br><span class="line">    start</span><br><span class="line">    ;;</span><br><span class="line">  reload)</span><br><span class="line">    reload</span><br><span class="line">  ;;</span><br><span class="line">  *)</span><br><span class="line">    echo &amp;quot;Usage: $SCRIPTNAME &#123;start|stop|status|reload|restart&#125;&amp;quot; &amp;gt;&amp;amp;2</span><br><span class="line">    RETVAL=2</span><br><span class="line">  ;;</span><br><span class="line">esac</span><br><span class="line">exit $RETVAL</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/init.d/v2ray</span><br></pre></td></tr></table></figure>


<h2 id="打开AppImage"><a href="#打开AppImage" class="headerlink" title="打开AppImage"></a>打开AppImage</h2><ol>
<li><code>chmod +x 文件</code> 令其可执行</li>
<li><code>/path/AppImage --appimage-extract</code> 解压文件</li>
</ol>
<h2 id="安装-electron"><a href="#安装-electron" class="headerlink" title="安装 electron"></a>安装 electron</h2><ol>
<li><code>vim ~/.</code></li>
<li><code>electron_mirror=https://npm.taobao.org/mirrors/electron/</code> 更换源</li>
<li><code>sudo npm install -g electron --unsafe-perm=true --allow-root</code></li>
</ol>
<h2 id="相关命令-1"><a href="#相关命令-1" class="headerlink" title="相关命令"></a>相关命令</h2><ol>
<li><code>lsof</code> (lists openfiles)列出打开文件，在Unix中一切（包括网络套接口）都是文件。</li>
</ol>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列出谁在使用某个端口</span></span><br><span class="line">lsof -i:<span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过某个进程号显示该进行打开的文件(可查看多个进程)</span></span><br><span class="line">lsof -p PID,PID2,PID3...</span><br><span class="line"></span><br><span class="line"><span class="comment">#找出正等候连接的端口</span></span><br><span class="line">lsof -i -sTCP:LISTEN<span class="string">` 等于 `</span>lsof -i | <span class="keyword">grep</span> -i ESTABLISHED</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看某个用户打开的文件</span></span><br><span class="line">lsof -u 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">#杀死指定用户所做的一切事情</span></span><br><span class="line"><span class="keyword">kill</span> -<span class="number">9</span> <span class="string">`lsof -t -u 用户名</span></span><br></pre></td></tr></table></figure>

<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看服务器80端口是否打开</span></span><br><span class="line">firewall-<span class="keyword">cmd</span><span class="language-bash"> --query-port=80/tcp`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打开80端口，`--permanent`永久生效，没有此参数重启后失效</span></span><br><span class="line">firewall-<span class="keyword">cmd</span><span class="language-bash"> --add-port=80/tcp --permanent`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启防火墙</span></span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure>

<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># java 环境变量</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">JAVA_HOME</span>=/mnt/SSD/java/jdk-8u172-linux-x64</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">JRE_HOME</span>=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">CLASSPATH</span>=.:$JAVA_HOME/lib:$JRE_HOME/lib</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># maven 环境变量</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">MAVEN_HOME</span>=/mnt/SSD/maven/apache-maven-3.5.3</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$MAVEN_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Android 环境变量</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">ANDROID_HOME</span>=/mnt/1TB/Android/Sdk/android-sdk-linux</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$ANDROID_HOME/tools</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$ANDROID_HOME/tools/bin</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$ANDROID_HOME/platform-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># GO 环境变量</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">GO_HOME</span>=/mnt/SSD/go</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$GO_HOME/bin</span><br></pre></td></tr></table></figure>
<h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><ul>
<li><a href="https://www.cnblogs.com/ldsweely/p/9400583.html" target="_blank" rel="noopener">https://www.cnblogs.com/ldsweely/p/9400583.html</a></li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">虚拟机vmware centos7 扩展磁盘空间</span><br><span class="line"><span class="number">0</span>、思路</span><br><span class="line">创建一个新的逻辑分区，将新的逻辑分区格式化ext3（或其他类型）的文件系统，mount到磁盘空间不够的文件系统，就跟原来的分区/文件系统一样的使用</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、准备</span><br><span class="line"><span class="number">1.1</span> 注意使用VMware自带的Expand功能不能有Snapshot存在，所以在expand之前先把所有的Snapshot删掉了</span><br><span class="line"></span><br><span class="line"><span class="number">1.2</span> 为了以防万一，把VMware虚拟机<span class="keyword">copy</span>了一份备用。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、查看挂载点</span><br><span class="line">[root@vnode1 ~]# df -h</span><br><span class="line">文件系统 容量 已用 可用 已用% 挂载点</span><br><span class="line"><span class="regexp">/dev/m</span>apper<span class="regexp">/centos-root 36G 5.4G 31G 15% /</span></span><br><span class="line">devtmpfs <span class="number">3.9</span>G <span class="number">0</span> <span class="number">3.9</span>G <span class="number">0</span>% /dev</span><br><span class="line">tmpfs <span class="number">3.9</span>G <span class="number">0</span> <span class="number">3.9</span>G <span class="number">0</span>% <span class="regexp">/dev/</span>shm</span><br><span class="line">tmpfs <span class="number">3.9</span>G <span class="number">8.5</span>M <span class="number">3.9</span>G <span class="number">1</span>% /run</span><br><span class="line">tmpfs <span class="number">3.9</span>G <span class="number">0</span> <span class="number">3.9</span>G <span class="number">0</span>% <span class="regexp">/sys/</span>fs/cgroup</span><br><span class="line"><span class="regexp">/dev/</span>sda1 <span class="number">497</span>M <span class="number">125</span>M <span class="number">373</span>M <span class="number">26</span>% /boot</span><br><span class="line">tmpfs <span class="number">781</span>M <span class="number">0</span> <span class="number">781</span>M <span class="number">0</span>% <span class="regexp">/run/u</span>ser/<span class="number">0</span></span><br><span class="line"><span class="number">3</span>、扩展VMWare硬盘空间</span><br><span class="line"><span class="number">3.1</span> 关闭Vmware 的 Linux系统</span><br><span class="line"></span><br><span class="line"><span class="number">3.2</span> 在VMWare菜单中设置：</span><br><span class="line"></span><br><span class="line">VM -&gt; Settings… -&gt; Hardware -&gt; Hard Disk -&gt; Utilities -&gt; Expand</span><br><span class="line"></span><br><span class="line">输入你想要扩展到多少G，假设新增加了 <span class="number">40</span>G </span><br><span class="line">这里写图片描述</span><br><span class="line"></span><br><span class="line">这里写图片描述</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、对新增加的硬盘进行分区</span><br><span class="line">执行步骤：</span><br><span class="line"></span><br><span class="line">执行“fdisk <span class="regexp">/dev/</span>sda”，进入到fdisk</span><br><span class="line">输入p指令，查看已分区数量（有两个 <span class="regexp">/dev/</span>sda1 <span class="regexp">/dev/</span>sda2）</span><br><span class="line">输入 n &#123;<span class="keyword">new</span> partition&#125;指令，新增加一个分区</span><br><span class="line">输入p &#123;primary partition&#125;，分区类型选择为主分区</span><br><span class="line">输入分区号 <span class="number">3</span> &#123;partition number&#125; ，分区号选<span class="number">3</span>（上面显示我已经有<span class="number">2</span>个分区了）</span><br><span class="line">回车　　　　　　默认（起始扇区）</span><br><span class="line">回车　　　　　　默认（结束扇区）</span><br><span class="line">输入t &#123;change partition id&#125;指令，修改分区类型</span><br><span class="line">按提示输入刚才的分区号<span class="number">3</span></span><br><span class="line">输入分区类型 <span class="number">8</span>e &#123;Linux LVM partition&#125;</span><br><span class="line">输入w指令，将以上改动写入分区表</span><br><span class="line">最后完成，退出fdisk命令</span><br><span class="line">[root@vnode1 ~]# fdisk <span class="regexp">/dev/</span>sda</span><br><span class="line">欢迎使用 fdisk (util-linux <span class="number">2.23</span>.<span class="number">2</span>)。</span><br><span class="line"> </span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"> </span><br><span class="line">命令(输入 m 获取帮助)：p</span><br><span class="line">....</span><br><span class="line">设备 Boot Start End Blocks Id System</span><br><span class="line"><span class="regexp">/dev/</span>sda1 * <span class="number">2048</span> <span class="number">1026047</span> <span class="number">512000</span> <span class="number">83</span> Linux</span><br><span class="line"><span class="regexp">/dev/</span>sda2 <span class="number">1026048</span> <span class="number">83886079</span> <span class="number">41430016</span> <span class="number">8</span>e Linux LVM</span><br><span class="line"> </span><br><span class="line">命令(输入 m 获取帮助)：n</span><br><span class="line">Partition type:</span><br><span class="line">p primary (<span class="number">2</span> primary, <span class="number">0</span> extended, <span class="number">2</span> free)</span><br><span class="line">e extended</span><br><span class="line">Select (<span class="keyword">default</span> p): p</span><br><span class="line">分区号 (<span class="number">3</span>,<span class="number">4</span>，默认 <span class="number">3</span>)：<span class="number">3</span></span><br><span class="line">起始 扇区 (<span class="number">83886080</span>-<span class="number">167772159</span>，默认为 <span class="number">83886080</span>)：</span><br><span class="line">将使用默认值 <span class="number">83886080</span></span><br><span class="line">Last 扇区, +扇区 or +<span class="keyword">size</span>&#123;K,M,G&#125; (<span class="number">83886080</span>-<span class="number">167772159</span>，默认为 <span class="number">167772159</span>)：</span><br><span class="line">将使用默认值 <span class="number">167772159</span></span><br><span class="line">分区 <span class="number">3</span> 已设置为 Linux 类型，大小设为 <span class="number">40</span> GiB</span><br><span class="line"> </span><br><span class="line">命令(输入 m 获取帮助)：t</span><br><span class="line">分区号 (<span class="number">1</span>-<span class="number">3</span>，默认 <span class="number">3</span>)：<span class="number">3</span></span><br><span class="line">Hex 代码(输入 L 列出所有代码)：<span class="number">8</span>e</span><br><span class="line">已将分区“Linux”的类型更改为“Linux LVM”</span><br><span class="line"> </span><br><span class="line">命令(输入 m 获取帮助)：w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"> </span><br><span class="line">Calling ioctl() to re-<span class="keyword">read</span> partition table.</span><br><span class="line"> </span><br><span class="line">WARNING: Re-reading the partition table failed with error <span class="number">16</span>: 设备或资源忙.</span><br><span class="line">The kernel still uses the old table. The <span class="keyword">new</span> table will be used at</span><br><span class="line">the <span class="keyword">next</span> reboot or after you run partprobe(<span class="number">8</span>) or kpartx(<span class="number">8</span>)</span><br><span class="line">正在同步磁盘。</span><br><span class="line">重启系统: </span><br><span class="line">[root@vnode1 ~]# shutdown -r now （很重要）</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、对新增加的硬盘格式化</span><br><span class="line">[root@vnode1 ~]# mkfs.ext3 <span class="regexp">/dev/</span>sda3</span><br><span class="line">mke2fs <span class="number">1.42</span>.<span class="number">9</span> (<span class="number">28</span>-Dec-<span class="number">2013</span>)</span><br><span class="line">文件系统标签=</span><br><span class="line">OS type: Linux</span><br><span class="line">块大小=<span class="number">4096</span> (log=<span class="number">2</span>)</span><br><span class="line">分块大小=<span class="number">4096</span> (log=<span class="number">2</span>)</span><br><span class="line">Stride=<span class="number">0</span> blocks, Stripe width=<span class="number">0</span> blocks</span><br><span class="line"><span class="number">2621440</span> inodes, <span class="number">10485760</span> blocks</span><br><span class="line"><span class="number">524288</span> blocks (<span class="number">5.00</span>%) reserved <span class="keyword">for</span> the <span class="keyword">super</span> user</span><br><span class="line">第一个数据块=<span class="number">0</span></span><br><span class="line">Maximum filesystem blocks=<span class="number">4294967296</span></span><br><span class="line"><span class="number">320</span> block groups</span><br><span class="line"><span class="number">32768</span> blocks per <span class="keyword">group</span>, <span class="number">32768</span> fragments per <span class="keyword">group</span></span><br><span class="line"><span class="number">8192</span> inodes per <span class="keyword">group</span></span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line"><span class="number">32768</span>, <span class="number">98304</span>, <span class="number">163840</span>, <span class="number">229376</span>, <span class="number">294912</span>, <span class="number">819200</span>, <span class="number">884736</span>, <span class="number">1605632</span>, <span class="number">2654208</span>,</span><br><span class="line"><span class="number">4096000</span>, <span class="number">7962624</span></span><br><span class="line"> </span><br><span class="line">Allocating <span class="keyword">group</span> tables: 完成</span><br><span class="line">正在写入inode表: 完成</span><br><span class="line">Creating journal (<span class="number">32768</span> blocks): 完成</span><br><span class="line">Writing superblocks and filesystem accounting information: 完成</span><br><span class="line"><span class="number">5</span>、添加新LVM到已有的LVM组，实现扩容</span><br><span class="line">[root@vnode1 ~]# lvm</span><br><span class="line">lvm&gt; pvcreate <span class="regexp">/dev/</span>sda3</span><br><span class="line">WARNING: ext3 signature detected on <span class="regexp">/dev/</span>sda3 at offset <span class="number">1080</span>. Wipe it? [y/n]: y</span><br><span class="line">Wiping ext3 signature on <span class="regexp">/dev/</span>sda3.</span><br><span class="line">Physical volume <span class="string">&quot;/dev/sda3&quot;</span> successfully created</span><br><span class="line">lvm&gt; vgextend centos <span class="regexp">/dev/</span>sda3</span><br><span class="line">Volume <span class="keyword">group</span> <span class="string">&quot;centos&quot;</span> successfully extended</span><br><span class="line">lvm&gt; lvextend -L +<span class="number">39.9</span>G <span class="regexp">/dev/m</span>apper/centos-root</span><br><span class="line">Rounding <span class="keyword">size</span> to boundary between physical extents: <span class="number">39.90</span> GiB</span><br><span class="line"><span class="keyword">Size</span> of logical volume centos/root changed <span class="keyword">from</span> <span class="number">35.47</span> GiB (<span class="number">9080</span> extents) to <span class="number">75.37</span> GiB (<span class="number">19295</span> extents).</span><br><span class="line">Logical volume root successfully resized.</span><br><span class="line">lvm&gt; pvdisplay</span><br><span class="line">--- Physical volume ---</span><br><span class="line">PV Name <span class="regexp">/dev/</span>sda2</span><br><span class="line">VG Name centos</span><br><span class="line">PV <span class="keyword">Size</span> <span class="number">39.51</span> GiB / not usable <span class="number">3.00</span> MiB</span><br><span class="line">Allocatable yes (but full)</span><br><span class="line">PE <span class="keyword">Size</span> <span class="number">4.00</span> MiB</span><br><span class="line">Total PE <span class="number">10114</span></span><br><span class="line">Free PE <span class="number">0</span></span><br><span class="line">Allocated PE <span class="number">10114</span></span><br><span class="line">PV UUID vtNvX3-b1yw-ePoh-YGHQ-tDhL-x0ru-mfts3k</span><br><span class="line"> </span><br><span class="line">--- Physical volume ---</span><br><span class="line">PV Name <span class="regexp">/dev/</span>sda3</span><br><span class="line">VG Name centos</span><br><span class="line">PV <span class="keyword">Size</span> <span class="number">40.00</span> GiB / not usable <span class="number">4.00</span> MiB</span><br><span class="line">Allocatable yes</span><br><span class="line">PE <span class="keyword">Size</span> <span class="number">4.00</span> MiB</span><br><span class="line">Total PE <span class="number">10239</span></span><br><span class="line">Free PE <span class="number">34</span></span><br><span class="line">Allocated PE <span class="number">10205</span></span><br><span class="line">PV UUID jWqvcF-R53u-ZeAy-zO2L-PbtI-<span class="number">51</span>VP-yHNZ1g</span><br><span class="line"> </span><br><span class="line">lvm&gt; quit</span><br><span class="line">Exiting.</span><br><span class="line">[root@vnode1 ~]#</span><br><span class="line">备注：</span><br><span class="line"></span><br><span class="line">lvm　　　　　　　　　　　　 进入lvm管理</span><br><span class="line">lvm&gt; pvcreate <span class="regexp">/dev/</span>sda3 这是初始化刚才的分区，必须的</span><br><span class="line">lvm&gt;vgextend centos <span class="regexp">/dev/</span>sda3 将初始化过的分区加入到虚拟卷组vg_dc01</span><br><span class="line">lvm&gt;lvextend -L +<span class="number">39.9</span>G <span class="regexp">/dev/m</span>apper/centos-root　　扩展已有卷的容量（注意容量大小）</span><br><span class="line">lvm&gt;pvdisplay　　　　　　　　　　　　　　 查看卷容量，这时你会看到一个很大的卷了</span><br><span class="line">lvm&gt;quit　　　　　　　　　　　　　　 　　　退出</span><br><span class="line">以上只是卷扩容了，下面是文件系统的真正扩容，输入以下命令：</span><br><span class="line"></span><br><span class="line">[root@vnode1 ~]# resize2fs <span class="regexp">/dev/m</span>apper/centos-root</span><br><span class="line">resize2fs <span class="number">1.42</span>.<span class="number">9</span> (<span class="number">28</span>-Dec-<span class="number">2013</span>)</span><br><span class="line">resize2fs: Bad magic number in <span class="keyword">super</span>-block 当尝试打开 <span class="regexp">/dev/m</span>apper/centos-root 时</span><br><span class="line">找不到有效的文件系统超级块.</span><br><span class="line">报错：当尝试打开 <span class="regexp">/dev/m</span>apper/centos-root 时 找不到有效的文件系统超级块</span><br><span class="line"></span><br><span class="line">因为我的centos7的某些分区用的是xfs的文件系统（使用df -T查看即可知道）</span><br><span class="line"></span><br><span class="line">[root@vnode1 ~]# df -T</span><br><span class="line">文件系统                           类型          <span class="number">1</span>K-块        已用        可用          已用%  挂载点</span><br><span class="line"><span class="regexp">/dev/m</span>apper<span class="regexp">/centos-root   xfs           37173520 5574340  31599180  15%      /</span></span><br><span class="line">devtmpfs 　　                   devtmpfs  <span class="number">3987400</span>   <span class="number">0</span>              <span class="number">3987400</span>    <span class="number">0</span>%       /dev</span><br><span class="line">tmpfs                                 tmpfs        <span class="number">3997856</span>   <span class="number">0</span>              <span class="number">3997856</span>    <span class="number">0</span>%      <span class="regexp">/dev/</span>shm</span><br><span class="line">tmpfs                                 tmpfs        <span class="number">3997856</span>   <span class="number">8628</span>        <span class="number">3989228</span>     <span class="number">1</span>%     /run</span><br><span class="line">tmpfs                                 tmpfs        <span class="number">3997856</span>   <span class="number">0</span>               <span class="number">3997856</span>     <span class="number">0</span>%    <span class="regexp">/sys/</span>fs/cgroup</span><br><span class="line"><span class="regexp">/dev/</span>sda1                          xfs            <span class="number">508588</span>      <span class="number">127152</span>    <span class="number">381436</span>       <span class="number">26</span>%  /boot</span><br><span class="line">tmpfs                                tmpfs         <span class="number">799572</span>      <span class="number">0</span>              <span class="number">799572</span>       <span class="number">0</span>%   run<span class="regexp">/user/</span><span class="number">0</span></span><br><span class="line">[root@vnode1 ~]#</span><br><span class="line">将resize2fs替换为xfs_growfs，重新执行一遍即可，如下：</span><br><span class="line"></span><br><span class="line">[root@vnode1 ~]# xfs_growfs <span class="regexp">/dev/m</span>apper/centos-root</span><br><span class="line">meta-data=<span class="regexp">/dev/m</span>apper/centos-root isize=<span class="number">256</span> agcount=<span class="number">4</span>, agsize=<span class="number">2324480</span> blks</span><br><span class="line">= sectsz=<span class="number">512</span> attr=<span class="number">2</span>, projid32bit=<span class="number">1</span></span><br><span class="line">= crc=<span class="number">0</span> finobt=<span class="number">0</span></span><br><span class="line">data = bsize=<span class="number">4096</span> blocks=<span class="number">9297920</span>, imaxpct=<span class="number">25</span></span><br><span class="line">= sunit=<span class="number">0</span> swidth=<span class="number">0</span> blks</span><br><span class="line">naming =version <span class="number">2</span> bsize=<span class="number">4096</span> ascii-ci=<span class="number">0</span> ftype=<span class="number">0</span></span><br><span class="line">log =internal bsize=<span class="number">4096</span> blocks=<span class="number">4540</span>, version=<span class="number">2</span></span><br><span class="line">= sectsz=<span class="number">512</span> sunit=<span class="number">0</span> blks, lazy-<span class="keyword">count</span>=<span class="number">1</span></span><br><span class="line">realtime =none extsz=<span class="number">4096</span> blocks=<span class="number">0</span>, rtextents=<span class="number">0</span></span><br><span class="line">data blocks changed <span class="keyword">from</span> <span class="number">9297920</span> to <span class="number">19758080</span></span><br><span class="line">最后再运行下：df -h </span><br><span class="line">即可看到扩容后的磁盘空间</span><br><span class="line"></span><br><span class="line">[root@vnode1 ~]# df -h</span><br><span class="line">文件系统 容量 已用 可用 已用% 挂载点</span><br><span class="line"><span class="regexp">/dev/m</span>apper<span class="regexp">/centos-root 76G 5.4G 71G 8% /</span></span><br><span class="line">devtmpfs <span class="number">3.9</span>G <span class="number">0</span> <span class="number">3.9</span>G <span class="number">0</span>% /dev</span><br><span class="line">tmpfs <span class="number">3.9</span>G <span class="number">0</span> <span class="number">3.9</span>G <span class="number">0</span>% <span class="regexp">/dev/</span>shm</span><br><span class="line">tmpfs <span class="number">3.9</span>G <span class="number">8.5</span>M <span class="number">3.9</span>G <span class="number">1</span>% /run</span><br><span class="line">tmpfs <span class="number">3.9</span>G <span class="number">0</span> <span class="number">3.9</span>G <span class="number">0</span>% <span class="regexp">/sys/</span>fs/cgroup</span><br><span class="line"><span class="regexp">/dev/</span>sda1 <span class="number">497</span>M <span class="number">125</span>M <span class="number">373</span>M <span class="number">26</span>% /boot</span><br><span class="line">tmpfs <span class="number">781</span>M <span class="number">0</span> <span class="number">781</span>M <span class="number">0</span>% <span class="regexp">/run/u</span>ser/<span class="number">0</span></span><br><span class="line">ps:修复 unknown 区  vgreduce --removemissing centos</span><br><span class="line"></span><br><span class="line">  --- Physical volume ---</span><br><span class="line">  PV Name               [unknown]</span><br><span class="line">  VG Name               centos</span><br><span class="line">  PV <span class="keyword">Size</span>               <span class="number">10.00</span> GiB / not usable <span class="number">4.00</span> MiB</span><br><span class="line">  Allocatable           yes</span><br><span class="line">  PE <span class="keyword">Size</span>               <span class="number">4.00</span> MiB</span><br><span class="line">  Total PE              <span class="number">2559</span></span><br><span class="line">  Free PE               <span class="number">2559</span></span><br><span class="line">  Allocated PE          <span class="number">0</span></span><br><span class="line">  PV UUID               VCwaaP-hhX8-YcSg-Cqji-ctob-AAod-wRnOLO</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft Office 2019 官方下载最新中文简体破解版完整免费版百度网盘</title>
    <url>/blog/p/e67d111b/</url>
    <content><![CDATA[<p>Office安装与使用</p>
<span id="more"></span>
<h3 id="下载相关安装包并解压"><a href="#下载相关安装包并解压" class="headerlink" title="下载相关安装包并解压"></a>下载相关安装包并解压</h3><ul>
<li>安装包：<a href="https://pan.baidu.com/s/1CDSeTyQBX45tW2ARFuNk3g" target="_blank" rel="noopener">Microsoft Office 2019 官方下载最新中文简体破解版完整免费版百度网盘</a><br>提取码：83ga</li>
</ul>
<h3 id="打开“KMStools”"><a href="#打开“KMStools”" class="headerlink" title="打开“KMStools”"></a>打开“KMStools”</h3><img src="/blog/p/e67d111b/KMSTools.jpg" class="" title="Microsoft Office 2019 KMSTools">


<h3 id="点击“Office-2019-Install”"><a href="#点击“Office-2019-Install”" class="headerlink" title="点击“Office 2019 Install”"></a>点击“Office 2019 Install”</h3><img src="/blog/p/e67d111b/office_2019_install.jpg" class="" title="Microsoft Office 2019 install">

<h3 id="直接点击“Install-Office”，其他的默认就好"><a href="#直接点击“Install-Office”，其他的默认就好" class="headerlink" title="直接点击“Install Office”，其他的默认就好"></a>直接点击“Install Office”，其他的默认就好</h3><img src="/blog/p/e67d111b/install_office.jpg" class="" title="Microsoft Office 2019 install">

<h3 id="等待下载安装完成"><a href="#等待下载安装完成" class="headerlink" title="等待下载安装完成"></a>等待下载安装完成</h3><blockquote>
<p>测试环境为Windows10 网络50<del>100Mbps 安装时长7分钟 喝杯咖啡</del></p>
</blockquote>
<img src="/blog/p/e67d111b/installing_office.jpg" class="" title="Microsoft Office 2019 installing">

<h3 id="安装完成后激活office"><a href="#安装完成后激活office" class="headerlink" title="安装完成后激活office"></a>安装完成后激活office</h3><img src="/blog/p/e67d111b/install_done.jpg" class="" title="Microsoft Office 2019 install done">

<h4 id="正常流程，点击确定即可"><a href="#正常流程，点击确定即可" class="headerlink" title="正常流程，点击确定即可"></a>正常流程，点击确定即可</h4><!-- ![install_done](/p/e67d111b/install_done.jpg) -->

<h4 id="如果没有弹出激活框"><a href="#如果没有弹出激活框" class="headerlink" title="如果没有弹出激活框"></a>如果<font color="red">没有</font>弹出激活框</h4><ul>
<li><p>还是刚刚那个工具，点击“KMSAtuto Lite”</p>
<img src="/blog/p/e67d111b/KMSAuto_Lite.jpg" class="" title="Microsoft Office 2019 KMSAuto_Lite">
</li>
<li><p>“Utilities” &gt;&gt; “Activate Office”</p>
<img src="/blog/p/e67d111b/%E6%BF%80%E6%B4%BB%E5%AE%8C%E6%88%90.jpg" class="" title="Microsoft Office 2019 激活完成"></li>
</ul>
<h3 id="Done-完成"><a href="#Done-完成" class="headerlink" title="Done(完成)"></a>Done(完成)</h3><img src="/blog/p/e67d111b/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.jpg" class="" title="Microsoft Office 2019 安装完成">
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Microsoft Office</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJs</title>
    <url>/blog/p/aaeff957/</url>
    <content><![CDATA[<p>node使用较少，但是有必要总结一下，以下是总结详情</p>
<span id="more"></span>
<h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><blockquote>
<p><code>https://nodejs.org/en/download/current/</code></p>
</blockquote>
<ol>
<li><code>cd /usr/src/ &amp;&amp; wget https://nodejs.org/dist/v12.18.1/node-v12.18.1-linux-x64.tar.xz</code></li>
<li><code>tar xf node-v12.18.1-linux-x64.tar.xz</code></li>
<li><code>mkdir /usr/local/node &amp;&amp; mv node-v12.18.1-linux-x64/* /usr/local/node</code></li>
<li>修改系统变量 <code>PATH=$PATH:/usr/local/node/bin</code></li>
<li><code>node -v</code></li>
<li><code>sudo ln -s /usr/local/node/bin/node</code> 这样可以执行 <code>sudo node</code></li>
<li><code>sudo ln -s /usr/local/node/bin/npm</code> 这样可以执行 <code>sudo npm</code></li>
</ol>
<p><a href="/downloads/node-v12.18.1-linux-x64.tar.xz">NodeJs文件</a></p>


<h2 id="Nrm"><a href="#Nrm" class="headerlink" title="Nrm"></a>Nrm</h2><ol>
<li><p>安装nrm <code>npm i -g nrm</code></p>
</li>
<li><p>测试所有 <b>源</b> <code>nrm test</code></p>
<img src="/blog/p/aaeff957/nrm%E6%B5%8B%E8%AF%95%E6%89%80%E6%9C%89%E6%BA%90.png" class="" title="nrm测试所有源.png">
</li>
<li><p>选择最快的 <b>源</b> <code>nrm use *</code></p>
<img src="/blog/p/aaeff957/nrm%E9%80%89%E6%8B%A9%E6%9C%80%E5%BF%AB%E7%9A%84%E6%BA%90.png" class="" title="nrm选择最快的源.png">
</li>
<li><p>完毕</p>
</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>Npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Mian</title>
    <url>/blog/p/cf930505/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>


<h2 id="八股文"><a href="#八股文" class="headerlink" title="八股文"></a>八股文</h2><p>对 linux 有基本了解，了解常见的命令，能够搞定一般的环境和工具配置，了解一些基本的概念，知道 bashrc、根目录下的几个文件夹分别是干嘛的<br>了解 git 的一些基本概念和用法<br>了解 HTTP、web 服务、SQL、NoSQL、消息中间件、微服务、容器技术等等乱七八糟的概念，不用深入，基本上知道“是什么，解决什么问题，什么时候用”就可以了。<br>了解分布式的一些基本框架、工具或理论<br>知道常见算法的时空复杂度和大体思路，知道常见数据结构的概念和适用场景。<br>其他八股文：进程线程，内存，动态&#x2F;静态链接库等等等，网上搜一个八股文面经看一下</p>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><a href="/blog/p/6fbb57c0/" title="设计模式">设计模式</a>
<p>什么是设计模式？<br>设计模式有哪些？五个字母+2，不需要说出来，只需要背出一部分<br>SOLID<br>如果不这么做的话</p>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><a href="/blog/p/1417dc7c/" title="PHP">PHP</a>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h3 id="workman"><a href="#workman" class="headerlink" title="workman"></a>workman</h3><h4 id="介绍一下Workman框架的工作原理。"><a href="#介绍一下Workman框架的工作原理。" class="headerlink" title="介绍一下Workman框架的工作原理。"></a>介绍一下Workman框架的工作原理。</h4><p>Workman框架是一个开源的PHP应用容器，它使用多进程模型来处理请求。它提供了一个简单易用的API，可以轻松实现应用程序的并发处理和实时通信。Workman框架的工作流程大致如下：</p>
<p>首先，客户端发起请求，通过网络传输到服务器端。</p>
<p>服务器端的Workman框架将请求放入消息队列中，并使用多个进程来处理请求。</p>
<p>当每个进程完成请求处理后，Workman框架将结果返回给客户端。</p>
<p>客户端接收到结果后，可以继续发起新的请求。</p>
<h4 id="Workman框架与传统的PHP应用程序有什么区别？"><a href="#Workman框架与传统的PHP应用程序有什么区别？" class="headerlink" title="Workman框架与传统的PHP应用程序有什么区别？"></a>Workman框架与传统的PHP应用程序有什么区别？</h4><p>工作方式不同：传统的PHP应用程序是单进程的，每次只能处理一个请求，而Workman框架使用多进程模型，可以同时处理多个请求。</p>
<p>通信方式不同：传统的PHP应用程序通常只能进行同步通信，客户端需要等待服务器端的响应，而Workman框架提供了异步通信功能，客户端可以在等待响应的同时发起新的请求。</p>
<p>扩展能力不同：传统的PHP应用程序的扩展能力有限，通常需要修改应用程序本身来实现新的功能，而Workman框架提供了灵活的插件机制，可以轻松实现应用程序的扩展。</p>
<p>可扩展性不同：传统的PHP应用程序通常难以提高吞吐量，而Workman框架可以通过调整进程数量来提高应用程序的吞吐量。</p>
<h4 id="Workman框架有哪些优点和缺点？"><a href="#Workman框架有哪些优点和缺点？" class="headerlink" title="Workman框架有哪些优点和缺点？"></a>Workman框架有哪些优点和缺点？</h4><p>优点：</p>
<ol>
<li>高性能：Workman框架使用多进程模型，可以同时处理多个请求，提高应用程序的吞吐量。</li>
<li>灵活的通信方式：Workman框架支持同步和异步通信，客户端可以根据需要进行选择。</li>
<li>易于扩展：Workman框架提供了灵活的插件机制，可以轻松实现应用程序的扩展。</li>
<li>简单易用：Workman框架提供了一个简单易用的API，开发人员可以轻松使用它来创建高性能的应用程序。</li>
</ol>
<p>缺点：</p>
<ul>
<li>对硬件资源要求较高：Workman框架使用多进程模型，需要较多的硬件资源来支持。</li>
<li>适用场景有限：Workman框架适用于并发处理和实时通信等需要高性能的应用程序，不适用于所有类型的应用场景。</li>
<li>使用门槛较高：Workman框架的使用方法与传统的PHP应用程序有些不同，开发人员需要花费一定的时间来学习和使用它。</li>
<li>文档不够完善：Workman框架目前的文档还不够完善，有些细节和特性可能需要开发者自己寻找解决方案</li>
</ul>
<h4 id="Workman框架如何实现并发处理和实时通信？"><a href="#Workman框架如何实现并发处理和实时通信？" class="headerlink" title="Workman框架如何实现并发处理和实时通信？"></a>Workman框架如何实现并发处理和实时通信？</h4><ul>
<li>使用多进程模型：Workman框架使用多个进程来处理请求，可以同时处理多个请求。</li>
<li>提供异步通信功能：Workman框架提供了异步通信功能，客户端可以在等待响应的同时发起新的请求。</li>
<li>实现消息队列：Workman框架使用消息队列来存储请求，每个进程都可以从消息队列中获取请求并处理。</li>
<li>支持实时通信：Workman框架支持实时通信，客户端和服务器端可以通过WebSocket协议进行实时通信。</li>
</ul>
<p>通过以上方式，Workman框架可以实现并发处理和实时通信的功能，为开发人员提供了一个高效灵活的工作环境。</p>
<h4 id="如何调整Workman框架中进程的数量？"><a href="#如何调整Workman框架中进程的数量？" class="headerlink" title="如何调整Workman框架中进程的数量？"></a>如何调整Workman框架中进程的数量？</h4><ul>
<li>修改配置文件：Workman框架的配置文件中包含了进程数量的设置，可以通过修改配置文件来调整进程数量。</li>
<li>使用命令行参数：在启动Workman框架时，可以使用命令行参数来指定进程数量。</li>
<li>使用API接口：Workman框架提供了API接口，可以通过调用API接口来动态调整进程数量。</li>
</ul>
<h4 id="Workman框架的组件有哪些？"><a href="#Workman框架的组件有哪些？" class="headerlink" title="Workman框架的组件有哪些？"></a>Workman框架的组件有哪些？</h4><p>Server：Workman框架的服务器组件，负责监听客户端请求并转发给Worker进程处理。<br>Worker：Workman框架的工作进程组件，负责处理客户端请求并返回响应。<br>Router：Workman框架的路由组件，负责将客户端请求映射到相应的处理器，并调用处理器处理请求。<br>Request：Workman框架的请求组件，封装了客户端请求的信息，如请求方法、请求参数、请求头等。<br>Response：Workman框架的响应组件，封装了服务器返回给客户端的信息，如响应状态码、响应头、响应内容等。<br>Middleware：Workman框架的中间件组件，可以在请求和响应之间添加自定义的处理逻辑，如日志处理、权限验证等。<br>Event：Workman框架的事件组件，提供了事件驱动的架构，可以通过订阅和发布事件来实现模块之间的解耦。</p>
<h4 id="如何使用Workman框架扩展应用程序的功能？"><a href="#如何使用Workman框架扩展应用程序的功能？" class="headerlink" title="如何使用Workman框架扩展应用程序的功能？"></a>如何使用Workman框架扩展应用程序的功能？</h4><h4 id="你在实际项目中如何使用Workman框架？"><a href="#你在实际项目中如何使用Workman框架？" class="headerlink" title="你在实际项目中如何使用Workman框架？"></a>你在实际项目中如何使用Workman框架？</h4><h4 id="你认为php语言的Workman框架的未来发展趋势是什么？"><a href="#你认为php语言的Workman框架的未来发展趋势是什么？" class="headerlink" title="你认为php语言的Workman框架的未来发展趋势是什么？"></a>你认为php语言的Workman框架的未来发展趋势是什么？</h4><h4 id="你认为Workman框架适用于哪些类型的应用程序？"><a href="#你认为Workman框架适用于哪些类型的应用程序？" class="headerlink" title="你认为Workman框架适用于哪些类型的应用程序？"></a>你认为Workman框架适用于哪些类型的应用程序？</h4><h4 id="在Workman框架中，如何进行单元测试？"><a href="#在Workman框架中，如何进行单元测试？" class="headerlink" title="在Workman框架中，如何进行单元测试？"></a>在Workman框架中，如何进行单元测试？</h4><p>可以使用PHPUnit来进行单元测试。PHPUnit是一个强大的PHP单元测试框架，提供了丰富的功能来帮助您测试您的代码。</p>
<p>在Workman框架中，您需要安装PHPUnit并且在代码中引入它。然后，您可以使用PHPUnit的相关方法来编写测试用例，并运行测试用例来检验您的代码是否能够按预期工作。</p>
<p>下面是一个简单的例子，展示了如何在Workman框架中使用PHPUnit进行单元测试：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Workman</span>\<span class="title">Workman</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 测试Workman应用能否正常运行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testApp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个Workman应用</span></span><br><span class="line">        <span class="variable">$app</span> = <span class="keyword">new</span> Workman();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加一个路由，返回&quot;Hello, World!&quot;</span></span><br><span class="line">        <span class="variable">$app</span>-&gt;get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动Workman应用</span></span><br><span class="line">        <span class="variable">$app</span>-&gt;run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 断言返回的响应内容是否为&quot;Hello, World!&quot;</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="string">&#x27;Hello, World!&#x27;</span>, <span class="variable">$app</span>-&gt;response-&gt;getBody());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用PHPUnit的TestCase类来创建一个测试用例，并编写了一个测试方法testApp来检验Workman应用是否能够正常运行。我们创建了一个Workman应用，添加了一个路由，并启动了应用。然后，我们使用PHPUnit的assertEquals方法来断言响应内容是否为</p>
<h4 id="在Workman框架中，如何进行性能测试？"><a href="#在Workman框架中，如何进行性能测试？" class="headerlink" title="在Workman框架中，如何进行性能测试？"></a>在Workman框架中，如何进行性能测试？</h4><p>在Workman框架中，可以使用ApacheBench或Siege来进行性能测试。ApacheBench和Siege都是用于测试Web应用性能的工具，可以用来模拟大量并发请求并测量应用的响应时间。</p>
<p>下面是使用ApacheBench进行性能测试的例子：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">使用ApacheBench发送<span class="number">1000</span>个并发请求</span><br><span class="line">`ab -c <span class="number">1000</span> -n <span class="number">1000</span> http:<span class="regexp">//</span>example.com/`</span><br></pre></td></tr></table></figure>
<p>上面的命令会使用ApacheBench发送1000个并发请求到指定的URL，并测量应用的响应时间。</p>
<p>对于Siege，下面是使用Siege进行性能测试的例子：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">使用Siege发送<span class="number">1000</span>个并发请求</span><br><span class="line">`siege -c <span class="number">1000</span> -n <span class="number">1000</span> http:<span class="regexp">//</span>example.com/`</span><br></pre></td></tr></table></figure>
<p>上面的命令会使用Siege发送1000个并发请求到指定的URL，并测量应用的响应时间。</p>
<p>通过使用ApacheBench或Siege进行性能测试，您可以了解应用在高并发情况下的性能表现，并对应用进行优化以提高性能。</p>
<p>框架对比<br>手写框架解析<br>Base.php<br>Loader::register();注册自动加载<br>   spl_autoload_register<br>   Composer自动加载支持<br>Loader::addClassAlias注册类库别名<br>Error::register();注册错误和异常处理机制</p>
<p>路由<br>控制器<br>相应</p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><a href="/blog/p/e4d2e8fb/" title="Mysql">Mysql</a>
<h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><p>BTree + B+Tree<br>事务以及隔离级别<br>共享锁和排他锁<br>分库分表<br>   ShardingSphere<br>   Mycat<br>双主- mysql-keepalived</p>
<h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><a href="/blog/p/f3599f9d/" title="Redis">Redis</a>
<h3 id="基础-2"><a href="#基础-2" class="headerlink" title="基础"></a>基础</h3><h3 id="优化-2"><a href="#优化-2" class="headerlink" title="优化"></a>优化</h3><p>千万级数据秒取 &#x3D; redis scan cursor游标 + lua去重算法(保证原子性)</p>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><a href="/blog/p/65b69107/" title="Nginx">Nginx</a>
<h3 id="基础-3"><a href="#基础-3" class="headerlink" title="基础"></a>基础</h3><p>进程模型<br>进程分流<br>location规则与rewrite解析<br>动静分离、反向代理以及跨域实战<br>缓存配置以及Gzip配置实战<br>https认证以及LVS高可用实战</p>
<h3 id="优化-3"><a href="#优化-3" class="headerlink" title="优化"></a>优化</h3><h2 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h2><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><a href="/blog/p/b543ced0/" title="RabbitMQ">RabbitMQ</a>
<h4 id="基础-4"><a href="#基础-4" class="headerlink" title="基础"></a>基础</h4><h4 id="优化-4"><a href="#优化-4" class="headerlink" title="优化"></a>优化</h4><p>RabbitMQ是什么，它有什么用？</p>
<ul>
<li>RabbitMQ是一个消息中间件，它允许应用程序之间的可靠消息传递。它的用途包括：异步通信、解耦、流量控制、消息路由。</li>
</ul>
<p>RabbitMQ如何保证消息传递的可靠性？</p>
<ul>
<li>RabbitMQ保证消息传递的可靠性通过实现消息持久化、可重新投递、发布确认等机制来实现。</li>
</ul>
<p>RabbitMQ中有哪些核心概念？</p>
<ul>
<li>RabbitMQ中的核心概念包括生产者、消费者、队列、交换器、绑定和路由键。</li>
</ul>
<p>RabbitMQ中队列是如何工作的？</p>
<ul>
<li>RabbitMQ中的队列是一个消息存储结构，它用于存储生产者发送的消息，并提供给消费者消费。</li>
</ul>
<p>RabbitMQ中交换器是如何工作的？</p>
<ul>
<li>RabbitMQ中的交换器是一个消息路由器，它用于接收生产者发送的消息，并根据绑定和路由键将消息路由到对应的队列。</li>
</ul>
<h2 id="RabbitMQ中绑定和路由键是如何工作的？"><a href="#RabbitMQ中绑定和路由键是如何工作的？" class="headerlink" title="RabbitMQ中绑定和路由键是如何工作的？"></a>RabbitMQ中绑定和路由键是如何工作的？</h2><h2 id="RabbitMQ支持哪些消息传递模式？"><a href="#RabbitMQ支持哪些消息传递模式？" class="headerlink" title="RabbitMQ支持哪些消息传递模式？"></a>RabbitMQ支持哪些消息传递模式？</h2><h2 id="RabbitMQ有哪些可用的客户端库？"><a href="#RabbitMQ有哪些可用的客户端库？" class="headerlink" title="RabbitMQ有哪些可用的客户端库？"></a>RabbitMQ有哪些可用的客户端库？</h2><h2 id="RabbitMQ有哪些主要的插件？"><a href="#RabbitMQ有哪些主要的插件？" class="headerlink" title="RabbitMQ有哪些主要的插件？"></a>RabbitMQ有哪些主要的插件？</h2><p>RabbitMQ有哪些可用的扩展选项，例如集群和故障转移？</p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="基础-5"><a href="#基础-5" class="headerlink" title="基础"></a>基础</h3><h3 id="优化-5"><a href="#优化-5" class="headerlink" title="优化"></a>优化</h3><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><h4 id="主流分布式架构设计详解"><a href="#主流分布式架构设计详解" class="headerlink" title="主流分布式架构设计详解"></a>主流分布式架构设计详解</h4><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><h5 id="Redis-1"><a href="#Redis-1" class="headerlink" title="Redis"></a>Redis</h5><h5 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h5><h6 id="基础-6"><a href="#基础-6" class="headerlink" title="基础"></a>基础</h6><p>开发实战<br>zkclient<br>curotor<br>原生客户端<br>应用实战<br>集群选举实战<br>分布式锁实战<br>底层协议解读<br>2p、3p<br>cap、base<br>paxos、zab</p>
<h6 id="优化-6"><a href="#优化-6" class="headerlink" title="优化"></a>优化</h6><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><h4 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h4><p>CAS原理<br>CAS带来的ABA问题 解决方案：原子操作</p>
<h3 id="网络编程与高效IO"><a href="#网络编程与高效IO" class="headerlink" title="网络编程与高效IO"></a>网络编程与高效IO</h3><p>基本概念：</p>
<ul>
<li>进程有pid号</li>
<li>协议(protocol)</li>
<li>HTTP（Hypertext Transfer Protocol）是一种用于在万维网上传输超文本的协议。它是一种应用层协议，负责处理浏览器和服务器之间的请求和响应。 </li>
<li>TCP（Transmission Control Protocol）一种面向连接的传输层协议，负责在两个主机之间建立可靠的数据传输通道，保证数据的正确传输。(具备顺序控制、重发控制等机制)</li>
<li>UDP（User Datagram Protocol）是一种无连接的传输层协议，它不像TCP那样建立可靠的数据通道，而是直接把数据包发送到对方主机。(高速传输实时性较高要求的通信和广播，无法保证是否到大，不可重发)</li>
<li>SOCKET（套接字） 操作系统提供的一种用于网络通信的接口(用到OS的类库，指定IP和port)，它允许程序通过网络发送数据或接收数据。SOCKET通常与TCP或UDP配合使用，实现网络通信的功能。 </li>
<li>ARP 是正向地址解析协议，通过已知的 IP，寻找对应主机的 MAC 地址。</li>
<li>RARP 是反向地址解析协议，通过 MAC 地址确定 IP 地址。比如无盘工作站还有 DHCP 服务。</li>
<li>IP 是网络层的核心，通过路由选择将下一条IP封装后交给接口层。IP数据报是无连接服务。(任务是根据源主机和目的主机的地址传输数据，为了保证数据保证到达，ip地址指明节点被分配的地址，和MAC进行配对，IP地址可以变换，但是MAC几乎不会变)</li>
<li>ICMP 是网络层的补充，可以回送报文。用来检测网络是否通畅。 </li>
<li>Ping 命令就是发送 ICMP 的 echo 包，通过回送的 echo relay 进行网络测试。</li>
</ul>
<h4 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h4><p>在于是否面向连接。TCP是面向连接的，它在建立数据传输通道时需要进行三次握手，在断开连接时需要四次挥手。<br>而UDP是无连接的，它不需要进行握手和挥手，直接把数据包发送到对方主机。</p>
<h4 id="TCP三次握手和四次挥手的过程"><a href="#TCP三次握手和四次挥手的过程" class="headerlink" title="TCP三次握手和四次挥手的过程"></a>TCP三次握手和四次挥手的过程</h4><p>TCP三次握手是指建立连接时，客户端和服务器之间经过的三个阶段。</p>
<ul>
<li>第一阶段，客户端发送一个连接请求；</li>
<li>第二阶段，服务器收到连接请求，并发送确认信息；</li>
<li>第三阶段，客户端收到确认信息，完成连接建立。</li>
</ul>
<p>四次挥手则是指断开连接时，客户端和服务器之间经过的四个阶段。</p>
<ul>
<li>第一阶段，客户端发送断开请求；</li>
<li>第二阶段，服务器收到断开请求，并发送确认信息；</li>
<li>第三阶段，客户端收到确认信息，并再次发送确认信息；</li>
<li>第四阶段，服务器收到确认信息，完成连接断开。</li>
</ul>
<h4 id="TCP的流量控制和拥塞控制的原理是什么？"><a href="#TCP的流量控制和拥塞控制的原理是什么？" class="headerlink" title="TCP的流量控制和拥塞控制的原理是什么？"></a>TCP的流量控制和拥塞控制的原理是什么？</h4><p>TCP的流量控制是指在传输过程中，发送方不能无限制地发送数据，而需要根据接收方的处理能力来调整发送速率。拥塞控制则是指在网络中出现拥塞时，发送方需要降低发送速率，以避免网络拥塞造成的丢包。</p>
<p>流量控制的原理是：<br>发送方和接收方之间通过滑动窗口协议来协商发送数据的速率。<br>发送方根据接收方的窗口大小来调整发送速率，接收方收到数据后会更新窗口大小，发送方再根据新的窗口大小来调整发送速率。</p>
<p>拥塞控制的原理是：发送方通过探测网络拥塞情况来调整发送速率。<br>发送方会定期发送心跳数据包，接收方收到心跳数据包后会立即回复，发送方根据回复的时间来判断网络的拥塞程度，并根据拥塞程度调整发送速率。</p>
<h4 id="TCP如何保证数据的正确传输？"><a href="#TCP如何保证数据的正确传输？" class="headerlink" title="TCP如何保证数据的正确传输？"></a>TCP如何保证数据的正确传输？</h4><ul>
<li>可靠性：TCP通过确认和重传机制来保证数据的可靠传输，在收到数据后，接收方会发送确认信息给发送方，表示已收到数据。如果发送方在一定时间内没有收到确认信息，则会认为数据丢失，并重新发送数据。 </li>
<li>顺序性：TCP通过序号来保证数据的顺序传输，在发送数据时，发送方会为每一个数据包分配一个序号，接收方收到数据后会根据序号来确定每个数据包的顺序。</li>
<li>完整性：TCP通过校验和机制来保证数据的完整性，在发送数据时，发送方会计算出数据的校验和并附加在数据包上。接收方收到数据后会再次计算校验和，如果与发送方计算的校验和不一致，则认为数据已损坏，并丢弃数据。</li>
</ul>
<h4 id="TCP的窗口大小对网络性能的影响是什么？"><a href="#TCP的窗口大小对网络性能的影响是什么？" class="headerlink" title="TCP的窗口大小对网络性能的影响是什么？"></a>TCP的窗口大小对网络性能的影响是什么？</h4><p>带宽利用率：TCP的窗口大小越大，发送方就能发送更多的数据，从而提高带宽利用率。如果窗口大小设置过小，发送方会不断等待接收方的确认信息，导致发送速率降低，带宽利用率降低。<br>延迟：TCP的窗口大小越大，接收方就能缓存更多的数据，从而减少接收方发送确认信息的频率，降低延迟。如果窗口大小设置过小，接收方会经常发送确认信息，导致发送方频繁暂停发送，延迟增加。</p>
<p>因此，在设置TCP的窗口大小时，需要考虑网络带宽和延迟，根据实际情况来设置合理的窗口大小。</p>
<h4 id="TCP的慢启动和快速重传的原理是什么？"><a href="#TCP的慢启动和快速重传的原理是什么？" class="headerlink" title="TCP的慢启动和快速重传的原理是什么？"></a>TCP的慢启动和快速重传的原理是什么？</h4><p>慢启动是一种网络拥塞控制机制，它的作用是在建立连接时启动网络拥塞控制。慢启动的原理是，发送方在建立连接后会以较低的速率发送数据，并根据接收方的确认信息来逐步增加发送速率。这样可以避免在网络拥塞时发送过多数据导致丢包，从而保证网络的稳定性。</p>
<p>快速重传是一种数据传输过程中的错误恢复机制，它的作用是快速恢复丢失的数据。快速重传的原理是，发送方在收到三个连续的重复确认时，会认为数据丢失，并立即重新发送数据。这样可以避免等待超时重传，从而提高数据传输的效率。</p>
<h4 id="TCP的差错控制机制是如何实现的？"><a href="#TCP的差错控制机制是如何实现的？" class="headerlink" title="TCP的差错控制机制是如何实现的？"></a>TCP的差错控制机制是如何实现的？</h4><p>TCP（传输控制协议）是一种面向连接的传输层协议，它为应用层提供了可靠的数据传输服务。TCP的差错控制机制通过使用确认、重传和拥塞控制来确保数据在网络中可靠地传输。</p>
<p>在TCP中，每个数据包都会携带一个序列号，用于标识该数据包的顺序。当一个数据包发送出去后，接收方会发送一个确认报文，告诉发送方这个数据包是否成功接收。如果发送方没有收到确认报文，则会认为这个数据包发送失败，并重新发送这个数据包。</p>
<p>此外，TCP还使用拥塞控制来防止网络拥塞。如果发送方收到的确认报文数量超过了一定的阈值，则发送方会暂停发送数据包，以防止网络拥塞。</p>
<p>总之，TCP的差错控制机制通过确认、重传和拥塞控制来确保数据在网络中可靠地传输。</p>
<h4 id="TCP的滑动窗口协议是如何工作的？"><a href="#TCP的滑动窗口协议是如何工作的？" class="headerlink" title="TCP的滑动窗口协议是如何工作的？"></a>TCP的滑动窗口协议是如何工作的？</h4><p>TCP的滑动窗口协议通过维护一个可变大小的缓冲区来管理数据的发送和接收。<br>当一个计算机想要向另一个计算机发送数据时，它会在发送端的缓冲区中放入数据，并通过网络将数据发送到接收端。<br>接收端会把收到的数据放入接收端的缓冲区中，然后进行处理。滑动窗口协议通过不断调整缓冲区的大小来控制数据的流量，从而确保数据能够及时地发送和接收。</p>
<h4 id="TCP的优缺点分别是什么？"><a href="#TCP的优缺点分别是什么？" class="headerlink" title="TCP的优缺点分别是什么？"></a>TCP的优缺点分别是什么？</h4><p>优点：</p>
<ul>
<li>可靠性：TCP提供了可靠的数据传输机制，能够保证数据的完整性和正确性。</li>
<li>顺序性：TCP保证了数据包的发送顺序和接收顺序。</li>
<li>流控：TCP通过滑动窗口协议来控制数据流量，从而避免网络拥塞。</li>
<li>拥塞控制：TCP通过慢启动和拥塞避免算法来控制网络拥塞，从而提高网络的传输效率。</li>
</ul>
<p>缺点</p>
<ul>
<li>时延：TCP的可靠性和顺序性需要通过确认和重传机制来实现，这会增加网络传输的时延。</li>
<li>效率：TCP的可靠性和顺序性需要在数据包中添加额外的控制信息，这会增加数据包的大小，降低网络传输的效率。</li>
<li>连接管理：TCP需要为每个连接维护状态信息，这会增加网络节点的复杂度。</li>
</ul>
<h4 id="请描述Socket的工作原理。"><a href="#请描述Socket的工作原理。" class="headerlink" title="请描述Socket的工作原理。"></a>请描述Socket的工作原理。</h4><p>Socket的工作原理是通过建立一个网络连接，它允许两个运行在不同计算机上的程序之间进行双向通信。<br>Socket会负责处理网络通信的细节，例如数据包的拆分和重组，网络地址的解析等。</p>
<h4 id="常见的Socket类型有哪些？"><a href="#常见的Socket类型有哪些？" class="headerlink" title="常见的Socket类型有哪些？"></a>常见的Socket类型有哪些？</h4><p>TCP Socket和UDP Socket。<br>TCP Socket是基于流的，它提供了可靠的、面向连接的通信机制。<br>UDP Socket是基于数据报的，它提供了不可靠的、无连接的通信机制。</p>
<h4 id="在TCP-Socket通信中，有哪些可能导致通信失败？"><a href="#在TCP-Socket通信中，有哪些可能导致通信失败？" class="headerlink" title="在TCP Socket通信中，有哪些可能导致通信失败？"></a>在TCP Socket通信中，有哪些可能导致通信失败？</h4><ul>
<li>网络连接中断：如果网络连接中断，TCP Socket就无法进行通信。</li>
<li>超时：如果Socket通信超时，它也会导致通信失败。</li>
<li>协议不匹配：如果两个程序使用的协议不匹配，也会导致通信失败。</li>
</ul>
<h4 id="如何在PHP中使用Socket进行网络通信？"><a href="#如何在PHP中使用Socket进行网络通信？" class="headerlink" title="如何在PHP中使用Socket进行网络通信？"></a>如何在PHP中使用Socket进行网络通信？</h4><p>在PHP中使用Socket进行网络通信，需要使用PHP的网络函数。首先，需要使用socket_create()函数来创建一个Socket实例，然后使用socket_connect()函数来连接到远程服务器。<br>接下来，可以使用socket_read()和socket_write()函数来读取和写入数据。例如，下面是一个简单的PHP程序，它使用Socket连接到一个Web服务器，并读取首页的内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Socket实例</span></span><br><span class="line"><span class="variable">$socket</span> = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接到Web服务器</span></span><br><span class="line"><span class="variable">$result</span> = socket_connect(<span class="variable">$socket</span>, <span class="string">&#x27;www.example.com&#x27;</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向Web服务器发送一个HTTP请求</span></span><br><span class="line"><span class="variable">$request</span> = <span class="string">&quot;GET / HTTP/1.1\r\nHost: www.example.com\r\n\r\n&quot;</span>;</span><br><span class="line">socket_write(<span class="variable">$socket</span>, <span class="variable">$request</span>, strlen(<span class="variable">$request</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取Web服务器的响应</span></span><br><span class="line"><span class="variable">$response</span> = socket_read(<span class="variable">$socket</span>, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭Socket连接</span></span><br><span class="line">socket_close(<span class="variable">$socket</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示响应内容</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$response</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：上面的代码只是一个简单的示例，实际应用中可能需要处理更多的细节，例如错误处理、超时处理等。</p>
<h4 id="在UDP-Socket通信中，如何确保数据包不丢失？"><a href="#在UDP-Socket通信中，如何确保数据包不丢失？" class="headerlink" title="在UDP Socket通信中，如何确保数据包不丢失？"></a>在UDP Socket通信中，如何确保数据包不丢失？</h4><p>UDP是一种无连接的、不可靠的网络协议，它不提供数据包丢失的保证。因此，在使用UDP Socket进行通信时，数据包可能会丢失。<br>要确保数据包不丢失，可以使用应用层协议来提供可靠性保证。例如，可以在数据包中添加序列号，并在接收端对序列号进行排序，从而确保数据包的正确顺序。<br>此外，还可以使用应用层的重传机制来保证数据包的可靠传输。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="如何在PHP中使用Socket进行网络通信？-1"><a href="#如何在PHP中使用Socket进行网络通信？-1" class="headerlink" title="如何在PHP中使用Socket进行网络通信？"></a>如何在PHP中使用Socket进行网络通信？</h4><p>在PHP中使用Socket进行网络通信，需要使用PHP的网络函数。首先，需要使用socket_create()函数来创建一个Socket实例，然后使用socket_connect()函数来连接到远程服务器。<br>接下来，可以使用socket_read()和socket_write()函数来读取和写入数据。例如，下面是一个简单的PHP程序，它使用Socket连接到一个Web服务器，并读取首页的内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Socket实例</span></span><br><span class="line"><span class="variable">$socket</span> = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接到Web服务器</span></span><br><span class="line"><span class="variable">$result</span> = socket_connect(<span class="variable">$socket</span>, <span class="string">&#x27;www.example.com&#x27;</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向Web服务器发送一个HTTP请求</span></span><br><span class="line"><span class="variable">$request</span> = <span class="string">&quot;GET / HTTP/1.1\r\nHost: www.example.com\r\n\r\n&quot;</span>;</span><br><span class="line">socket_write(<span class="variable">$socket</span>, <span class="variable">$request</span>, strlen(<span class="variable">$request</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取Web服务器的响应</span></span><br><span class="line"><span class="variable">$response</span> = socket_read(<span class="variable">$socket</span>, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭Socket连接</span></span><br><span class="line">socket_close(<span class="variable">$socket</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示响应内容</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$response</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：上面的代码只是一个简单的示例，实际应用中可能需要处理更多的细节，例如错误处理、超时处理等。</p>
<h4 id="请描述Socket的三次握手过程。"><a href="#请描述Socket的三次握手过程。" class="headerlink" title="请描述Socket的三次握手过程。"></a>请描述Socket的三次握手过程。</h4><p>三次握手过程是一种网络协议，它是用来建立一个可靠的、双向的连接的。下面是Socket的三次握手过程的具体步骤：<br>第一次握手：客户端向服务器发送一个连接请求，并等待服务器的回应。<br>第二次握手：服务器收到客户端的连接请求后，会发送一个确认消息给客户端。<br>第三次握手：客户端收到服务器的确认消息后，会再次向服务器发送一个确认消息。</p>
<p>在三次握手过程中，双方都会发送和接收一些控制消息来建立连接。这种方式能够确保连接的可靠性，同时还能保证数据的正确传输。</p>
<h4 id="什么是Socket超时，它的作用是什么？"><a href="#什么是Socket超时，它的作用是什么？" class="headerlink" title="什么是Socket超时，它的作用是什么？"></a>什么是Socket超时，它的作用是什么？</h4><p>Socket超时是指Socket在等待远程服务器的响应时，如果超过了一定的时间间隔，就会发生超时。<br>Socket超时的作用是避免客户端一直等待远程服务器的响应，从而保证程序的可响应性。</p>
<h4 id="在Socket通信中，如何保证数据的完整性？"><a href="#在Socket通信中，如何保证数据的完整性？" class="headerlink" title="在Socket通信中，如何保证数据的完整性？"></a>在Socket通信中，如何保证数据的完整性？</h4><p>在Socket通信中，可以使用检验和来保证数据的完整性。</p>
<p>检验和是一种简单的数据校验方法，它通过对数据中的每个字节进行加和计算，然后对结果取模，得到一个校验码。<br>在数据传输过程中，接收端可以对数据进行同样的检验，如果检验码一致，就表示数据没有在传输过程中改变，完整性得到保证。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算数据的检验和</span></span><br><span class="line">uint8_t <span class="keyword">checksum</span> = 0;</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; data_size; i++) &#123;</span><br><span class="line">  <span class="keyword">checksum</span> += data[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据和检验和</span></span><br><span class="line">send(sockfd, data, data_size, 0);</span><br><span class="line">send(sockfd, &amp;<span class="keyword">checksum</span>, sizeof(<span class="keyword">checksum</span>), 0);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收数据和检验和</span></span><br><span class="line">recv(sockfd, data, data_size, 0);</span><br><span class="line">recv(sockfd, &amp;<span class="keyword">checksum</span>, sizeof(<span class="keyword">checksum</span>), 0);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验数据</span></span><br><span class="line">uint8_t expected_checksum = 0;</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; data_size; i++) &#123;</span><br><span class="line">  expected_checksum += data[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">checksum</span> != expected_checksum) &#123;</span><br><span class="line">  <span class="comment">// 数据不完整，需要重新接收</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：上面的代码只是一个简单的示例，实际应用中可能需要处理更多的细节。此外，检验和也不是唯一的数据完整性保证方式，还有其他一些算法可以用来保证数据</p>
<p>IP协议是高速公路，TCP和UDP是卡车，携带的货物有HTTP、FTP等<br>第二个比喻：HTTP 是轿车，提供了封装或者显示数据的具体形式；Socket 是发动机，提供了网络通信的能力。<br>TCP和UDP使用IP协议从一个网络传送数据包到另一个网络。</p>
<h4 id="OSI网络参考模型"><a href="#OSI网络参考模型" class="headerlink" title="OSI网络参考模型"></a>OSI网络参考模型</h4><p>一种用于规范网络通信的开放式系统互联模型。目的是为了让不同的网络设备和软件能够互相通信，实现网络资源的共享和互联。它提供了一种标准化的方法，让网络设备和软件可以按照统一的规范进行</p>
<table>
<thead>
<tr>
<th>OSI网络参考模型</th>
<th>功能</th>
<th>TCP&#x2F;IP协议族</th>
</tr>
</thead>
<tbody><tr>
<td>7应用层</td>
<td>处理网络应用</td>
<td>TFTP、HTTP、SNMP、FTP、SMTP、DNS、Telnet等</td>
</tr>
<tr>
<td>6表示层</td>
<td>数据表示</td>
<td>没有协议</td>
</tr>
<tr>
<td>5会话层</td>
<td>互联网主机通信</td>
<td>没有协议</td>
</tr>
<tr>
<td>4传输层</td>
<td>端到端的链接</td>
<td>TCP、UDP</td>
</tr>
<tr>
<td>3网络层</td>
<td>寻址和最短路径</td>
<td>IP，ICMP、OSPF、EIGRP、IGMP</td>
</tr>
<tr>
<td>2数据链路层</td>
<td>接入介质</td>
<td>SLIP、CSLIP、PPP、MTU</td>
</tr>
<tr>
<td>1物理层</td>
<td>二进制传输原始的数据比特流</td>
<td>IOS2110、IEEE802、IEEE802.2</td>
</tr>
</tbody></table>
<h4 id="HTTP-x2F-TCP-x2F-UDP网络协议原理透析"><a href="#HTTP-x2F-TCP-x2F-UDP网络协议原理透析" class="headerlink" title="HTTP&#x2F;TCP&#x2F;UDP网络协议原理透析"></a>HTTP&#x2F;TCP&#x2F;UDP网络协议原理透析</h4><h4 id="Swoole"><a href="#Swoole" class="headerlink" title="Swoole"></a>Swoole</h4><h4 id="Socks"><a href="#Socks" class="headerlink" title="Socks"></a>Socks</h4><h3 id="高效存储"><a href="#高效存储" class="headerlink" title="高效存储"></a>高效存储</h3><p>fastDFS</p>
<h3 id="分布式搜索和分析引擎"><a href="#分布式搜索和分析引擎" class="headerlink" title="分布式搜索和分析引擎"></a>分布式搜索和分析引擎</h3><h4 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h4><p>原理<br>搜索<br>索引以及映射<br>分布式CRUD<br>索引管理<br>分片<br>搜索优化</p>
<h2 id="满意的功能"><a href="#满意的功能" class="headerlink" title="满意的功能"></a>满意的功能</h2><h3 id="红包"><a href="#红包" class="headerlink" title="红包"></a>红包</h3><h3 id="语音-amp-视频通话"><a href="#语音-amp-视频通话" class="headerlink" title="语音&amp;视频通话"></a>语音&amp;视频通话</h3><h2 id="项目介绍-简历上有详情"><a href="#项目介绍-简历上有详情" class="headerlink" title="项目介绍(简历上有详情)"></a>项目介绍(简历上有详情)</h2><h3 id="有资源网"><a href="#有资源网" class="headerlink" title="有资源网"></a>有资源网</h3><p>什么时候做的<br>是什么东西<br>怎么实现的</p>
<h3 id="此刻芭蕾-服务APP"><a href="#此刻芭蕾-服务APP" class="headerlink" title="此刻芭蕾 服务APP"></a>此刻芭蕾 服务APP</h3><h3 id="奔赴科技-社交APP"><a href="#奔赴科技-社交APP" class="headerlink" title="奔赴科技 社交APP"></a>奔赴科技 社交APP</h3><h3 id="金博科技-商城-amp-amp-分销"><a href="#金博科技-商城-amp-amp-分销" class="headerlink" title="金博科技 商城&amp;&amp;分销"></a>金博科技 商城&amp;&amp;分销</h3><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><h3 id="微信、支付宝支付"><a href="#微信、支付宝支付" class="headerlink" title="微信、支付宝支付"></a>微信、支付宝支付</h3><h3 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h3><h3 id="秒杀场景"><a href="#秒杀场景" class="headerlink" title="秒杀场景"></a>秒杀场景</h3><h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><h3 id="介绍一下你自己"><a href="#介绍一下你自己" class="headerlink" title="介绍一下你自己"></a>介绍一下你自己</h3><p>who？<br>   过往经历串联起来，每段工作选择的动机是什么，沉淀下来了什么的能力<br>why 为什么我选择这份工作？<br>   行业发展趋势<br>   对公司产品的认可度<br>   个人和岗位的匹配度<br>what 能为公司带来什么？<br>   学习能力&amp;吃苦勤奋的品质<br>   专研精神+解决副作用(偶尔给自己一些社交活动)<br>    负责的内容<br>    具体策略和行动<br>    如何处理困难<br>此刻</p>
<ul>
<li>您好，我叫李国欣，从毕业至今有三份工作，都是是互联网相关，涉及到的产品有分销商城、社交、服务型App。</li>
<li>所在的第一家公司主要是外包为主，也是我的实习工作，当时选择该公司的一个主要的原因其实是当时觉得外包型的企业能让我快速对互联网产品公司有充分的了解。<ul>
<li>我在该公司工作了一年后也参与了研发岗位，除了继续做开发岗的项目之外，也参与到了核心框架的设计，提交给开发岗进行二次开发，项目主要涉及到分销和商城，也有后期新增的名片业务。</li>
<li>公司业务的深度思考：程序员就不背了</li>
<li>自我总结来看，在第一家公司我确实了解到了作为互联网产品的所需细节，但更多的是外包方面的，例如不像公司自有产品那样精益求精。</li>
<li>离职原因：去广州发展</li>
</ul>
</li>
<li>第二家公司是来到广州后进行的面试，由于产品本身和面试官都让我眼前一亮，产品刚上线没多久用户量就已经有显著的增长，对自己会有很大的挑战，加上我自己已有的知识储备也得到了老大的认可<ul>
<li>在这家公司我比较深刻的体会到产品岗位的重要性，如何做好一款产品，如何和各个部门之间讨论为产品功能细节做取舍等。 </li>
<li>技术方面确实也有很大的提升，主要原因是老大的技术栈很强大，例如解决并发redis产生的余额重复扣减问题，老大提供了思路(使用lua脚本)，我们解决的时候也避免了许多坑。</li>
<li>公司业务的深度思考：程序员就不背了</li>
<li>离职原因：需求堆积很多，两位PHP、1运维、2测试、1Android、1IOS，加班很严重，因为我们在地下室工作，招人很难招人，大部分面试者水平都有局限性，后面扩招了Java。</li>
</ul>
</li>
<li>第三家公司简单来讲就是艺术类跳芭蕾舞的，选择该公司的原因是：1.”此刻芭蕾”在广州艺术芭蕾行业算是头部公司 2.她们工作的氛围我比较喜欢，而且职位是leader。当时也测了我的MBTI职场性格是ESTJ，个人是觉得能够胜任的，然后争取了一下。<ul>
<li>我们的产品难点在交错的产品营销设计上，所以前期主要的工作内容就是迅速熟悉整个产品逻辑，确实耗费也不少时间。</li>
<li>后期就越发顺手了，因为我们原则之一就是做事有条不紊，大大小小的功能按照流程走下来，完成目标以及分享，除了能完成工作内容，成就感还是满满的</li>
<li>公司业务的深度思考：程序员就不背了</li>
<li>离职原因：(发展问题,平台机会)产品本身没问题，但是对于我自身来讲，局限性特别大。</li>
</ul>
</li>
</ul>
<h3 id="你的优势在哪里？-是否符合岗位的要求，是否足够自信"><a href="#你的优势在哪里？-是否符合岗位的要求，是否足够自信" class="headerlink" title="你的优势在哪里？(是否符合岗位的要求，是否足够自信)"></a>你的优势在哪里？(是否符合岗位的要求，是否足够自信)</h3><ul>
<li>证明”我能快速学会”&gt;背八股文(刷题)<ul>
<li>遇到不会的题，根据已有知识猜测和推断出 <code>提供解题思路</code>，设计某些实验验证猜想即可。</li>
</ul>
</li>
<li>自驱(经死啊、开源代码建设、其他具有挑战性的经历)。</li>
<li>领导不用管自己都能搞定。</li>
<li>聪明+勤奋<ul>
<li>聪明回答问题：这个问题本质上是一个xx问题，和xx的问题的思路是相同的，我们可以基于xx的问题上的研究成果设计xx的问题，解决方案如下</li>
</ul>
</li>
<li>沟通</li>
</ul>
<p><strong>回答：</strong></p>
<ul>
<li>自驱：我喜欢code的主要原因就是内心驱动，只要开始编程，我就能迅速进入到心流状态(时间流逝快)。</li>
<li>灵活处事(性格)：积极但有分寸，阳光但不幼稚，思想开放不偏激，有灵活度又不失原则的风格。</li>
<li>沟通：整体上以往的工作经历让我明白了沟通的重要性，对接、汇报、leader(管理下属)，所以我提升效率的渠道之一就是沟通。</li>
<li>换位思考：我创业过，挺明白站在领导层的会遇到的问题和想法，换位思考也非常重要，举个例子就是老大交代的事情，我不仅要完成任务也要条理清楚的向老大详细的汇报，提高沟通效率。</li>
</ul>
<h3 id="你有1年的空窗期，是做了什么吗？-担心不能适应快节奏"><a href="#你有1年的空窗期，是做了什么吗？-担心不能适应快节奏" class="headerlink" title="你有1年的空窗期，是做了什么吗？(担心不能适应快节奏)"></a>你有1年的空窗期，是做了什么吗？(担心不能适应快节奏)</h3><p>我结束了上一份工作之后，做了很多事情，</p>
<ul>
<li>彻底放空游玩了一圈</li>
<li>疫情前考车牌进度在科目3</li>
<li>我喜欢玩游戏，比如和平精英，有段时间沉迷在u3d游戏开发的领域，买了几本书，然后在u3d官网和youtube学习了俩月，成果就是做了一个fps游戏的小demo，进度是卡在多人在线网络服务这块。</li>
<li>总结自己的所有东西，买了一些c#和redis的书籍，还是有很大的冲动想学习C#，因为和游戏相关</li>
<li>疫情前就准备找工作了，然后拖了两个月</li>
</ul>
<h3 id="你为什么会来我们公司面试？-你对我们公司了解多少"><a href="#你为什么会来我们公司面试？-你对我们公司了解多少" class="headerlink" title="你为什么会来我们公司面试？(你对我们公司了解多少)"></a>你为什么会来我们公司面试？(你对我们公司了解多少)</h3><p>基本信息：成立时间、规模、创始人、融资情况、口碑<br>所在行业的发展情况，在行业中的地位<br>主要产品、业务和市场情况<br>竞品有哪些，市场情况<br>公司的组织架构<br>岗位职责、工作内容、技能要求、通用能力等</p>
<p>我看贵司是游戏类型的 坦白的讲 我是比较倾向于这个方向，包括近几个月我也在补齐有关游戏方面的技术栈，<br>我自己有学习U3D，写了一些关于第三人称FPS游戏的demo，包括血条、枪械、NPC任务等，目前我自学到了玩家联网这一块，学习途径是u3d官网和youtube</p>
<h3 id="最近面试了哪些公司？-竞争力如何"><a href="#最近面试了哪些公司？-竞争力如何" class="headerlink" title="最近面试了哪些公司？(竞争力如何)"></a>最近面试了哪些公司？(竞争力如何)</h3><h3 id="你做过哪些项目？-把之前的项目都说一遍"><a href="#你做过哪些项目？-把之前的项目都说一遍" class="headerlink" title="你做过哪些项目？(把之前的项目都说一遍)"></a>你做过哪些项目？(把之前的项目都说一遍)</h3><p>STAR法则：<br>背景(情境situation)：产品情况+客户画像+行业市场状况<br>任务(task)<br>行动(action)：我如何思考 计划 行动 做数据分析 一线了解情况 和产品进行沟通。我如何做的决策的，如何安排工作优先级，行动，查阅资料寻找解决方案<br>结果(result)：取得什么样的结果</p>
<p>自测流程+交付标准<br>团队总结果<br>个人结果 学到了什么</p>
<ol>
<li><a href="/blog/p/bcbac40b/" title="实战：腾讯实时语音视频通话">实战：腾讯实时语音视频通话</a></li>
<li><a href="/blog/p/ff69a4f5/" title="实战：微信抢红包算法">实战：微信抢红包算法</a></li>
<li><a href="/blog/p/fc5b94cd/" title="实战：在线售票功能">实战：在线售票功能</a></li>
</ol>
<h3 id="你的期望薪资是什么？"><a href="#你的期望薪资是什么？" class="headerlink" title="你的期望薪资是什么？"></a>你的期望薪资是什么？</h3><p>考虑到HR的压薪，要给自己溢价的空间。</p>
<h3 id="你一个人住还是合租？-针对女性问的多一些，考虑产假问题"><a href="#你一个人住还是合租？-针对女性问的多一些，考虑产假问题" class="headerlink" title="你一个人住还是合租？(针对女性问的多一些，考虑产假问题)"></a>你一个人住还是合租？(针对女性问的多一些，考虑产假问题)</h3><h3 id="你从家里来方便吗？-会不会因为通勤问题影响以后的加班"><a href="#你从家里来方便吗？-会不会因为通勤问题影响以后的加班" class="headerlink" title="你从家里来方便吗？(会不会因为通勤问题影响以后的加班)"></a>你从家里来方便吗？(会不会因为通勤问题影响以后的加班)</h3><p>我有早起的习惯，健身+洗漱+其他，还是比较方便的。</p>
<h3 id="你还有哪些问题？"><a href="#你还有哪些问题？" class="headerlink" title="你还有哪些问题？"></a>你还有哪些问题？</h3><p>请原谅我的直白和较真，因为我比较看重贵司，我想一切都了解清楚，我喜欢稳定，持续在一家公司我有归属感。</p>
<ul>
<li>如果我有幸入职：<ul>
<li>贵司期望我在最初的一个月 &#x2F; 三个月能够完成什么？我需要准备些什么？</li>
<li>有给我设定的特定目标吗？</li>
</ul>
</li>
<li>薪资结构是什么？绩效是怎样衡量的？<br>问清楚固定薪资+绩效(可能不写在合同里面，绩效有可能拿不满)+提成<ul>
<li>未来可能会扣钱的情况(问了没好处，没必要)</li>
<li>试用期间，是否会缴纳五险一金(正规的公司会入职就会交)</li>
</ul>
</li>
<li>单双休</li>
<li>加班是否有加班费</li>
<li>有竞业限制或者保密协议需要签吗？</li>
<li>公司整体团队有多大，技术团队的架构和人员和构成是什么？</li>
<li>公司现在业务上盈利了嘛，如果没有还有多久？</li>
<li>公司未来的增长计划是什么？</li>
<li>该职位是什么原因导致空缺？扩招还是上一任离职？</li>
</ul>
<h3 id="遇到问题如何做决策？"><a href="#遇到问题如何做决策？" class="headerlink" title="遇到问题如何做决策？"></a>遇到问题如何做决策？</h3><ol>
<li>保持冷静</li>
<li>做足分析，要有原则</li>
<li>判断形式：独断式决策(紧急情况，他人不能决策，众人期盼你做决策) 还是 群体决策(共识)</li>
<li>拟定方案，适当的听取别人的建议</li>
<li>执行方案</li>
<li>解决问题后 重新审视 并 评价</li>
</ol>
<h3 id="个人未来发展规划"><a href="#个人未来发展规划" class="headerlink" title="个人未来发展规划"></a>个人未来发展规划</h3><h3 id="职业未来发展规划"><a href="#职业未来发展规划" class="headerlink" title="职业未来发展规划"></a>职业未来发展规划</h3><h3 id="你更喜欢的工作方式是什么？"><a href="#你更喜欢的工作方式是什么？" class="headerlink" title="你更喜欢的工作方式是什么？"></a>你更喜欢的工作方式是什么？</h3><p>提高自己专注的时间，从而高效完成任务，而不是浑浑噩噩僵持一整天，对公司不负责，对自己也不负责。<br>积极沟通，善于复盘总结</p>
<h3 id="喜欢什么领导类型和工作氛围？-自己需要适应领导，谈对自己的要求"><a href="#喜欢什么领导类型和工作氛围？-自己需要适应领导，谈对自己的要求" class="headerlink" title="喜欢什么领导类型和工作氛围？(自己需要适应领导，谈对自己的要求)"></a>喜欢什么领导类型和工作氛围？(自己需要适应领导，谈对自己的要求)</h3><p>如果我能加入到这个团队，我希望自己能够尽快熟悉环境，胜任工作。同时也希望领导能够愿意指导我并随时指出我的不足，无论什么类型的领导，我都会积极适应。</p>
<h3 id="自己成绩比较突出，发现同事们越来越孤立自己，怎么看到这件事情，该怎么办"><a href="#自己成绩比较突出，发现同事们越来越孤立自己，怎么看到这件事情，该怎么办" class="headerlink" title="自己成绩比较突出，发现同事们越来越孤立自己，怎么看到这件事情，该怎么办"></a>自己成绩比较突出，发现同事们越来越孤立自己，怎么看到这件事情，该怎么办</h3><p>自我反思，没有人不喜欢优秀的人，我觉得主要原因还是在于自己的行为或做法有欠缺，要尝试使用更优的策略融入他们。</p>
<h3 id="期待什么样的公司？"><a href="#期待什么样的公司？" class="headerlink" title="期待什么样的公司？"></a>期待什么样的公司？</h3><p>有潜力，成长大的，节奏快的</p>
<p>游戏公司：</p>
<h3 id="面试结束"><a href="#面试结束" class="headerlink" title="面试结束"></a>面试结束</h3><ol>
<li>创造想象：如果我被录取了，我希望我前两个月达成的目标是… 面试官就会想 我会给你什么支持，去完成什么什么？</li>
<li>握手</li>
</ol>
<h3 id="如果说你是一个聪明人，你认为你聪明在什么地方？理由是什么？"><a href="#如果说你是一个聪明人，你认为你聪明在什么地方？理由是什么？" class="headerlink" title="如果说你是一个聪明人，你认为你聪明在什么地方？理由是什么？"></a>如果说你是一个聪明人，你认为你聪明在什么地方？理由是什么？</h3><h3 id="你迄今为止觉得自己最牛逼，最得意的一件事是什么？"><a href="#你迄今为止觉得自己最牛逼，最得意的一件事是什么？" class="headerlink" title="你迄今为止觉得自己最牛逼，最得意的一件事是什么？"></a>你迄今为止觉得自己最牛逼，最得意的一件事是什么？</h3><p>回顾过完的项目经历，选择一个和面试岗位最相关的 STAR</p>
<h3 id="你觉得工作的意义是什么，你期望中理想的工作是什么样的？请你的面试官从工作角度（而不是朋友角度）审视你的回答"><a href="#你觉得工作的意义是什么，你期望中理想的工作是什么样的？请你的面试官从工作角度（而不是朋友角度）审视你的回答" class="headerlink" title="你觉得工作的意义是什么，你期望中理想的工作是什么样的？请你的面试官从工作角度（而不是朋友角度）审视你的回答"></a>你觉得工作的意义是什么，你期望中理想的工作是什么样的？请你的面试官从工作角度（而不是朋友角度）审视你的回答</h3><ol>
<li>富有挑战性的工作中提升磨炼自己 创造自己的人生价值时，不必担心生存问题。</li>
<li>从工作中找到志同道合的人，一起实现目标</li>
<li>从工作中发现快乐</li>
</ol>
<p>理想职业：3p原则(passion热情&#x2F;hope希望&#x2F;people人)</p>
<ul>
<li>持续对工作怀有热情</li>
<li>对未来的发展有盼头</li>
<li>工作中的同事不仅仅是同事，还是知己</li>
</ul>
<p>这就是理想职业。</p>
<h3 id="对json数据格式的理解？"><a href="#对json数据格式的理解？" class="headerlink" title="对json数据格式的理解？"></a>对json数据格式的理解？</h3><ul>
<li>JSON(JavaScript Object Notation)是一种轻量级的数据交换格式，json数据格式固定，可以被多种语言用作数据的传递。</li>
<li>PHP中处理json格式的函数为json_decode( string $json [, bool $assoc ] ) ，接受一个 JSON格式的字符串并且把它转换为PHP变量，参数json待解码的json string格式的字符串。assoc当该参数为TRUE时，将返回array而非object；</li>
<li>Json_encode：将PHP变量转换成json格式。</li>
</ul>
<h3 id="Print、echo、print-r有什么区别？"><a href="#Print、echo、print-r有什么区别？" class="headerlink" title="Print、echo、print_r有什么区别？"></a>Print、echo、print_r有什么区别？</h3><p>重点</p>
<ol>
<li>排序</li>
<li>语法结构&#x2F;函数</li>
<li>是否可以打印多个值</li>
<li>是否可以打印数据类型</li>
<li>是否有返回值</li>
<li>应用场景</li>
</ol>
<table>
<thead>
<tr>
<th>*</th>
<th>语法结构(√) 函数(△)</th>
<th>可打印多个值</th>
<th>数据类型</th>
<th>有返回值</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>print</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>echo</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>print_r</td>
<td>△</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>var_dump</td>
<td>△</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>printf</td>
<td>△</td>
<td></td>
<td></td>
<td></td>
<td>格式化输出</td>
</tr>
<tr>
<td>sprintf</td>
<td>△</td>
<td></td>
<td></td>
<td>√</td>
<td>格式化输出</td>
</tr>
</tbody></table>
<h3 id="Session和Cookie的区别"><a href="#Session和Cookie的区别" class="headerlink" title="Session和Cookie的区别"></a>Session和Cookie的区别</h3><blockquote>
<p><code>web</code> 是通过http协议使客户端和服务端进行交互，但是http是无状态的，没有方法鉴别用户的状态<br>会话控制就是保留用户状态，用来跟踪和对用户的状态保持</p>
</blockquote>
<p>cookie是存储在用户客户端浏览器或硬盘的技术</p>
<ul>
<li>优点：不占用服务器的资源</li>
<li>缺点：安全性差</li>
<li>基本操作：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置</span></span><br><span class="line">setcookie(name,value,expire,path,domain,secure);</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取</span></span><br><span class="line"><span class="variable">$_COOKIE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">setcookie(name,<span class="string">&#x27;&#x27;</span>,-<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>session是将用户状态存储在服务器的技术</p>
<ul>
<li>优点：占用服务器资源</li>
<li>缺点：安全性比cookie高</li>
<li>基本操作</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启</span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="comment">#操作</span></span><br><span class="line"><span class="variable">$_SESSION</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#清除session</span></span><br><span class="line"><span class="variable">$_SESSION</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除session文件并把sessionid删除</span></span><br><span class="line">session_destory()</span><br><span class="line"></span><br><span class="line"><span class="comment">#session设置 php.ini</span></span><br><span class="line">session.auto_start <span class="comment">#自动开启session</span></span><br><span class="line">session.cookie_domain <span class="comment">#有效域名</span></span><br><span class="line">session.cookie_lifetime <span class="comment">#存储在cookie的最大生命周期</span></span><br><span class="line">session.cookie_path <span class="comment">#cookie的存放路径</span></span><br><span class="line">session.save_path <span class="comment">#session存放服务器的路径</span></span><br><span class="line">session.use_cookies <span class="comment">#是否使用cookie传递sessionid</span></span><br><span class="line">session.use_trans_id  <span class="comment">#是否可以使用连接传递sessionid</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#垃圾回收机制</span></span><br><span class="line">session.gc_probability <span class="comment">#清理次数</span></span><br><span class="line">session.gc_divisor <span class="comment">#请求次数</span></span><br><span class="line">session.gc_maxlifetime<span class="comment"># 最大生命周期  超过生命周期 视为垃圾</span></span><br></pre></td></tr></table></figure>
<ul>
<li>cookie和session的区别</li>
</ul>
<ol>
<li>存储位置</li>
<li>session存储的是序列化后的对象，session是字符串</li>
<li>session依赖于cookie，如果后者不工作，前者也失效<ul>
<li>因为session工作的机制是将生成的唯一标识PHPSESSID存入cookie中的，所以禁掉cookie，session也不能使用</li>
</ul>
</li>
</ol>
<p>禁用cookie后如何传递sessionid值？</p>
<ol>
<li>可以修改配置<br>session.use_cookies &#x3D; 0；设置客户端不用cookie保存sessionid值<br>session.use_only_cookies &#x3D; 1;  是否只使用cookie传递sessionid<br>session.use_trans_sid &#x3D; 1；  url自动加上PHPSESSID  这样session正常使用</li>
<li>使用url传递sessionid<br><code>&lt;a href=&quot;indx.php?&lt;?php echo session_name(). &#39;=&#39; .session_id();?&gt;&quot;&gt;&lt;/a&gt;</code><br>SID常量在禁用cookie的时候就是session_name和session_id的拼接，否则就是null<br><code>&lt;a href=&quot;indx.php?&lt;?php echo SID；?&gt;&quot;&gt;&lt;/a&gt;</code></li>
</ol>
<h3 id="PHP处理数组的常用函数？（重点看函数的‘参数’和‘返回值’）"><a href="#PHP处理数组的常用函数？（重点看函数的‘参数’和‘返回值’）" class="headerlink" title="PHP处理数组的常用函数？（重点看函数的‘参数’和‘返回值’）"></a>PHP处理数组的常用函数？（重点看函数的‘参数’和‘返回值’）</h3><h4 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h4><ol>
<li><p><code>array_change_key_case()</code> — 将数组中的所有键名修改为全大写或小写</p>
<ul>
<li>@param $array</li>
<li>@param [CASE_UPPER|CASE_LOWER]</li>
<li>@return array|false<br> 注意事项:<ol>
<li>运算后如果有重复的键名，则最后一个值将覆盖其它的值。</li>
</ol>
</li>
</ul>
</li>
<li><p><code>array_chunk</code> — 将一个数组分割成多个</p>
<ul>
<li>@param $array</li>
<li>@param $size 分割的尺寸</li>
<li>@param $preserve_keys 默认Flase，如果是true则结果数组会保留原来的键名</li>
<li>@return array|如果 <code>size</code> 小于 1，会抛出一个 <code>E_WARNING</code> 错误并返回 <code>NULL</code></li>
</ul>
</li>
<li><p><code>array_slice</code> — 从数组中取出一段</p>
</li>
<li><p><code>array_column</code> — 返回数组中指定的一列</p>
<ul>
<li>@param $array</li>
<li>@param $size 分割的尺寸</li>
<li>@param $preserve_keys 默认Flase，如果是true则结果数组会保留原来的键名</li>
<li>@return array|如果 <code>size</code> 小于 1，会抛出一个 <code>E_WARNING</code> 错误并返回 <code>NULL</code></li>
</ul>
</li>
</ol>
<h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><ul>
<li><p>array_key_exists — 检查数组里是否有指定的键名或索引</p>
</li>
<li><p>array_keys — 返回数组中部分的或所有的键名</p>
</li>
<li><p>array_map — 为数组的每个元素应用回调函数</p>
</li>
<li><p>array_product — 计算数组中所有值的乘积</p>
</li>
<li><p>array_sum — 对数组中所有值求和</p>
</li>
<li><p>array_unique — 移除数组中重复的值</p>
</li>
<li><p>array_values — 返回数组中所有的值</p>
</li>
<li><p>array_rand — 从数组中随机取出一个或多个单元</p>
</li>
<li><p>array_push — 将一个或多个单元压入数组的末尾（入栈）</p>
</li>
<li><p>array_unshift — 在数组开头插入一个或多个单元</p>
</li>
<li><p>array_shift — 将数组开头的单元移出数组</p>
</li>
<li><p>array_pop — 弹出数组最后一个单元（出栈）</p>
</li>
<li><p>array_diff — 计算数组的差集</p>
</li>
<li><p>array_intersect — 计算数组的交集</p>
</li>
<li><p>array_merge — 合并一个或多个数组</p>
</li>
<li><p>array_merge_recursive — 递归地合并一个或多个数组</p>
</li>
<li><p>array_search — 在数组中搜索给定的值，如果成功则返回首个相应的键名</p>
</li>
<li><p>array_splice — 去掉数组中的某一部分并用其它值取代</p>
</li>
<li><p>sizeof — count() 的别名</p>
</li>
<li><p>count — 计算数组中的单元数目，或对象中的属性个数</p>
</li>
<li><p>pos — current() 的别名</p>
</li>
<li><p>current — 返回数组中的当前单元</p>
</li>
<li><p>each — 返回数组中当前的键／值对并将数组指针向前移动一步</p>
</li>
<li><p>end — 将数组的内部指针指向最后一个单元</p>
</li>
<li><p>extract — 从数组中将变量导入到当前的符号表</p>
</li>
<li><p>in_array — 检查数组中是否存在某个值</p>
</li>
<li><p>key_exists — 别名 array_key_exists()</p>
</li>
<li><p>key — 从关联数组中取得键名</p>
</li>
<li><p>list — 把数组中的值赋给一组变量</p>
</li>
<li><p>next — 将数组中的内部指针向前移动一位</p>
</li>
<li><p>prev — 将数组的内部指针倒回一位</p>
</li>
<li><p>range — 根据范围创建数组，包含指定的元素</p>
</li>
<li><p>reset — 将数组的内部指针指向第一个单元</p>
</li>
<li><p>shuffle — 打乱数组</p>
</li>
</ul>
<p>array_combine — 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值<br>array_count_values — 统计数组中所有的值<br>array_diff_assoc — 带索引检查计算数组的差集<br>array_diff_key — 使用键名比较计算数组的差集<br>array_diff_uassoc — 用用户提供的回调函数做索引检查来计算数组的差集<br>array_diff_ukey — 用回调函数对键名比较计算数组的差集<br>array_fill_keys — 使用指定的键和值填充数组<br>array_fill — 用给定的值填充数组<br>array_filter — 用回调函数过滤数组中的单元<br>array_flip — 交换数组中的键和值<br>array_intersect_assoc — 带索引检查计算数组的交集<br>array_intersect_key — 使用键名比较计算数组的交集<br>array_intersect_uassoc — 带索引检查计算数组的交集，用回调函数比较索引<br>array_intersect_ukey — 用回调函数比较键名来计算数组的交集<br>array_multisort — 对多个数组或多维数组进行排序<br>array_pad — 以指定长度将一个值填充进数组<br>array_reduce — 用回调函数迭代地将数组简化为单一的值<br>array_replace_recursive — 使用传递的数组递归替换第一个数组的元素<br>array_replace — 使用传递的数组替换第一个数组的元素<br>array_reverse — 返回单元顺序相反的数组<br>array_udiff_assoc — 带索引检查计算数组的差集，用回调函数比较数据<br>array_udiff_uassoc — 带索引检查计算数组的差集，用回调函数比较数据和索引<br>array_udiff — 用回调函数比较数据来计算数组的差集<br>array_uintersect_assoc — 带索引检查计算数组的交集，用回调函数比较数据<br>array_uintersect_uassoc — 带索引检查计算数组的交集，用单独的回调函数比较数据和索引<br>array_uintersect — 计算数组的交集，用回调函数比较数据<br>array_walk_recursive — 对数组中的每个成员递归地应用用户函数<br>array_walk — 使用用户自定义函数对数组中的每个元素做回调处理<br>array — 新建一个数组</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul>
<li>arsort — 对数组进行逆向排序并保持索引关系</li>
<li>asort — 对数组进行排序并保持索引关系</li>
<li>krsort — 对数组按照键名逆向排序</li>
<li>ksort — 对数组按照键名排序</li>
<li>rsort — 对数组逆向排序</li>
<li>sort — 对数组排序</li>
<li>uasort — 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联</li>
<li>uksort — 使用用户自定义的比较函数对数组中的键名进行排序</li>
<li>usort — 使用用户自定义的比较函数对数组中的值进行排序<br>natsort — 用”自然排序”算法对数组排序<br>natcasesort — 用”自然排序”算法对数组进行不区分大小写字母的排序<br>compact — 建立一个数组，包括变量名和它们的值</li>
</ul>
<h2 id="PHP处理字符串的常用函数？（重点看函数的‘参数’和‘返回值’）"><a href="#PHP处理字符串的常用函数？（重点看函数的‘参数’和‘返回值’）" class="headerlink" title="PHP处理字符串的常用函数？（重点看函数的‘参数’和‘返回值’）"></a>PHP处理字符串的常用函数？（重点看函数的‘参数’和‘返回值’）</h2><h3 id="不常使用"><a href="#不常使用" class="headerlink" title="不常使用"></a>不常使用</h3><p>•crc32 — 计算一个字符串的 crc32 多项式<br>•crypt — 单向字符串散列<br>•md5_file — 计算指定文件的 MD5 散列值<br>•md5 — 计算字符串的 MD5 散列值<br>•convert_cyr_string — 将字符由一种 Cyrillic 字符转换成另一种<br>•convert_uudecode — 解码一个 uuencode 编码的字符串<br>•convert_uuencode — 使用 uuencode 编码一个字符串<br>•count_chars — 返回字符串所用字符的信息<br>•get_html_translation_table — 返回使用 htmlspecialchars 和 htmlentities 后的转换表<br>•hebrev — 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）<br>•hebrevc — 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符<br>•levenshtein — 计算两个字符串之间的编辑距离<br>•localeconv — Get numeric formatting information<br>•hex2bin — 转换十六进制字符串为二进制字符串<br>•wordwrap — 打断字符串为指定数量的字串<br>•quoted_printable_decode — 将 quoted-printable 字符串转换为 8-bit 字符串<br>•quoted_printable_encode — 将 8-bit 字符串转换成 quoted-printable 字符串<br>•quotemeta — 转义元字符集<br>•metaphone — Calculate the metaphone key of a string<br>•nl_langinfo — Query language and locale information<br>•strnatcasecmp — 使用“自然顺序”算法比较字符串（不区分大小写）<br>•strnatcmp — 使用自然排序算法比较字符串<br>•strncasecmp — 二进制安全比较字符串开头的若干个字符（不区分大小写）<br>•strncmp — 二进制安全比较字符串开头的若干个字符<br>•substr_compare — 二进制安全比较字符串（从偏移位置比较指定长度）<br>•setlocale — 设置地区信息<br>•sha1_file — 计算文件的 sha1 散列值<br>•sha1 — 计算字符串的 sha1 散列值<br>•similar_text — 计算两个字符串的相似度<br>•soundex — Calculate the soundex key of a string<br>•sscanf — 根据指定格式解析输入的字符<br>•str_getcsv — 解析 CSV 字符串为一个数组<br>•str_word_count — 返回字符串中单词的使用情况<br>•strcasecmp — 二进制安全比较字符串（不区分大小写）<br>•strcmp — 二进制安全字符串比较<br>•strcoll — 基于区域设置的字符串比较<br>•strcspn — 获取不匹配遮罩的起始子字符串的长度<br>•str_rot13 — 对字符串执行 ROT13 转换</p>
<p>•strpbrk — 在字符串中查找一组字符的任何一个字符<br>•strrchr — 查找指定字符在字符串中的最后一次出现<br>•strspn — 计算字符串中全部字符都存在于指定字符集合中的第一段子串的长度。<br>•strtok — 标记分割字符串<br>•chunk_split — 将字符串分割成小块<br>•nl2br — 在字符串所有新行之前插入 HTML 换行标记<br>•substr — 返回字符串的子串<br>•strtr — 转换指定字符<br>•str_shuffle — 随机打乱一个字符串<br>•str_pad — 使用另一个字符串填充字符串为指定长度</p>
<h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><p>•echo — 输出一个或多个字符串<br>•print — 输出字符串<br>•printf — 输出格式化字符串<br>•fprintf — 将格式化后的字符串写入到流<br>•vfprintf — 将格式化字符串写入流<br>•vprintf — 输出格式化字符串<br>•vsprintf — 返回格式化字符串<br>•sprintf — Return a formatted string<br>•number_format — 以千位分隔符方式格式化一个数字<br>•money_format — 将数字格式化成货币字符串</p>
<h3 id="去除空格"><a href="#去除空格" class="headerlink" title="去除空格"></a>去除空格</h3><p>•chop — rtrim 的别名<br>•rtrim — 删除字符串末端的空白字符（或者其他字符）<br>•trim — 去除字符串首尾处的空白字符（或者其他字符）<br>•ltrim — 删除字符串开头的空白字符（或其他字符）</p>
<h3 id="转义-安全"><a href="#转义-安全" class="headerlink" title="转义(安全)"></a>转义(安全)</h3><ul>
<li>addcslashes(要转义的字符) 以 C 语言风格 反斜线 -&gt; 转义字符串中的字符</li>
<li>stripcslashes 反引用一个使用 addcslashes() 转义的字符串</li>
<li>addslashes() 使用反斜线引用一个字符串</li>
<li>stripslashes() 去除反斜线</li>
<li>htmlentities() <code>&lt;b&gt;dog&lt;/b&gt;</code> -&gt; <code>&amp;lt;b&amp;gt;dog&amp;lt;</code></li>
<li>html_entity_decode() <code>&amp;lt;b&amp;gt;dog&amp;lt;</code> -&gt; <code>&lt;b&gt;dog&lt;/b&gt;</code></li>
<li>htmlspecialchars() 将特殊字符转换为 HTML 实体</li>
<li>htmlspecialchars_decode() 将特殊的 HTML 实体转换回普通字符</li>
<li>strip_tags() 从字符串中去除 HTML 和 PHP 标记</li>
</ul>
<h3 id="大小写-1"><a href="#大小写-1" class="headerlink" title="大小写"></a>大小写</h3><ul>
<li>ucfirst — 将字符串的首字母转换为大写</li>
<li>lcfirst — 使一个字符串的第一个字符小写</li>
<li>strtolower — 将字符串转化为小写</li>
<li>strtoupper — 将字符串转化为大写</li>
<li>ucwords — 将字符串中每个单词的首字母转换为大写</li>
</ul>
<h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><ul>
<li>chr — 返回指定的字符</li>
<li>ord — 返回字符的 ASCII 码值</li>
<li>bin2hex 函数把包含数据的二进制字符串转换为十六进制值</li>
<li>hex2bin 转换十六进制字符串为二进制字符串</li>
<li>ip2long 将 IPV4 的字符串互联网协议转换成长整型数字</li>
<li>long2ip 将长整型转化为字符串形式带点的互联网标准格式地址（IPV4） 10的</li>
</ul>
<h3 id="字符串-x3D-gt-数组"><a href="#字符串-x3D-gt-数组" class="headerlink" title="字符串 &#x3D;&gt; 数组"></a>字符串 &#x3D;&gt; 数组</h3><ul>
<li>str_split($arr, $size) — 将字符串转换为数组(每个字符都切开)</li>
<li>explode($fuhao, $arr, [$limit]) — 使用一个字符串分割另一个字符串</li>
<li>implode($fuhao, $arr) — 将一个一维数组的值转化为字符串</li>
<li>join — 别名 implode</li>
</ul>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul>
<li>stristr — 不区分大小写</li>
<li>strstr或strchr($str, $fuhao, [true]) — 返回</li>
<li>stripos — 查找字符在字符串内首次出现的位置，没有则返回false（不区分大小写）</li>
<li>strpos — 查找字符在字符串内首次出现的位置，没有则返回false</li>
<li>strripos — 查找字符在字符串内最后一次出现的位置，没有则返回false（不区分大小写）</li>
<li>strrpos — 查找字符在字符串内最后一次出现的位置，没有则返回false</li>
</ul>
<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><ul>
<li>str_ireplace — str_replace 的忽略大小写版本</li>
<li>str_replace — 子字符串替换</li>
</ul>
<h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><ul>
<li>str_repeat — 重复一个字符串</li>
<li>strlen — 获取字符串长度</li>
<li>strrev — 反转字符串.</li>
<li>parse_str — 将字符串解析成多个变量</li>
<li>parse_url</li>
<li>substr_count — 计算字串出现的次数</li>
<li>substr_replace — 替换字符串的子串</li>
</ul>
<h2 id="PHP处理时间的常用函数？（重点看函数的‘参数’和‘返回值’）"><a href="#PHP处理时间的常用函数？（重点看函数的‘参数’和‘返回值’）" class="headerlink" title="PHP处理时间的常用函数？（重点看函数的‘参数’和‘返回值’）"></a>PHP处理时间的常用函数？（重点看函数的‘参数’和‘返回值’）</h2><h3 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h3><p>checkdate 验证一个格里高里日期<br>date_add 别名 DateTime::add()<br>date_create_from_format 别名 DateTime::createFromFormat()<br>date_create_immutable_from_format — 别名 DateTimeImmutable::createFromFormat()<br>date_create_immutable — 别名 DateTimeImmutable::__construct()<br>date_create — 别名 DateTime::__construct()<br>date_date_set — 别名 DateTime::setDate()<br>date_default_timezone_get — 取得一个脚本中所有日期时间函数所使用的默认时区<br>date_default_timezone_set — 设定用于一个脚本中所有日期时间函数的默认时区<br>date_diff — 别名 DateTime::diff()<br>date_get_last_errors — 别名 DateTime::getLastErrors()<br>date_interval_create_from_date_string — 别名 DateInterval::createFromDateString()<br>date_interval_format — 别名 DateInterval::format()<br>date_isodate_set — 别名 DateTime::setISODate()<br>date_modify — 别名 DateTime::modify()<br>date_offset_get — 别名 DateTime::getOffset()<br>date_parse_from_format — Get info about given date formatted according to the specified format<br>date_parse — Returns associative array with detailed info about given date<br>date_sub — 别名 DateTime::sub()<br>date_sun_info — Returns an array with information about sunset&#x2F;sunrise and twilight begin&#x2F;end<br>date_sunrise — 返回给定的日期与地点的日出时间<br>date_sunset — 返回给定的日期与地点的日落时间<br>date_time_set — 别名 DateTime::setTime()<br>date_timestamp_get — 别名 DateTime::getTimestamp()<br>date_timestamp_set — 别名 DateTime::setTimestamp()<br>date_timezone_get — 别名 DateTime::getTimezone()<br>date_timezone_set — 别名 DateTime::setTimezone()<br>timezone_abbreviations_list — 别名 DateTimeZone::listAbbreviations()<br>timezone_identifiers_list — 别名 DateTimeZone::listIdentifiers()<br>timezone_location_get — 别名 DateTimeZone::getLocation()<br>timezone_name_from_abbr — Returns the timezone name from abbreviation<br>timezone_name_get — 别名 DateTimeZone::getName()<br>timezone_offset_get — 别名 DateTimeZone::getOffset()<br>timezone_open — 别名 DateTimeZone::__construct()<br>timezone_transitions_get — 别名 DateTimeZone::getTransitions()<br>timezone_version_get — Gets the version of the timezonedb<br>getdate — 取得日期／时间信息<br>gettimeofday — 取得当前时间<br>gmdate — 格式化一个 GMT&#x2F;UTC 日期／时间<br>gmstrftime — 根据区域设置格式化 GMT&#x2F;UTC 时间／日期<br>idate — 将本地时间日期格式化为整数<br>localtime — 取得本地时间<br>strftime — 根据区域设置格式化本地时间／日期<br>strptime — 解析由 strftime() 生成的日期／时间</p>
<h3 id="格式化-1"><a href="#格式化-1" class="headerlink" title="格式化"></a>格式化</h3><p>strtotime — 将任何字符串的日期时间描述解析为 Unix 时间戳<br>time — 返回当前的 Unix 时间戳<br>microtime — 返回当前 Unix 时间戳和微秒数 数组的形式<br>gmmktime — 取得 GMT 日期的 UNIX 时间戳<br>mktime — 取得一个日期的 Unix 时间戳<br>date — 格式化一个本地时间／日期<br>date_format — 别名 DateTime::format()<br>mktime(0, 0, 0, date(‘m’), date(‘d’), date(‘Y’)), 返回今日开始和结束的时间戳<br>mktime(23, 59, 59, date(‘m’), date(‘d’), date(‘Y’)) 返回今日开始和结束的时间戳<br>mktime(0, 0, 0, date(‘m’), $yesterday, date(‘Y’)), 返回昨日开始和结束的时间戳<br>mktime(23, 59, 59, date(‘m’), $yesterday, date(‘Y’)) 返回昨日开始和结束的时间戳<br>strtotime(date(‘Y-m-d’, strtotime(“+0 week Monday”, $timestamp))), 返回本周开始和结束的时间戳<br>strtotime(date(‘Y-m-d’, strtotime(“+0 week Sunday”, $timestamp))) + 24 * 3600 - 1 返回本周开始和结束的时间戳<br>strtotime(date(‘Y-m-d’, strtotime(“last week Monday”, $timestamp))), 返回上周开始和结束的时间戳<br>strtotime(date(‘Y-m-d’, strtotime(“last week Sunday”, $timestamp))) + 24 * 3600 - 1 返回上周开始和结束的时间戳<br>mktime(0, 0, 0, date(‘m’), 1, date(‘Y’)), 返回本月开始和结束的时间戳<br>mktime(23, 59, 59, date(‘m’), date(‘t’), date(‘Y’)) 返回本月开始和结束的时间戳<br>$begin &#x3D; mktime(0, 0, 0, date(‘m’) - 1, 1, date(‘Y’)); 返回上个月开始和结束的时间戳<br>$end &#x3D; mktime(23, 59, 59, date(‘m’) - 1, date(‘t’, $begin), date(‘Y’)); 返回上个月开始和结束的时间戳<br>mktime(0, 0, 0, 1, 1, date(‘Y’)), 返回今年开始和结束的时间戳<br>mktime(23, 59, 59, 12, 31, date(‘Y’)) 返回今年开始和结束的时间戳<br>mktime(0, 0, 0, 1, 1, $date(‘Y’) - 1), 返回去年开始和结束的时间戳<br>mktime(23, 59, 59, 12, 31, $date(‘Y’) - 1) 返回去年开始和结束的时间戳</p>
<h3 id="PHP处理数据库的常用函数？（重点看函数的‘参数’和‘返回值’）"><a href="#PHP处理数据库的常用函数？（重点看函数的‘参数’和‘返回值’）" class="headerlink" title="PHP处理数据库的常用函数？（重点看函数的‘参数’和‘返回值’）"></a>PHP处理数据库的常用函数？（重点看函数的‘参数’和‘返回值’）</h3><h3 id="PHP操作文件的常用函数？（重点看函数的‘参数’和‘返回值’）"><a href="#PHP操作文件的常用函数？（重点看函数的‘参数’和‘返回值’）" class="headerlink" title="PHP操作文件的常用函数？（重点看函数的‘参数’和‘返回值’）"></a>PHP操作文件的常用函数？（重点看函数的‘参数’和‘返回值’）</h3><p>二 、数据库部分</p>
<p>常见的关系型数据库管理系统产品有？<br>答：Oracle、SQL Server、MySQL、Sybase、DB2、Access等。</p>
<p>SQL语言包括哪几部分？每部分都有哪些操作关键字？<br>答：SQL语言包括数据定义(DDL)、数据操纵(DML),数据控制(DCL)和数据查询（DQL）四个部分。<br>数据定义：Create Table,Alter Table,Drop Table, Craete&#x2F;Drop Index等<br>数据操纵：Select ,insert,update,delete,<br>数据控制：grant,revoke<br>数据查询：select</p>
<p>完整性约束包括哪些？<br>数据完整性(Data Integrity)是指数据的精确(Accuracy) 和 可靠性(Reliability)。</p>
<p>包括：</p>
<p>（1）实体完整性：规定表的每一行在表中是惟一的实体。</p>
<p>（2）域完整性：是指表中的列必须满足某种特定的数据类型约束，其中约束又包括取值范围、精度等规定。</p>
<p>（3）参照完整性：是指两个表的主关键字和外关键字的数据应一致，保证了表之间的数据的一致性，防止了数据丢失或无意义的数据在数据库中扩散。</p>
<p>（4） 用户定义的完整性：不同的关系数据库系统根据其应用环境的不同，往往还需要一些特殊的约束条件。用户定义的完整性即是针对某个特定关系数据库的约束条件，它反映某一具体应用必须满足的语义要求。</p>
<p>什么是事务？及其特性？<br>事务：是一系列的数据库操作，是数据库应用的基本逻辑单位。</p>
<p>特性：</p>
<p>（1）原子性：即不可分割性，事务要么全部被执行，要么就全部不被执行。</p>
<p>（2）一致性或可串性。事务的执行使得数据库从一种正确状态转换成另一种正确状态</p>
<p>（3）隔离性。在事务正确提交之前，不允许把该事务对数据的任何改变提供给任何其他事务，</p>
<p>（4） 持久性。事务正确提交后，其结果将永久保存在数据库中，即使在事务提交后有了其他故障，事务的处理结果也会得到保存。</p>
<p>简单理解：在事务里的操作，要么全部成功，要么全部失败。</p>
<p>什么是锁？<br>数据库是一个多用户使用的共享资源。当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。</p>
<p>加锁是实现数据库并发控制的一个非常重要的技术。当事务在对某个数据对象进行操作前，先向系统发出请求，对其加锁。加锁后事务就对该数据对象有了一定的控制，在该事务释放锁之前，其他的事务不能对此数据对象进行更新操作。<br>基本锁类型：锁包括行级锁和表级锁</p>
<p>什么叫视图？游标是什么？<br>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，视图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。</p>
<p>游标：是对查询出来的结果集作为一个单元来有效的处理。游标可以定在该单元中的特定行，从结果集的当前行检索一行或多行。可以对结果集当前行做修改。一般不使用游标，但是需要逐条处理数据的时候，游标显得十分重要。</p>
<p>什么是存储过程？用什么来调用？<br>存储过程是一个预编译的SQL语句，优点是允许模块化的设计，就是说只需创建一次，以后在该程序中就可以调用多次。如果某次操作需要执行多次SQL，使用存储过程比单纯SQL语句执行要快。可以用一个命令对象来调用存储过程。</p>
<p>索引的作用？和它的优点缺点是什么？<br>索引就一种特殊的查询表，数据库的搜索引擎可以利用它加速对数据的检索。它很类似与现实生活中书的目录，不需要查询整本书内容就可以找到想要的数据。索引可以是唯一的，创建索引允许指定单个列或者是多个列。</p>
<p>缺点是它减慢了数据录入的速度，同时也增加了数据库的尺寸大小。</p>
<p>如何通俗地理解三个范式？<br>第一范式：1NF是对属性的原子性约束，要求属性具有原子性，不可再分解；</p>
<p>第二范式：2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性;</p>
<p>第三范式：3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。。</p>
<p>什么是基本表？什么是视图？<br>基本表是本身独立存在的表，在 SQL 中一个关系就对应一个表。</p>
<p>视图是从一个或几个基本表导出的表。视图本身不独立存储在数据库中，是一个虚表</p>
<p>试述视图的优点？<br>(1) 视图能够简化用户的操作</p>
<p>(2) 视图使用户能以多种角度看待同一数据；</p>
<p>(3) 视图为数据库提供了一定程度的逻辑独立性；</p>
<p>(4) 视图能够对机密数据提供安全保护。</p>
<p>NULL是什么意思<br>NULL这个值表示UNKNOWN(未知):它不表示“”(空字符串)。</p>
<p>对NULL这个值的任何比较都会生产一个NULL值。</p>
<p>您不能把任何值与一个 NULL值进行比较，并在逻辑上希望获得一个答案。</p>
<p>使用IS NULL来进行NULL判断</p>
<p>主键、外键和索引的区别？<br>主键、外键和索引的区别<br>定义：<br>主键–唯一标识一条记录，不能有重复的，不允许为空<br>外键–表的外键是另一表的主键, 外键可以有重复的, 可以是空值<br>索引–该字段没有重复值，但可以有一个空值<br>作用：<br>主键–用来保证数据完整性<br>外键–用来和其他表建立联系用的<br>索引–是提高查询排序的速度<br>个数：<br>主键–主键只能有一个<br>外键–一个表可以有多个外键<br>索引–一个表可以有多个唯一索引</p>
<p>你可以用什么来确保表格里的字段只接受特定范围里的值?<br>Check限制，它在数据库表格里被定义，用来限制输入该列的值。</p>
<p>说说对SQL语句优化有哪些方法？（选择几条）<br>（1）Where子句中：where表之间的连接必须写在其他Where条件之前，那些可以过滤掉最大数量记录的条件必须写在Where子句的末尾.HAVING最后。</p>
<p>（2）用EXISTS替代IN、用NOT EXISTS替代NOT IN。</p>
<p>（3） 避免在索引列上使用计算</p>
<p>（4）避免在索引列上使用IS NULL和IS NOT NULL</p>
<p>（5）对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>
<p>（6）应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描</p>
<p>（7）应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描</p>
<p>SQL语句中‘相关子查询’与‘非相关子查询’有什么区别？<br>（1）非相关子查询是独立于外部查询的子查询，子查询总共执行一次，执行完毕后将值传递给外部查询。</p>
<p>（2）相关子查询的执行依赖于外部查询的数据，外部查询执行一行，子查询就执行一次。</p>
<p>因此非相关子查询比相关子查询效率高</p>
<p>char和varchar的区别？<br>char是一种固定长度的类型，varchar则是一种可变长度的类型。</p>
<p>区别：</p>
<p>char(M)类型的数据列里，每个值都占用M个字节，如果某个长度小于M，MySQL就会在它的右边用空格字符补足。（在检索操作中那些填补出来的空格字符将被去掉）。</p>
<p>varchar(M)类型的数据列里，每个值只占用刚好够用的字节再加上一个用来记录其长度的字节（即总长度为L+1字节）。</p>
<p>Mysql 的存储引擎,myisam和innodb的区别。<br>MyISAM 是非事务的存储引擎；适合用于频繁查询的应用；表锁，不会出现死锁；不支持事务。适合小数据，小并发</p>
<p>innodb是支持事务的存储引擎；适合于插入和更新操作比较多的应用；设计合理的话是行锁（最大区别就在锁的级别上）；适合大数据，大并发。</p>
<p>数据表类型有哪些<br>MyISAM、InnoDB、HEAP、BOB,ARCHIVE,CSV等。</p>
<p>MyISAM：成熟、稳定、易于管理，快速读取。一些功能不支持（事务等），表级锁。</p>
<p>InnoDB：支持事务、外键等特性、数据行锁定。空间占用大，不支持全文索引等。</p>
<p>MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？<br>（1）设计良好的数据库结构，允许部分数据冗余，尽量避免join查询，提高效率。</p>
<p>（2） 选择合适的表字段数据类型和存储引擎，适当的添加索引。</p>
<p>（3） 做mysql主从复制读写分离。</p>
<p>（4）对数据表进行分表，减少单表中的数据量提高查询速度。</p>
<p>（5）添加缓存机制，比如redis，memcached等。</p>
<p>（6）对不经常改动的页面，生成静态页面（比如做ob缓存）。</p>
<p>（7）书写高效率的SQL。比如 SELECT * FROM TABEL 改为 SELECT field_1, field_2, field_3 FROM TABLE.</p>
<p>对于大流量的网站,您采用什么样的方法来解决各页面访问量统计问题？<br>（1） 确认服务器是否能支撑当前访问量。</p>
<p>（2） 优化数据库访问。</p>
<p>（3）禁止外部访问链接（盗链）, 比如图片盗链。</p>
<p>（4）控制文件下载。</p>
<p>（5）做负载均衡，使用不同主机分流。</p>
<p>（6）使用浏览统计软件，了解访问量，有针对性的进行优化。</p>
<h3 id="如何优化PHP"><a href="#如何优化PHP" class="headerlink" title="如何优化PHP"></a><font color="red">如何优化PHP</font></h3><h4 id="基础语句优化"><a href="#基础语句优化" class="headerlink" title="基础语句优化"></a>基础语句优化</h4><h4 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h4><ul>
<li>冒泡算法</li>
</ul>
<h3 id="php查询mysql数据库时，查询中文结果时出现的乱码。怎么解决？"><a href="#php查询mysql数据库时，查询中文结果时出现的乱码。怎么解决？" class="headerlink" title="php查询mysql数据库时，查询中文结果时出现的乱码。怎么解决？"></a>php查询mysql数据库时，查询中文结果时出现的乱码。怎么解决？</h3><pre><code>- 文件meta（设置浏览器解析的时候）
- 连接数据库时编码设定
- PHP文件中使用header函数确定编码
</code></pre>
<h3 id="PHP处理-数组-的常用函数？"><a href="#PHP处理-数组-的常用函数？" class="headerlink" title="PHP处理 数组 的常用函数？"></a>PHP处理 数组 的常用函数？</h3><h3 id="PHP处理-字符串-的常用函数？（重点看函数的‘参数’和‘返回值’）"><a href="#PHP处理-字符串-的常用函数？（重点看函数的‘参数’和‘返回值’）" class="headerlink" title="PHP处理 字符串 的常用函数？（重点看函数的‘参数’和‘返回值’）"></a>PHP处理 字符串 的常用函数？（重点看函数的‘参数’和‘返回值’）</h3><h3 id="PHP处理时间的常用函数？（重点看函数的‘参数’和‘返回值’）-1"><a href="#PHP处理时间的常用函数？（重点看函数的‘参数’和‘返回值’）-1" class="headerlink" title="PHP处理时间的常用函数？（重点看函数的‘参数’和‘返回值’）"></a>PHP处理时间的常用函数？（重点看函数的‘参数’和‘返回值’）</h3><h3 id="PHP处理数据库的常用函数？（重点看函数的‘参数’和‘返回值’）-1"><a href="#PHP处理数据库的常用函数？（重点看函数的‘参数’和‘返回值’）-1" class="headerlink" title="PHP处理数据库的常用函数？（重点看函数的‘参数’和‘返回值’）"></a>PHP处理数据库的常用函数？（重点看函数的‘参数’和‘返回值’）</h3><h3 id="PHP操作文件的常用函数？（重点看函数的‘参数’和‘返回值’）-1"><a href="#PHP操作文件的常用函数？（重点看函数的‘参数’和‘返回值’）-1" class="headerlink" title="PHP操作文件的常用函数？（重点看函数的‘参数’和‘返回值’）"></a>PHP操作文件的常用函数？（重点看函数的‘参数’和‘返回值’）</h3><h3 id="PHP操作目录（文件夹）的常用函数？（重点看函数的‘参数’和‘返回值’）"><a href="#PHP操作目录（文件夹）的常用函数？（重点看函数的‘参数’和‘返回值’）" class="headerlink" title="PHP操作目录（文件夹）的常用函数？（重点看函数的‘参数’和‘返回值’）"></a>PHP操作目录（文件夹）的常用函数？（重点看函数的‘参数’和‘返回值’）</h3><h3 id="PHP安全模块"><a href="#PHP安全模块" class="headerlink" title="PHP安全模块"></a>PHP安全模块</h3><ol>
<li><p>防止SQL注入：prepare预处理sql语句</p>
<ul>
<li>tp5底层代码 适配器的工厂模式 调用时无感知，内部使用prepare预处理功能</li>
</ul>
</li>
<li><p>防止远程非法提交：无登录状态的用户、能正常登陆但无法操作的用户</p>
<ul>
<li>使用验证码机制</li>
</ul>
</li>
<li><p>CSRF跨站点请求伪造</p>
<ul>
<li>tp5当中的表单令牌，用户访问 -&gt; 服务器生成令牌，结合模板发出去 -&gt; 用户操作后将表单里面的数据以及令牌返回到服务器 -&gt; 服务器检测令牌</li>
<li>restful API不用担心这个问题</li>
</ul>
</li>
</ol>
<h3 id="print-print-r-echo-var-dump-printf-有什么区别"><a href="#print-print-r-echo-var-dump-printf-有什么区别" class="headerlink" title="print print_r echo var_dump printf 有什么区别"></a>print print_r echo var_dump printf 有什么区别</h3><hr>
<h2 id="Mysql-1"><a href="#Mysql-1" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="如何优化MYSQL"><a href="#如何优化MYSQL" class="headerlink" title="如何优化MYSQL"></a><font color="red">如何优化MYSQL</font></h3><h4 id="优化数据表的数据结构"><a href="#优化数据表的数据结构" class="headerlink" title="优化数据表的数据结构"></a>优化数据表的数据结构</h4><ol>
<li><p>优化 <b>整数类型</b></p>
<ul>
<li>整型的数据类型 指定宽度 不会影响该数据类型的合法范围，只是显示宽度的含义</li>
<li>对于不存在负数的数字，添加 <code>unsigned</code> 类型，编程 0 ~ 最大值</li>
<li>年龄用tinyint 最大 unsigned 255岁</li>
<li>smallint存储 古老建筑的年龄</li>
<li>bigint存储非常大的整数</li>
<li>ip使用 ip2long函数运算后 整型存储</li>
</ul>
</li>
<li><p>优化 <b>浮点型</b></p>
<ul>
<li>float 和 double (单&#x2F;双精度)近似运算，会损失精度，乘法可以，不建议使用</li>
<li>decimal(10,0) 用于 银行账本，精确计算能力强悍，空间计算开销很大</li>
</ul>
</li>
<li><p>优化 <b>字符串类型</b></p>
<ul>
<li>BOLB和TEXT类型 二进制|字符串(有字符集和排序，索引只能用 全部长度的字符串)所以不建议使用</li>
<li>char和varchar的选择 存储空间大，查询较快     经常变更、定长较短的字符串使用char</li>
<li>enum 特定固定的分类，优先选用</li>
<li>char 手机号 身份证号</li>
<li>varchar 用户名、密码</li>
<li>enum 性别、民族、各种状态</li>
</ul>
</li>
<li><p>尽可能的使用 <code>not null</code></p>
</li>
</ol>
<h4 id="定位有问题的sql语句"><a href="#定位有问题的sql语句" class="headerlink" title="定位有问题的sql语句"></a>定位有问题的sql语句</h4><ol>
<li><code>qeury profile</code> 功能<ul>
<li><code>set profiling = 1</code></li>
<li><code>show profiles</code></li>
<li><code>show profile for query </code></li>
</ul>
</li>
<li><code>show status</code> 功能</li>
<li><code>show processlist</code>  观察是否有大量线程处于不正常的状态或者特征</li>
<li><code>explain</code> 中的 key值可以查询是否成功使用索引</li>
</ol>
<h4 id="优化sql语句"><a href="#优化sql语句" class="headerlink" title="优化sql语句"></a>优化sql语句</h4><ol>
<li>常使用 <code>limit</code> 限制查询的数量，以及批量删除或更新时，可以分批操作 TP5使用的chunk方法</li>
<li>将单&#x2F;多表关联 <code>select *</code> 修改成 <code>select A.name,A.age</code></li>
<li>缓存</li>
<li>将表中部分字段冗余到其他表中(双表数据量较大，关联查询效率低下的时候)</li>
<li>重新设计sql</li>
</ol>
<h4 id="优化长的SQL语句"><a href="#优化长的SQL语句" class="headerlink" title="优化长的SQL语句"></a>优化长的SQL语句</h4><ol>
<li>大的查询、关联查询 分解成多个SQL执行，在应用层(PHP)做关联，减少锁的竞争</li>
<li>大的查询、关联查询 进行分批执行</li>
<li>少用子查询，可以用关联查询代替</li>
</ol>
<h4 id="合理创建索引-普通索引、联合组合索引、唯一索引、唯一主键索引"><a href="#合理创建索引-普通索引、联合组合索引、唯一索引、唯一主键索引" class="headerlink" title="合理创建索引(普通索引、联合组合索引、唯一索引、唯一主键索引)"></a>合理创建索引(普通索引、联合组合索引、唯一索引、唯一主键索引)</h4><ul>
<li><p>组合(联合索引)：学校网站，查询 某个系 某个班 的 某个学生  电商网站：某个商户 某个商品 某个订单</p>
</li>
<li><p>唯一</p>
</li>
<li><p>普通索引</p>
</li>
<li><p>外键索引(数据一致性，不常用)</p>
</li>
<li><p>全文索引(MyISAM支持，只支持英文)</p>
</li>
<li><p>什么列能够使用索引</p>
<ul>
<li>优先选择较短的数据类型以及 <code>where</code> 条件中常出现的列，减少索引的磁盘占用，提高查询效率</li>
</ul>
</li>
<li><p>注意事项(过多创建，失效情况，查看是否失效，检测)</p>
<ul>
<li>避免创建过多索引，占用硬盘空间，降低写操作的效率</li>
<li>复合索引遵循左原则(符合最左原则，条件换顺序依然可以使用索引)</li>
<li>对于 字符串 数据类型做索引，要加前缀长度，可以节省索引空间，并且sql要 <code>加引号</code>，否则索引会失效</li>
<li>like查询，%不能在前。想要使用匹配前面的推荐使用检索引擎 es</li>
<li><code>or</code> 前面的条件中的列有索引，后面的没有，则索引不会被用到</li>
<li>创建数据表示，尽量全部加 默认值 不使用 <code>default null</code></li>
<li><code>where name = null</code> 不会使用索引，<code>where name is(not) null</code> 会使用索引</li>
<li>不能在sql中的列中运算，会进行全表扫描使索引失效,<br>  <code>select * from users where YEAR(adddate)&lt;2007;</code><br>  改成<br>  <code>select * from users where adddate&lt;‘2007-01-01’;</code></li>
<li>查看索引是否生效，在查询前➕ <code>explain</code>;<br>  例如：<code>explain SELECT * FROM testinfo WHERE b is not null</code><br>  查看：<code>possible_keys</code>(可能使用到的索引) 和 <code>key</code>(查询真正使用到的索引)</li>
<li>全盘扫描优化：系统会自动检测 <code>索引</code> 和 <code>非索引</code> 的效率，自动切换</li>
</ul>
</li>
</ul>
<h4 id="优化关联查询"><a href="#优化关联查询" class="headerlink" title="优化关联查询"></a>优化关联查询</h4><ul>
<li>确定ON或者USING子句的列上有索引</li>
<li>确保GROUP BY和ORDER BY中 有一个表中的列，不能是多个表的列</li>
</ul>
<h4 id="优化子查询-嵌套查询"><a href="#优化子查询-嵌套查询" class="headerlink" title="优化子查询(嵌套查询)"></a>优化子查询(嵌套查询)</h4><ul>
<li>尽可能使用 <code>关联查询替代</code></li>
</ul>
<h4 id="优化GROUP-BY-和DISTINCT-distinct"><a href="#优化GROUP-BY-和DISTINCT-distinct" class="headerlink" title="优化GROUP BY 和DISTINCT distinct"></a>优化GROUP BY 和DISTINCT distinct</h4><ul>
<li>索引优化最好</li>
<li>关联查询中，使用标识列进行分组的效率会更高(主键或者auto_priment)</li>
<li>如果不需要ORDER BY，进行GROUP BY时使用ORDER BY NULL，MYSQL不会在进行文件排序</li>
<li>WITH ROLLUP超级聚合，可以挪到应用程序处理</li>
</ul>
<h4 id="优化LIMIT分页"><a href="#优化LIMIT分页" class="headerlink" title="优化LIMIT分页"></a>优化LIMIT分页</h4><ul>
<li>LIMIT偏移量大的时候，查询效率较低</li>
<li>可以记录上次查询的最大ID，下次查询时直接根据该ID来查询</li>
</ul>
<h4 id="优化UNION查询"><a href="#优化UNION查询" class="headerlink" title="优化UNION查询"></a>优化UNION查询</h4><ul>
<li>UNION ALL效率高于UNION</li>
</ul>
<h4 id="优化存储引擎"><a href="#优化存储引擎" class="headerlink" title="优化存储引擎"></a>优化存储引擎</h4><ul>
<li>根据InnoDB和MyISAM的引擎特性去选择(行表锁、事务、没有where的count(*))</li>
<li>尽量使用InnoDB存储引擎</li>
</ul>
<h4 id="分区分表"><a href="#分区分表" class="headerlink" title="分区分表"></a>分区分表</h4><h4 id="缓存数据"><a href="#缓存数据" class="headerlink" title="缓存数据"></a>缓存数据</h4><p><code>query_cache_type</code> 有0，1，2三个取值，0不适用，1始终使用，2按需使用<br><code>select SQL_NO_CACHE * from my_table;</code> 当值为1时，这样可以避免使用查询缓存<br><code>select SQL_CACHE * from my_table;</code> 当值为2时，这样可以按需使用查询缓存</p>
<p><code>query_cache_size</code> 默认情况下该值为0，表示为查询缓存预留的内存为0，则无法使用查询缓存<br><code>set GLOBAL query_cache_size = 134217728;</code> 设置缓存大小</p>
<p><code>FLUSH QUERY CACHE;</code> 清理查询缓存内存碎片<br><code>RESET QUERY CACHE;</code> 从查询缓存中移除所有查询缓存<br><code>FLUSH TABLES;</code> 关闭所有打开的表，同时清空查询缓存的内容</p>
<p>注意事项：<br>查询缓存可以看做是SQL文本和查询结果的映射<br>第二次查询的SQL和第一次查询的SQL完全相同，才会使用缓存<br><code>SHOW STATUS LIKE &#39;Qcache_hits&#39;;</code> 查看缓存命中次数<br>表的结构和数据发生改变时，缓存数据不再有效</p>
<h3 id="MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年-怎么优化？"><a href="#MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年-怎么优化？" class="headerlink" title="MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？"></a>MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？</h3><h3 id="对于大流量的网站-您采用什么样的方法来解决各页面访问量统计问题？"><a href="#对于大流量的网站-您采用什么样的方法来解决各页面访问量统计问题？" class="headerlink" title="对于大流量的网站,您采用什么样的方法来解决各页面访问量统计问题？"></a>对于大流量的网站,您采用什么样的方法来解决各页面访问量统计问题？</h3><h3 id="Mysql安全模块"><a href="#Mysql安全模块" class="headerlink" title="Mysql安全模块"></a>Mysql安全模块</h3><hr>
<h2 id="未分类"><a href="#未分类" class="headerlink" title="未分类"></a>未分类</h2><h3 id="Web开发中数据提交方式有几种，区别，百度使用哪种方式"><a href="#Web开发中数据提交方式有几种，区别，百度使用哪种方式" class="headerlink" title="Web开发中数据提交方式有几种，区别，百度使用哪种方式"></a>Web开发中数据提交方式有几种，区别，百度使用哪种方式</h3><table>
<thead>
<tr>
<th>提交方式</th>
<th>提交体</th>
<th>限制</th>
<th>安全性</th>
<th>缓存</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>url</td>
<td>浏览器或操作系统限制</td>
<td>较差</td>
<td>√</td>
</tr>
<tr>
<td>POST</td>
<td>body</td>
<td>可以通过后端控制，一般情况无限制</td>
<td>较好</td>
<td>×</td>
</tr>
</tbody></table>
<h3 id="说一下你所掌握的网页前端技术有哪些"><a href="#说一下你所掌握的网页前端技术有哪些" class="headerlink" title="说一下你所掌握的网页前端技术有哪些"></a><font color="red">说一下你所掌握的网页前端技术有哪些</font></h3><ul>
<li>html、css3、javascript、jqery、photoshop</li>
<li>div+css网页布局</li>
<li>flex弹性布局</li>
</ul>
<h3 id="谈谈Ajax"><a href="#谈谈Ajax" class="headerlink" title="谈谈Ajax"></a>谈谈Ajax</h3><ul>
<li><b>概念：</b>异步传输技术，通过javascript或者jquery实现</li>
<li><b>优势：</b>局部刷新，减轻服务器压力，提高用户体验</li>
</ul>
<h3 id="Session-和-Cookie的区别"><a href="#Session-和-Cookie的区别" class="headerlink" title="Session 和 Cookie的区别"></a>Session 和 Cookie的区别</h3><hr>
<h2 id="Tp5"><a href="#Tp5" class="headerlink" title="Tp5"></a>Tp5</h2><h3 id="常见的PHP框架-对比Tp总结优缺点，描述让自己印象深刻的功能和特性"><a href="#常见的PHP框架-对比Tp总结优缺点，描述让自己印象深刻的功能和特性" class="headerlink" title="常见的PHP框架(对比Tp总结优缺点，描述让自己印象深刻的功能和特性)"></a>常见的PHP框架(对比Tp总结优缺点，描述让自己印象深刻的功能和特性)</h3><ol>
<li>Thinkphp5</li>
<li>Laravel</li>
<li>Yaf框架</li>
</ol>
<ul>
<li><p>优点：</p>
<ol>
<li>执行效率高</li>
<li>轻量级框架</li>
<li>可扩展性强</li>
</ol>
</li>
<li><p>缺点:</p>
<ol>
<li>高版本兼容性差</li>
<li>底层代码可读性差</li>
<li>需要安装扩展</li>
<li>功能单一</li>
<li>开发需要编写大量的插件：文件上传类</li>
</ol>
</li>
</ul>
<ol start="4">
<li>Yii2</li>
</ol>
<ul>
<li><p>优点</p>
<ol>
<li>结构简单</li>
<li>使用功能丰富</li>
<li>扩展性强</li>
<li>性能高</li>
</ol>
</li>
<li><p>缺点</p>
<ol>
<li>学习成本高</li>
<li>相比Yaf，量级重</li>
</ol>
</li>
</ul>
<h3 id="MVC工作原理"><a href="#MVC工作原理" class="headerlink" title="MVC工作原理"></a>MVC工作原理</h3><ul>
<li><p>MVC</p>
<ul>
<li>Model数据模型层</li>
<li>View视图层</li>
<li>Controller控制器层</li>
</ul>
</li>
<li><p>用户操作所有流程如下</p>
<ol>
<li>用户通过 <code>View视图层</code> 操作</li>
<li>发送请求到 <code>Controller控制器层</code></li>
<li><code>Controller控制器层</code> 鉴权完成之后，修改通过 <code>Model数据模型层</code> 修改数据库内容</li>
<li>结果返回 <code>Controller控制器层</code></li>
<li>结果再次返回到 <code>View视图层</code></li>
</ol>
</li>
<li><p>单一入口的工作原理</p>
<ul>
<li><p>用一个应用程序文件处理所有的HTTP请求，根据请求时的参数区分不同模块和操作的请求</p>
</li>
<li><p>一般参数的形式有 path_info，&#x2F;</p>
</li>
<li><p>优势：</p>
<ul>
<li>可以进行统一的安全性检查</li>
<li>集中处理程序(加载框架核心文件、定义目录路径、开启缓存和Session等等)</li>
</ul>
</li>
<li><p>劣势</p>
<ul>
<li>URL不美观</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="什么是SQL注入？（理解）"><a href="#什么是SQL注入？（理解）" class="headerlink" title="什么是SQL注入？（理解）"></a>什么是SQL注入？（理解）</h3><ul>
<li>SQL注入攻击是黑客对数据库进行攻击的常用手段之一。</li>
<li>一部分程序员在编写代码的时候，没有对用户输入数据的合法性进行判断，注入者可以在表单中输入一段数据库查询代码并提交，程序将提交的信息拼凑生成一个完整sql语句，服务器被欺骗而执行该条恶意的SQL命令。注入者根据程序返回的结果，成功获取一些敏感数据，甚至控制整个服务器，这就是SQL注入。</li>
</ul>
<h3 id="ThinkPHP5如何防止SQL注入？（理解）"><a href="#ThinkPHP5如何防止SQL注入？（理解）" class="headerlink" title="ThinkPHP5如何防止SQL注入？（理解）"></a>ThinkPHP5如何防止SQL注入？（理解）</h3><ol>
<li>在控制器层加入一个控制器基类，里面加一个获取安全参数的方法，手动过滤或格式化参数</li>
<li>使用tp5的验证类验证参数是否合法</li>
<li>使用tp5当中的内置转换功能，对数据进行操作时，自动将用到的参数格式化</li>
<li>TP5核心代码当中使用了Mysql预处理机制</li>
</ol>
<h3 id="如何开启调试模式？调试模式有什么好处？"><a href="#如何开启调试模式？调试模式有什么好处？" class="headerlink" title="如何开启调试模式？调试模式有什么好处？"></a>如何开启调试模式？调试模式有什么好处？</h3><ol>
<li>开启日志记录，任何错误信息和调试信息都会详细记录，便于调试；</li>
<li>会详细记录整个执行过程；</li>
<li>模板修改可以即时生效；</li>
<li>记录SQL日志，方便分析SQL；</li>
<li>通过Trace功能更好的调试和发现错误；</li>
<li>发生异常的时候会显示详细的异常信息；</li>
</ol>
<h3 id="如何获取系统变量？"><a href="#如何获取系统变量？" class="headerlink" title="如何获取系统变量？"></a>如何获取系统变量？</h3><ul>
<li>TP5.1使用了Facade模式(外观模式)，通过Env::get(‘database.username’)获取，底层代码通过手动添加目录，系统自动包含所有目录下的所有文件，形成数组，以便获取</li>
</ul>
<table>
<thead>
<tr>
<th>系统路径</th>
<th>Env参数名称</th>
</tr>
</thead>
<tbody><tr>
<td>应用根目录</td>
<td>root_path</td>
</tr>
<tr>
<td>应用目录</td>
<td>app_path</td>
</tr>
<tr>
<td>框架目录</td>
<td>think_path</td>
</tr>
<tr>
<td>配置目录</td>
<td>config_path</td>
</tr>
<tr>
<td>扩展目录</td>
<td>extend_path</td>
</tr>
<tr>
<td>composer目录</td>
<td>vendor_path</td>
</tr>
<tr>
<td>运行缓存目录</td>
<td>runtime_path</td>
</tr>
<tr>
<td>路由目录</td>
<td>route_path</td>
</tr>
<tr>
<td>当前模块目录</td>
<td>module_path</td>
</tr>
</tbody></table>
<hr>
<h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><ul>
<li><p>1XX：请求已经被服务器接收，客户端应该继续请求</p>
</li>
<li><p>2XX：代表请求已经被服务器理解、接收、接受</p>
<ul>
<li>200 [GET] 请求获取数据成功</li>
<li>201 [POST&#x2F;PUT&#x2F;PATCH] 用户新建或更新数据成功</li>
<li>202 [*] 表示请求在返回后已经进行处理或处理中，用于异步</li>
<li>204 [DELETE] 用户删除数据成功</li>
</ul>
</li>
<li><p>300：重定向</p>
<ul>
<li>301 被请求的资源已永久移动到新位置，并且服务器可能指向一个新的URL超链接</li>
<li>302 临时重定向</li>
</ul>
</li>
<li><p>4XX：请求错误</p>
<ul>
<li>400 请求参数 或 语义有误</li>
<li>401 没有权限进行此操作</li>
<li>403 没有权限访问</li>
<li>404 找不到服务器上的资源</li>
<li>410 [GET] 用户请求的资源被永久删除，且不会再得到的，用于网站闭站</li>
</ul>
</li>
<li><p>500：服务器错误</p>
<ul>
<li>500 [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li>
</ul>
</li>
</ul>
<h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><ul>
<li>物理层</li>
<li>数据链路层</li>
<li>网络层</li>
<li>传输层</li>
<li>会话层</li>
<li>表示层</li>
<li>应用层</li>
</ul>
<h2 id="XML-与-HTML-的主要区别"><a href="#XML-与-HTML-的主要区别" class="headerlink" title="XML 与 HTML 的主要区别"></a>XML 与 HTML 的主要区别</h2><ol>
<li><p>语法要求不同：</p>
<ul>
<li>在html中不区分大小写，在xml中严格区分。</li>
<li>在HTML中，有时不严格，如果上下文清楚地显示出段落或者列表键在何处结尾，那么可以省略</li>
<li>在XML中，是严格的树状结构，绝对不能省略掉结束标记。</li>
<li>在XML中，拥有单个标记而没有匹配的结束标记的元素必须用一个&#x2F; 字符作为结尾。这样分析器就知道不用查找结束标记了。</li>
<li>在XML中，属性值必须分装在引号中。在HTML中，引号是可用可不用的。</li>
<li>在HTML中，可以拥有不带值的属性名。在XML中，所有的属性都必须带有相应的值。</li>
<li>在XML文档中，空白部分不会被解析器自动删除；但是html是过滤掉空格的。</li>
</ul>
</li>
<li><p>标记不同：</p>
<ul>
<li>html使用固有的标记；而xml没有固有的标记。</li>
<li>Html标签是预定义的；XML标签是免费的、自定义的、可扩展的。</li>
</ul>
</li>
<li><p>作用不同：</p>
<ul>
<li>html是用来显示数据的；xml是用来描述数据、存放数据的，所以可以作为持久化的介质！Html将数据和显示结合在一起，在页面中把这数据显示出来；xml则将数据和显示分开。 XML被设计用来描述数据，其焦点是数据的内容。HTML被设计用来显示数据，其焦点是数据的外观。</li>
<li>xml不是HTML的替代品，xml和html是两种不同用途的语言。 XML 不是要替换 HTML；实际上XML 可以视作对 HTML 的补充。XML 和HTML 的目标不同HTML 的设计目标是显示数据并集中于数据外观，而XML的设计目标是描述数据并集中于数据的内容。</li>
<li>对于XML最好的形容可能是: XML是一种跨平台的，与软、硬件无关的，处理与传输信息的工具。</li>
<li>XML未来将会无所不在。XML将成为最普遍的数据处理和数据传输的工具。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="Smarty模板引擎"><a href="#Smarty模板引擎" class="headerlink" title="Smarty模板引擎"></a>Smarty模板引擎</h2><ol>
<li><p>编译和缓存区别？</p>
<ul>
<li>编译过程就是将模板中的部分内容通过正则匹配替换成PHP代码</li>
<li>缓存需要手动开启，缓存机制是将编译好的文件生成一份静态的html页面，当再次访问的时候直接返回HTML</li>
</ul>
</li>
<li><p>什么是smarty? Smarty的优点是什么?</p>
<ul>
<li>Smarty是一个使用PHP写出来的PHP模板引擎</li>
<li>为了php与html分开，美工和程序员各司其职，互不干扰。</li>
</ul>
</li>
<li><p>Smarty优点</p>
<ul>
<li>速度快：相对其他模板引擎。</li>
<li>编译型：采用smarty编写的程序在运行时要编译成一个非模板技术的PHP文件</li>
<li>缓存技术：它可以将用户最终看到的HTML文件缓存成一个静态的HTML页</li>
<li>插件技术：smarty可以自定义插件。</li>
</ul>
</li>
<li><p>不适合使用smarty的地方</p>
<ul>
<li>需要实时更新的内容。例如像股票显示，它需要经常对数据进行更新</li>
<li>小项目。小项目因为项目简单而美工与程序员兼于一人的项目</li>
</ul>
</li>
<li><p>在模板中使用{$smarty}保留变量</p>
 <figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&#123;KaTeX parse<span class="built_in"> error</span>: Expected <span class="string">&#x27;EOF&#x27;</span>, got <span class="string">&#x27;&#125;&#x27;</span> <span class="keyword">at</span><span class="built_in"> position</span> <span class="number">16</span>: smarty.get.page&#125;̲ //类似在php脚本中访问_GET[page]</span><br><span class="line">&#123;KaTeX parse<span class="built_in"> error</span>: Expected <span class="string">&#x27;EOF&#x27;</span>, got <span class="string">&#x27;&#125;&#x27;</span> <span class="keyword">at</span><span class="built_in"> position</span> <span class="number">16</span>: smarty.cookies.&#125;̲ &#123;smarty.post.&#125;</span><br><span class="line">&#123;KaTeX parse<span class="built_in"> error</span>: Expected <span class="string">&#x27;EOF&#x27;</span>, got <span class="string">&#x27;&#125;&#x27;</span> <span class="keyword">at</span><span class="built_in"> position</span> <span class="number">16</span>: smarty.session.&#125;̲ &#123;smarty.server.&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>smarty的赋值和载入模板</p>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$Smarty</span>-&gt;assign(name,value) <span class="comment">#渲染模板内容 tp5当中的display()</span></span><br><span class="line"><span class="variable">$Smarty</span>-&gt;display(<span class="string">&#x27;index.html&#x27;</span>) <span class="comment">#渲染模板文件 tp5当中的fetch()</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>smarty配置主要有哪几项？</p>
<ul>
<li>引入smarty.class.php;</li>
<li>实例化smarty对象；</li>
<li>重新修改默认的模板路径；</li>
<li>重新修改默认的编译后文件的路径；</li>
<li>重新修改默认的配置文件的路径；</li>
<li>重新修改默认的cache的路径。</li>
<li>可以设置是否开启cache。</li>
<li>可以设置左侧和右侧定界符。</li>
</ul>
</li>
<li><p>smarty运用过程中要注意以下几个问题：</p>
<ul>
<li>smarty模板文件中不允许出现php代码段，所有的注释，变量，函数都要包含在定界符内。</li>
</ul>
</li>
</ol>
<h2 id="二次开发系统（DEDE、ecshop）"><a href="#二次开发系统（DEDE、ecshop）" class="headerlink" title="二次开发系统（DEDE、ecshop）"></a>二次开发系统（DEDE、ecshop）</h2><ol>
<li><p>对二次开发的理解</p>
<ul>
<li>二次开发，简单的说就是在现有的软件上进行定制修改，功能的扩展，然后达到自己想要的功能，一般来说都不会改变原有系统的内核。</li>
</ul>
</li>
<li><p>用过哪些二次开发的东西？</p>
<ul>
<li>Dedecms</li>
<li>phpcms</li>
<li>ecshop</li>
<li>discuz</li>
</ul>
</li>
<li><p>像php做一次开发好，还是二次开发好？</p>
<ul>
<li>一般中小企业都用cms系统二次开发，都是为了效率。</li>
<li>当然如果想一次开发也行，会用框架而且时间充足的话就可以了，大企业都是团队来开发的，杜绝版权问题。</li>
</ul>
</li>
<li><p>二次开发过程中很多类与类之间进行之间的方法访问，是通过什么方式传递的？</p>
<ul>
<li>注册器设计模式，通过实例化的对象获取值</li>
</ul>
</li>
<li><p>dedecms如果更换目录，后台某项就进不去了如何解决？</p>
<ul>
<li>后台核心配置项中 目录名称 修改成现在的 项目目录名称</li>
</ul>
</li>
<li><p>dedecms中自定义模型的理解？</p>
<ul>
<li>在织梦系统中有内容模型这个概念，不同内容模型可以用来构建不同内容形式的站点，在系统中自带了以下几种模型：普通文章、图集、软件、商品、分类信息、专题。通过系统自带的模型，我们可以用来构建不同类型的站点，例如：使用图集可以做一个图片站，用软件模型构建一个软件下载站点。</li>
<li>当然以上随系统附带的模型被称为系统模型，用户可以自己定义一些模型，比如图书、音乐专辑等，自定义了这些模型才可以构建更多内容形式的站点。<br> 相当于我们自动添加了表结构，适应现在当前需求的变化</li>
</ul>
</li>
<li><p>dede中概念，设计和使用模板，必须要理解下面几个概念</p>
<ul>
<li><p>板块（封面）模板：指网站主页或比较重要的栏目封面频道使用的模板，一般用“index_识别ID.htm”命名，此外，用户单独定义的单个页面或自定义标记，也可选是否支持板块模板标记，如果支持，系统会用板块模板标记引擎去解析后才输出内容或生成特定的文件。</p>
</li>
<li><p>列表模板：指网站某个栏目的所有文章列表的模板，一般用 “list_识别ID.htm” 命名。</p>
</li>
<li><p>档案模板：表示文档查看页的模板，如文章模板，一般用 “article_识别ID.htm” 命名。</p>
</li>
<li><p>其它模板：一般系统常规包含的模板有：主页模板、搜索模板、ＲＳＳ、ＪＳ编译功能模板等，此外用户也可以自定义一个模板创建为任意文件。</p>
</li>
</ul>
</li>
<li><p>dede中几种标签的使用？</p>
<ul>
<li>列表 内容 等标签 只能在其本范围内使用，列表标签只能在列表中使用，内容标签只能在内容标签中使用。</li>
<li>全局标签能在所有页面中使用</li>
</ul>
</li>
<li><p>熟悉常用类库</p>
<ul>
<li>dedesql.class.php</li>
<li>熟悉系统函数库（common.func.php）</li>
<li>熟悉自定义函数库（extend.func.php）</li>
<li>熟悉前台入口文件（common.inc.php）</li>
</ul>
</li>
</ol>
<hr>
<h2 id="微信公众平台开发"><a href="#微信公众平台开发" class="headerlink" title="微信公众平台开发"></a>微信公众平台开发</h2><ol>
<li><p>微信运行机制</p>
<ul>
<li>公众号与php之间用 <code>xml</code> 语言通信:</li>
<li>weixin.php是通过 <code>$GLOBALS[&#39;HTTPRAW_POST_DATA&#39;]</code> 接收XML数据的</li>
</ul>
</li>
<li><p>微信目前提供了7种基本消息类型</p>
<ol>
<li>文本消息（text）</li>
<li>图片消息（image）</li>
<li>语音（voice）</li>
<li>视频（video）</li>
<li>地理位置（location）</li>
<li>链接消息（link）</li>
<li>事件推送（event）</li>
</ol>
</li>
<li><p>常用函数</p>
<ul>
<li><code>file_get_content()</code></li>
<li><code>file_put_content()</code></li>
<li><code>simplexml_load_string()</code> #把xml数据解析成对象</li>
<li><code>explode()</code> #将字符串分割成数组</li>
<li><code>implode()</code> #将数组合并成字符串</li>
<li><code>urlencode()</code> #将url编码成字符串</li>
</ul>
</li>
<li><p>微信公众号出现无法提供服务的原因？</p>
<ul>
<li>手机网络问题</li>
<li>网站服务器网络问题(不是微信服务器)</li>
<li>网站与微信服务器通信有误</li>
</ul>
</li>
<li><p>自定义菜单的事件推送</p>
<ul>
<li>单击</li>
<li>单击跳转链接</li>
<li>扫码推事件</li>
<li>扫码推且弹出</li>
<li>弹出系统拍照发图的事件</li>
<li>弹出微信相册发图器的事件</li>
<li>弹出地理位置选择器的事件</li>
</ul>
</li>
<li><p>token的作用</p>
<ul>
<li>安全机制验证，用于微信服务器与PHP服务器之间的安全验证</li>
</ul>
</li>
<li><p>Appid与secrect的作用</p>
<ul>
<li>请求api接口（例如菜单的操作）时需要传appid与secrect两个值，用来获取应用的授权码</li>
</ul>
</li>
</ol>
<h4 id="链式操作-实现"><a href="#链式操作-实现" class="headerlink" title="链式操作 实现"></a>链式操作 实现</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">where</span>(<span class="params"><span class="variable">$where</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">limit</span>(<span class="params"><span class="variable">$limit</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">order</span>(<span class="params"><span class="variable">$order</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = (<span class="keyword">new</span> UserModel())</span><br><span class="line">	-&gt;where(<span class="string">&#x27;id=1&#x27;</span>)</span><br><span class="line">	-&gt;order(<span class="string">&quot;id desc&quot;</span>)</span><br><span class="line">	-&gt;limit(<span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="SPL标准库-提供的-数据结构"><a href="#SPL标准库-提供的-数据结构" class="headerlink" title="SPL标准库 提供的 数据结构"></a>SPL标准库 提供的 数据结构</h4><ol>
<li><code>SplQueue</code> 队列：先进先出</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$spl_queue</span> = <span class="keyword">new</span> <span class="built_in">SplQueue</span>();</span><br><span class="line"><span class="variable">$spl_queue</span>-&gt;enqueue(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="variable">$spl_queue</span>-&gt;enqueue(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">var_dump(<span class="variable">$spl_queue</span>-&gt;dequeue());<span class="comment">#a</span></span><br><span class="line">var_dump(<span class="variable">$spl_queue</span>-&gt;dequeue());<span class="comment">#b</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li><code>SplStack</code> 栈：先进后出</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$spl_stack</span> = <span class="keyword">new</span> <span class="built_in">SplStack</span>();</span><br><span class="line"><span class="variable">$spl_stack</span>-&gt;push(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="variable">$spl_stack</span>-&gt;push(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">var_dump(<span class="variable">$spl_stack</span>-&gt;pop());<span class="comment">#b</span></span><br><span class="line">var_dump(<span class="variable">$spl_stack</span>-&gt;pop());<span class="comment">#a</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><code>SplMinHeap &amp; SplMaxHeap</code></li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最小堆：先进先出(不确定是否先进先出，要验证之后才知道)</span></span><br><span class="line"><span class="variable">$spl_min_heap</span> = <span class="keyword">new</span> <span class="built_in">SplMinHeap</span>();</span><br><span class="line"><span class="variable">$spl_min_heap</span>-&gt;insert(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="variable">$spl_min_heap</span>-&gt;insert(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">var_dump(<span class="variable">$spl_min_heap</span>-&gt;extract());<span class="comment">#a</span></span><br><span class="line">var_dump(<span class="variable">$spl_min_heap</span>-&gt;extract());<span class="comment">#b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最大堆：先进后出(不确定是否先进后出，要验证之后才知道)</span></span><br><span class="line"><span class="variable">$spl_max_heap</span> = <span class="keyword">new</span> <span class="built_in">SplMaxHeap</span>();</span><br><span class="line"><span class="variable">$spl_max_heap</span>-&gt;insert(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="variable">$spl_max_heap</span>-&gt;insert(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">var_dump(<span class="variable">$spl_max_heap</span>-&gt;extract());<span class="comment">#b</span></span><br><span class="line">var_dump(<span class="variable">$spl_max_heap</span>-&gt;extract());<span class="comment">#a</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li><code>SplFixedArray($size)</code> 固定长度的数组</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$spl_fixed_array</span> = <span class="keyword">new</span> <span class="built_in">SplFixedArray</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable">$spl_fixed_array</span>[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">var_dump(<span class="variable">$spl_fixed_array</span>);</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="comment">//object(SplFixedArray)#1 (3) &#123;</span></span><br><span class="line"><span class="comment">//[0]=&gt;</span></span><br><span class="line"><span class="comment">//  NULL</span></span><br><span class="line"><span class="comment">//  [1]=&gt;</span></span><br><span class="line"><span class="comment">//  NULL</span></span><br><span class="line"><span class="comment">//  [2]=&gt;</span></span><br><span class="line"><span class="comment">//  int(1)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Mysql</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/blog/p/65b69107/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>一个高性能的HTTP和反向代理web服务器。</p>
<h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul>
<li>提供静态内容：nginx 可以用来托管网站的静态内容（如 HTML、CSS、JavaScript 等文件），并通过 HTTP 协议将这些内容返回给用户浏览器。</li>
<li>提供动态内容：nginx 可以通过反向代理的方式与后端的 Web 应用程序集成，并将用户请求转发给后端应用程序，然后将应用程序的响应返回给用户浏览器。</li>
<li>处理 SSL&#x2F;TLS 加密：nginx 可以处理 SSL&#x2F;TLS 加密，使网站能够通过 HTTPS 协议与用户浏览器通信，并保护用户隐私和数据安全。</li>
<li>实现负载均衡：nginx 可以通过负载均衡功能将用户请求平摊到多台后端服务器，提高网站的可用性和性能。</li>
<li>提供反向代理和虚拟主机：nginx 可以通过反向代理和虚拟主机功能，使多个网站能够共享同一个 IP 地址和端口，并通过不同的域名访问各自的网站。</li>
</ul>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><table>
<thead>
<tr>
<th>软件</th>
<th>介绍</th>
<th>架构方案</th>
<th>使用场景</th>
</tr>
</thead>
<tbody><tr>
<td>Nginx</td>
<td>高性能的HTTP和反向代理web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务</td>
<td>epoll and kqueue 作为开发模型，处理请求是异步非阻塞的。</td>
<td>在静态文件处理、高并发方面优势大，占用资源少</td>
</tr>
<tr>
<td>Apache</td>
<td>Apache基金会的Apache HTTP Server</td>
<td>同步多进程模型，一个连接对应一个进程。</td>
<td>稳定性高，处理动态请求更强大，模块多很完善，bug少</td>
</tr>
<tr>
<td>IIS</td>
<td>微软的Web(网页)服务组件,其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器</td>
<td>同上</td>
<td></td>
</tr>
</tbody></table>
<p>名词解释：</p>
<ul>
<li><code>IO复用</code> 同时等待多个文件描述符就绪，以系统调用的形式提供，常见的技术有：select、poll、epoll、kqueue等待。</li>
<li><code>epoll</code> (Linux下实现事件队列的方式)Linux内核为处理大批量文件描述符而作了改进的poll，是Linux下多路复用IO接口select&#x2F;poll的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。</li>
<li><code>kqueue</code> (是UNIX(MacOS)下实现事件队列的方式)</li>
<li><code>iocp</code> (Windows下实现事件队列的方式)</li>
</ul>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>nginx 采用<code>事件驱动</code>的架构，使用一个<code>主进程</code>和若干<code>子进程</code>组成(1：n)。</p>
<ul>
<li><code>主进程</code> 启动时，会创建若干个 <code>子进程</code> ，并监听指定的网络端口。</li>
<li>当有网络请求到达时，<code>主进程</code> 会接收该请求并分发给某个 <code>子进程</code> 处理。</li>
<li><code>子进程</code> 会解析请求报文并提取有效信息，根据配置的规则处理请求并生成响应，静态动态是否传递给后端应用程序等。</li>
<li>当处理完成后，<code>子进程</code> 会将响应返回给主进程，<code>主进程</code> 再将响应发送给客户端。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="如何使用-Nginx-反向代理？"><a href="#如何使用-Nginx-反向代理？" class="headerlink" title="如何使用 Nginx 反向代理？"></a>如何使用 Nginx 反向代理？</h3><p>使用 Nginx 反向代理需要在 Nginx 配置文件中进行设置。首先，打开 Nginx 配置文件，通常位于 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf。<br>然后，在配置文件中添加一个新的「server」块，其中包含反向代理所需的设置。</p>
<p>例如，如果要将请求转发到后端服务器的 IP 地址为 10.0.0.1 的服务器上，则可以使用以下配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 域名 || IP:prot ||  socket.io || 负载均衡name</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://10.0.0.1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的配置会将所有发送到 example.com 的请求转发到后端服务器 10.0.0.1。然后，只需重新加载 Nginx 配置文件即可生效，例如使用以下命令：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo nginx -s reload</span></span><br></pre></td></tr></table></figure>
<p>对于更复杂的反向代理设置，例如需要进行负载均衡、使用 HTTPS 或添加额外的参数，可以在「location」块中添加其他相关设置。</p>
<h3 id="如何使用-Nginx-负载均衡？"><a href="#如何使用-Nginx-负载均衡？" class="headerlink" title="如何使用 Nginx 负载均衡？"></a>如何使用 Nginx 负载均衡？</h3><ul>
<li>为要进行负载均衡的多台后端服务器配置一个虚拟主机。</li>
<li>在 Nginx 配置文件中创建一个负载均衡虚拟主机。</li>
<li>配置负载均衡策略。</li>
<li>启动 Nginx 服务器并重新加载配置文件。</li>
<li>具体来说，首先，我们需要在 Nginx 配置文件中创建一个负载均衡虚拟主机。这可以通过使用 upstream 块来实现，例如：</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">upstream my_upstream &#123;</span><br><span class="line">    # 后续同一ip的访问将只会请求同一个服务器。</span><br><span class="line">    ip_hash; </span><br><span class="line">    </span><br><span class="line">   <span class="built_in"> server </span>unix:/dev/shm/php-cgi-www.sock</span><br><span class="line">    </span><br><span class="line">   <span class="built_in"> server </span>backend1.example.com <span class="attribute">weight</span>=1;</span><br><span class="line">   <span class="built_in"> server </span>backend2.example.com <span class="attribute">weight</span>=2;</span><br><span class="line">   <span class="built_in"> server </span>backend3.example.com <span class="attribute">weight</span>=3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://my_upstream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo nginx -s reload</span></span><br></pre></td></tr></table></figure>
<p>在上面的配置中，我们创建了一个名为 my_upstream 的负载均衡虚拟主机，并指定了三台后端服务器。</p>
<p>然后，我们需要在 server 块中配置负载均衡策略。例如，我们可以使用 ip_hash 策略，将请求路由到与客户端 IP 地址相同的后端服务器，这样可以保证每个客户端的请求都被路由到相同的后台服务。</p>
<h3 id="如何监控-Nginx-的性能？"><a href="#如何监控-Nginx-的性能？" class="headerlink" title="如何监控 Nginx 的性能？"></a>如何监控 Nginx 的性能？</h3><h4 id="模块-stub-status"><a href="#模块-stub-status" class="headerlink" title="模块 stub_status"></a>模块 stub_status</h4><p>首先，需要确保「stub_status」模块已启用。如果未启用该模块，则需要编辑 Nginx 配置文件并将「stub_status」模块加入「http」块中，例如：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enable stub_status module</span></span><br><span class="line">    include <span class="regexp">/etc/</span>nginx<span class="regexp">/modules-enabled/</span>stub_status.conf;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，可以在 Nginx 配置文件中添加一个新的「location」块，以便可以访问 stub_status 模块提供的信息。例如，可以使用以下配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /nginx_status &#123;</span><br><span class="line">        <span class="comment"># Enable stub_status</span></span><br><span class="line">        <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Set access permissions</span></span><br><span class="line">        <span class="attribute">allow</span> <span class="number">127.0.0.1</span>;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的配置会允许来自本地主机的访问，并阻止所有其他访问。然后，可以使用 curl 或其他工具来访问「&#x2F;nginx_status」路径，以获取 stub_status 模块提供的信息。例如：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl http:<span class="regexp">//</span>example.com/nginx_status</span><br></pre></td></tr></table></figure>
<h4 id="模块-nginx-module-vts"><a href="#模块-nginx-module-vts" class="headerlink" title="模块 nginx-module-vts"></a>模块 nginx-module-vts</h4><p>首先编译 Nginx 时将该模块编译进 Nginx。例如，可以使用以下命令编译并安装 Nginx：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">.<span class="regexp">/configure --add-module=/</span>path<span class="regexp">/to/</span>nginx-module-vts</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>其中，「&#x2F;path&#x2F;to&#x2F;nginx-module-vts」是 nginx-module-vts 模块所在的路径。</p>
<p>在 Nginx 安装完成后，可以在 Nginx 配置文件中启用该模块。例如，可以在「http」块中添加以下内容：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    # ...</span><br><span class="line"></span><br><span class="line">    # Enable VTS <span class="keyword">module</span></span><br><span class="line">    vhost_traffic_status_zone;</span><br><span class="line">    vhost_traffic_status_filter_by_set_key;</span><br><span class="line"></span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的配置会启用 nginx-module-vts 模块，并启用「vhost_traffic_status_zone」和「vhost_traffic_status_filter_by_set_key」两个特性。</p>
<p>接下来，可以在 Nginx 配置文件中的「server」块中添加相关设置，以便启用 VTS 统计信息的收集。例如，可以使用以下配置：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">server</span> &#123;</span><br><span class="line">    <span class="keyword">listen</span>       <span class="number">80</span>;</span><br><span class="line">    server_name  example.com;</span><br><span class="line"></span><br><span class="line">    # <span class="keyword">Enable</span> VTS <span class="keyword">statistics</span></span><br><span class="line">    vhost_traffic_status_filter_by_set_key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">location</span> /nginx_status &#123;</span><br><span class="line">        # <span class="keyword">Enable</span> stub_status</span><br><span class="line">        stub_status <span class="keyword">on</span>;</span><br><span class="line"></span><br><span class="line">        #TODO 这里需要补充一下</span><br><span class="line">        # <span class="keyword">Enable</span> VTS <span class="keyword">statistics</span></span><br><span class="line">        vhost_traffic_status_display;</span><br><span class="line">    </span><br><span class="line">        # <span class="keyword">Set</span> <span class="keyword">access</span> permissions</span><br><span class="line">        allow <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        </span><br><span class="line">        # 这会定义一个/status路径，访问这个路径会显示一个HTML页面，其中包含您定义的服务器的性能信息。</span><br><span class="line">        # 您可以根据需要调整这些配置选项，以获得您想要的信息</span><br><span class="line">        vhost_traffic_status_display;</span><br><span class="line">        vhost_traffic_status_display_format html;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#定义日志的格式给变量main，下方都会使用到</span><br><span class="line">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">#日志的保存路径</span><br><span class="line">#access_log  logs/access.log  main;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><h4 id="匹配方式-执行顺序"><a href="#匹配方式-执行顺序" class="headerlink" title="匹配方式 + 执行顺序"></a>匹配方式 + 执行顺序</h4><blockquote>
<p>如果在匹配中没有直接返回，则会一直继续匹配<br>精准匹配不会被覆盖，一般匹配会被覆盖</p>
</blockquote>
<ol>
<li>精准匹配<ul>
<li>location 无前缀</li>
<li>location &#x3D;</li>
</ul>
</li>
<li>一般匹配，但先匹配最长的<ul>
<li>location ^</li>
<li>location ^~ 不使用正则</li>
</ul>
</li>
<li>正则匹配<ul>
<li>location ~ 区分大小写，严格模式</li>
<li>location ~* 正则不区分大小写</li>
<li>location ~* .(gif|png|css|js)$</li>
</ul>
</li>
</ol>
<h3 id="Rewrite"><a href="#Rewrite" class="headerlink" title="Rewrite"></a>Rewrite</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#用法：rewrite regex正则 replacement新值 [flag,也就是break|last|redirect|permanent]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#例子：</span></span><br><span class="line">location /aa.<span class="title class_">html</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="meta">#rewrite ^/ /a.html break; </span></span><br><span class="line">    <span class="meta">#上面加这段话的意思：</span></span><br><span class="line">        <span class="meta">#原本匹配的是 http:<span class="comment">//xx.com/aa.html</span></span></span><br><span class="line">        <span class="meta">#现更改成 http:<span class="comment">//xx.com/html/static/aa.html</span></span></span><br><span class="line">    root html<span class="keyword">/static/</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">location / &#123;  </span><br><span class="line">    add_header Access-Control-Allow-Origin *;</span><br><span class="line">    add_header Access-Control-Allow-Methods &#x27;GET, POST, OPTIONS, DELETE&#x27;;</span><br><span class="line">    add_header Access-Control-Allow-Headers &#x27;Token,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;;</span><br><span class="line"></span><br><span class="line">    if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">        return 204;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><blockquote>
<p>伪造referer，就需要用加密模块解决</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#如果不匹配，则会把内置变量$invalid_referer改变成1</span><br><span class="line">location / &#123; </span><br><span class="line">    valid_referers *.example.com;</span><br><span class="line">    if($invalid_referer)&#123;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="禁止Chrome访问"><a href="#禁止Chrome访问" class="headerlink" title="禁止Chrome访问"></a>禁止Chrome访问</h3><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($http_user_agent ~ Chrome)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">503</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><blockquote>
<p><a href="https://www.nginx.com/resources/wiki/modules/index.html" target="_blank" rel="noopener">https://www.nginx.com/resources/wiki/modules/index.html</a></p>
</blockquote>
<h3 id="echo-第三方模块"><a href="#echo-第三方模块" class="headerlink" title="echo 第三方模块"></a>echo 第三方模块</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">./configure --add-module=/usr/local/src/</span><br></pre></td></tr></table></figure>
<h3 id="防盗链-解决伪造referer"><a href="#防盗链-解决伪造referer" class="headerlink" title="防盗链 解决伪造referer"></a>防盗链 解决伪造referer</h3><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">HttpAccessKeyModule模块</span><br><span class="line">accesskey <span class="literal">on</span>|<span class="literal">off</span> <span class="comment">#开关</span></span><br><span class="line">accesskey_hashmethod md5|sha-<span class="number">1</span> <span class="comment">#加密方式</span></span><br><span class="line">accesskey_arg <span class="comment">#GET参数名称</span></span><br><span class="line">accesskey_signature <span class="comment">#加密规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例子</span></span><br><span class="line">location ~.*\.(gif|jpg|png|flv|swf|rar|zip)$ &#123;</span><br><span class="line">    accesskey <span class="literal">on</span><span class="comment">;</span></span><br><span class="line">    accesskey_hashmethod md5<span class="comment">;</span></span><br><span class="line">    accesskey_arg <span class="string">&quot;key&quot;</span><span class="comment">;</span></span><br><span class="line">    accesskey_signature <span class="string">&quot;mypass<span class="variable">$remote_addr</span>&quot;</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#请求时</span></span><br><span class="line"><span class="variable">$sign</span> = md5(<span class="string">&quot;mypass&quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>])<span class="comment">;</span></span><br><span class="line">curl http://www.img.com/test.png?sign=<span class="variable">$sign</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#缺点，每次请求url时都需要补上sign</span></span><br><span class="line"><span class="number">1071830583088712</span></span><br><span class="line"><span class="number">1812422591518712</span></span><br><span class="line"><span class="number">3033038603708712</span></span><br><span class="line"><span class="number">995708961663528712</span></span><br><span class="line"><span class="number">1003456419675528712</span></span><br></pre></td></tr></table></figure>
<h4 id="root-x2F-alias时，Index的执行时机"><a href="#root-x2F-alias时，Index的执行时机" class="headerlink" title="root&#x2F;alias时，Index的执行时机"></a>root&#x2F;alias时，Index的执行时机</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#匹配 http://xxx.com/ 目录，所以要设置index</span><br><span class="line">location / &#123;</span><br><span class="line">    root path/;  #对应的是nginx web目录下的 path目录 也就是http://xxx.com/path/</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#匹配 http://xxx.com/static static文件，会进行读取static文件，index不生效</span><br><span class="line">location /static &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#匹配 http://xxx.com/static 目录，所以要设置index</span><br><span class="line">location /static/ &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><h4 id="四层"><a href="#四层" class="headerlink" title="四层"></a>四层</h4><p>LVS实现服务器集群负载的三种方式</p>
<ul>
<li>NAT</li>
<li>DR</li>
<li>TUN</li>
</ul>
<h4 id="七层"><a href="#七层" class="headerlink" title="七层"></a>七层</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">upstream nginx&#123;</span><br><span class="line">    #分配方式</span><br><span class="line">    ##方式1(默认)，平均分配</span><br><span class="line">    ##方式2(weight)，轮询几率与weight的比率成正比</span><br><span class="line">    ##方式3(ip_hash)，按照ip的hash结果分配，可以固定每个ip访问同一个后端服务器，解决session的问题</span><br><span class="line">    server 192.168.3.150:80 weight=1;</span><br><span class="line">    server 192.168.3.151:80 weight=2;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.html</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /web/;</span><br><span class="line">        index index.php index.html index.htm;</span><br><span class="line">        #alisa xxx; 别名</span><br><span class="line">        #break; 可以跳出</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="内部概念"><a href="#内部概念" class="headerlink" title="内部概念"></a>内部概念</h3><p><code>Master</code> 进程管理 <code>Worker</code> 进程</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p><code>http://nginx.org/en/download.html</code></p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">yum -y install pcre-devel openssl openssl-devel</span><br><span class="line"></span><br><span class="line">cd <span class="regexp">/usr/</span>src</span><br><span class="line">wget http:<span class="regexp">//</span>nginx.org<span class="regexp">/download/</span>nginx-<span class="number">1.16</span>.<span class="number">1</span>.tar.gz</span><br><span class="line">tar -zxvf nginx-<span class="number">1.16</span>.<span class="number">1</span>.tar.gz</span><br><span class="line">cd nginx-<span class="number">1.16</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">.<span class="regexp">/configure --prefix=/u</span>sr<span class="regexp">/local/</span>nginx --with-http_ssl_module</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin</span><br><span class="line"></span><br><span class="line">groupadd www-data</span><br><span class="line">useradd -g www-data -s <span class="regexp">/sbin/</span>nologin www-data</span><br><span class="line"></span><br><span class="line">./nginx -t <span class="comment">#启动nginx</span></span><br><span class="line">firewall-cmd --query-port=<span class="number">80</span>/tcp</span><br><span class="line">firewall-cmd --add-port=<span class="number">80</span>/tcp --permanent</span><br><span class="line">systemctl restart firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#给某个项目目录添加组</span></span><br><span class="line">chown -R www:www app.enticementchina.com</span><br></pre></td></tr></table></figure>

<h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><blockquote>
<p><a href="https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/" target="_blank" rel="noopener">https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/</a></p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">vim /etc/init.d/nginx</span><br><span class="line"></span><br><span class="line">chmod +x /etc/init.d/nginx</span><br><span class="line">chkconfig nginx on</span><br><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="开启SSL"><a href="#开启SSL" class="headerlink" title="开启SSL"></a>开启SSL</h3><p>*.domain.com.conf文件中，添加如下code</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen <span class="number">80</span>;</span><br><span class="line">   server_name web.enticementchina.com;</span><br><span class="line">   rewrite ^(.*)$ https:<span class="regexp">//</span><span class="variable">$host</span><span class="variable">$1</span>  permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">443</span> ssl;</span><br><span class="line">    ssl_certificate  <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>cert/web.enticementchina.com.pem;</span><br><span class="line">    ssl_certificate_key   <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>cert/web.enticementchina.com.key;</span><br><span class="line">    ssl_session_timeout <span class="number">5</span>m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location ~ \.php($|/)&#123;</span><br><span class="line">        fastcgi_index   index.php;</span><br><span class="line">        fastcgi_pass    php_processes;</span><br><span class="line">        include         fastcgi_params;</span><br><span class="line">        set <span class="variable">$real_script_name</span> <span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$real_script_name</span> ~ <span class="string">&quot;^(.+?\.php)(/.+)$&quot;</span>) &#123;</span><br><span class="line">            set <span class="variable">$real_script_name</span> <span class="variable">$1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">        fastcgi_param   PATH_INFO               <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        fastcgi_param   SCRIPT_NAME             <span class="variable">$real_script_name</span>;</span><br><span class="line">        fastcgi_param   SCRIPT_FILENAME         <span class="variable">$document_root</span><span class="variable">$real_script_name</span>;</span><br><span class="line">        fastcgi_param   PHP_VALUE               open_basedir=<span class="regexp">/home/</span>wwwroot<span class="regexp">/test.enticementchina.com/</span>:<span class="regexp">/tmp/</span>:<span class="regexp">/proc/</span>;</span><br><span class="line">        access_log      <span class="regexp">/home/</span>wwwlog/domain_access_test_enticementchina.log    access;</span><br><span class="line">        error_log       <span class="regexp">/home/</span>wwwlog/domain_error_test_enticementchina.log     error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class="line">        access_log  off;</span><br><span class="line">        error_log   off;</span><br><span class="line">        expires     <span class="number">30</span>d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(js|css)?$ &#123;</span><br><span class="line">        access_log   off;</span><br><span class="line">        error_log    off;</span><br><span class="line">        expires      <span class="number">12</span>h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen         <span class="number">8001</span>;</span><br><span class="line">    server_name    app.enticementchina.com;</span><br><span class="line">    root           <span class="regexp">/home/</span>wwwroot<span class="regexp">/app.enticementchina.com/</span>public;</span><br><span class="line">    index          index.php index.html;</span><br><span class="line"></span><br><span class="line">    fastcgi_hide_header X-Powered-By;</span><br><span class="line">    <span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">        rewrite  ^<span class="regexp">/(.+?\.php)/</span>?(.*)$  <span class="regexp">/$1/</span><span class="variable">$2</span>  last;</span><br><span class="line">        rewrite  ^<span class="regexp">/(.*)$  /i</span>ndex.php/<span class="variable">$1</span>  last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php($|/)&#123;</span><br><span class="line">             ~ \.php($|/)&#123;</span><br><span class="line">        fastcgi_index   index.php;</span><br><span class="line">        fastcgi_pass    <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9000</span>;</span><br><span class="line">        set <span class="variable">$real_script_name</span> <span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$real_script_name</span> ~ <span class="string">&quot;^(.+?\.php)(/.+)$&quot;</span>) &#123;</span><br><span class="line">            set <span class="variable">$real_script_name</span> <span class="variable">$1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        include    fastcgi_params;</span><br><span class="line">        fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">        fastcgi_param   PATH_INFO               <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        fastcgi_param   SCRIPT_NAME             <span class="variable">$real_script_name</span>;</span><br><span class="line">        fastcgi_param   SCRIPT_FILENAME         <span class="variable">$document_root</span><span class="variable">$real_script_name</span>;</span><br><span class="line">        fastcgi_param   PHP_VALUE               open_basedir=<span class="regexp">/home/</span>wwwroot<span class="regexp">/app.enticementchina.com/</span>:<span class="regexp">/tmp/</span>:<span class="regexp">/proc/</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class="line">        access_log  off;</span><br><span class="line">        error_log   off;</span><br><span class="line">        expires     <span class="number">30</span>d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(js|css)?$ &#123;</span><br><span class="line">        access_log   off;</span><br><span class="line">        error_log    off;</span><br><span class="line">        expires      <span class="number">12</span>h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Nginx新建站点"><a href="#Nginx新建站点" class="headerlink" title="Nginx新建站点"></a>Nginx新建站点</h3><ol>
<li><code>vim /usr/local/nginx/conf/nginx.conf</code> 在http的最下方include一个站点文件 <code>include default_server.conf;</code></li>
<li><code>vim default_server.conf</code> 新建站点文件<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>; <span class="comment">#监听80端口，接收http请求</span></span><br><span class="line">    <span class="attribute">server_name</span>  www.example.com; <span class="comment">#就是网站地址</span></span><br><span class="line">    <span class="attribute">root</span> /web/tp5.1_dev/public; <span class="comment"># 准备存放代码工程的路径</span></span><br><span class="line">    <span class="comment">#路由到网站根目录www.example.com时候的处理</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">index</span> index.php; <span class="comment">#跳转到www.example.com/index.php</span></span><br><span class="line">        <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#当请求网站下php文件的时候，反向代理到php-fpm</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> /usr/local/nginx/conf/fastcgi.conf; <span class="comment">#加载nginx的fastcgi模块</span></span><br><span class="line">        <span class="attribute">fastcgi_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>; <span class="comment">#nginx fastcgi进程监听的IP地址和端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>/usr/local/nginx/sbin/nginx -s reload</code> 重新加载配置文件，服务不会中断。而且reload时会测试conf语法等，如果出错会rollback用上一次正确配置文件保持正常运行。</li>
</ol>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p><code>nginx: [error] invalid PID number &quot;&quot; in &quot;/usr/local/nginx/logs/nginx.pid&quot;</code><br>解决方案：</p>
<ol>
<li><code>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code> 指定文件加载nginx</li>
<li><code>/usr/local/nginx/sbin/nginx -s reload</code></li>
</ol>
<p>下面代码需要整理，临时存放</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">i-wz9cmbk0ahp4ydtjdjgy 预备测试服务器 华南 1 可用区 C 47.107.177.200(公) 172.18.87.76（私有）</span><br><span class="line">i-wz9awdclf0v0ryvh3gjv 正式服务器1  华南 1 可用区 C  47.107.130.202(公) 172.18.87.75（私有）</span><br><span class="line">i-wz9grnhznt1ugaabbold 正式服务器2  华南 1 可用区 C  47.107.61.1(公)    172.18.87.69（私有）</span><br><span class="line">i-wz99z7zud21lh68i9o67 负载均衡机器  华南 1 可用区 C 120.78.175.202(公)  172.18.87.48（私有）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 负载均衡服务器配置</span></span><br><span class="line">php_processes&#123;</span><br><span class="line">  <span class="built_in"> server </span>unix:/dev/shm/php-cgi-www.sock <span class="attribute">weight</span>=1;</span><br><span class="line">  <span class="built_in"> server </span>unix:/dev/shm/php-cgi-www2.sock <span class="attribute">weight</span>=1;</span><br><span class="line">  <span class="built_in"> server </span>unix:/dev/shm/php-cgi-www3.sock <span class="attribute">weight</span>=1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># app.xxx.com 正式服务器1</span></span><br><span class="line">upstream php_ysm &#123;       </span><br><span class="line">  <span class="built_in"> server </span>172.18.87.69:9000 <span class="attribute">max_fails</span>=3 <span class="attribute">fail_timeout</span>=10s;</span><br><span class="line">  <span class="built_in"> server </span>172.18.87.69:9001 <span class="attribute">max_fails</span>=3 <span class="attribute">fail_timeout</span>=10s;</span><br><span class="line">  <span class="built_in"> server </span>172.18.87.69:9002 <span class="attribute">max_fails</span>=3 <span class="attribute">fail_timeout</span>=10s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># test.xxx.com 正式服务器2</span></span><br><span class="line">upstream php_test_ysm &#123;       </span><br><span class="line">  <span class="built_in"> server </span>172.18.87.69:9000 <span class="attribute">max_fails</span>=3 <span class="attribute">fail_timeout</span>=10s;</span><br><span class="line">  <span class="built_in"> server </span>172.18.87.69:9001 <span class="attribute">max_fails</span>=3 <span class="attribute">fail_timeout</span>=10s;</span><br><span class="line">  <span class="built_in"> server </span>172.18.87.69:9002 <span class="attribute">max_fails</span>=3 <span class="attribute">fail_timeout</span>=10s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 47.107.130.202</span></span><br><span class="line">upstream php_processes &#123;</span><br><span class="line">  <span class="built_in"> server </span>unix:/dev/shm/php-cgi-www.sock <span class="attribute">weight</span>=1;</span><br><span class="line">  <span class="built_in"> server </span>unix:/dev/shm/php-cgi-www2.sock <span class="attribute">weight</span>=1;</span><br><span class="line">  <span class="built_in"> server </span>unix:/dev/shm/php-cgi-www3.sock <span class="attribute">weight</span>=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Paxos</title>
    <url>/blog/p/c20c6b6/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="Paxos-算法"><a href="#Paxos-算法" class="headerlink" title="Paxos 算法"></a>Paxos 算法</h2><p>「Pa so si」</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>一种基于<code>消息传递</code>的<code>分布式一致性算法</code>。</p>
<h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>在分布式系统中的各个进程之间对某个值如何达成一致，即<code>分布式一致性</code>的问题。</p>
<h3 id="如何解决问题？"><a href="#如何解决问题？" class="headerlink" title="如何解决问题？"></a>如何解决问题？</h3><p>Paxos通过类似 <code>民主议会制度</code> 进行选举</p>
<ul>
<li><code>所有的人民</code> 都可以参与决议(提议和投票)。</li>
<li><code>少数服从多数(N/2+1)</code> 的方式来达成共识(只有超过一半的机器都认可某一个消息，最终所有的机器都对这个消息的决议达成共识)</li>
</ul>
<p>涉及到的角色：</p>
<ul>
<li><strong>提议者(Proposer)</strong> ：提出提案。提案信息包括：「提议编号、提议值」。</li>
<li><strong>决策者(Acceptor)</strong> ：参与决策，回应P的提案。如果多数批准，则通过。</li>
<li><strong>最终决策学习者(Learner)</strong> ：不参与决策，从P和A学习最新达成一致的提案。</li>
</ul>
<p>在多副本状态机中，每个副本同时具有三种角色</p>
<img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.png" class="" title="Paxos算法中的角色.png">


<p>通过一个决议分成两个阶段(学习阶段之前决议已经形成)</p>
<ol>
<li><strong>第一：准备阶段(Prepare)</strong> ：<code>P</code> 向 <code>所有A</code> 发出准备决议请求，<code>所有A</code>收到请求后进行Promise承诺。</li>
<li><strong>第二：通过阶段(Accept)</strong> ：<code>P</code> 收到了 <code>多数A</code> 的Promise承诺，标志着本次决议成功，将决议结果发送给 <code>所有A</code>。</li>
<li><strong>第二：学习阶段(Learn)</strong> ：将决议结果抄送一份发给 <code>所有L</code></li>
</ol>
<img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B.png" class="" title="Paxos算法流程.png">

<p>Paxos算法流程中的每条消息描述如下：</p>
<ul>
<li>Prepare: Proposer生成全局唯一且递增的Proposal ID (可使用时间戳加Server ID)，向所有Acceptors发送Prepare请求，这里无需携带提案内容，只携带Proposal ID即可。</li>
<li>Promise: Acceptors收到Prepare请求后，做出“两个承诺，一个应答”。</li>
</ul>
<p>两个承诺：</p>
<ol>
<li>不再接受Proposal ID小于等于（注意：这里是&lt;&#x3D; ）当前请求的Prepare请求。</li>
<li>不再接受Proposal ID小于（注意：这里是&lt; ）当前请求的Propose请求。</li>
</ol>
<p>一个应答：</p>
<ul>
<li><p>不违背以前作出的承诺下，回复已经Accept过的提案中Proposal ID最大的那个提案的Value和Proposal ID，没有则返回空值。</p>
</li>
<li><p>Propose: Proposer 收到多数Acceptors的Promise应答后，从应答中选择Proposal ID最大的提案的Value，作为本次要发起的提案。如果所有应答的提案Value均为空值，则可以自己随意决定提案Value。然后携带当前Proposal ID，向所有Acceptors发送Propose请求。</p>
</li>
<li><p>Accept: Acceptor收到Propose请求后，在不违背自己之前作出的承诺下，接受并持久化当前Proposal ID和提案Value。</p>
</li>
<li><p>Learn: Proposer收到多数Acceptors的Accept后，决议形成，将形成的决议发送给所有Learners。</p>
</li>
</ul>
<p>Paxos算法伪代码描述如下：</p>
<img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E4%BC%AA%E4%BB%A3%E7%A0%81.png" class="" title="Paxos算法伪代码.png">
<ol>
<li>获取一个Proposal ID n，为了保证Proposal ID唯一，可采用时间戳+Server ID生成；</li>
<li>Proposer向所有Acceptors广播Prepare(n)请求；</li>
<li>Acceptor比较n和minProposal，如果n&gt;minProposal，minProposal&#x3D;n，并且将 acceptedProposal 和 acceptedValue 返回；</li>
<li>Proposer接收到过半数回复后，如果发现有acceptedValue返回，将所有回复中acceptedProposal最大的acceptedValue作为本次提案的value，否则可以任意决定本次提案的value；</li>
<li>到这里可以进入第二阶段，广播Accept (n,value) 到所有节点；</li>
<li>Acceptor比较n和minProposal，如果n&gt;&#x3D;minProposal，则acceptedProposal&#x3D;minProposal&#x3D;n，acceptedValue&#x3D;value，本地持久化后，返回；否则，返回minProposal。</li>
<li>提议者接收到过半数请求后，如果发现有返回值result &gt;n，表示有更新的提议，跳转到1；否则value达成一致。</li>
</ol>
<p>几个例子，实例1如下图：</p>
<img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E5%AE%9E%E4%BE%8B1.png" class="" title="Paxos算法实例1.png">

<p>图中P代表Prepare阶段，A代表Accept阶段。3.1代表Proposal ID为3.1，其中3为时间戳，1为Server ID。X和Y代表提议Value。</p>
<p>实例1中P 3.1达成多数派，其Value(X)被Accept，然后P 4.5学习到Value(X)，并Accept。</p>
<img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E5%AE%9E%E4%BE%8B2.png" class="" title="Paxos算法实例2.png">

<p>实例2中P 3.1没有被多数派Accept（只有S3 Accept），但是被P 4.5学习到，P 4.5将自己的Value由Y替换为X，Accept（X）。</p>
<img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E5%AE%9E%E4%BE%8B3.png" class="" title="Paxos算法实例3.png">

<p>实例3中P 3.1没有被多数派Accept（只有S1 Accept），同时也没有被P 4.5学习到。由于P 4.5 Propose的所有应答，均未返回Value，则P 4.5可以Accept自己的Value (Y)。后续P 3.1的Accept (X) 会失败，已经Accept的S1，会被覆盖。</p>
<p>Paxos算法可能形成活锁而永远不会结束，如下图实例所示：</p>
<img src="/blog/p/c20c6b6/Paxos%E7%AE%97%E6%B3%95%E5%BD%A2%E6%88%90%E6%B4%BB%E9%94%81.png" class="" title="Paxos算法形成活锁.png">

<p>回顾两个承诺之一，Acceptor不再应答Proposal ID小于等于当前请求的Prepare请求。意味着需要应答Proposal ID大于当前请求的Prepare请求。</p>
<p>两个Proposers交替Prepare成功，而Accept失败，形成活锁（Livelock）。</p>
<h2 id="三、Multi-Paxos算法"><a href="#三、Multi-Paxos算法" class="headerlink" title="三、Multi-Paxos算法"></a>三、Multi-Paxos算法</h2><p>原始的Paxos算法（Basic Paxos）只能对一个值形成决议，决议的形成至少需要两次网络来回，在高并发情况下可能需要更多的网络来回，极端情况下甚至可能形成活锁。如果想连续确定多个值，Basic Paxos搞不定了。因此Basic Paxos几乎只是用来做理论研究，并不直接应用在实际工程中。</p>
<p>实际应用中几乎都需要连续确定多个值，而且希望能有更高的效率。Multi-Paxos正是为解决此问题而提出。Multi-Paxos基于Basic Paxos做了两点改进：</p>
<ol>
<li>针对每一个要确定的值，运行一次Paxos算法实例（Instance），形成决议。每一个Paxos实例使用唯一的Instance ID标识。</li>
<li>在所有Proposers中选举一个Leader，由Leader唯一地提交Proposal给Acceptors进行表决。这样没有Proposer竞争，解决了活锁问题。在系统中仅有一个Leader进行Value提交的情况下，Prepare阶段就可以跳过，从而将两阶段变为一阶段，提高效率。</li>
</ol>
<img src="/blog/p/c20c6b6/Multi-Paxos%E6%B5%81%E7%A8%8B.png" class="" title="Multi-Paxos流程.png">
<p>Multi-Paxos首先需要选举Leader，Leader的确定也是一次决议的形成，所以可执行一次Basic Paxos实例来选举出一个Leader。选出Leader之后只能由Leader提交Proposal，在Leader宕机之后服务临时不可用，需要重新选举Leader继续服务。在系统中仅有一个Leader进行Proposal提交的情况下，Prepare阶段可以跳过。</p>
<p>Multi-Paxos通过改变Prepare阶段的作用范围至后面Leader提交的所有实例，从而使得Leader的连续提交只需要执行一次Prepare阶段，后续只需要执行Accept阶段，将两阶段变为一阶段，提高了效率。为了区分连续提交的多个实例，每个实例使用一个Instance ID标识，Instance ID由Leader本地递增生成即可。</p>
<p>Multi-Paxos允许有多个自认为是Leader的节点并发提交Proposal而不影响其安全性，这样的场景即退化为Basic Paxos。</p>
<p>Chubby和Boxwood均使用Multi-Paxos。ZooKeeper使用的Zab也是Multi-Paxos的变形。</p>
<h2 id="Paxos算法推导过程"><a href="#Paxos算法推导过程" class="headerlink" title="Paxos算法推导过程"></a>Paxos算法推导过程</h2><p>Paxos算法的设计过程就是从正确性开始的，对于分布式一致性问题，很多进程提出（Propose）不同的值，共识算法保证最终只有其中一个值被选定，Safety表述如下：</p>
<ul>
<li>只有被提出（Propose）的值才可能被最终选定（Chosen）。</li>
<li>只有一个值会被选定（Chosen）。</li>
<li>进程只会获知到已经确认被选定（Chosen）的值。</li>
</ul>
<p>Paxos以这几条约束作为出发点进行设计，只要算法最终满足这几点，正确性就不需要证明了。Paxos算法中共分为三种参与者：Proposer、Acceptor以及Learner，通常实现中每个进程都同时扮演这三个角色。</p>
<p>Proposers向Acceptors提出Proposal，为了保证最多只有一个值被选定（Chosen），Proposal必须被超过一半的Acceptors所接受（Accept），且每个Acceptor只能接受一个值。</p>
<p>为了保证正常运行（必须有值被接受），所以Paxos算法中：</p>
<h3 id="P1：Acceptor必须接受（Accept）它所收到的第一个Proposal。"><a href="#P1：Acceptor必须接受（Accept）它所收到的第一个Proposal。" class="headerlink" title="P1：Acceptor必须接受（Accept）它所收到的第一个Proposal。"></a>P1：Acceptor必须接受（Accept）它所收到的第一个Proposal。</h3><p>先来先服务，合情合理。但这样产生一个问题，如果多个Proposers同时提出Proposal，很可能会导致无法达成一致，因为没有Propopal被超过一半Acceptors的接受，因此，Acceptor必须能够接受多个Proposal，不同的Proposal由不同的编号进行区分，当某个Proposal被超过一半的Acceptors接受后，这个Proposal就被选定了。<br>既然允许Acceptors接受多个Proposal就有可能出现多个不同值都被最终选定的情况，这违背了Safety要求，为了保证Safety要求，Paxos进一步提出：</p>
<h3 id="P2：如果值为v的Proposal被选定（Chosen），则任何被选定（Chosen）的具有更高编号的Proposal值也一定为v。"><a href="#P2：如果值为v的Proposal被选定（Chosen），则任何被选定（Chosen）的具有更高编号的Proposal值也一定为v。" class="headerlink" title="P2：如果值为v的Proposal被选定（Chosen），则任何被选定（Chosen）的具有更高编号的Proposal值也一定为v。"></a>P2：如果值为v的Proposal被选定（Chosen），则任何被选定（Chosen）的具有更高编号的Proposal值也一定为v。</h3><p>只要算法同时满足P1和P2，就保证了Safety。P2是一个比较宽泛的约定，完全没有算法细节，我们对其进一步延伸：</p>
<h3 id="P2a：如果值为v的Proposal被选定（Chosen），则对所有的Acceptors，它们接受（Accept）的任何具有更高编号的Proposal值也一定为v。"><a href="#P2a：如果值为v的Proposal被选定（Chosen），则对所有的Acceptors，它们接受（Accept）的任何具有更高编号的Proposal值也一定为v。" class="headerlink" title="P2a：如果值为v的Proposal被选定（Chosen），则对所有的Acceptors，它们接受（Accept）的任何具有更高编号的Proposal值也一定为v。"></a>P2a：如果值为v的Proposal被选定（Chosen），则对所有的Acceptors，它们接受（Accept）的任何具有更高编号的Proposal值也一定为v。</h3><p>如果满足P2a则一定满足P2，显然，因为只有首先被接受才有可能被最终选定。但是P2a依然难以实现，因为acceptor很有可能并不知道之前被选定的Proposal（恰好不在接受它的多数派中），因此进一步延伸：</p>
<h3 id="P2b：如果值为v的Proposal被选定（Chosen），则对所有的Proposer，它们提出的的任何具有更高编号的Proposal值也一定为v。"><a href="#P2b：如果值为v的Proposal被选定（Chosen），则对所有的Proposer，它们提出的的任何具有更高编号的Proposal值也一定为v。" class="headerlink" title="P2b：如果值为v的Proposal被选定（Chosen），则对所有的Proposer，它们提出的的任何具有更高编号的Proposal值也一定为v。"></a>P2b：如果值为v的Proposal被选定（Chosen），则对所有的Proposer，它们提出的的任何具有更高编号的Proposal值也一定为v。</h3><p>更进一步的： </p>
<h3 id="P2c：为了提出值为v且编号为n的Proposal，必须存在一个包含超过一半Acceptors的集合S，满足-1-没有任何S中的Acceptors曾经接受（Accept）过编号比n小的Proposal，或者-2-v和S中的Acceptors所接受过-Accept-的编号最大且小于n的Proposal值一致。"><a href="#P2c：为了提出值为v且编号为n的Proposal，必须存在一个包含超过一半Acceptors的集合S，满足-1-没有任何S中的Acceptors曾经接受（Accept）过编号比n小的Proposal，或者-2-v和S中的Acceptors所接受过-Accept-的编号最大且小于n的Proposal值一致。" class="headerlink" title="P2c：为了提出值为v且编号为n的Proposal，必须存在一个包含超过一半Acceptors的集合S，满足(1) 没有任何S中的Acceptors曾经接受（Accept）过编号比n小的Proposal，或者(2) v和S中的Acceptors所接受过(Accept)的编号最大且小于n的Proposal值一致。"></a>P2c：为了提出值为v且编号为n的Proposal，必须存在一个包含超过一半Acceptors的集合S，满足(1) 没有任何S中的Acceptors曾经接受（Accept）过编号比n小的Proposal，或者(2) v和S中的Acceptors所接受过(Accept)的编号最大且小于n的Proposal值一致。</h3><p>满足P2c即满足P2b即满足P2a即满足P2。至此Paxos提出了Proposer的执行流程，以满足P2c：</p>
<ol>
<li>Proposer选择一个新的编号n，向超过一半的Acceptors发送请求消息，Acceptor回复: (a)承诺不会接受编号比n小的proposal，以及(b)它所接受过的编号比n小的最大Proposal（如果有）。该请求称为Prepare请求。</li>
<li>如果Proposer收到超过一半Acceptors的回复，它就可以提出Proposal，Proposal的值为收到回复中编号最大的Proposal的值，如果没有这样的值，则可以自由提出任何值。</li>
<li>向收到回复的Acceptors发送Accept请求，请求对方接受提出的Proposal。</li>
</ol>
<p>仔细品味Proposer的执行流程，其完全吻合P2c中的要求，但你可能也发现了，当多个Proposer同时运行时，有可能出现没有任何Proposal可以成功被接受的情况（编号递增的交替完成第一步），这就是Paxos算法的Liveness问题，或者叫“活锁”，论文中建议通过对Proposers引入选主算法选出Distinguished Proposer来全权负责提出Proposal来解决这个问题，但是即使在出现多个Proposers同时提出Proposal的情况时，Paxos算法也可以保证Safety。</p>
<p>接下来看看Acceptors的执行过程，和我们对P2做的事情一样，我们对P1进行延伸：</p>
<h3 id="P1a：Acceptor可以接受（Accept）编号为n的Proposal当且仅当它没有回复过一个具有更大编号的Prepare消息。"><a href="#P1a：Acceptor可以接受（Accept）编号为n的Proposal当且仅当它没有回复过一个具有更大编号的Prepare消息。" class="headerlink" title="P1a：Acceptor可以接受（Accept）编号为n的Proposal当且仅当它没有回复过一个具有更大编号的Prepare消息。"></a>P1a：Acceptor可以接受（Accept）编号为n的Proposal当且仅当它没有回复过一个具有更大编号的Prepare消息。</h3><p>易见，P1a包含了P1，对于Acceptors：</p>
<ol>
<li>当收到Prepare请求时，如果其编号n大于之前所收到的Prepare消息，则回复。</li>
<li>当收到Accept请求时，仅当它没有回复过一个具有更大编号的Prepare消息，接受该Proposal并回复。<br>以上涵盖了满足P1a和P2b的一套完整一致性算法。</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
  </entry>
  <entry>
    <title>PHP算法</title>
    <url>/blog/p/c7fd79ff/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>一个问题有多种算法，每种算法有不同的效率<br>特征：</p>
<ol>
<li>有穷性</li>
<li>准确性</li>
<li>输入项</li>
<li>输出项</li>
<li>可行性</li>
</ol>
<p>算法评定<br>算法分析的目的在于 选择合适算法 和 改进算法</p>
<p>时间复杂度T(n): 运算的次数</p>
<blockquote>
<p>执行算法所需要的计算机工作量<br>算法的时间复杂度记做T(n) &#x3D; O(f(n))<br>问题的规模n越大，算法执行的时间的增长率与f(n)的增长率正相关，称为渐进时间复杂度</p>
</blockquote>
<ul>
<li>O(n^2)</li>
<li>O(1)</li>
<li>O(n)</li>
</ul>
<p>空间复杂度</p>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><blockquote>
<p>对需要排序的数组从后往前（逆序）进行多遍的扫描，当发现相邻的两个数值的次序与排序要求的规则不一致时，就将这两个数值进行交换。这样比较小（大）的数值就将逐渐从后面向前面移动。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mysort</span>(<span class="params"><span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$arr</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">		<span class="variable">$isSort</span> = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; count(<span class="variable">$arr</span>) - <span class="variable">$i</span> - <span class="number">1</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$j</span>] &lt; <span class="variable">$arr</span>[<span class="variable">$j</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="variable">$isSort</span> = <span class="literal">true</span>;</span><br><span class="line">				<span class="variable">$temp</span> = <span class="variable">$arr</span>[<span class="variable">$j</span>];</span><br><span class="line">				<span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$arr</span>[<span class="variable">$j</span> + <span class="number">1</span>];</span><br><span class="line">				<span class="variable">$arr</span>[<span class="variable">$j</span> + <span class="number">1</span>] = <span class="variable">$temp</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="variable">$isSort</span>) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">var_dump(mysort(<span class="variable">$arr</span>));</span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><blockquote>
<p>在数组中挑出一个元素（多为第一个）作为标尺，扫描一遍数组将比标尺小的元素排在标尺之前，将所有比标尺大的元素排在标尺之后，通过递归将各子序列分别划分为更小的序列直到所有的序列顺序一致。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params"><span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//先判断是否需要继续进行</span></span><br><span class="line">	<span class="variable">$length</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$length</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="variable">$base_num</span> = <span class="variable">$arr</span>[<span class="number">0</span>];<span class="comment">//选择一个标尺 选择第一个元素</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化两个数组</span></span><br><span class="line">	<span class="variable">$left_array</span> = <span class="keyword">array</span>();<span class="comment">//小于标尺的</span></span><br><span class="line">	<span class="variable">$right_array</span> = <span class="keyword">array</span>();<span class="comment">//大于标尺的</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;      <span class="comment">//遍历 除了标尺外的所有元素，按照大小关系放入两个数组内</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$base_num</span> &gt; <span class="variable">$arr</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">			<span class="comment">//放入左边数组</span></span><br><span class="line">			<span class="variable">$left_array</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//放入右边</span></span><br><span class="line">			<span class="variable">$right_array</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//再分别对 左边 和 右边的数组进行相同的排序处理方式</span></span><br><span class="line">	<span class="comment">//递归调用这个函数,并记录结果</span></span><br><span class="line">	<span class="variable">$left_array</span> = quick_sort(<span class="variable">$left_array</span>);</span><br><span class="line">	<span class="variable">$right_array</span> = quick_sort(<span class="variable">$right_array</span>);</span><br><span class="line">	<span class="comment">//合并左边 标尺 右边</span></span><br><span class="line">	<span class="keyword">return</span> array_merge(<span class="variable">$left_array</span>, <span class="keyword">array</span>(<span class="variable">$base_num</span>), <span class="variable">$right_array</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">var_dump(quick_sort(<span class="variable">$arr</span>));</span><br></pre></td></tr></table></figure>

<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><blockquote>
<p>假设数据是按升序排序的，对于给定值x，从序列的中间位置开始比较，如果当前位置值等于x，则查找成功；若x小于当前位置值，则在数列的前半段中查找；若x大于当前位置值则在数列的后半段中继续查找，直到找到为止。（数据量大的时候使用）</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bin_search</span>(<span class="params"><span class="variable">$arr</span>, <span class="variable">$low</span>, <span class="variable">$high</span>, <span class="variable">$k</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$low</span> &lt;= <span class="variable">$high</span>) &#123;</span><br><span class="line">		<span class="variable">$mid</span> = intval((<span class="variable">$low</span> + <span class="variable">$high</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$mid</span>] == <span class="variable">$k</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="variable">$mid</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$k</span> &lt; <span class="variable">$arr</span>[<span class="variable">$mid</span>]) &#123;</span><br><span class="line">			<span class="keyword">return</span> bin_search(<span class="variable">$arr</span>, <span class="variable">$low</span>, <span class="variable">$mid</span> - <span class="number">1</span>, <span class="variable">$k</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> bin_search(<span class="variable">$arr</span>, <span class="variable">$mid</span> + <span class="number">1</span>, <span class="variable">$high</span>, <span class="variable">$k</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">print</span>(bin_search(<span class="variable">$arr</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><blockquote>
<p>从数组的第一个元素开始一个一个向下查找，如果有和目标一致的元素，查找成功；如果到最后一个元素仍没有目标元素，则查找失败。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seq_search</span>(<span class="params"><span class="variable">$arr</span>, <span class="variable">$n</span>, <span class="variable">$k</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$array</span>[<span class="variable">$n</span>] = <span class="variable">$k</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$i</span>] == <span class="variable">$k</span>) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$i</span> &lt; <span class="variable">$n</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="variable">$i</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ol>
<li>Array 数组</li>
<li>LinkedList 链表</li>
<li>Stack 栈 先进后出 只有一个出口</li>
<li>heap 堆 二叉堆</li>
<li>list 线性表</li>
<li>doubly-linked-list 双线链表</li>
<li>queue 队列 先进先出</li>
<li>set 集合 保存不重复的元素</li>
<li>map 字典</li>
<li>graph 图</li>
</ol>
<h2 id="用PHP实现一个双向队列"><a href="#用PHP实现一个双向队列" class="headerlink" title="用PHP实现一个双向队列"></a>用PHP实现一个双向队列</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$array</span> = [];</span><br><span class="line">array_push() <span class="comment">#头部插入</span></span><br><span class="line">array_unshift() <span class="comment">#头部插入</span></span><br><span class="line">array_shift() <span class="comment">#尾部移除</span></span><br><span class="line">array_pop() <span class="comment">#尾部移除</span></span><br></pre></td></tr></table></figure>
<h2 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h2><p>算法：解决问题的求解步骤的描述？</p>
<p>算法的五个特性：<br>输入和输出：算法具有0个或多个输入(参数)，至少有一个或多个输出(返回值)<br>有穷性：算法执行有限的步骤后，会自动结束而不会出现无限循环(每一个步骤都在可接受的时间内完成)<br>确定性：算法的每一步骤都有确定的含义，不会出现二义性(一个步骤多层意思)<br>可行性：算法的每一步都必须是可行的(这是理论研究领域的问题，不再考虑范围内)</p>
<p>算法的设计要求：<br>正确性：满足上述五个特性，并且能正确反映问题的需求，能够得到问题的正确答案<br>可读性：方便阅读、理解和交流<br>健壮性：当输入数据不合法应该具有应对措施，不会发生异常产生意想不到的结果<br>时间效率高：算法的执行时间<br>存储量低：运行时占用的内存或外部硬盘存储空间</p>
<p>算法的效率度量方法：<br>    算法消耗时间的因素：<br>        1.算法采用的策略和方法<br>        2.编译产生的代码质量<br>        3.问题的输入规模<br>        4.计算机执行指令的速度</p>
<p>事后统计方法：不采用，通过计算机计时器对不同算法编制的运行时间进行比较，得出结果<br>    费精力(测试的力度大小)<br>    计算机硬软件因素<br>事前统计方法：采用，在计算机编制前，通过统计方法对算法进行估算<br>核心：需要把程序看成是独立于程序设计语言的算法或一系列步骤    </p>
<p>坐标轴：<br>  横向：问题的输入规模n<br>  纵向：算法实际操作数量</p>
<p>算法时间复杂度<br>大O记法 O()<br>一般情况下，随着问题规模n的增大，T(n)增长最慢的算法为最优算法<br>三个求和算法的时间复杂度分别为：O(n)线性阶、O(1)常数阶、O(n^2)平方阶<br>对数阶：O(logN) 也就是 log2N </p>
<p>推导大O阶方法：</p>
<ol>
<li>用常数1取代运行时间中的所有加法常数(分支结构也算是普通的常数)</li>
<li>修改后的运行次数函数中，只保留最高阶</li>
<li>如果最高阶存在其系数不是1，则取出与这个项相乘的系数</li>
<li>得出的结果就是大O阶</li>
</ol>
<h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><p>0个或多个数据元素的有限序列，各个相邻元素之间都是1对1的关系</p>
<p>a1 a2 a3 … an<br>直接前驱元素<br>直接后继元素<br>n是<code>线性表的长度</code><br>如果n是0，那么就是<code>空表</code><br>n是a在线性表中的<code>位序</code></p>
<h2 id="算法导论"><a href="#算法导论" class="headerlink" title="算法导论"></a>算法导论</h2><p>算法导论是一本著名的算法教科书，由彼得·蒂尔（Peter Thiel）和克里斯蒂安·科斯（Christos H. Papadimitriou）合著。<br>该书介绍了算法基础知识，包括算法分析、数据结构、排序算法、搜索算法、图论算法、动态规划算法、随机算法等。</p>
<h3 id="算法基础知识"><a href="#算法基础知识" class="headerlink" title="算法基础知识"></a>算法基础知识</h3><p>算法导论中的算法基础知识包括算法分析、数据结构、排序算法、搜索算法、图论算法、动态规划算法、随机算法等。</p>
<h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><p>是指对算法运行时间和空间复杂度进行分析，以便了解算法的性能特征。常用的时间复杂度衡量方法包括大 O 记法、小 o 记法和Ω记法。</p>
<h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><p>是指将数据组织成某种逻辑关系的方式，以便更有效地存储和访问数据。常见的数据结构有数组、链表、栈、队列、哈希表、二叉树等。</p>
<h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><p>是指将一组数据按照某种顺序进行排列的算法。常见的排序算法有快速排序、冒泡排序、插入排序、选择排序、归并排序、堆排序等。</p>
<h4 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h4><p>是指在一组数据中查找特定的信息的算法。常见的搜索算法有二分搜索、广度优先搜索、深度优先搜索等。</p>
<h4 id="图论算法"><a href="#图论算法" class="headerlink" title="图论算法"></a>图论算法</h4><p>是指应用于图形数据结构的算法。常见的图论算法有最短路径算法、最小生成树算法、拓扑排序算法等。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql</title>
    <url>/blog/p/e4d2e8fb/</url>
    <content><![CDATA[<p>Mysql基础知识+生产环境所遇到的问题的总结，由于不同版本不断迭代，慢慢补充…</p>
<span id="more"></span>

<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><blockquote>
<p><a href="https://weread.qq.com/web/reader/45b32df07195029145b66f4k7ef321f02967ef605fc8aef" target="_blank" rel="noopener">https://weread.qq.com/web/reader/45b32df07195029145b66f4k7ef321f02967ef605fc8aef</a></p>
</blockquote>
<h3 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h3><h4 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库?"></a>什么是数据库?</h4><blockquote>
<p>一个按数据结构来存储和管理数据的计算机软件系统。</p>
</blockquote>
<p>数据库包含两层含义：</p>
<ul>
<li>保管数据的“仓库”，</li>
<li>数据管理的方法和技术。</li>
</ul>
<p>数据库的特点是：</p>
<ul>
<li>实现数据共享，减少数据冗余；</li>
<li>采用特定的数据类型；</li>
<li>具有较高的数据独立性；</li>
<li>具有统一的数据控制功能。</li>
</ul>
<h4 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h4><blockquote>
<p>主键（Primary Key）又称主码，用于唯一地标识表中的每一条记录。</p>
</blockquote>
<p>可以定义表中的一列或多列为主键，主键列上既不能有两行相同的值，也不能为空值。</p>
<h3 id="数据库技术构成"><a href="#数据库技术构成" class="headerlink" title="数据库技术构成"></a>数据库技术构成</h3><h4 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h4><p>数据库系统有3个主要的组成部分：</p>
<ul>
<li>数据库：用于存储数据的地方。</li>
<li>数据库管理系统：用于管理数据库的软件。</li>
<li>数据库应用程序：为了提高数据库系统的处理能力所使用的管理数据库的软件补充。</li>
</ul>
<p>数据库系统（Database System）提供了一个存储空间，用以存储各种数据，可以将数据库视为一个存储数据的容器。一个数据库可能包含许多文件，一个数据库系统中通常包含许多数据库。</p>
<p>数据库管理系统（DataBase Management System，DBMS）是用户创建、管理和维护数据库时所使用的软件，位于用户与操作系统之间，对数据库进行统一管理。DBMS能定义数据存储结构，提供数据的操作机制，维护数据库的安全性、完整性和可靠性。</p>
<p>数据库应用程序（DataBase Application）虽然已经有了DBMS，但是在很多情况下，DBMS无法满足对数据管理的要求。数据库应用程序的使用可以满足对数据管理的更高要求，还可以使数据管理过程更加直观和友好。数据库应用程序负责与DBMS进行通信，访问和管理DBMS中存储的数据，允许用户插入、修改、删除DB中的数据。</p>
<img src="/blog/p/e4d2e8fb/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F.png" class="" title="mysql数据库系统">

<h4 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h4><blockquote>
<p>对数据库进行查询和修改操作的语言叫作SQL。SQL的含义是结构化查询语言（Structured Query Language）。</p>
</blockquote>
<p>SQL语言包含以下4部分。<br>（1）数据定义语言（DDL）：DROP、CREATE、ALTER等语句。<br>（2）数据操作语言（DML）：INSERT（插入）、UPDATE（修改）、DELETE（删除）语句。<br>（3）数据查询语言（DQL）：SELECT语句。<br>（4）数据控制语言（DCL）：GRANT、REVOKE、COMMIT、ROLLBACK等语句。</p>
<h4 id="数据库访问接口"><a href="#数据库访问接口" class="headerlink" title="数据库访问接口"></a>数据库访问接口</h4><blockquote>
<p>不同的程序设计语言会有各自不同的数据库访问接口，程序语言通过这些接口执行SQL语句，进行数据库管理。主要的数据库访问接口有ODBC、JDBC、ADO.NET和PDO。</p>
</blockquote>
<p><strong>1．ODBCODBC（Open Database Connectivity，开放数据库连接）</strong><br>    技术为访问不同的SQL数据库提供了一个共同的接口。ODBC使用SQL作为访问数据的标准。这一接口提供了最大限度的互操作性：一个应用程序可以通过共同的一组代码访问不同的SQL数据库管理系统（DBMS）。一个基于ODBC的应用程序对数据库的操作不依赖任何DBMS，不直接与DBMS打交道，所有的数据库操作由对应的DBMS的ODBC驱动程序完成。也就是说，不论是Access、MySQL还是Oracle数据库，均可用ODBC API进行访问。由此可见，ODBC的最大优点是能以统一的方式处理所有的数据库。<br><strong>2．JDBCJDBC（Java Data Base Connectivity，Java数据库连接）</strong><br>    用于Java应用程序连接数据库的标准方法，是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，由一组用Java语言编写的类和接口组成。<br><strong>3．ADO.NETADO.NET是微软在.NET框架下开发设计的一组用于和数据源进行交互的面向对象类库。</strong><br>    ADO.NET提供了对关系数据、XML和应用程序数据的访问，允许和不同类型的数据源以及数据库进行交互。<br><strong>4．PDOPDO（PHP Data Object）</strong><br>    为PHP访问数据库定义了一个轻量级的、一致性的接口，提供了一个数据访问抽象层。这样，无论使用什么数据库，都可以通过一致的函数执行查询和获取数据。针对不同的程序语言，在MySQL提供了不同数据库访问连接驱动，读者可以在下载页面（<a href="http://dev.mysql.com/downloads/%EF%BC%89%E4%B8%8B%E8%BD%BD%E7%9B%B8%E5%85%B3%E9%A9%B1%E5%8A%A8%E3%80%82" target="_blank" rel="noopener">http://dev.MySQL.com/downloads/）下载相关驱动。</a></p>
<h3 id="什么是Mysql"><a href="#什么是Mysql" class="headerlink" title="什么是Mysql"></a>什么是Mysql</h3><p>MySQL是一个小型关系数据库管理系统。与其他大型数据库管理系统（例如Oracle、DB2、SQL Server等）相比，MySQL规模小、功能有限，但是它体积小、速度快、成本低，并且提供的功能对稍微复杂的应用来说已经够用，这些特性使得MySQL成为世界上最受欢迎的开放源代码数据库。</p>
<h4 id="Mysql的优势"><a href="#Mysql的优势" class="headerlink" title="Mysql的优势"></a>Mysql的优势</h4><p>（1）速度：运行速度快。<br>（2）价格：MySQL对多数个人来说是免费的。<br>（3）容易使用：与其他大型数据库的设置和管理相比，其复杂程度较低，易于学习。<br>（4）可移植性：能够工作在众多不同的系统平台上，例如Windows、Linux、UNIX、Mac OS等。<br>（5）丰富的接口：提供了用于C、C++、Eiffel、Java、Perl、PHP、Python、Ruby和Tcl等语言的API。<br>（6）支持查询语言：MySQL可以利用标准SQL语法和支持ODBC的应用程序。<br>（7）安全性和连接性：十分灵活和安全的权限和密码系统，允许基于主机的验证。连接到服务器时，所有的密码传输均采用加密形式，从而保证了密码安全。由于MySQL是网络化的，因此可以在因特网上的任何地方访问，提高数据共享的效率。</p>
<h3 id="Mysql-8-0的新特性简述"><a href="#Mysql-8-0的新特性简述" class="headerlink" title="Mysql 8.0的新特性简述"></a>Mysql 8.0的新特性简述</h3><blockquote>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html?tdsourcetag=s_pctim_aiomsg%E3%80%82" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html?tdsourcetag=s_pctim_aiomsg。</a></p>
</blockquote>
<p>和MySQL 5.7相比，MySQL 8.0的新特性主要包括以下几个方面:</p>
<ol>
<li>数据字典MySQL 8.0包含一个事务数据字典，用于存储有关数据库对象的信息。<br> 在MySQL 8.0之前的版本中，字典数据存储在元数据文件和非事务表中。</li>
<li>原子数据定义语句MySQL 8.0支持原子数据定义语言（DDL）语句。<br> 此功能称为原子DDL。原子DDL语句将与DDL操作关联的数据字典更新，存储引擎操作和二进制日志写入组合到单个原子事务中。即使服务器在操作期间暂停，也会提交事务，并将适用的更改保留到数据字典、存储引擎和二进制日志，或者回滚事务。通过在MySQL 8.0中引入MySQL数据字典，可以实现原子DDL。在早期的MySQL版本中，元数据存储在元数据文件、非事务性表和存储引擎特定的字典中，需要中间提交。MySQL数据字典提供的集中式事务元数据存储消除了这一障碍，使得将DDL语句操作重组为原子事务成为可能。</li>
<li>安全和账户管理MySQL 8.0通过以下功能增强数据库的安全性，并在账户管理中实现更高的DBA灵活性。<br> MySQL数据库的授权表统一为InnoDB（事务性）表。每个语句都是事务性的，并且对所有创建的用户都是成功或者回滚，发生任何错误都无效。如果成功，就将语句写入二进制日志；如果失败则不写入，发生回滚并且不进行任何更改。MySQL 8.0开始支持角色，角色可以看成是一些权限的集合，为用户赋予统一的角色，权限的修改直接通过角色来进行，无须为每个用户单独授权。管理员可以创建和删除角色。MySQL 8.0开始维护有关密码历史的信息，从而限制了以前密码的重用。管理员可以在全局以及每个账户的基础上建立密码重用策略，从而在密码更改时限制使用以前使用过的密码。MySQL 8.0允许账户具有双密码，从而在多服务器系统中无缝地执行分阶段密码更改，无须停机。</li>
<li>资源管理MySQL现在支持资源组的创建和管理，并允许将服务器内运行的线程分配给特定的资源组。<br> 资源组属性可以控制其资源，以启用或限制资源组中线程的资源消耗。数据库管理员可以根据不同的工作负载修改这些属性。</li>
<li>InnoDB增强功能MySQL 8.0增强了InnoDB的功能，主要表现如下：<br> （1）MySQL 8.0将自增主键的计数器持久化到重做日志中。每次计数器发生改变，都会将其写入重做日志中。如果数据库重启，InnoDB会根据重做日志中的信息来初始化计数器的内存值。为了尽量减小对系统性能的影响，计数器写入重做日志时，并不会马上刷新数据库系统。<br> （2）如果索引损坏，InnoDB将索引损坏标志写入重做日志，从而使得损坏标志安全。InnoDB还将内存中损坏标志数据写入每个检查点上的引擎专用系统表。在恢复期间，InnoDB从两个位置读取损坏标志并在将内存表和索引对象标记为损坏之前合并结果。<br> （3）新的动态变量innodb_deadlock_detect可用于禁用死锁检测。在高并发系统上，当许多线程等待同一个锁时，死锁检测会导致速度减慢，此时禁用死锁检测可能更有效。</li>
<li>字符集支持默认字符集已经更改latin1为utf8mb4。<br> 该utf8mb4字符集有几个新的排序规则，其中包括utf8mb4_ja_0900_as_cs。</li>
<li>增强JSON功能MySQL增强JSON功能主要表现在以下几个方面：<br> （1）添加了-&gt;&gt;运算符，相当于调用JSON_UNQUOTE()的结果。<br> （2）添加了两个JSON聚合函数JSON_ARRAYAGG()和JSON_OBJECTAGG()。JSON_ARRAYAGG()将列或表达式作为其参数，并将结果聚合为单个JSON数组。JSON_OBJECTAGG()取两个列或表达式，将其解释为键和值，并将结果作为单个JSON对象返回。<br> （3）添加了JSON实用程序功能JSON_PRETTY()，JSON以易于阅读的格式输出现有值；每个JSON对象成员或数组值都打印在一个单独的行上，子对象或数组相对于其父对象是2个空格。<br> （4）添加的JSON_MERGE_PATCH()可以合并符合RFC 7396标准的JSON。在两个JSON对象上使用时，可以将它们合并为单个JSON对象。</li>
<li>数据类型的支持MySQL 8.0支持将表达式用作数据类型的默认值，包括BLOB、TEXT、GEOMETRY和JSON数据类型，在以前的版本中是根本不会被分配默认值的。</li>
<li>查询的优化MySQL 8.0在查询方面的优化表现如下：<br> （1）MySQL 8.0开始支持不可见索引。优化器根本不使用不可见索引，但会以其他方式正常维护。默认情况下，索引是可见的。通过不可见索引，数据库管理员可以检测索引对查询性能的影响，而不会进行破坏性的更改。<br> （2）MySQL8.0开始支持降序索引。DESC在索引定义中不再被忽略，而且会降序存储索引字段。</li>
<li>公用表表达式MySQL现在支持非递归和递归的公用表表达式。公用表表达式允许使用命名的临时结果集，通过允许WITH语句之前的子句SELECT和某些其他语句来实现。</li>
<li>窗口函数在MySQL 8.0版本中，新增了一个窗口函数，用它可以实现很多新的查询方式。窗口函数类似于SUM()、COUNT()那样的集合函数，但它并不会将多行查询结果合并为一行，而是将结果放回多行当中。</li>
<li>统计直方图MySQL 8.0实现了统计直方图。利用直方图，用户可以对一张表的一列做数据分布的统计，特别是针对没有索引的字段。这可以帮助查询优化器找到更优的执行计划。</li>
<li>备份锁新类型的备份锁在联机备份期间允许DML，同时防止可能导致快照不一致的操作。新的备份锁由LOCK INSTANCE FOR BACKUP和UNLOCK INSTANCE语法支持。管理员拥有BACKUP_ADMIN权限才能使用这些语句。</li>
<li>函数-加密函数<ul>
<li>MD5(str)</li>
<li>SHA(str)</li>
<li>SHA2(str)</li>
</ul>
</li>
<li>GROUP BY不再隐式排序，如果确实需要排序，必须加上ORDER BY子句。</li>
<li>通用表表达式简称为CTE（Common Table Expressions）。CTE是命名的临时结果集，作用范围是当前语句。CTE可以理解成一个可以复用的子查询，当然跟子查询还是有点区别的，CTE可以引用其他CTE，但子查询不能引用其他子查询。</li>
</ol>
<h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><blockquote>
<p><a href="https://dev.mysql.com/downloads/installer/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/installer/</a></p>
</blockquote>
<h3 id="Linux-Centos7-安装Mysql"><a href="#Linux-Centos7-安装Mysql" class="headerlink" title="Linux(Centos7)安装Mysql"></a>Linux(Centos7)安装Mysql</h3><h4 id="安装前预准备"><a href="#安装前预准备" class="headerlink" title="安装前预准备"></a>安装前预准备</h4><p>首先检查系统中是否存在使用rpm安装的mysql或者mariadb，如果有需要先删除后再编译安装。<br>卸载完以后用 <code>rpm -qa|grep mariadb</code> 或者 <code>rpm -qa|grep mysql</code> 查看结果。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">rpm -<span class="keyword">qa</span> | <span class="keyword">grep</span> mysql</span><br><span class="line">rpm -<span class="keyword">qa</span> | <span class="keyword">grep</span> mariadb</span><br><span class="line"></span><br><span class="line">#如果存在则卸载</span><br><span class="line">rpm -<span class="keyword">e</span> --nodeps XXXX</span><br></pre></td></tr></table></figure>
<img src="/blog/p/e4d2e8fb/rpm%E5%8D%B8%E8%BD%BDmariadb.png" class="" title="rpm卸载mariadb">

<h4 id="安装mysql（下载源代码编译安装）"><a href="#安装mysql（下载源代码编译安装）" class="headerlink" title="安装mysql（下载源代码编译安装）"></a>安装mysql（下载源代码编译安装）</h4><blockquote>
<p><a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/community/</a></p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装相关依赖包</span></span><br><span class="line">yum install -y libaio-* cmake boost bison m4 libtirpc libtirpc-devel</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载boost 59文件</span></span><br><span class="line">cd <span class="regexp">/usr/</span>local/src</span><br><span class="line">wget https:<span class="regexp">//</span>newcontinuum.dl.sourceforge.net<span class="regexp">/project/</span>boost<span class="regexp">/boost/</span><span class="number">1.59</span>.<span class="number">0</span>/boost_1_59_0.tar.gz</span><br><span class="line">tar zxvf boost_1_59_0.tar.gz</span><br><span class="line">mv boost_1_59_0 ../</span><br><span class="line"></span><br><span class="line"><span class="comment">#预配置设置</span></span><br><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql -s <span class="regexp">/bin/</span>false mysql</span><br><span class="line">mkdir -p <span class="regexp">/usr/</span>local/mysql</span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开始源代码构建</span></span><br><span class="line">cd <span class="regexp">/usr/</span>local/src</span><br><span class="line">wget https:<span class="regexp">//</span>cdn.mysql.com<span class="regexp">/archives/my</span>sql-<span class="number">5.7</span>/mysql-<span class="number">5.7</span>.<span class="number">28</span>.tar.gz</span><br><span class="line">tar -xzvf mysql-<span class="number">5.7</span>.xxxxx.tar.gz</span><br><span class="line">cd mysql-<span class="number">5.7</span>.xxx</span><br><span class="line">mkdir bld</span><br><span class="line">cd bld</span><br><span class="line"></span><br><span class="line"><span class="comment">#cmake</span></span><br><span class="line">cmake .. \</span><br><span class="line">-DBUILD_CONFIG=mysql_release \</span><br><span class="line">-DDOWNLOAD_BOOST=<span class="number">1</span> \</span><br><span class="line">-DWITH_BOOST=<span class="regexp">/usr/</span>local/boost_1_59_0 \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=<span class="regexp">/usr/</span>local/mysql \</span><br><span class="line">-SYSTEMD_PID_DIR=<span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>systemd \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DSYSCONFDIR=<span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装后初始化Mysql</span></span><br><span class="line">cd <span class="regexp">/usr/</span>local/mysql</span><br><span class="line">mkdir mysql-files</span><br><span class="line">chown mysql:mysql mysql-files</span><br><span class="line">chmod <span class="number">750</span> mysql-files</span><br><span class="line">bin/mysqld --initialize-insecure --user=mysql</span><br><span class="line">bin/mysql_ssl_rsa_setup</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启进程守护</span></span><br><span class="line">bin/mysqld_safe --user=mysql &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改mysql安装目录的属主属组</span></span><br><span class="line">chown -R mysql:mysql <span class="regexp">/usr/</span>local/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#可选命令</span></span><br><span class="line">cp support-files<span class="regexp">/mysql.server /</span>etc<span class="regexp">/init.d/my</span>sql.server</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化mysql数据库</span></span><br><span class="line"><span class="comment">#使用--initialize了 “ 默认安全 ”安装（即包括生成随机初始的 root密码）。在这种情况下，密码被标记为已过期，您将需要选择一个新密码。</span></span><br><span class="line"><span class="comment">#使用--initialize-insecure，不会root生成密码。这是不安全的；假定您在将服务器投入生产使用之前会及时为帐户分配密码。</span></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>bin/mysqld --initialize-insecure --user=mysql</span><br></pre></td></tr></table></figure>
<h4 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h4><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="title">[</span><span class="comment">root@www</span> <span class="comment">~</span><span class="title">]</span><span class="comment">#</span> <span class="comment">mysqldump</span> <span class="literal">-</span><span class="comment">uroot</span> --<span class="comment">single</span><span class="literal">-</span><span class="comment">transaction</span> --<span class="comment">master</span><span class="literal">-</span><span class="comment">data=2</span> --<span class="comment">databases</span> <span class="comment">数据库名称</span> &gt; <span class="comment">/backup/hellodb_`date</span> <span class="literal">+</span><span class="comment">%F`</span><span class="string">.</span><span class="comment">sql</span></span><br><span class="line">--<span class="comment">single</span><span class="literal">-</span><span class="comment">transaction:</span> <span class="comment">基于此选项能实现热备InnoDB表；因此，不需要同时使用</span>--<span class="comment">lock</span><span class="literal">-</span><span class="comment">all</span><span class="literal">-</span><span class="comment">tables；</span></span><br><span class="line">--<span class="comment">master</span><span class="literal">-</span><span class="comment">data=2</span>  <span class="comment">记录备份那一时刻的二进制日志的位置，并且注释掉，1是不注释的</span></span><br><span class="line">--<span class="comment">databases</span> <span class="comment">hellodb</span> <span class="comment">指定备份的数据库</span></span><br><span class="line"><span class="comment">然后回到mysql服务器端，</span> </span><br></pre></td></tr></table></figure>
<h4 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/lib/</span>systemd<span class="regexp">/system/my</span>sqld.service</span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Documentation=http:<span class="regexp">//</span>dev.mysql.com<span class="regexp">/doc/</span>refman<span class="regexp">/en/u</span>sing-systemd.html</span><br><span class="line">After=network.target</span><br><span class="line">After=syslog.target</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">PIDFile=<span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>data/localhost.pid</span><br><span class="line">ExecStart=<span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>bin<span class="regexp">/mysqld_safe --explicit_defaults_for_timestamp --user=mysql --pid-file=/u</span>sr<span class="regexp">/local/my</span>sql<span class="regexp">/data/</span>localhost.pid <span class="variable">$MYSQLD_OPTS</span></span><br></pre></td></tr></table></figure>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="comment">#重新启动systemd管理器</span></span><br><span class="line"><span class="params">system</span>ctl daemon-reexec</span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx开机自启</span></span><br><span class="line"><span class="params">system</span>ctl enable mysqld</span><br></pre></td></tr></table></figure>
<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑文件</span></span><br><span class="line">vim <span class="regexp">/etc/</span>profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加下列code</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span><span class="regexp">/bin:/u</span>sr<span class="regexp">/local/my</span>sql<span class="regexp">/bin:/u</span>sr<span class="regexp">/local/my</span>sql/lib</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新载入profile</span></span><br><span class="line">source <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>
<h4 id="启动MySQL数据库"><a href="#启动MySQL数据库" class="headerlink" title="启动MySQL数据库"></a>启动MySQL数据库</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d/mysql start           </span><br></pre></td></tr></table></figure>
<p>如果报下方错，则是之前没有完全卸载，<a href="#%E5%AE%89%E8%A3%85%E5%89%8D%E9%A2%84%E5%87%86%E5%A4%87">返回上方操作</a></p>
<img src="/blog/p/e4d2e8fb/mysql_safe_error.png" class="" title="Mysql数据库 mysqld.saft error">


<h3 id="常用图形管理工具"><a href="#常用图形管理工具" class="headerlink" title="常用图形管理工具"></a>常用图形管理工具</h3><ul>
<li>MySQL Workbench</li>
<li>phpMyAdmin</li>
<li>Navicat</li>
<li>MysqlDumper</li>
<li>SQLyog</li>
</ul>
<h2 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE database_name;</span><br><span class="line"></span><br><span class="line"># 查看定义</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE database_name\G;</span><br><span class="line"></span><br><span class="line"># 查看所有存在的数据库</span><br><span class="line"><span class="keyword">SHOW</span> database_name;</span><br><span class="line"></span><br><span class="line"># 选择当前数据库</span><br><span class="line">USE database_name;</span><br><span class="line"></span><br><span class="line"># 删除数据库</span><br><span class="line"><span class="keyword">DROP</span> database_name;</span><br></pre></td></tr></table></figure>
<h2 id="数据表基本操作"><a href="#数据表基本操作" class="headerlink" title="数据表基本操作"></a>数据表基本操作</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建数据表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name(</span><br><span class="line"> 字段名<span class="number">1</span>,数据类型 [列级别约束条件] [默认值],</span><br><span class="line"> 字段名<span class="number">2</span>,数据类型 [列级别约束条件] [默认值],</span><br><span class="line"> ...</span><br><span class="line"> [表级别约束条件]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># Template</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name(</span><br><span class="line">    id <span class="type">int</span>(<span class="number">11</span>) UNSIGNED AUTO_INCREMENT, # 自增<span class="operator">+</span>无符号</span><br><span class="line">    uid <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, # 非空约束</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>, # 唯一性约束</span><br><span class="line">    age tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="number">20</span>, # 默认约束</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id) # 指定主键</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id,uid) # 指定多字段联合主键</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 查看表结构 <span class="keyword">DESCRIBE</span><span class="operator">/</span><span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">DESC</span> table_name;</span><br><span class="line"></span><br><span class="line"># 修改数据表名</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_oldname RENAME [可选参数] table_newname;</span><br><span class="line"></span><br><span class="line"># 修改字段的数据类型</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name MODIFY 字段名 数据类型</span><br><span class="line"></span><br><span class="line"># 修改字段名</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name CHANGE 旧字段名 新字段名 新数据类型</span><br><span class="line"></span><br><span class="line"># 添加字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> 新字段名 数据类型 位置[<span class="keyword">FIRST</span><span class="operator">|</span>AFTER已存在字段]</span><br><span class="line"></span><br><span class="line"># 添加无完整性约束条件的字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> managerID <span class="type">INT</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"># 添加有完整性约束条件的字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> managerID <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"># 删除表的外键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键约束名;</span><br><span class="line"></span><br><span class="line"># 删除一个字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> 字段名;</span><br><span class="line"></span><br><span class="line"># 修改字段的排列位置</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name MODIFY 字段<span class="number">1</span> 数据类型 <span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"># 更改表的存储引擎</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name ENGINE<span class="operator">=</span>新存储引擎名;</span><br><span class="line"></span><br><span class="line"># 删除 没有被关联 的表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>]表<span class="number">1</span>, 表<span class="number">2</span>,...表n;</span><br><span class="line"></span><br><span class="line"># 删除 被关联的表 同事要删除外键约束</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键约束名;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>约束</th>
<th>作用</th>
<th>示例</th>
<th>实际业务如何使用</th>
</tr>
</thead>
<tbody><tr>
<td>外键约束</td>
<td>用来在两个表的数据之间建立连接，可以是一列或者多列。一个表可以有一个或多个外键。</td>
<td>上Template</td>
<td>不使用</td>
</tr>
<tr>
<td>非空约束</td>
<td>插入记录时，字段不能为空</td>
<td>上Template</td>
<td>看需求而定</td>
</tr>
<tr>
<td>默认约束</td>
<td>插入记录时，字段设置默认值</td>
<td>上Template</td>
<td>每个字段都要求设置默认值，不能为null</td>
</tr>
<tr>
<td>属性值自动增加</td>
<td>插入记录时，要求字段自增</td>
<td>上Template</td>
<td>看需求而定</td>
</tr>
<tr>
<td>zerofill</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>unsigned</td>
<td>无符号，符号占了一个数字位，可以选择取值范围</td>
<td>上Template</td>
<td>看需求而定</td>
</tr>
</tbody></table>
<h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>在MySQL 8.0版本之前，默认字符集为latin1，utf8字符集指向的是utf8mb3。网站开发人员在数据库设计的时候往往会将编码修改为utf8字符集。如果遗忘修改默认的编码，就会出现乱码的问题。</p>
<p>从MySQL 8.0开始，数据库的默认编码改为utf8mb4，从而避免了上述的乱码问题。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看数据库的默认编码</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character_set_database&#x27;</span>;</span><br></pre></td></tr></table></figure>


<h2 id="数据类型和运算符"><a href="#数据类型和运算符" class="headerlink" title="数据类型和运算符"></a>数据类型和运算符</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>重点：</p>
<ul>
<li>数据类型详情</li>
<li>什么时候应该使用它？</li>
</ul>
<h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><ul>
<li>重点1：INT(11): 对大多数应用没有意义，他不会限制值的合法范围，只会影响显示字符的个数 也就是 <code>宽度</code>，长度范围是随数据类型就已经是固定的值，而显示宽度与长度范围无关。</li>
<li>重点2：unsigned</li>
<li>重点3：范围计算：<ul>
<li>每个字节[byte(B)]有8个位[bit(b)]，一个位(b)就代表一个0或者1，也就是2的次幂</li>
<li>INT 是4个字节 &#x3D; 4*8b &#x3D; 2的32次方</li>
<li>4294967296 减去 一个0是 4294967295</li>
<li>如果 <code>存储值</code> 超过了 定义的范围，分情况：<code>启用严格模式</code>，报错，插入失败。<code>禁用严格模式</code>，值可以插入，但是会被裁剪成 <code>定义的最大值</code></li>
<li>存储浮点数值 先看安全性<ul>
<li>高安全性 选decimal</li>
<li>低安全性<ul>
<li>如果需要存储的数值对精度要求不高时，选用float，否者选double</li>
<li>如果需要存储的数值对精度要求不高时，选用float，否者选double</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>范围（默认有符号）</th>
<th>范围（unsigned）</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>整数值(极小) TINYINT</td>
<td>1 字节</td>
<td>(-128，127)</td>
<td>(0，255)</td>
<td></td>
</tr>
<tr>
<td>整数值(小) SMALLINT</td>
<td>2 字节</td>
<td>(-32 768，32 767)</td>
<td>(0，65 535)</td>
<td></td>
</tr>
<tr>
<td>整数值(中等) MEDIUMINT</td>
<td>3 字节</td>
<td>(-8 388 608，8 388 607)</td>
<td>(0，16 777 215)</td>
<td></td>
</tr>
<tr>
<td>整数值 INT或INTEGER</td>
<td>4 字节</td>
<td>(-2 147 483 648，2 147 483 647)</td>
<td>(0，4 294 967 295)</td>
<td></td>
</tr>
<tr>
<td>整数值(大) BIGINT</td>
<td>8 字节</td>
<td>(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td>
<td>(0，18 446 744 073 709 551 615)</td>
<td></td>
</tr>
<tr>
<td>浮点数值(单精度) FLOAT</td>
<td>4 字节</td>
<td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，<br>0，<br>(1.175 494 351 E-38，3.402 823 466 351 E+38)</td>
<td>0，<br>(1.175 494 351 E-38，3.402 823 466 E+38)</td>
<td></td>
</tr>
<tr>
<td>浮点数值(双精度)DOUBLE</td>
<td>8 字节</td>
<td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，<br>0，<br>(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td>0，<br>(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td></td>
</tr>
<tr>
<td>定点小数 DECIMAL</td>
<td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td>
<td>依赖于M和D的值</td>
<td>依赖于M和D的值</td>
<td></td>
</tr>
</tbody></table>
<p>补充：FLOAT、DOUBLE 和 DECIMAL 都可以指定列宽，例如 DECIMAL(18, 9) 表示总共 18 位，取 9 位存储小数部分，剩下 9 位存储整数部分。</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul>
<li>重点1：char适合较短、定长、经常变更的字符串</li>
<li>重点2：尽量避免使用BLOB和TEXT类型，查询会使用临时表，消耗性能</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>用途</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR</td>
<td>0-255字节</td>
<td>定长字符串</td>
<td>提取比Varchar效率高<br>会用空格填充</td>
</tr>
<tr>
<td>VARCHAR</td>
<td>0-65535 字节</td>
<td>变长字符串</td>
<td>比定长节省空间，<br>&lt;255会用一个字节存字符串的长度，<br>&gt;255会用两个字节 <br> <font color="red"><b>超过宽度会截断</b></font></td>
</tr>
<tr>
<td>TINYBLOB</td>
<td>0-255字节</td>
<td>不超过 255 个字符的二进制字符串</td>
<td></td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>0-255字节</td>
<td>短文本字符串</td>
<td></td>
</tr>
<tr>
<td>BLOB</td>
<td>0-65 535字节</td>
<td>二进制形式的长文本数据</td>
<td><font color="red"><b>尽量少用</b></font></td>
</tr>
<tr>
<td>TEXT</td>
<td>0-65 535字节</td>
<td>长文本数据</td>
<td><font color="red"><b>尽量少用</b></font></td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>0-16 777 215字节</td>
<td>二进制形式的中等长度文本数据</td>
<td></td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>0-16 777 215字节</td>
<td>中等长度文本数据</td>
<td></td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>0-4 294 967 295字节</td>
<td>二进制形式的极大文本数据</td>
<td></td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>0-4 294 967 295字节</td>
<td>极大文本数据</td>
<td></td>
</tr>
</tbody></table>
<h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><ul>
<li>重点1：可以使用枚举类型替换常用的字符串，比如性别：男女保密 123，</li>
<li>重点2：枚举类型会减少表的大小，因为内部是按照数字存储的，而且每个<ul>
<li>NULL   索引是NULL</li>
<li>‘’     索引是0</li>
<li>‘one’  索引是1</li>
<li>其他值依次类推  索引是2.3….</li>
</ul>
</li>
<li>重点3：不建议用数字保存到ENUM列，数字被视为索引，并且保存的值是该索引对应的枚举成员，很容易引起混淆<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum(&#x27;男&#x27;,&#x27;女&#x27;),</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><ul>
<li>重点1：<font color="red"><b>优先使用timestamp</b></font>，比datatime空间效率高，而且有专有的自动更新特性</li>
<li>重点2：用整数保存时间戳的格式通常不方便处理</li>
<li>重点3：存储微妙，使用bigint</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小(字节)</th>
<th>范围</th>
<th>格式</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>DATE</td>
<td>3</td>
<td>1000-01-01&#x2F;9999-12-31</td>
<td>YYYY-MM-DD</td>
<td>日期值</td>
</tr>
<tr>
<td>TIME</td>
<td>3</td>
<td>‘-838:59:59’&#x2F;‘838:59:59’</td>
<td>HH:MM:SS</td>
<td>时间值或持续时间</td>
</tr>
<tr>
<td>YEAR</td>
<td>1</td>
<td>1901&#x2F;2155</td>
<td>YYYY</td>
<td>年份值</td>
</tr>
<tr>
<td>DATETIME</td>
<td>8</td>
<td>1000-01-01 00:00:00&#x2F;9999-12-31 23:59:59</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>混合日期和时间值</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>4</td>
<td>1970-01-01 00:00:00&#x2F;2038-1-19 11:14:07</td>
<td>YYYYMMDD HHMMSS</td>
<td>混合日期和时间值，UNIX 时间戳</td>
</tr>
</tbody></table>
<h4 id="如何选择数据类型"><a href="#如何选择数据类型" class="headerlink" title="如何选择数据类型"></a>如何选择数据类型</h4><blockquote>
<p>优化存储、提高数据库性能</p>
</blockquote>
<ol>
<li>整数和浮点数<br> 如果不需要小数部分，就使用整数来保存数据；如果需要表示小数部分，就使用浮点数类型。对于浮点数据列，存入的数值会对该列定义的小数位进行四舍五入。例如，假设列的值的范围为1~99999，若使用整数，则MEDIUMINT UNSIGNED是最好的类型；若需要存储小数，则使用FLOAT类型。<br>浮点类型包括FLOAT和DOUBLE类型。DOUBLE类型精度比FLOAT类型高，因此要求存储精度较高时应选择DOUBLE类型。</li>
<li>浮点数和定点数浮点数FLOAT、DOUBLE相对于定点数DECIMAL的优势是：在长度一定的情况下，浮点数能表示更大的数据范围。由于浮点数容易产生误差，因此对精确度要求比较高时，建议使用DECIMAL来存储。DECIMAL在MySQL中是以字符串存储的，用于定义货币等对精确度要求较高的数据。在数据迁移中，float(M,D)是非标准SQL定义，数据库迁移可能会出现问题，最好不要这样使用。另外，两个浮点数进行减法和比较运算时也容易出问题，因此在进行计算的时候，一定要小心。进行数值比较时，最好使用DECIMAL类型。</li>
<li>日期与时间类型<br> MySQL对于不同种类的日期和时间有很多数据类型，比如YEAR和TIME。如果只需要记录年份，则使用YEAR类型即可；如果只记录时间，则使用TIME类型。<br>如果同时需要记录日期和时间，则可以使用TIMESTAMP或者DATETIME类型。由于TIMESTAMP列的取值范围小于DATETIME的取值范围，因此存储范围较大的日期最好使用DATETIME。<br>TIMESTAMP也有一个DATETIME不具备的属性。默认的情况下，当插入一条记录但并没有指定TIMESTAMP这个列值时，MySQL会把TIMESTAMP列设为当前的时间。因此当需要插入记录的同时插入当前时间时，使用TIMESTAMP是方便的。另外，TIMESTAMP在空间上比DATETIME更有效。</li>
<li>CHAR与VARCHAR区别:</li>
</ol>
<ul>
<li><p>CHAR是固定长度字符，VARCHAR是可变长度字符。 </p>
</li>
<li><p>CHAR会自动删除插入数据的尾部空格，VARCHAR不会删除尾部空格。</p>
<p>  CHAR是固定长度，所以它的处理速度比VARCHAR的速度要快，但是它的缺点是浪费存储空间，所以对存储不大但在速度上有要求的可以使用CHAR类型，反之可以使用VARCHAR类型来实现。存储引擎对于选择CHAR和VARCHAR的影响：<br>  - 对于MyISAM存储引擎：最好使用固定长度的数据列代替可变长度的数据列。这样可以使整个表静态化，从而使数据检索更快，用空间换时间。<br>  - 对于InnoDB存储引擎：使用可变长度的数据列，因为InnoDB数据表的存储格式不分固定长度和可变长度，因此使用CHAR不一定比使用VARCHAR更好，但由于VARCHAR是按照实际的长度存储的，比较节省空间，所以对磁盘I&#x2F;O和数据存储总量比较好。</p>
</li>
</ul>
<ol start="5">
<li>ENUM和SET<br> ENUM只能取单值，它的数据列表是一个枚举集合。它的合法取值列表最多允许有65535个成员。因此，在需要从多个值中选取一个时，可以使用ENUM。比如：性别字段适合定义为ENUM类型，每次只能从‘男’或‘女’中取一个值。<br> SET可取多值。它的合法取值列表最多允许有64个成员。空字符串也是一个合法的SET值。在需要取多个值的时候，适合使用SET类型，比如要存储一个人的兴趣爱好，最好使用SET类型。<br> ENUM和SET的值是以字符串形式出现的，但在内部，MySQL是以数值的形式存储它们的。<br>6．BLOB和TEXT<br> BLOB是二进制字符串，TEXT是非二进制字符串，两者均可存放大容量的信息。BLOB主要存储图片、音频信息等，而TEXT只能存储纯文本文件。</li>
</ol>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><blockquote>
<p>运算符是告诉MySQL执行特定算术或逻辑操作的符号。</p>
</blockquote>
<h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p>算术运算符用于各类数值运算，包括加（+）、减（-）、乘（*）、除（&#x2F;）、求余（或称模运算，%）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> num,num<span class="operator">/</span><span class="number">0</span>,num <span class="operator">%</span> <span class="number">0</span> <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure>
<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>比较运算符用于比较运算，包括大于（&gt;）、小于（&lt;）、等于（&#x3D;）、大于等于（&gt;&#x3D;）、小于等于（&lt;&#x3D;）、不等于（!&#x3D;），以及IN、BETWEEN AND、IS NULL、GREATEST、LEAST、LIKE、REGEXP等。</p>
<p><strong>等于运算符</strong></p>
<blockquote>
<p>等号（&#x3D;）用来判断数字、字符串和表达式是否相等：如果相等，返回值为1；否则返回值为0。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span><span class="operator">=</span><span class="number">0</span>,<span class="string">&#x27;2&#x27;</span><span class="operator">=</span><span class="number">2</span>,<span class="number">2</span><span class="operator">=</span><span class="number">2</span>,(<span class="number">1</span><span class="operator">+</span><span class="number">3</span>)<span class="operator">=</span>(<span class="number">2</span><span class="operator">+</span><span class="number">2</span>),<span class="keyword">NULL</span><span class="operator">=</span><span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<p>数值比较时有如下规则：<br>（1）若有一个或两个参数为NULL，则比较运算的结果为NULL。<br>（2）若同一个比较运算中的两个参数都是字符串，则按照字符串进行比较。<br>（3）若两个参数均为整数，则按照整数进行比较。<br>（4）若用字符串和数字进行相等判断，则MySQL可以自动将字符串转换为数字。</p>
<p><strong>安全等于运算符（&lt;&#x3D;&gt;）</strong><br>这个操作符和&#x3D;操作符执行相同的比较操作，不过&lt;&#x3D;&gt;可以用来判断NULL值。在两个操作数均为NULL时，其返回值为1，而不为NULL；当一个操作数为NULL时，其返回值为0，而不为NULL。</p>
<p><strong>不等于运算符（&lt;&gt;或者!&#x3D;）</strong><br>‘&lt;&gt;’或者‘!&#x3D;’用于判断数字、字符串、表达式不相等的判断：如果不相等，返回值为1；否则返回值为0。这两个运算符不能用于判断空值NULL。</p>
<p><strong>小于等于运算符（&lt;&#x3D;）</strong><br>‘&lt;&#x3D;’用来判断左边的操作数是否小于等于右边的操作数：如果小于等于，返回值为1；否则返回值为0。‘&lt;&#x3D;’不能用于判断空值NULL。</p>
<p><strong>小于运算符（&lt;）</strong><br>‘&lt;’运算符用来判断左边的操作数是否小于右边的操作数：如果小于，返回值为1；否则返回值为0。‘&lt;’不能用于判断空值NULL。</p>
<p><strong>IS NULL(ISNULL)和IS NOT NULL运算符</strong><br>IS NULL和ISNULL检验一个值是否为NULL：如果为NULL，返回值为1；否则返回值为0。IS NOT NULL检验一个值是否为非NULL：如果是非NULL，返回值为1；否则返回值为0。</p>
<p><strong>BETWEEN AND运算符</strong><br>语法格式为：expr BETWEEN min AND max。假如expr大于等于min且小于等于max，则BETWEEN的返回值为1，否则返回值为0。<br><strong>LEAST运算符</strong><br>语法格式为：LEAST(值1，值2，…，值n)。其中，“值n”表示参数列表中有n个值。在有两个或多个参数的情况下，返回最小值。假如任意一个自变量为NULL，则LEAST()的返回值为NULL。</p>
<p><strong>GREATEST (value1,value2,…)</strong><br>语法格式为：GREATEST(值1，值2，…，值n)。其中，n表示参数列表中有n个值。当有两个或多个参数时，返回值为最大值。假如任意一个自变量为NULL，则GREATEST()的返回值为NULL。</p>
<p><strong>IN、NOT IN运算符</strong><br>IN运算符用来判断操作数是否为IN列表中的其中一个值：如果是，返回值为1；否则返回值为0。NOT IN运算符用来判断表达式是否为IN列表中的其中一个值：如果不是，返回值为1；否则返回值为0。</p>
<p><strong>LIKELIKE运算符</strong><br>用来匹配字符串，语法格式为：expr LIKE匹配条件。如果expr满足匹配条件，则返回值为1（TRUE）；如果不匹配，则返回值为0（FALSE）。expr或匹配条件中任何一个为NULL，则结果为NULL。</p>
<p>LIKE运算符在进行匹配时，可以使用下面通配符(通配符也是用在过滤语句中，但它只能用于文本字段)：</p>
<ul>
<li>% 匹配 &gt;&#x3D;0 个任意字符；</li>
<li>_ 匹配 &#x3D;&#x3D;1 个任意字符；</li>
<li>[] 可以匹配集合内的字符，例如 [ab] 将匹配字符 a 或者 b。用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符。</li>
</ul>
<p>使用 Like 来进行通配符匹配。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="keyword">LIKE</span> <span class="string">&#x27;[^AB]%&#x27;</span>; <span class="comment">-- 不以 A 和 B 开头的任意文本</span></span><br></pre></td></tr></table></figure>
<p><strong>REGEXPREGEXP运算符</strong><br>用来匹配字符串，语法格式为：expr REGEXP匹配条件。如果expr满足匹配条件，返回1；如果不满足，则返回0。若expr或匹配条件任意一个为NULL，则结果为NULL。</p>
<p>REGEXP运算符在进行匹配时，常用的有下面几种通配符：<br>（1）‘^’匹配以该字符后面的字符开头的字符串。<br>（2）‘$’匹配以该字符后面的字符结尾的字符串。<br>（3）‘.’匹配任何一个单字符。<br>（4）“[…]”匹配在方括号内的任何字符。例如，“[abc]”匹配“a”“b”或“c”。为了命名字符的范围，使用一个‘-’。“[a-z]”匹配任何字母，而“[0-9]”匹配任何数字。<br>（5）‘<em>’匹配零个或多个在它前面的字符。例如，“x</em>”匹配任何数量的‘x’字符，“[0-9]<em>”匹配任何数量的数字，而“</em>”匹配任何数量的任何字符。</p>
<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>逻辑运算符的求值所得结果均为1（TRUE）、0（FALSE），这类运算符有逻辑非（NOT或者!）、逻辑与（AND或者&amp;&amp;）、逻辑或（OR或者||）、逻辑异或（XOR）。</p>
<p><strong>NOT或者!</strong><br>逻辑非运算符NOT或者！表示当操作数为0时，所得值为1；当操作数为非零值时，所得值为0；当操作数为NULL时，所得的返回值为NULL。</p>
<div class="tip">
使用运算符运算时，一定要注意不同运算符的优先级不同。如果不能确定计算顺序，最好使用括号，以保证运算结果的正确。
</div>

<p><strong>AND或者&amp;&amp;</strong><br>逻辑与运算符AND或者&amp;&amp;表示当所有操作数均为非零值并且不为NULL时，计算所得结果为1；当一个或多个操作数为0时，所得结果为0；其余情况返回值为NULL。</p>
<div class="tip">
“AND”运算符可以有多个操作数，需要注意的是：多个操作数运算时，AND两边一定要使用空格隔开，不然会影响结果的正确性。
</div>

<p><strong>OR或者||</strong><br>逻辑或运算符OR或者||表示当两个操作数均为非NULL值且任意一个操作数为非零值时，结果为1，否则结果为0；当有一个操作数为NULL，且另一个操作数为非零值时，则结果为1，否则结果为NULL；当两个操作数均为NULL时，则所得结果为NULL。</p>
<p><strong>XOR</strong><br>逻辑异或运算符XOR表示当任意一个操作数为NULL时，返回值为NULL；对于非NULL的操作数，如果两个操作数都是非0值或者都是0值，则返回结果为0；如果一个为0值、另一个为非0值，返回结果为1。</p>
<div class="tip">
a XOR b的计算等同于(a AND (NOT b))或者((NOT a)AND b)。
</div>

<h4 id="位运算符位"><a href="#位运算符位" class="headerlink" title="位运算符位"></a>位运算符位</h4><p>运算符参与运算的操作数按二进制位进行运算，包括位与（&amp;）、位或（|）、位非（~）、位异或（^）、左移（&lt;&lt;）、右移（&gt;&gt;）6种。</p>
<p><strong>位或运算符（|）</strong><br>位或运算的实质是将参与运算的几个数据按照对应的二进制数逐位进行逻辑或运算。对应的二进制位有一个或两个为1则该位的运算结果为1，否则为0。</p>
<p><strong>位与运算符（&amp;）</strong><br>位与运算的实质是将参与运算的几个操作数按照对应的二进制数逐位进行逻辑与运算。对应的二进制位都为1则该位的运算结果为1，否则为0。</p>
<p><strong>位异或运算符（^）</strong><br>位异或运算的实质是将参与运算的两个数据按照对应的二进制数逐位进行逻辑异或运算。对应位的二进制数不同时，对应位的结果才为1。如果两个对应位数都为0或者都为1，则对应位的结果为0。</p>
<p><strong>位左移运算符（&lt;&lt;）</strong><br>位左移运算符&lt;&lt;使指定的二进制值的所有位都左移指定的位数。左移指定位数之后，左边高位的数值将被移出并丢弃，右边低位空出的位置用0补齐。语法格式为：expr&lt;&lt;n。其中，n指定值expr要移位的位数。</p>
<p><strong>位右移运算符（&gt;&gt;）</strong><br>位右移运算符&gt;&gt;使指定的二进制值的所有位都右移指定的位数。右移指定位数之后，右边低位的数值将被移出并丢弃，左边高位空出的位置用0补齐。语法格式为：expr&gt;&gt;n。其中，n指定值expr要移位的位数。</p>
<p><strong>位取反运算符（~）</strong><br>位取反运算的实质是将参与运算的数据按照对应的二进制数逐位反转，即1取反后变为0、0取反后变为1。</p>
<p>在逻辑运算5&amp;<del>1中，由于位取反运算符‘</del>’的级别高于位与运算符‘&amp;’，因此先对1进行取反操作，取反之后，除了最低位为0外其他位都为1，即1110，然后与十进制数值5进行与运算，结果为0100，即整数4。</p>
<div class="tip">
MySQL经过位运算之后的数值是一个64位的无符号整数，1的二进制数值表示为最右边位为1、其他位均为0，取反操作之后，除了最低位为0外，其他位均变为1。
</div>

<h4 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h4><img src="/blog/p/e4d2e8fb/Mysql%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7.png" class="" title="Mysql运算符的优先级">

<p>可以看到，不同运算符的优先级是不同的。一般情况下，级别高的运算符先进行计算，如果级别相同，MySQL按表达式的顺序从左到右依次计算。当然，在无法确定优先级的情况下，可以使用圆括号（）来改变优先级，并且这样会使计算过程更加清晰。</p>
<h4 id="运算符的基本使用"><a href="#运算符的基本使用" class="headerlink" title="运算符的基本使用"></a>运算符的基本使用</h4><p>TODO：这里不做过多介绍，实际业务中，脚本层实现运算。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><blockquote>
<p>数学函数主要用来处理数值数据，主要的数学函数有绝对值函数、三角函数（包括正弦函数、余弦函数、正切函数、余切函数等）、对数函数、随机数函数等。在有错误产生时，数学函数将会返回空值NULL。</p>
</blockquote>
<p>ABS(X)返回X的绝对值。<br>PI()返回圆周率π的值。默认的显示小数位数是6位。<br>SQRT(x)返回非负数x的二次方根。<br>MOD(x,y)返回x被y除后的余数，MOD()对于带有小数部分的数值也起作用，它返回除法运算后的精确余数。<br>CEIL(x)和CEILING(x)的意义相同，返回不小于x的最小整数值，返回值转化为一个BIGINT。<br>FLOOR(x)返回不大于x的最大整数值，返回值转化为一个BIGINT。<br>RAND(x)返回一个随机浮点值v，范围在0到1之间（0 ≤ v ≤ 1.0）。若已指定一个整数参数x，则它被用作种子值，用来产生重复序列。<br>ROUND(x)返回最接近于参数x的整数，对x值进行四舍五入。<br>ROUND(x,y)返回最接近于参数x的数，其值保留到小数点后面y位，若y为负值，则将保留x值到小数点左边y位。</p>
<div class="tip">
y值为负数时，保留的小数点左边的相应位数直接保存为0，不进行四舍五入。
</div>

<p>TRUNCATE(x,y)返回被舍去至小数点后y位的数字x。若y的值为0，则结果不带有小数点或不带有小数部分。若y设为负数，则截去（归零）x小数点左起第y位开始后面所有低位的值。<br>TRUNCATE(1.31,1)和TRUNCATE(1.99,1)都保留小数点后1位数字，返回值分别为1.3和1.9；TRUNCATE(1.99,0)返回整数部分值1；TRUNCATE(19.99,-1)截去小数点左边第1位后面的值，并将整数部分的1位数字置0，结果为10。</p>
<div class="tip">
ROUND(x,y)函数在截取值的时候会四舍五入，而TRUNCATE (x,y)直接截取值，并不进行四舍五入。
</div>

<p>SIGN(x)返回参数的符号，x的值为负、零或正时返回结果依次为-1、0或1。</p>
<p>幂运算函数 POW(x,y)或者POWER(x,y)函数返回x的y次乘方的结果值。<br>幂运算函数 EXP(x)返回e的x乘方后的值。</p>
<p>对数运算函数 LOG(x)返回x的自然对数，x相对于基数e的对数。<br>对数运算函数 LOG10(x)返回x的基数为10的对数。</p>
<p>角度与弧度相互转换的函数 RADIANS(x)将参数x由角度转化为弧度。<br>角度与弧度相互转换的函数 DEGREES(x)将参数x由弧度转化为角度。</p>
<p>正弦函数 SIN(x)返回x正弦，其中x为弧度值。<br>反正弦函数 ASIN(x)返回x的反正弦，即正弦为x的值。若x不在-1到1的范围之内，则返回NULL。</p>
<p>余弦函数 COS(x)返回x的余弦，其中x为弧度值。<br>反余弦函数 ACOS(x)返回x的反余弦，即余弦是x的值。若x不在-1~1的范围之内，则返回NULL。</p>
<p>正切函数 TAN(x)返回x的正切，其中x为给定的弧度值。<br>反正切函数 ATAN(x)返回x的反正切，即正切为x的值。<br>余切函数 COT(x)返回x的余切。</p>
<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><blockquote>
<p>字符串函数主要用来处理数据库中的字符串数据。MySQL中的字符串函数有计算字符串长度函数、字符串合并函数、字符串替换函数、字符串比较函数、查找指定字符串位置函数等。</p>
</blockquote>
<p>TODO待补充…</p>
<h3 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h3><blockquote>
<p>日期和时间函数主要用来处理日期和时间值，一般的日期函数除了使用DATE类型的参数外，也可以使用DATETIME或者TIMESTAMP类型的参数，但会忽略这些值的时间部分。相同的，以TIME类型值为参数的函数，可以接受TIMESTAMP类型的参数，但会忽略日期部分，许多日期函数可以同时接受数字和字符串类型的两种参数</p>
</blockquote>
<p>TODO待补充…</p>
<h3 id="条件判断函数"><a href="#条件判断函数" class="headerlink" title="条件判断函数"></a>条件判断函数</h3><blockquote>
<p>条件判断函数也称为控制流程函数，根据满足的不同条件，执行相应的流程。MySQL中进行条件判断的函数有IF、IFNULL和CASE。</p>
</blockquote>
<p>TODO待补充…</p>
<h3 id="系统信息函数"><a href="#系统信息函数" class="headerlink" title="系统信息函数"></a>系统信息函数</h3><blockquote>
<p>MySQL中的系统信息有数据库的版本号、当前用户名和连接数、系统字符集、最后一个自动生成的ID值等。</p>
</blockquote>
<p>TODO待补充…</p>
<h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><blockquote>
<p>本节将要介绍的函数不能笼统地分为哪一类，但是这些函数也非常有用，例如重复指定操作函数、改变字符集函数、IP地址与数字转换函数等。</p>
</blockquote>
<p>TODO待补充…</p>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="基本查询语句"><a href="#基本查询语句" class="headerlink" title="基本查询语句"></a>基本查询语句</h3><img src="/blog/p/e4d2e8fb/Mysql%E5%9F%BA%E6%9C%AC%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5.png" class="" title="Mysql基本查询语句">
<p>各条子句的含义如下：</p>
<ul>
<li>{* | &lt;字段列表&gt;}包含星号通配符和字段列表，表示查询的字段。其中，字段列表至少包含一个字段名称，如果要查询多个字段，多个字段之间用逗号隔开，最后一个字段后不加逗号。</li>
<li>FROM &lt;表1&gt;,&lt;表2&gt;…，表1和表2表示查询数据的来源，可以是单个或者多个。</li>
<li>WHERE子句是可选项，如果选择该项，将限定查询行必须满足的查询条件。</li>
<li>GROUP BY &lt;字段&gt;，该子句告诉MySQL如何显示查询出来的数据，并按照指定的字段分组。</li>
<li>[ORDER BY &lt;字段&gt;]，该子句告诉MySQL按什么样的顺序显示查询出来的数据，可以进行的排序有升序（ASC）、降序（DESC）。</li>
<li>[LIMIT [<offset>,] <row count>]，该子句告诉MySQL每次显示查询出来的数据条数。</li>
</ul>
<h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询所有字段</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"># 查询指定字段 指定条件 排序</span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,...字段n <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件<span class="number">1</span> <span class="keyword">and</span> 条件n <span class="keyword">order</span> <span class="keyword">by</span> 排序字段<span class="number">1</span> <span class="keyword">desc</span>,排序字段<span class="number">2</span> <span class="keyword">asc</span>(默认) <span class="keyword">group</span> <span class="keyword">by</span> 分组字段<span class="number">1</span>，分组字段n limit [位置偏移量,] 行数;</span><br><span class="line"></span><br><span class="line"># 条件</span><br><span class="line">## <span class="keyword">IN</span> 和 <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line"><span class="keyword">where</span> id <span class="keyword">IN</span>(<span class="number">100</span>,<span class="number">101</span>)</span><br><span class="line"><span class="keyword">where</span> id <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="number">100</span>,<span class="number">101</span>)</span><br><span class="line"></span><br><span class="line">## <span class="keyword">IS</span> <span class="keyword">NULL</span> 和 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">where</span> age <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">where</span> age <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line">## 条件 范围查询</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">scope</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">Like</span>字符匹配</span><br><span class="line">## <span class="operator">%</span> 匹配任意长度的字符，甚至包括零字符</span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;li%&#x27;</span> </span><br><span class="line">## _ 一次只能匹配任意一个字符</span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;li%&#x27;</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">OR</span> 和 <span class="keyword">AND</span>，<span class="keyword">AND</span>优先级高</span><br><span class="line"></span><br><span class="line"># 去重 <span class="keyword">DISTINCT</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> 字段名 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"># 分组 <span class="keyword">GROUP</span> <span class="keyword">BY</span>，通常和集合函数一起使用，比如MAX MIN COUNT SUM AVG</span><br><span class="line"></span><br><span class="line"># 分组<span class="operator">-</span>过滤 <span class="keyword">HAVING</span>，和分组一起使用。与<span class="keyword">where</span>的区别：<span class="keyword">HAVING</span>在数据分组之后进行过滤来选择分组，</span><br><span class="line">## 而<span class="keyword">WHERE</span>在分组之前来选择记录。另外，<span class="keyword">WHERE</span>排除的记录不再包括在分组中。</span><br><span class="line"></span><br><span class="line"># 分组<span class="operator">-</span>统计记录数量 <span class="keyword">with</span> <span class="keyword">rollup</span>：在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量。</span><br><span class="line"></span><br><span class="line"># 分组<span class="operator">+</span>排序。 <span class="keyword">order</span> <span class="keyword">by</span>和<span class="keyword">with</span> <span class="keyword">rollup</span>互斥，无法同时使用</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>把具有相同的数据值的行放在同一组中。</p>
<p>可以对同一分组数据使用汇总函数进行处理，例如求分组数据的平均值等。</p>
<p>指定的分组字段除了能按该字段进行分组，也会自动按该字段进行排序。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col, <span class="built_in">COUNT</span>(*) <span class="keyword">AS</span> num</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> col;</span><br></pre></td></tr></table></figure>

<p>GROUP BY 自动按分组字段进行排序，ORDER BY 也可以按汇总字段来进行排序。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col, <span class="built_in">COUNT</span>(*) <span class="keyword">AS</span> num</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> col</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> num;</span><br></pre></td></tr></table></figure>

<p>WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col, <span class="built_in">COUNT</span>(*) <span class="keyword">AS</span> num</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> col</span><br><span class="line"><span class="keyword">HAVING</span> num &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>分组规定：</p>
<ul>
<li>GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；</li>
<li>除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；</li>
<li>NULL 的行会单独分为一组；</li>
<li>大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。</li>
</ul>
<h3 id="集合函数查询"><a href="#集合函数查询" class="headerlink" title="集合函数查询"></a>集合函数查询</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>AVG()</td>
<td>返回某列的平均值</td>
</tr>
<tr>
<td>COUNT()</td>
<td>返回某列的行数</td>
</tr>
<tr>
<td>MAX()</td>
<td>返回某列的最大值</td>
</tr>
<tr>
<td>MIN()</td>
<td>返回某列的最小值</td>
</tr>
<tr>
<td>SUM()</td>
<td>返回某列值之和</td>
</tr>
</tbody></table>
<blockquote>
<p>Tips:AVG() 会忽略 NULL 行。</p>
</blockquote>
<h4 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h4><p>COUNT()函数统计数据表中包含的记录行的总数，或者根据查询结果返回列中包含的数据行数。其使用方法有两种：</p>
<ul>
<li>COUNT(*)计算表中总的行数，不管某列是否有数值或者为空值。</li>
<li>COUNT(字段名)计算指定列下总的行数，计算时将忽略空值的行。</li>
</ul>
<p>注意事项： 两个例子中不同的数值说明了两种方式在计算总数的时候对待NULL值的方式不同：</p>
<ul>
<li>指定列的值为空的行被COUNT()函数忽略；</li>
<li>如果不指定列，而在COUNT()函数中使用星号“*”，则所有记录都不忽略。</li>
</ul>
<h4 id="SUM"><a href="#SUM" class="headerlink" title="SUM"></a>SUM</h4><p>SUM()函数在计算时，忽略列值为NULL的行。</p>
<h4 id="AVG"><a href="#AVG" class="headerlink" title="AVG"></a>AVG</h4><p>AVG()函数使用时，其参数为要计算的列名称，如果要得到多个列的多个平均值，则需要在每一列上使用AVG()函数。</p>
<h4 id="MAX"><a href="#MAX" class="headerlink" title="MAX"></a>MAX</h4><p>MAX()函数除了用来找出最大的列值或日期值之外，还可以返回任意列中的最大值，包括返回字符类型的最大值。在对字符类型数据进行比较时，按照字符的ASCII码值大小进行比较，从a~z，a的ASCII码最小，z的最大。在比较时，先比较第一个字母，如果相等，继续比较下一个字符，一直到两个字符不相等或者字符结束为止。例如，‘b’与‘t’比较时，‘t’为最大值；“bcd”与“bca”比较时，“bcd”为最大值。</p>
<h4 id="MIN"><a href="#MIN" class="headerlink" title="MIN"></a>MIN</h4><p>无</p>
<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON 而不是 WHERE。</p>
<p>连接可以替换子查询，并且比子查询的效率一般会更快。</p>
<p>可以用 AS 给列名、计算字段和表名取别名，给表名取别名是为了简化 SQL 语句以及连接相同表。</p>
<h4 id="内连接-等值连接-INNER-JOIN"><a href="#内连接-等值连接-INNER-JOIN" class="headerlink" title="内连接(等值连接) INNER JOIN"></a>内连接(等值连接) INNER JOIN</h4><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.<span class="keyword">value</span>, B.<span class="keyword">value</span></span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.<span class="keyword">key</span> = B.<span class="keyword">key</span>;</span><br></pre></td></tr></table></figure>

<p>可以不明确使用 INNER JOIN，而使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.<span class="keyword">value</span>, B.<span class="keyword">value</span></span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A, tableb <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">WHERE</span> A.<span class="keyword">key</span> = B.<span class="keyword">key</span>;</span><br></pre></td></tr></table></figure>

<p>注意事项：<br>使用WHERE子句定义连接条件比较简单明了，而INNER JOIN语法是ANSI SQL的标准规范，使用INNER JOIN连接语法能够确保不会忘记连接条件，而且WHERE子句在某些时候会影响查询的性能。</p>
<h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>外连接保留了没有关联的那些行。分为左外连接，右外连接以及全外连接，左外连接就是保留左表没有关联的行。</p>
<h5 id="左连接-left-outer-join"><a href="#左连接-left-outer-join" class="headerlink" title="左连接(left (outer) join)"></a>左连接(left (outer) join)</h5><blockquote>
<p>以左表为主，先查询出 <code>左表</code>，按照ON后的关联条件匹配 <code>右表</code>，没有匹配到的用NULL填充</p>
</blockquote>
<h5 id="右连接-right-join"><a href="#右连接-right-join" class="headerlink" title="右连接(right join)"></a>右连接(right join)</h5><blockquote>
<p>以左表为主，先查询出 <code>右表</code>，按照ON后的关联条件匹配 <code>左表</code>，没有匹配到的用NULL填充</p>
</blockquote>
<p>检索所有顾客的订单信息，包括还没有订单信息的顾客。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Customer.cust_name, Orders.order_id</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id = Orders.cust_id;</span><br></pre></td></tr></table></figure>
<p>customers 表：</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>c</td>
</tr>
</tbody></table>
<p>orders 表：</p>
<table>
<thead>
<tr>
<th>order_id</th>
<th>cust_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>3</td>
</tr>
</tbody></table>
<p>结果：</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
<th>order_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>a</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>a</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>c</td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td>c</td>
<td>4</td>
</tr>
<tr>
<td>2</td>
<td>b</td>
<td>Null</td>
</tr>
</tbody></table>
<h4 id="复合条件连接查询"><a href="#复合条件连接查询" class="headerlink" title="复合条件连接查询"></a>复合条件连接查询</h4><p>复合条件连接查询是在连接查询的过程中，通过添加过滤条件限制查询的结果，使查询的结果更加准确。</p>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。</p>
<p>在SELECT子句中先计算子查询，子查询结果作为外层另一个查询的过滤条件，查询可以基于一个表或者多个表。子查询中常用的操作符有ANY（SOME）、ALL、IN、EXISTS。 子查询可以添加到SELECT、UPDATE和DELETE语句中，而且可以进行多层嵌套。</p>
<p>子查询中也可以使用比较运算符，如“&lt;”“&lt;&#x3D;”“&gt;”“&gt;&#x3D;”和“!&#x3D;”等。本节将介绍如何在SELECT语句中嵌套子查询。</p>
<p>子查询中只能返回一个字段的数据。 可以将子查询的结果作为 WHRER 语句的过滤条件：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable1</span><br><span class="line"><span class="keyword">WHERE</span> col1 <span class="keyword">IN</span> (<span class="keyword">SELECT</span> col2</span><br><span class="line"><span class="keyword">FROM</span> mytable2);</span><br></pre></td></tr></table></figure>

<p>下面的语句可以检索出客户的订单数量，子查询语句会对第一个查询检索出的每个客户执行一次：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> Orders.cust_id = Customers.cust_id)</span><br><span class="line"><span class="keyword">AS</span> orders_num</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></table></figure>

<h4 id="带ANY、SOME关键字的子查询"><a href="#带ANY、SOME关键字的子查询" class="headerlink" title="带ANY、SOME关键字的子查询"></a>带ANY、SOME关键字的子查询</h4><p>ANY和SOME关键字是同义词，表示满足其中任一条件，它们允许创建一个表达式对子查询的返回值列表进行比较，只要满足内层子查询中的任何一个比较条件，就返回一个结果作为外层查询的条件。</p>
<h4 id="带ALL关键字的子查询"><a href="#带ALL关键字的子查询" class="headerlink" title="带ALL关键字的子查询"></a>带ALL关键字的子查询</h4><p>ALL关键字与ANY和SOME不同，使用ALL时需要同时满足所有内层查询的条件。例如，修改前面的例子，用ALL关键字替换ANY。ALL关键字接在一个比较操作符的后面，表示与子查询返回的所有值比较为TRUE，则返回TRUE。</p>
<h4 id="带EXISTS关键字的子查询"><a href="#带EXISTS关键字的子查询" class="headerlink" title="带EXISTS关键字的子查询"></a>带EXISTS关键字的子查询</h4><p>EXISTS关键字后面的参数是一个任意的子查询，系统对子查询进行运算以判断它是否返回行，如果至少返回一行，那么EXISTS的结果为true，此时外层查询语句将进行查询；如果子查询没有返回任何行，那么EXISTS返回的结果是false，此时外层语句将不进行查询。</p>
<p>注意事项：EXISTS和NOT EXISTS的结果只取决于是否会返回行，而不取决于这些行的内容，所以这个子查询输入列表通常是无关紧要的。</p>
<h4 id="带IN关键字的子查询"><a href="#带IN关键字的子查询" class="headerlink" title="带IN关键字的子查询"></a>带IN关键字的子查询</h4><p>IN关键字进行子查询时，内层查询语句仅仅返回一个数据列，这个数据列里的值将提供给外层查询语句进行比较操作。</p>
<p>注意事项：子查询的功能也可以通过连接查询完成，但是子查询使得MySQL代码更容易阅读和编写。</p>
<h4 id="带比较运算符的子查询"><a href="#带比较运算符的子查询" class="headerlink" title="带比较运算符的子查询"></a>带比较运算符的子查询</h4><p>在前面介绍的带ANY、ALL关键字的子查询时使用了“&gt;”比较运算符，子查询时还可以使用其他的比较运算符，如“&lt;”“&lt;&#x3D;”“&#x3D;”“&gt;&#x3D;”和“!&#x3D;”等。</p>
<h4 id="合并查询结果"><a href="#合并查询结果" class="headerlink" title="合并查询结果"></a>合并查询结果</h4><p>利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同。各个SELECT语句之间使用UNION或UNION ALL关键字分隔。UNION不使用关键字ALL，执行的时候删除重复的记录，所有返回的行都是唯一的；使用关键字ALL的作用是不删除重复行也不对结果进行自动排序。</p>
<ul>
<li>UNION ALL 效率高于 UNION</li>
</ul>
<p>(1)UNION</p>
<blockquote>
<p>把多个结果集集中在一起，UNION前的结果为基准<br>列数要相等，相同的记录行会合并<br>合并重复项</p>
</blockquote>
<p>(2)UNION ALL</p>
<blockquote>
<p>显示重复项</p>
</blockquote>
<h4 id="使用正则表达式查询"><a href="#使用正则表达式查询" class="headerlink" title="使用正则表达式查询"></a>使用正则表达式查询</h4><img src="/blog/p/e4d2e8fb/Mysql%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D%E5%88%97%E8%A1%A8.png" class="" title="Mysql正则表达式常用字符匹配列表">

<h5 id="查询以特定字符或字符串开头的记录字符"><a href="#查询以特定字符或字符串开头的记录字符" class="headerlink" title="查询以特定字符或字符串开头的记录字符"></a>查询以特定字符或字符串开头的记录字符</h5><p>‘^’匹配以特定字符或者字符串开头的文本。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> furits <span class="keyword">where</span> f_name REGEXP <span class="string">&#x27;^b&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h5 id="查询以特定字符或字符串结尾的记录字符"><a href="#查询以特定字符或字符串结尾的记录字符" class="headerlink" title="查询以特定字符或字符串结尾的记录字符"></a>查询以特定字符或字符串结尾的记录字符</h5><p>‘$’匹配以特定字符或者字符串结尾的文本。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> furits <span class="keyword">where</span> f_name REGEXP <span class="string">&#x27;y$&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="用符号”-”来替代字符串中的任意一个字符字符"><a href="#用符号”-”来替代字符串中的任意一个字符字符" class="headerlink" title="用符号”.”来替代字符串中的任意一个字符字符"></a>用符号”.”来替代字符串中的任意一个字符字符</h5><p>‘.’匹配任意一个字符。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> furits <span class="keyword">where</span> f_name REGEXP <span class="string">&#x27;a.g&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="使用”-”和”-”来匹配多个字符星号"><a href="#使用”-”和”-”来匹配多个字符星号" class="headerlink" title="使用”*”和”+”来匹配多个字符星号"></a>使用”*”和”+”来匹配多个字符星号</h5><p>‘*’匹配前面的字符任意多次，包括0次。加号‘+’匹配前面的字符至少一次。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> furits <span class="keyword">where</span> f_name REGEXP <span class="string">&#x27;^ba*&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="匹配指定字符串"><a href="#匹配指定字符串" class="headerlink" title="匹配指定字符串"></a>匹配指定字符串</h5><p>正则表达式可以匹配指定字符串，只要这个字符串在查询文本中即可，如要匹配多个字符串，多个字符串之间使用分隔符‘|’隔开。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> furits <span class="keyword">where</span> f_name REGEXP <span class="string">&#x27;on&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>注意事项：LIKE运算符也可以匹配指定的字符串，但与REGEXP不同，LIKE匹配的字符串如果在文本中间出现，则找不到它，相应的行也不会返回。REGEXP在文本内进行匹配，如果被匹配的字符串在文本中出现，REGEXP将会找到它，相应的行也会被返回。</p>
<h5 id="匹配指定字符中的任意一个方括号"><a href="#匹配指定字符中的任意一个方括号" class="headerlink" title="匹配指定字符中的任意一个方括号"></a>匹配指定字符中的任意一个方括号</h5><p>“[]”指定一个字符集合，只匹配其中任何一个字符，即为所查找的文本。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> furits <span class="keyword">where</span> f_name REGEXP <span class="string">&#x27;[ot]&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> furits <span class="keyword">where</span> f_name REGEXP <span class="string">&#x27;[456]&#x27;</span>; # 指定数值集合</span><br></pre></td></tr></table></figure>
<h5 id="匹配指定字符以外的字符"><a href="#匹配指定字符以外的字符" class="headerlink" title="匹配指定字符以外的字符"></a>匹配指定字符以外的字符</h5><p>“[^字符集合]”匹配不在指定集合中的任何字符。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 匹配指定字符以外的字符“[<span class="operator">^</span>字符集合]”匹配不在指定集合中的任何字符。</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> furits <span class="keyword">where</span> f_name REGEXP <span class="string">&#x27;[^a-e1-2]&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>返回记录中的f_id字段值中包含指定字母和数字以外的值，如s、m、o、t等，这些字母均不在a<del>e与1</del>2之间，满足匹配条件。</p>
<h5 id="使用-n-或者-n-m-来指定字符串连续出现的次数"><a href="#使用-n-或者-n-m-来指定字符串连续出现的次数" class="headerlink" title="使用{n,}或者{n,m}来指定字符串连续出现的次数"></a>使用{n,}或者{n,m}来指定字符串连续出现的次数</h5><p>“字符串{n,}”表示至少匹配n次前面的字符；“字符串{n,m}”表示匹配前面的字符串不少于n次，不多于m次。例如，a{2,}表示字母a连续出现至少2次，也可以大于2次；a{2,4}表示字母a连续出现最少2次，最多不能超过4次。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询f_name字段值出现字母‘x’至少<span class="number">2</span>次的记录</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> furits <span class="keyword">where</span> f_name REGEXP <span class="string">&#x27;x&#123;2,&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>f_name字段的“xxxx”包含了4个字母‘x’，“xxtt”包含两个字母‘x’，均为满足匹配条件的记录。</p>
<h2 id="插入、更新、删除数据"><a href="#插入、更新、删除数据" class="headerlink" title="插入、更新、删除数据"></a>插入、更新、删除数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table_name (列_list) <span class="keyword">values</span>(值_list);</span><br><span class="line"></span><br><span class="line">## 指定字段插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table_name (列<span class="number">1</span>,...列n) <span class="keyword">values</span>(列<span class="number">1</span>的值,...列n的值);</span><br><span class="line"></span><br><span class="line"># 同时插入多条记录</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table_name (列_list)</span><br><span class="line"> <span class="keyword">values</span>(值_list),</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">values</span>(值_list);</span><br><span class="line"></span><br><span class="line"># 更新数据</span><br><span class="line"><span class="keyword">update</span> table_name <span class="keyword">set</span> 字段<span class="number">1</span><span class="operator">=</span>值,...字段n<span class="operator">=</span>值 <span class="keyword">where</span> 条件<span class="number">1</span> <span class="keyword">and</span> 条件n;</span><br><span class="line"></span><br><span class="line"># 删除数据</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> 条件<span class="number">1</span> <span class="keyword">and</span> 条件n;</span><br></pre></td></tr></table></figure>


<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote>
<p>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可提高数据库中特定数据的查询速度。本节将介绍索引的含义、分类和设计原则。</p>
</blockquote>
<p>InnDB文件是在mysql&#x2F;data&#x2F;数据库名&#x2F;*</p>
<p>优势</p>
<ul>
<li>减少服务器需要扫描的数据量</li>
<li>帮助服务器避免排序和临时表</li>
<li>将随机I&#x2F;O变 顺序I&#x2F;O</li>
<li>提高查询速度，降低写的速度，占用磁盘(文件存储)</li>
</ul>
<p>缺点</p>
<ul>
<li>创建索引和维护索引要耗费时间，并且随着数据量的增加所耗费的时间也会增加。</li>
<li>索引需要占磁盘空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果有大量的索引，索引文件可能比数据文件更快达到最大文件尺寸。</li>
<li>当对表中的数据进行增加、删除和修改的时候，索引也要动态地维护，这样就降低了数据的维护速度。</li>
</ul>
<h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><h4 id="普通索引-和-唯一索引"><a href="#普通索引-和-唯一索引" class="headerlink" title="普通索引 和 唯一索引"></a>普通索引 和 唯一索引</h4><p>普通索引是MySQL中的基本索引类型，允许在定义索引的列中插入重复值和空值。唯一索引要求索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。主键索引是一种特殊的唯一索引，不允许有空值。</p>
<p>唯一索引：和前面的“普通索引”基本相同，但有一个区别：索引列的所有值都只能出现一次，即必须唯一<br><code>create unique index idx_articl on article(category_id);</code></p>
<h4 id="单列索引-和-组合索引-联合索引"><a href="#单列索引-和-组合索引-联合索引" class="headerlink" title="单列索引 和 组合索引(联合索引)"></a>单列索引 和 组合索引(联合索引)</h4><ul>
<li>遵循 <b>前缀原则</b></li>
<li>将多个列组合在一起创建索引，可以覆盖多个列</li>
<li>将选择性较高的列放到索引的最前列</li>
</ul>
<p><code>create index idx_articl_ccv on article(category_id,comments,view);</code></p>
<p>单列索引即一个索引只包含单个列，一个表可以有多个单列索引。组合索引是指在表的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用。使用组合索引时遵循最左前缀集合。</p>
<h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><p>(MyISAM才能用)(不常用)(只能对英文进行全文检索)(可以使用全文检索引擎)</p>
<p>全文索引类型为FULLTEXT，在定义索引的列上支持值的全文查找，允许在这些索引列中插入重复值和空值。全文索引可以在CHAR、VARCHAR或者TEXT类型的列上创建。MySQL中只有MyISAM存储引擎支持全文索引。</p>
<h4 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h4><p>空间索引是对空间数据类型的字段建立的索引，MySQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING和POLYGON。MySQL使用SPATIAL关键字进行扩展，使得能够用创建正规索引类似的语法创建空间索引。创建空间索引的列，必须将其声明为NOT NULL，空间索引只能在存储引擎为MyISAM的表中创建。</p>
<h3 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h3><p>索引设计不合理或者缺少索引都会对数据库和应用程序的性能造成障碍。高效的索引对于获得良好的性能非常重要。设计索引时，应该考虑以下准则：<br>（1）索引并非越多越好，一个表中如有大量的索引，不仅占用磁盘空间，还会影响INSERT、DELETE、UPDATE等语句的性能，因为在表中的数据更改时，索引也会进行调整和更新。<br>（2）避免对经常更新的表进行过多的索引，并且索引中的列要尽可能少。应该经常用于查询的字段创建索引，但要避免添加不必要的字段。<br>（3）数据量小的表最好不要使用索引，由于数据较少，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果。<br>（4）在条件表达式中经常用到的不同值较多的列上建立索引，在不同值很少的列上不要建立索引。比如在学生表的“性别”字段上只有“男”与“女”两个不同值，因此就无须建立索引，如果建立索引不但不会提高查询效率，反而会严重降低数据更新速度。<br>（5）当唯一性是某种数据本身的特征时，指定唯一索引。使用唯一索引需能确保定义的列的数据完整性，以提高查询速度。<br>（6）在频繁进行排序或分组（即进行group by或order by操作）的列上建立索引，如果待排序的列有多个，可以在这些列上建立组合索引。</p>
<h3 id="索引简介"><a href="#索引简介" class="headerlink" title="索引简介"></a>索引简介</h3><p>MySQL支持多种方法在单个或多个列上创建索引：在创建表的定义语句CREATE TABLE中指定索引列，使用ALTER TABLE语句在存在的表上创建索引，或者使用CREATE INDEX语句在已存在的表上添加索引。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建普通索引</span><br><span class="line">INDEX 索引名称(字段名)</span><br><span class="line"></span><br><span class="line"># 创建唯一索引</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX 索引名称(字段名)</span><br><span class="line"></span><br><span class="line"># 创建单列索引</span><br><span class="line">INDEX SingleIdx(name(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"># 创建组合索引，最左原则：索引可以搜索 (id),(id,name),(id,name,age)</span><br><span class="line">INDEX MultiIdx(id,name,age)</span><br><span class="line"></span><br><span class="line"># 创建全文索引，目前只有MyISAM支持，并且只为<span class="type">CHAR</span>、<span class="type">VARCHAR</span>、TEXT列创建</span><br><span class="line">FULLTEXT INDEX FullTxtIdx(字段)</span><br><span class="line"></span><br><span class="line"># 创建空间索引，目前只有MyISAM支持，并且空间类型的字段必须是<span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">SPATIAL INDEX spatIdx(字段);</span><br><span class="line"></span><br><span class="line"># <span class="number">8.0</span>版本：创建降序索引，默认升序</span><br><span class="line">INDEX idx_a_b(a,b <span class="keyword">desc</span>)</span><br><span class="line"></span><br><span class="line"># 删除索引</span><br><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name;</span><br></pre></td></tr></table></figure>
<h3 id="索引补充"><a href="#索引补充" class="headerlink" title="索引补充"></a>索引补充</h3><p>疑问1：索引对数据库性能如此重要，应该如何使用它？<br>    为数据库选择正确的索引是一项复杂的任务。如果索引列较少，则需要的磁盘空间和维护开销都较少。如果在一个大表上创建了多种组合索引，索引文件也会膨胀很快。另一方面，索引较多可覆盖更多的查询。可能需要试验若干不同的设计，才能找到最有效的索引。可以添加、修改和删除索引而不影响数据库架构或应用程序设计。因此，应尝试多个不同的索引从而建立最优的索引。<br>疑问2：尽量使用短索引。对字符串类型的字段进行索引，如果可能，应该指定一个前缀长度。<br>    例如，有一个CHAR(255)的列，如果在前10个或30个字符内，多数值是唯一的，则不需要对整个列进行索引。短索引不仅可以提高查询速度，还可以节省磁盘空间、减少I&#x2F;O操作。</p>
<h2 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h2><p>使用存储过程的好处：</p>
<p>代码封装，保证了一定的安全性；<br>代码复用；<br>由于是预先编译，因此具有很高的性能。<br>命令行中创建存储过程需要自定义分隔符，因为命令行是以 ; 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。</p>
<p>包含 in、out 和 inout 三种参数。</p>
<p>给变量赋值都需要用 select into 语句。</p>
<p>每次只能给一个变量赋值，不支持集合的操作。</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">delimiter <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">myprocedure</span><span class="params">( <span class="keyword">out</span> ret int )</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function"><span class="title">declare</span> <span class="title">y</span> <span class="title">int</span>;</span></span><br><span class="line"><span class="keyword">select</span> sum(col1)</span><br><span class="line"><span class="keyword">from</span> mytable</span><br><span class="line"><span class="keyword">into</span> y;</span><br><span class="line"><span class="keyword">select</span> y*y <span class="keyword">into</span> ret;</span><br><span class="line"><span class="keyword">end</span> <span class="comment">//</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">call</span> <span class="selector-tag">myprocedure</span>(<span class="variable">@ret</span>);</span><br><span class="line"><span class="selector-tag">select</span> @<span class="selector-tag">ret</span>;</span><br></pre></td></tr></table></figure>

<p>TODO 待补充…</p>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。</p>
<p>对视图的操作和对普通表的操作一样。</p>
<p>视图具有如下好处：</p>
<p>简化复杂的 SQL 操作，比如复杂的连接；<br>只使用实际表的一部分数据；<br>通过只给用户访问视图的权限，保证数据的安全性；<br>更改数据格式和表示。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myview <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> Concat(col1, col2) <span class="keyword">AS</span> concat_col, col3*col4 <span class="keyword">AS</span> compute_col</span><br><span class="line">        <span class="keyword">FROM</span> mytable</span><br><span class="line">        <span class="keyword">WHERE</span> col5 = val;</span><br></pre></td></tr></table></figure>

<p>TODO 待补充…</p>
<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>TODO 待补充…</p>
<h2 id="权限与安全管理"><a href="#权限与安全管理" class="headerlink" title="权限与安全管理"></a>权限与安全管理</h2><h3 id="权限表"><a href="#权限表" class="headerlink" title="权限表"></a>权限表</h3><p>MySQL服务器通过权限表来控制用户对数据库的访问，权限表存放在MySQL数据库中，由MySQL_install_db脚本初始化。存储账户权限信息的表主要有user、db、host、tables_priv、columns_priv和procs_priv。本节将为读者介绍这些表的内容和作用。</p>
<h3 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">#创建用户</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span>`用户名`@`*` identified <span class="keyword">by</span><span class="string">&#x27;密码&#x27;</span>;  \*代表任意ip地址，</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span>`yzx_discuz`@`localhost` identified <span class="keyword">by</span><span class="string">&#x27;JCDS&amp;&amp;JDCAMCLA&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#删除用户</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> `yzx_discuz`@`localhost`;</span><br><span class="line"></span><br><span class="line">#修改用户</span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span> <span class="keyword">to</span> <span class="string">&#x27;新用户名&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 修改用户的密码</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> mysql.<span class="keyword">user</span> <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">&#x27;JDCAMCLAJDCAMCLA&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> mysql.<span class="keyword">user</span> <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">&#x27;JDCAMCLAJDCAMCLA&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">&#x27;user&#x27;</span> <span class="keyword">and</span> Host=<span class="string">&#x27;hostname&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看权限</span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;用户&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;yzx_discuz&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#授权操作</span><br><span class="line"><span class="keyword">grant</span>  权限/<span class="keyword">all</span> <span class="keyword">on</span> 数据库.表 <span class="keyword">to</span>   <span class="string">&#x27;用户&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> discuz.* <span class="keyword">to</span> <span class="string">&#x27;yzx_discuz&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;yzx_discuz&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#删除权限</span><br><span class="line"><span class="keyword">revoke</span> 权限 <span class="keyword">on</span> 数据库.表 <span class="keyword">from</span> <span class="string">&#x27;用户&#x27;</span>@<span class="string">&#x27;IP地址&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#将修改后的配置推入mysql内存</span><br><span class="line">flush <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>
<h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>TODO 待补充…</p>
<h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>TODO 待补充…</p>
<h2 id="数据备份与恢复"><a href="#数据备份与恢复" class="headerlink" title="数据备份与恢复"></a>数据备份与恢复</h2><h3 id="方案1-MySQLdump命令"><a href="#方案1-MySQLdump命令" class="headerlink" title="方案1 MySQLdump命令"></a>方案1 MySQLdump命令</h3><p>MySQLdump是MySQL提供的一个非常有用的数据库备份工具。MySQLdump命令执行时，可以将数据库备份成一个文本文件，该文件中实际包含了多个CREATE和INSERT语句，使用这些语句可以重新创建表和插入数据。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 备份数据库</span><br><span class="line">mysqldump -u user -h host -ppassword dbname[tbname, [tbname...]] &gt; /user/backup/filename.sql</span><br><span class="line"></span><br><span class="line"># 备份多个数据库</span><br><span class="line">mysqldump -u user -h host -ppassword --databases [dbname[tbname, [tbname...]], dbname[tbname, [tbname...]]] &gt; /user/backup/filename.sql</span><br><span class="line"></span><br><span class="line"># 备份所有数据库</span><br><span class="line">mysqldump -u user -h host -ppassword --all-databases &gt; /user/backup/filename.sql</span><br></pre></td></tr></table></figure>
<h3 id="方案2-直接复制整个数据库目录"><a href="#方案2-直接复制整个数据库目录" class="headerlink" title="方案2 直接复制整个数据库目录"></a>方案2 直接复制整个数据库目录</h3><p>因为MySQL表保存为文件方式，所以可以直接复制MySQL数据库的存储目录及文件进行备份。MySQL的数据库目录位置不一定相同，在Windows平台下，MySQL 8.0存放数据库的目录通常默认为“C:\Documents and Settings\All Users\Application Data\MySQL\MySQL Server 8.0\data”或者其他用户自定义目录；在Linux平台下，数据库目录位置通常为&#x2F;var&#x2F;lib&#x2F;MySQL&#x2F;，不同Linux版本下目录会有所不同，读者应在自己使用的平台下查找该目录。</p>
<p>这是一种简单、快速、有效的备份方式。要想保持备份的一致性，备份前需要对相关表执行LOCK TABLES操作，然后对表执行FLUSH TABLES。这样当复制数据库目录中的文件时，允许其他客户继续查询表。需要FLUSH TABLES语句来确保开始备份前将所有激活的索引页写入硬盘。当然，也可以停止MySQL服务再进行备份操作。</p>
<p>这种方法虽然简单，但并不是最好的方法。因为这种方法对InnoDB存储引擎的表不适用。使用这种方法备份的数据最好恢复到相同版本的服务器中，不同的版本可能不兼容。</p>
<h3 id="方案3-MySQLhotcopy工具"><a href="#方案3-MySQLhotcopy工具" class="headerlink" title="方案3 MySQLhotcopy工具"></a>方案3 MySQLhotcopy工具</h3><p>MySQLhotcopy是一个Perl脚本，最初由Tim Bunce编写并提供。它使用LOCK TABLES、FLUSH TABLES和cp或scp来快速备份数据库。它是备份数据库或单个表最快的途径，但它只能运行在数据库目录所在的机器上，并且只能备份MyISAM类型的表。MySQLhotcopy在UNIX系统中运行。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mysqlhotcopy 数据库名<span class="number">1</span>, ... 数据库名n /user/backup</span><br></pre></td></tr></table></figure>

<p>注意事项：MySQLhotcopy只是将表所在的目录复制到另一个位置，只能用于备份MyISAM和ARCHIVE表。备份InnoDB类型的数据表时会出现错误信息。由于它复制本地格式的文件，因此也不能移植到其他硬件或操作系统下。</p>
<h3 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h3><h4 id="方案1-Mysql命令恢复"><a href="#方案1-Mysql命令恢复" class="headerlink" title="方案1 Mysql命令恢复"></a>方案1 Mysql命令恢复</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mysql -u user -p [数据库名] &lt; filename.sql</span><br></pre></td></tr></table></figure>
<h4 id="方案2-Mysql服务器-source"><a href="#方案2-Mysql服务器-source" class="headerlink" title="方案2 Mysql服务器 source"></a>方案2 Mysql服务器 source</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 登录服务器后</span><br><span class="line">use 数据库;</span><br><span class="line">source filename</span><br></pre></td></tr></table></figure>
<h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><p>TODO 待补充…</p>
<h3 id="表的导入和导出"><a href="#表的导入和导出" class="headerlink" title="表的导入和导出"></a>表的导入和导出</h3><p>TODO 待补充…</p>
<h2 id="数据库日志"><a href="#数据库日志" class="headerlink" title="数据库日志"></a>数据库日志</h2><p>TODO 待补充…</p>
<h3 id="日志简介"><a href="#日志简介" class="headerlink" title="日志简介"></a>日志简介</h3><p>MySQL日志主要分为4类，使用这些日志文件，可以查看MySQL内部发生的事情。<br>●　错误日志：记录MySQL服务的启动、运行或停止MySQL服务时出现的问题。<br>●　查询日志：记录建立的客户端连接和执行的语句。<br>●　二进制日志：记录所有更改数据的语句，可以用于数据复制。<br>●　慢查询日志：记录所有执行时间超过long_query_time的所有查询或不使用索引的查询。</p>
<p>默认情况下，所有日志创建于MySQL数据目录中。通过刷新日志，可以强制MySQL关闭和重新打开日志文件（或者在某些情况下切换到一个新的日志）。当执行一个FLUSH LOGS语句或执行MySQLadmin flush-logs或MySQLadmin refresh时，将刷新日志。</p>
<p>如果正使用MySQL复制功能，在复制服务器上可以维护更多日志文件，这种日志称为接替日志。</p>
<p>启动日志功能会降低MySQL数据库的性能。例如，在查询非常频繁的MySQL数据库系统中，如果开启了通用查询日志和慢查询日志，MySQL数据库会花费很多时间记录日志。同时，日志会占用大量的磁盘空间。</p>
<h3 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h3><p>二进制日志主要记录MySQL数据库的变化。二进制日志以一种有效的格式并且是事务安全的方式包含更新日志中可用的所有信息。二进制日志包含了所有更新了数据或者已经潜在更新了数据（例如，没有匹配任何行的一个DELETE）的语句。语句以“事件”的形式保存，描述数据更改。</p>
<p>二进制日志还包含关于每个更新数据库的语句的执行时间信息。它不包含没有修改任何数据的语句。如果想要记录所有语句（例如，为了识别有问题的查询），需要使用一般查询日志。使用二进制日志的主要目的是最大可能地恢复数据库，因为二进制日志包含备份后进行的所有更新。本节将介绍二进制日志相关的内容。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my.ini</span></span><br><span class="line">log-bin <span class="section">[=path/[filename]]</span></span><br><span class="line"><span class="attr">expire_logs_days</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">max_binlog_size</span> = <span class="number">100</span>M</span><br></pre></td></tr></table></figure>
<h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3><h3 id="通用查询日志"><a href="#通用查询日志" class="headerlink" title="通用查询日志"></a>通用查询日志</h3><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h2 id="优化简介"><a href="#优化简介" class="headerlink" title="优化简介"></a>优化简介</h2><h3 id="优化查询"><a href="#优化查询" class="headerlink" title="优化查询"></a>优化查询</h3><h3 id="优化数据库结构"><a href="#优化数据库结构" class="headerlink" title="优化数据库结构"></a>优化数据库结构</h3><h3 id="优化Mysql服务器"><a href="#优化Mysql服务器" class="headerlink" title="优化Mysql服务器"></a>优化Mysql服务器</h3><h3 id="临时表性能优化"><a href="#临时表性能优化" class="headerlink" title="临时表性能优化"></a>临时表性能优化</h3><h3 id="服务器语句超时处理"><a href="#服务器语句超时处理" class="headerlink" title="服务器语句超时处理"></a>服务器语句超时处理</h3><h3 id="创建全局通用表空间"><a href="#创建全局通用表空间" class="headerlink" title="创建全局通用表空间"></a>创建全局通用表空间</h3><h2 id="Mysql复制"><a href="#Mysql复制" class="headerlink" title="Mysql复制"></a>Mysql复制</h2><h3 id="复制简介"><a href="#复制简介" class="headerlink" title="复制简介"></a>复制简介</h3><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><h3 id="日常管理和维护"><a href="#日常管理和维护" class="headerlink" title="日常管理和维护"></a>日常管理和维护</h3><h3 id="切换主从服务器"><a href="#切换主从服务器" class="headerlink" title="切换主从服务器"></a>切换主从服务器</h3><h3 id="多源复制的改进"><a href="#多源复制的改进" class="headerlink" title="多源复制的改进"></a>多源复制的改进</h3><h2 id="Workbench"><a href="#Workbench" class="headerlink" title="Workbench"></a>Workbench</h2><h3 id="Workbench简述"><a href="#Workbench简述" class="headerlink" title="Workbench简述"></a>Workbench简述</h3><p>MySQL Workbench是下一代可视化数据库设计软件，为数据库管理员和开发人员提供了一整套可视化数据库操作环境</p>
<p>主要功能有：</p>
<ul>
<li>数据库设计和模型建立。</li>
<li>SQL开发（取代MySQL Query Browser）。</li>
<li>数据库管理（取代MySQL Administrator）。</li>
</ul>
<p>MySQL Workbench有两个版本：<br>（1）MySQL Workbench Community Edition（也叫MySQL Workbench OSS，社区版），是在GPL证书下发布的开源社区版本。<br>（2）MySQL Workbench Standard Edition（也叫MySQL Workbench SE，商业版），是按年收费的商业版本。</p>
<h3 id="SQL-Development的基本操作"><a href="#SQL-Development的基本操作" class="headerlink" title="SQL Development的基本操作"></a>SQL Development的基本操作</h3><h3 id="Data-Modeling的基本操作"><a href="#Data-Modeling的基本操作" class="headerlink" title="Data Modeling的基本操作"></a>Data Modeling的基本操作</h3><h3 id="Server-Administration的基本操作"><a href="#Server-Administration的基本操作" class="headerlink" title="Server Administration的基本操作"></a>Server Administration的基本操作</h3><h2 id="管理神器-Mysql-Utilities"><a href="#管理神器-Mysql-Utilities" class="headerlink" title="管理神器 Mysql Utilities"></a>管理神器 Mysql Utilities</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><h3 id="安装与配置-1"><a href="#安装与配置-1" class="headerlink" title="安装与配置"></a>安装与配置</h3><h3 id="管理与维护"><a href="#管理与维护" class="headerlink" title="管理与维护"></a>管理与维护</h3><h2 id="读写分离神器-Mysql-Proxy"><a href="#读写分离神器-Mysql-Proxy" class="headerlink" title="读写分离神器 Mysql Proxy"></a>读写分离神器 Mysql Proxy</h2><h3 id="简述-1"><a href="#简述-1" class="headerlink" title="简述"></a>简述</h3><h3 id="安装与配置-2"><a href="#安装与配置-2" class="headerlink" title="安装与配置"></a>安装与配置</h3><h3 id="管理与维护-1"><a href="#管理与维护-1" class="headerlink" title="管理与维护"></a>管理与维护</h3><h2 id="实战应用"><a href="#实战应用" class="headerlink" title="实战应用"></a>实战应用</h2><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><h4 id="字符集-1"><a href="#字符集-1" class="headerlink" title="字符集"></a>字符集</h4><ol>
<li><p>统一字符集，建议UTF8mb4<br>常用的字符集包括:Latin1、gbk、utf8、utf8mb4。</p>
<img src="/blog/p/e4d2e8fb/mysql%E5%AD%97%E7%AC%A6%E9%9B%86.png" class="" title="mysql字符集">
</li>
<li><p>统一排序规则<br>目前互联网上以UTF8mb4字符集为主，是官方8.0默认字符集。在之前的5.5、5.6、5.7版本是建表使用的Utf8，排序规 则是默认“utf8_general_ci”。在8.0之前UTF8mb4独有的默认排序方式是“utf8_general_ci”,在8.0之后默认规则为 “utf8mb4_0900_ai_ci”，所以有时会出现不同版本间字符集排序规则不兼容的问题，需要注意。</p>
</li>
</ol>
<h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h4><p>1.统一字段名&#x2F;类型<br>统一字段名是为了解决业务歧义问题。MySQL内部系统Information_schema下边的Tables表，假设按照不规范的 命名如“table_name”字段可能就会命名成“name”。如果这时Columns表中的COLUMN_NAME字段也命名 为“Name”字段，在查询的时候，可能会导致意义上的混乱。统一类型是为了解决隐式转换问题，包括表的连接、查询 都会存在隐式转换问题。<br>2.字段长度 varchar(255)<br>常见的问题是字段长度都配置为varchar(255)，在不知道业务将来存多少长度的情况下，先设成255，在开发阶段可能比 较方便，但存在性能隐患。比如索引评估，在一个255列长的字段上建索引，实际索引评估会考虑列长，如果默认255长度，会导致索引使用时评估不准确。<br>再比如字段，如果字段有2个255或3个255要做复合索引时，虽然真实的值可能每个字段长度只存了10或20，在默认参数 配置下会发现索引由于太长建不出来，对线上维护与后续业务开发都有影响。<br>3.定义 id int primary key<br>PK 在业务中建议强制必须建立。可以保证主从架构下的数据一致性以及避免复制时性能问题。另一个是主键要如果采用 数值型建议使用无符号类型，一般来说在一个表里ID肯定是自增的，不存在负值，如果定义一个有符号Int，会导致Int可用 的值少一半。因为Int最大的值在有符号情况下是21亿，如果定义成无符号最大可以到42亿。说明数据快速增长时，有符号 类型导致ID或某个自增长满的问题。<br>4.禁止Null值<br>Null &amp; Null &#x3D;?。比如在排序场景下，两个行按某个允许null的列值做排序，如果不存储有意义的值，默认为null值的情况 下，会导致一个随机的顺序，实际上就是业务上的乱序。 又比如无主键表情况下，会导致复制数据不一致的问题，所以要 禁止空值。</p>
<h4 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h4><p>0%的语句性能问题都可以靠索引解决，但索引有几个问题:<br>第一，单列索引要充分评估，比如有20个列，每个列上都有1个单列的情况，会造成对写入的影响很大，同时单列索引的 建议一定要评估可选择性。<br>第二，定期Review索引有效性，索引是不是在业务中真正使用在MySQL里相对不好定位，失效索引在业务快速发展频 繁变更的场景下会很常见，随着新业务新添加很多新索引，这时要看新的索引是不是已经覆盖之前的旧索引，此时旧索引 实际上是没有用的。维护无效索引要多一份IO成本，删除除重复索引保留有效的即可。<br>第三，不要走极端，包括两点:复合索引所有列与所有列都建单列索引。 比如一张表有七八个列，只在单列有索引，因为索引有回表不回表的区别，所以直接建立一个包含所有列复合索引，这个<br>方法不可取，虽然提升了查询的效率，但等于又另外维护了一张所有字段都要排序的表。 所有列都建单列索引，实际上跟是复合索引所有列是一样的。主要消耗会出现索引维护上。 索引有关内容，请关注【MySQL表和索引优化实战】课程。</p>
<h3 id="SQL语句编写规范"><a href="#SQL语句编写规范" class="headerlink" title="SQL语句编写规范"></a>SQL语句编写规范</h3><h4 id="一-规范语法"><a href="#一-规范语法" class="headerlink" title="(一)规范语法"></a>(一)规范语法</h4><p>不兼容语法:</p>
<ul>
<li><code>Select * from sbtest.sbtest1 group by id;</code></li>
<li><code>Select id,count(*) from sbtest.sbtest1 group by id desc;</code></li>
</ul>
<p>MySQL是一个相对成熟的产品，但它支持的一些语法并不标准，比如“Select * from sbtest.sbtest1 group by id;”在传 统的数据库如Oracle和其他关系型数据库里中是非法的语法，系统不支持，而“Select id,count(*) from sbtest.sbtest1 group by id desc;”在 8.0版本已经淘汰。随着MySQL语法越来越规范化，在版本升级后，这种不兼容语法可能会带来应 用或语句报错，因此在实际环境下不建议使用。</p>
<h4 id="二-别名"><a href="#二-别名" class="headerlink" title="(二)别名"></a>(二)别名</h4><p><code>Select id,count(*) id_count from sbtest.sbtest1 group by id;</code><br>所有返回列要给有意义的命名，与列名原则一致，强制AS关键词，防止造成语意不清。</p>
<h4 id="三-执行顺序"><a href="#三-执行顺序" class="headerlink" title="(三)执行顺序"></a>(三)执行顺序</h4><p>执行顺序如下:</p>
<ol>
<li>FROM,(-including JOIN )</li>
<li>WHERE</li>
<li>GROUP BY</li>
<li>HAVING</li>
<li>WINDOW functions</li>
<li>SELECT</li>
<li>DISTINCT</li>
<li>UNION</li>
<li>ORDER BY</li>
<li>LIMIT and OFFSET ·语句性能应注意两个方面:<br>1)数据流的流向;<br>2)order by limit场景。<br>从执行顺序上看，在SELECT之前的所有子语都是在做数据筛选，SELECT以后开始执行运算，用户应注意数据流的流 向。order by limit一般是在最后运行，如果在一开始运行，有时候会造成返回数据量过大，进而导致执行时间过长。<br>·数据返回逻辑应注意两个方面:<br>1)数据的筛选机制;<br>2)left join where场景。<br>许多用户的概念中都是先做WHERE再做JOIN，这是错误的。例如在做Left Join时，先获得所有数据，再通过Where筛 选数据。用户应注意梳理流向，才能最优地输出数据。</li>
</ol>
<h4 id="四-如何判断语句是否已最优explain"><a href="#四-如何判断语句是否已最优explain" class="headerlink" title="(四)如何判断语句是否已最优explain"></a>(四)如何判断语句是否已最优explain</h4><img src="/blog/p/e4d2e8fb/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%90%A6%E5%B7%B2%E6%9C%80%E4%BC%98explain.png" class="" title="如何判断语句是否已最优explain">

<p>如上图所示，用户可以通过Explain判断语句是否已最优，其中Type与Extra的主要类型与含义如下:<br><strong>Type</strong></p>
<ol>
<li>ALL:Full Table Scan 全表扫描;</li>
<li>index: Full Index Scan，索引扫描;</li>
<li>range:范围扫描;</li>
<li>ref: 表示连接匹配条件;</li>
<li>eq_ref: 类似ref，区别就在使用的索引是唯一索引;</li>
<li>const: 常量查询，比如pk等值;</li>
<li>system是Const类型的特例;当查询的表只有一行的情况下，使用system。</li>
</ol>
<p>从性能角度来看，从上往下性能越来越高，根据《开发手册》，此处最低要求是到Range范围扫描。</p>
<p><strong>Extra</strong></p>
<ol>
<li>Using filesort 排序;</li>
<li>Using index 使用索引可以返回请求列;</li>
<li>Using index condition 通过索引初步过滤;回表再过滤其它条件;</li>
<li>Using temporary 临时表;</li>
<li>Using where 单独出现时;一般代表表上出现全表扫描过滤;</li>
<li>Using index &amp; Using where 使用索引返回数据;同时通过索引过滤。</li>
</ol>
<p>Extra反映了执行计划的真实执行情况。</p>
<p>结合上图执行计划分析，C表是外部驱动表，索引方式为idx_pk，Type是Range，Extra有Using index condition、Using where以及Using MRR，表示进行全表扫描，通过索引初步过滤，回表B再过滤其他条件。B表是从外表取数据做内循环， 索引方式为i_text，扫描的列为c.b.KeyNo，这种情况说明这个执行计划相对完善。</p>
<h4 id="五-禁止与建议"><a href="#五-禁止与建议" class="headerlink" title="(五)禁止与建议"></a>(五)禁止与建议</h4><p>SQL的语句编写包含一些禁止项与建议项语句，用户深入了解与熟练掌握这些内容能够更好地开展业务。</p>
<p><strong>禁止项</strong></p>
<ol>
<li>select *，返回无用数据，过多IO消耗，以及Schema 变更问题;</li>
<li>Insert语句指定具体字段名称，不要写成insert into t1 values(…)，道理同上;</li>
<li>禁止不带WHERE，导致全表扫描以及误操作;</li>
<li>Where条件里等号左右字段类型必须一致，否则可能 会产生隐式转换，无法利用索引;</li>
<li>索引列不要使用函数或表达式，否则无法利用索引。<br>如where length(name)&#x3D;‘Admin’或where user_id+2&#x3D;5;</li>
<li>Replace into，会导致主备不一致; 7. 业务语句中带有DDL操作，特别是Truncate。</li>
</ol>
<p><strong>建议项</strong></p>
<ol>
<li>减小三表以上Join;</li>
<li>用Union all 替代Union;</li>
<li>使用Join 替代子查询;</li>
<li>不要使用 like ‘%abc%’，可以使用 like ‘abc%’;</li>
<li>Order by &#x2F;distinct &#x2F;group by 都可以利用索引有序性;</li>
<li>减少使用event&#x2F;存储过程，通过业务逻辑实现;</li>
<li>减小where in() 条件数据量;</li>
<li>减少过于复杂的查询和拼串写法。</li>
</ol>
<h4 id="六-用数据库的思维考虑SQL"><a href="#六-用数据库的思维考虑SQL" class="headerlink" title="(六)用数据库的思维考虑SQL"></a>(六)用数据库的思维考虑SQL</h4><p>我们提倡用户用数据库的思维考虑SQL，由于数据库要处理的是数据集而非单行数据，因此与开发的逻辑不太一样。<br>在开发逻辑中，有时候会希望通过用一个语句解决所有问题，但这在数据库中会导致SQL语句过大甚至上万行，过于复杂 的查询使得执行计划不稳定。因此我们倡导少即是美，每一层结果集都要最大限度地减小。<br>数据库中无法用开发应用的逻辑写语句，而应把所有的运算、判断应用逻辑都放到SQL实现。存储过程使用过重的话，会 导致难以调适、定位问题。同时，应减少单条数据集处理，减少数据访问与扫描。<br>对于新Feature，在未经过充分测试的情况下，应谨慎考虑使用到生产中，防止造成Bug或存在性能上的问题。</p>
<h4 id="七-SQL改写"><a href="#七-SQL改写" class="headerlink" title="(七)SQL改写"></a>(七)SQL改写</h4><p>SQL有一些编写规范，这些规范是在优化日常问题时总结而来，下面举例说明。<br><strong>SQL改写-join</strong><br>select count(a.id) from sbtest1 a left join sbtest2 b on a.id&#x3D;b.id</p>
<img src="/blog/p/e4d2e8fb/sql%E6%94%B9%E5%86%99join.png" class="" title="sql改写join">

<p>如上图所示，请注意Join键为PK，也就是左表右表应该是1对1的关系，在Left Join的情况下，可以理解成返回的数据全部 是左边的数据，也就是“a”表的数据，执行时间大概为20秒。</p>
<img src="/blog/p/e4d2e8fb/sql%E6%94%B9%E5%86%99join-2.png" class="" title="sql改写join-2">

<p>如上图说是，可以将“select count(a.id) from sbtest1 a left join sbtest2 b on a.id&#x3D;b.id;”简化为“select count(a.id) from sbtest1 a”，执行时间缩减到3秒左右，大幅提升执行效率。</p>
<p>SQL改写一般会出现在复杂查询的Join场景中，除去显式Join(left join与right join)，还包括半连接(exists,in)和反连 接(not exists,not in)。</p>
<p>此类查询过慢时，请参考执行计划，考虑是否可通过SQL改写优化。</p>
<p><strong>SQL改写-分页统计</strong><br>分页统计是一种常见的业务逻辑，例如我们现在有一条分页语句: select a.id from sbtest1 a left join sbtest2 b on a.id&#x3D;b.id limit 200,20; 取总数据量:<br>select count(*) from<br>(select a.id from sbtest1 a left join sbtest2 b on a.id&#x3D;b.id) as a;</p>
<img src="/blog/p/e4d2e8fb/sql%E6%94%B9%E5%86%99%E5%88%86%E9%A1%B5%E7%BB%9F%E8%AE%A1.png" class="" title="sql改写分页统计">

<p>分页统计是一种常见的业务逻辑，比如有1万条数据需要分页，常见的处理方法是把以上所有的语句逻辑框起来，在外面 加“Count”，这种做法会导致语句冗余，且执行时间长。改写的方法有:<br>改写1:<code>select count(a.id) from sbtest1 a left join sbtest2 b on a.id=b.id; </code><br>改写2:<code>select count(a.id) from sbtest1 a;</code></p>
<img src="/blog/p/e4d2e8fb/sql%E6%94%B9%E5%86%99%E5%88%86%E9%A1%B5%E7%BB%9F%E8%AE%A1-2.png" class="" title="sql改写分页统计-2">

<p>如上图所示，两种改写方式的执行计划与最初写法的语义逻辑上无本质区别，第一种改写后执行时间为15秒，第二种改写 后执行时间为0.25秒，且语句更加简单。</p>
<p>此类改写目的:</p>
<ol>
<li>精简语句，简化语句逻辑;</li>
<li>进一步寻找优化空间。</li>
</ol>
<h3 id="事务的使用与优化"><a href="#事务的使用与优化" class="headerlink" title="事务的使用与优化"></a>事务的使用与优化</h3><h4 id="一-事务是什么"><a href="#一-事务是什么" class="headerlink" title="(一)事务是什么?"></a>(一)事务是什么?</h4><p>事务是指访问并可能更新数据库中各种数据项的一个程序执行单元(Unit)。<br>事务应该具有四个属性:</p>
<ul>
<li>原子性(Atomicity)</li>
<li>一致性(Consistency)</li>
<li>隔离性(Isolation)</li>
<li>持久性(Durability)</li>
</ul>
<p>这四个属性通常称为ACID特性。</p>
<p>目前生产环境所用的隔离级别较多，主要有以下四种:</p>
<ol>
<li>Read Uncommitted</li>
<li>Read Committed(一般采用)</li>
<li>Repeatable Read (官方默认)</li>
<li>Serializable</li>
</ol>
<p>关于事务需要强调一点:大事务不等于长事务。 例如:</p>
<ol>
<li>Insert table batch 它是个大事务，但它可能并不长。</li>
<li>Begin<br>insert single data<br>sleep(3600)<br>Commit 这是个长事务，但不是大事务。</li>
</ol>
<p>同时要说一下，有些DDL本身是原子性的，包括加列、建索引，事务可能大且长。</p>
<h4 id="二-事务的问题"><a href="#二-事务的问题" class="headerlink" title="(二)事务的问题"></a>(二)事务的问题</h4><p>长事务和大事务可能存在以下问题:</p>
<ol>
<li><p>Undo 异常增长<br>导致Ibdata空间问题，增加存储成本，也会使得Hitory List过长，导致严重的性能问题。</p>
</li>
<li><p>Binlog 异常增长<br>由于单个事务不拆分存放，会导致某一个或者某一些Binlog非常的大，做复制或主从时会产生一定问题。</p>
</li>
<li><p>Slave延迟<br>DDL类，写入等，DDL是语句级回放，Slave要等到执行结束后再继续。</p>
</li>
<li><p>锁问题<br>死锁、阻塞。 针对大事务与长事务做出优化:</p>
<ul>
<li>大事务<ol>
<li>大事务拆分为小事务;</li>
<li>DDL拆分(无锁变更)。</li>
</ol>
</li>
<li>长事务<ol>
<li>合并为大事务(特别合适应用于写入场景，对写提升很大，而且数据不会特别长);</li>
<li>事务分解(不必要的请求摘除);</li>
<li>应用侧保证一致性。</li>
</ol>
</li>
</ul>
<p>事务使用基本原则:在保证业务逻辑的前提下，尽可能缩短事务长度。</p>
</li>
</ol>
<h4 id="三-事务问题定位"><a href="#三-事务问题定位" class="headerlink" title="(三)事务问题定位"></a>(三)事务问题定位</h4><ol>
<li>长事务问题定位<br>定位命令:<code>Information_schema.innodb_trx</code><br>例如:<code>SELECT trx.trx_id, trx.trx_started, trx.trx_mysql_thread_id FROM INFORMATION_SCHEMA.INNODB_TRX trx WHERE trx.trx_started &lt; CURRENT_TIMESTAMP - INTERVAL 1 SECOND</code></li>
<li>锁问题定位<br>8.0以前:information_schema.innodb_lock_waits、innodb_locks。<br>8.0及以后:performance_schema. data_lock_waits、data_locks。<img src="/blog/p/e4d2e8fb/%E9%94%81%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D.png" class="" title="锁问题定位"></li>
</ol>
<h3 id="其他最佳实践"><a href="#其他最佳实践" class="headerlink" title="其他最佳实践"></a>其他最佳实践</h3><h4 id="一-分页问题"><a href="#一-分页问题" class="headerlink" title="(一)分页问题"></a>(一)分页问题</h4><p>分页的传统写法：<code>select * from sbtest1 order by id limit M,N;</code></p>
<p>它存在的问题点:需要扫描大量无效数据后，再返回请求数据，成本很高。</p>
<p>根据业务需求，有以下三种解决方法:</p>
<ol>
<li>适用顺序翻页的场景，每次记录上一页#max_id#带入下一次查询中。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">where</span> id <span class="operator">&gt;</span> #max_id# <span class="keyword">order</span> <span class="keyword">by</span> id limit n;</span><br></pre></td></tr></table></figure></li>
<li>适用只按照id进行分页，无Where条件。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">as</span> a <span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> id <span class="keyword">from</span> sbtest1 <span class="keyword">order</span> <span class="keyword">by</span> id limit m, n) <span class="keyword">as</span> b <span class="keyword">on</span> a.id <span class="operator">=</span> b.id <span class="keyword">order</span> <span class="keyword">by</span> a.id;</span><br></pre></td></tr></table></figure></li>
<li>适用于带Where条件，同时按照ID顺序分页。此时，需要在Where条件上创建二级索引。 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">as</span> a <span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> id <span class="keyword">from</span> sbtest1where col<span class="operator">=</span>xxxx <span class="keyword">order</span> <span class="keyword">by</span> id limit m, n) <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">on</span> a.id <span class="operator">=</span> b.id <span class="keyword">order</span> <span class="keyword">by</span> a.id;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="二-大表数据清理"><a href="#二-大表数据清理" class="headerlink" title="(二)大表数据清理"></a>(二)大表数据清理</h4><p><strong>1. 数据清理场景</strong><br>一般的数据清理场景为历史数据清理，例如数据归档、Delete等。 这里经常存在的问题有:</p>
<ol>
<li>单次Delete行数过多，容易导致锁堵塞、主从复制延迟、影响线上业务;</li>
<li>易失败，死锁、超时等。</li>
</ol>
<p>解决的建议方案:</p>
<ol>
<li>伪代码<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="built_in">min</span>(id),<span class="built_in">max</span>(id) <span class="keyword">from</span> t <span class="keyword">where</span> gmt_create<span class="operator">&lt;</span>$<span class="type">date</span></span><br><span class="line"><span class="keyword">For</span> I <span class="keyword">in</span> “<span class="built_in">max</span>(id)<span class="operator">-</span><span class="built_in">min</span>(id)<span class="operator">/</span><span class="number">1000</span></span><br><span class="line"><span class="keyword">Delete</span> <span class="keyword">from</span> t <span class="keyword">where</span> id<span class="operator">&gt;=</span><span class="built_in">min</span>(id) <span class="keyword">and</span> id<span class="operator">&lt;</span><span class="built_in">min</span>(id)<span class="operator">+</span><span class="number">1000</span> <span class="keyword">and</span> gmt_create<span class="operator">&lt;</span>$<span class="type">date</span> ......</span><br></pre></td></tr></table></figure></li>
<li>定期Optimize Table回收碎片。</li>
</ol>
<p><strong>2. 全表数据清理</strong><br>常用的方法: 用Truncate删掉整张表的数据。<br>存在问题: 大表(如:&gt;100G)，Truncate期间会造成IO持续抖动。<br>解决方案: 硬连接方式后Truncate，异步Trim文件。</p>
<h4 id="三-隐式转换问题"><a href="#三-隐式转换问题" class="headerlink" title="(三)隐式转换问题"></a>(三)隐式转换问题</h4><p>隐式转换问题发生在比较值类型不一致的场景下，除去一些规定情况，所有的比较最终都是转换为浮点数进行。</p>
<ul>
<li><code>Create table testtb(id varchar(10) primary key);</code></li>
<li><code>Select * from testtb where id=1;</code></li>
</ul>
<p>此类问题在编写sql语句时很难发现，上线可能会导致严重的性能问题。</p>
<h4 id="四-循环"><a href="#四-循环" class="headerlink" title="(四)循环"></a>(四)循环</h4><blockquote>
<p>开发环境中的循环分为外部循环与内部循环。</p>
</blockquote>
<p><strong>1. 外部循环</strong><br>外部循环在应用侧实现，主要问题来自每次请求的RT。 例如:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i<span class="operator">=</span><span class="number">0</span>;i<span class="operator">+</span><span class="operator">+</span>;i<span class="operator">&lt;</span><span class="number">500</span> </span><br><span class="line">    <span class="keyword">insert</span>(db 交互) </span><br><span class="line">    next</span><br><span class="line">rt<span class="operator">=</span>single rt<span class="operator">*</span> total count</span><br></pre></td></tr></table></figure>
<p>建议Batch一次写入。</p>
<p><strong>2. 内部循环</strong><br>内部循环常用在存储过程，事务无法保证。<br>例如:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">While do </span><br><span class="line">    <span class="keyword">insert</span>;</span><br><span class="line">    <span class="keyword">Commit</span>; </span><br><span class="line"><span class="keyword">end</span> while</span><br></pre></td></tr></table></figure>
<p>存在频繁Commit问题，造成IO上的冲击。</p>
<p>或:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Begin</span> tran </span><br><span class="line">While do</span><br><span class="line">    <span class="keyword">insert</span>; </span><br><span class="line"><span class="keyword">end</span> while </span><br><span class="line"><span class="keyword">Commit</span></span><br></pre></td></tr></table></figure>
<p>无法保证数据一致性，以及事务过长。</p>
<h4 id="五-存储过程中的事务处理"><a href="#五-存储过程中的事务处理" class="headerlink" title="(五)存储过程中的事务处理"></a>(五)存储过程中的事务处理</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> insertTest(<span class="keyword">IN</span> num <span class="type">int</span>) <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> errno <span class="type">int</span>;</span><br><span class="line">    <span class="keyword">declare</span> i <span class="type">int</span>;</span><br><span class="line">    <span class="keyword">declare</span> continue HANDLER <span class="keyword">for</span> <span class="keyword">sqlexception</span> <span class="keyword">set</span> errno<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">start</span> transaction; <span class="keyword">set</span> i<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">while i<span class="operator">&lt;</span>num do</span><br><span class="line">    <span class="keyword">INSERT</span> testfor <span class="keyword">VALUES</span>(i);</span><br><span class="line">    <span class="keyword">set</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"></span><br><span class="line">if errno<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">rollback</span>; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">commit</span>; </span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<p>以上方为例，在BEGIN Train后，下面最终有一个Commit。如果这里是一个重复键值，但前面已经插了10条数据，这10条 数据是不回滚的，所以这个事务要直接在这里声明捕捉错误，然后回滚整个事务，才能完成这整个存储过程的回滚。</p>
<h4 id="六-常见问题"><a href="#六-常见问题" class="headerlink" title="(六)常见问题"></a>(六)常见问题</h4><p><strong>1. Where 后面的列顺序是不是要符合最左原则?</strong><br>Where a&#x3D;1 and b&#x3D;2 等价于 Where b&#x3D;2 and a&#x3D;1<br>最左原则指的是索引顺序，不是谓词顺序，以上两个条件都匹配( a,b) 复合索引。</p>
<p><strong>2. Join 的顺序是否指定左边为驱动表?</strong><br>Inner Join场景下，在执行计划中按统计信息的预估自动选中驱动表，Left Join ,Right Join 时左右写的顺序才有显式意义。</p>
<p><strong>3. 业务上有随机返回的需求，能否用order by rand()</strong><br>一般不建议，如果结果集非常小，勉强可用，但结果集大时由于随机数排序，会产生Sort操作甚至溢出到磁盘，有很大性 能损耗，此类需求可以考虑伪随机算法。</p>
<p><strong>4. Delete数据之后，为什么磁盘空间占用反而大了?</strong><br>Delete数据并不能清理数据文件空间，反而会导致Undo,Binlog文件的增长，使用Optimize收缩。</p>
<p><strong>5. Binlog是否一定要Row格式?</strong><br>在主从场景下，Binlog使用Row格式是为了保证主从数据一致性。<br>单机场景下，Binlog做为增长数据备份使用，同时也包括一些语句级数据恢复的功能。</p>
<p><strong>6. 死锁、阻塞的区别</strong><br>通常说的阻塞，主要是由于锁获取不到，产生的请求被阻塞，一般需要手动解锁(Kill或等待)。<br>死锁不等于阻塞，虽然死锁中阻塞是必现的，但是会自动回滚事务解锁，不用手动处理，但需要业务判断语句逻辑。</p>
<p>以上两种情况都是由于业务侧逻辑出现，并非内核原因。</p>
<p><strong>7. 做DDL时是否会锁表</strong><br>所有的DDL都需要锁表，只是操作顺序和操作获取时间的问题。如下图所示，允许并发DDL是No，就证明对业务有一些 阻塞。</p>
<img src="/blog/p/e4d2e8fb/%E5%81%9ADDL%E6%97%B6%E6%98%AF%E5%90%A6%E4%BC%9A%E9%94%81%E8%A1%A8.png" class="" title="做DDL时是否会锁表">

<h4 id="表和索引优化实战"><a href="#表和索引优化实战" class="headerlink" title="表和索引优化实战"></a>表和索引优化实战</h4><p>TODO，待补充</p>
<h4 id="日常运维开发的使用的规范和建议"><a href="#日常运维开发的使用的规范和建议" class="headerlink" title="日常运维开发的使用的规范和建议"></a>日常运维开发的使用的规范和建议</h4><img src="/blog/p/e4d2e8fb/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%97%A5%E5%B8%B8%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E7%9A%84%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%84%E8%8C%83%E5%92%8C%E5%BB%BA%E8%AE%AE-01.png" class="" title="MySQL数据库的日常运维开发的使用的规范和建议-01">

<img src="/blog/p/e4d2e8fb/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%97%A5%E5%B8%B8%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E7%9A%84%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%84%E8%8C%83%E5%92%8C%E5%BB%BA%E8%AE%AE-02.png" class="" title="MySQL数据库的日常运维开发的使用的规范和建议-02">

<h3 id="Mysql优化"><a href="#Mysql优化" class="headerlink" title="Mysql优化"></a>Mysql优化</h3><h4 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h4><h5 id="优化目的"><a href="#优化目的" class="headerlink" title="优化目的"></a>优化目的</h5><blockquote>
<p>提高资源的利用率，让资源充分发挥价值，能同时满足更多用户的在线需求。</p>
</blockquote>
<h5 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h5><img src="/blog/p/e4d2e8fb/%E4%BC%98%E5%8C%96%E7%9B%AE%E6%A0%87%EF%BC%9A%E9%92%88%E5%AF%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90%E5%8E%BB%E8%A7%A3%E5%86%B3.png" class="" title="优化目标：针对服务器资源去解决">

<img src="/blog/p/e4d2e8fb/%E4%BC%98%E5%8C%96%E6%89%8B%E6%AE%B5.png" class="" title="优化手段.png">
<p>上金字塔从下往上优化，成本是逐步提升的，效果反而越来越差。通常来说，<code>SQL及索引调优</code> 性价比最高。</p>
<h5 id="优化前准备"><a href="#优化前准备" class="headerlink" title="优化前准备"></a>优化前准备</h5><ul>
<li><p>通过慢查询日志，工具是pt-query-digest</p>
</li>
<li><p>使用 <code>query profile</code> 功能</p>
<ul>
<li><code>set profiling = 1</code> 开启，将所有语句消耗的时间存到临时表<img src="/blog/p/e4d2e8fb/set_profiling_1.png" class="" title="set_profiling_1.png">

<ul>
<li><p><code>show profiles</code> 从临时表中查看所有语句 和 执行时间</p>
<img src="/blog/p/e4d2e8fb/show_profiles.png" class="" title="show_profiles.png">
</li>
<li><p><code>show profile for query 临时表ID</code> 查看某个临时表中的记录详情</p>
<img src="/blog/p/e4d2e8fb/show_profile_for_query.png" class="" title="show_profile_for_query命令">
</li>
<li><p><code>show profile cpu,block for query 临时表ID</code> 查看某个临时表中的CPU和Block IO的消耗记录详情</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>使用 <code>show status</code></p>
<ul>
<li><code>show status</code> 会返回一些计数器，<code>show global status</code> 查看服务器级别的所有计数</li>
<li>根据这些计数，可以猜测出哪些操作代价比较高或者消耗时间多</li>
</ul>
</li>
<li><p>使用 <code>show processlist</code></p>
<ul>
<li><code>show processlist</code> 观察是否有大量线程处于不正常的状态或者特征</li>
</ul>
</li>
<li><p>使用 <code>explain</code> 别名 <code>desc</code></p>
<ul>
<li><code>explain</code> 分析单条SQL语句<img src="/blog/p/e4d2e8fb/explain_and_desc.png" class="" title="explain_and_desc命令"></li>
</ul>
</li>
</ul>
<h5 id="优化前准备：原理剖析"><a href="#优化前准备：原理剖析" class="headerlink" title="优化前准备：原理剖析"></a>优化前准备：原理剖析</h5><h6 id="一-B-Tree-index"><a href="#一-B-Tree-index" class="headerlink" title="(一)B+ Tree index"></a>(一)B+ Tree index</h6><img src="/blog/p/e4d2e8fb/B+Tree%E7%B4%A2%E5%BC%95.png" class="" title="B+Tree索引">

<p>如上图所示，B+ Tree Index索引分为3个部分:<code>根、枝、叶</code>。</p>
<p>核心特点是根和枝不存储数据，行高比较固定。 通过“B+Tree”索引取数据，必然经过根枝叶三个节点路径，取数据的 代价比较稳定;</p>
<p>另外一点，叶子节点上的数据是有序存储的。</p>
<h6 id="二-Innodb-Table"><a href="#二-Innodb-Table" class="headerlink" title="(二)Innodb Table"></a>(二)Innodb Table</h6><p>Innodb 是MySOL的核心存储引擎，Innodb Table是IOT有序存储，核心概念为:Innodb的表数据按照“B+ Tree”的结 构进行组织，表数据本身是“B+ Tree”索引的叶子节点。</p>
<p>如下图所示，每张表，也就是每个存储段，实际是在MySOL里构建了一个“B+ Tree”索引的树状结构，段的物理存储跟 其他关系数据库的存储方式一样分区和块。</p>
<img src="/blog/p/e4d2e8fb/InnodbTable.png" class="" title="InnodbTable">

<h6 id="三-索引检索过程"><a href="#三-索引检索过程" class="headerlink" title="(三)索引检索过程"></a>(三)索引检索过程</h6><img src="/blog/p/e4d2e8fb/%E7%B4%A2%E5%BC%95%E6%A3%80%E7%B4%A2%E8%BF%87%E7%A8%8B.png" class="" title="索引检索过程">
<p>如上图所示有三个流程，上面两块是二级索引，下面是属于主键索引，也叫聚集索引，是Innodb表的数据本身，依次看这 三个流程:</p>
<ul>
<li>第一，非主键查询，入口是从二级索引，通过二级索引，第一个过程返回聚集索引的ID;第二个过程是回表，相当于再做 一次数据检索，然后从聚集索引中获取数据。</li>
<li>第二，主键查询，入口是直接通过聚集索引的ID，可以在聚集索引中获取数据。</li>
<li>第三，覆盖索引，入口是二级索引，直接从二级索引当中获取数据。</li>
</ul>
<h6 id="MySQL的行为"><a href="#MySQL的行为" class="headerlink" title="MySQL的行为"></a>MySQL的行为</h6><p>####### (一)MySQL SQL执行过程</p>
<img src="/blog/p/e4d2e8fb/%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E7%A4%BA%E4%BE%8B.png" class="" title="执行过程示例">

<p>如上图所示，MySQL的执行的过程包括:</p>
<ol>
<li>客户端提交一条语句;</li>
<li>先在查询缓存查看是否存在对应的缓存数据，如有则直接返回(一般有的可能性极小，因此一般建议关闭查询缓存. ;</li>
<li>交给解析器处理，解析器会将提交的语句生成一个解析树;</li>
<li>预处理器会处理解析树，形成新的解析树。这一阶段存在一些SQL改写的过程;</li>
<li>改写后的解析树提交给查询优化器。查询优化器生成执行计划;</li>
<li>执行计划交由执行引擎调用存储引擎接口，完成执行过程。这里要注意，MySQL的Server层和Engine层是分离的;</li>
<li>最终的结果由执行引擎返回给客户端，如果开启查询缓存的话，则会缓存。</li>
</ol>
<p>SQL执行顺序：<br>(8) SELECT (9) DISTINCT <select_list> (1) FROM <left_table><br>(3) <join_type> JOIN <right_table><br>(2) ON <join_condition><br>(4) WHERE <where_condition> (5) GROUP <group_by_list><br>(6) WITH {CUBE|ROLLUP}<br>(7) HAVING <having_condition> (10) ORDER BY <order_by_list> (11) LIMIT <limit_number><br>关于SQL的执行顺序，在某些时候也可以给我们一些指导性建议。<br>比如Where条件和Order by，在通常情况下，SQL语 句先获取数据，再做Select操作，先获取数据再返回到Server端结果集的存储区之后进行排序，从这里我们可以假设如 果通过索引获取数据，那么在取数据时，数据排序就已经完成，相当于MySQL存储引擎的层面已经做了优化，而不需要 再增加额外的排序计算操作。</p>
<p>####### (二)MySQL优化器与执行计划</p>
<ol>
<li>查询优化器<br>查询优化器的主要作用是用来负责生成SQL语句的执行计划。优化器是数据库的核心价值所在，它是数据库的“大脑”， 优化SQL某种意义上就是理解优化器的行为。</li>
</ol>
<p>在MySQL里面，优化的依据是执行成本，它的本质是CBO，也就是说执行计划的生成是基于成本的。<br>目前MySQL优化 器没有那么完善，执行成本主要基于行数而定。优化器工作的前提是了解数据，工作的目的是解析SQL，生成执行计划。<br>总结如下:</p>
<ul>
<li>负责生成 SQL 语句的有效执行计划的数据库组件;</li>
<li>优化器是数据库的核心价值所在，它是数据库的“大脑”;</li>
<li>优化SQL，某种意义上就是理解优化器的行为;</li>
<li>优化的依据是执行成本(CBO);</li>
<li>优化器工作的前提是了解数据，工作的目的是解析SQL，生成执行计划。</li>
</ul>
<ol start="2">
<li>查询优化器工作过程<img src="/blog/p/e4d2e8fb/%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B.png" class="" title="查询优化器工作过程"></li>
</ol>
<p>如上图所示，查询优化器工作过程包括:</p>
<ol>
<li>词法分析、语法分析、语义检查;</li>
<li>预处理阶段(查询改写等);</li>
<li>查询优化阶段，可详细划分为逻辑优化、物理优化两部分 逻辑优化:把SQL交给查询优化器之后，会去做相应的改写动作。 物理优化:过程是优化器生成获取数据去扫描数据的路径。</li>
<li>查询优化器优化依据，来自于代价估算器估算结果(它会调用统计信息作为计算依据);</li>
<li>交由执行器执行。</li>
</ol>
<p>####### (三)查看和干预执行计划</p>
<p>在MySQL里查看SQL的执行计划直接通过Explain关键词就可以了，或者我们可以添加Extended关键字，它会展示 MySQL优化器的逻辑优化改写过程。</p>
<p>在MySQL里查看SQL的执行计划直接通过Explain关键词就可以了，或者我们可以添加Extended关键字，它会展示 MySQL优化器的逻辑优化改写过程。<br>1.执行计划<br>·explain [extended] SQL_Statement</p>
<img src="/blog/p/e4d2e8fb/%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92explain.png" class="" title="执行计划explain">

<p>当我们认为SQL的执行计划不合理时，可以通过适当的手段，强制加索引或者强制驱动表的顺序，通过这种hints方式干预 SQL的执行计划。另外MySQL查询优化器的一些关键特性，我们也可以通过控制优化器开关的参数，从而控制优化器相 关的行为。</p>
<p>2.优化器开关<br>·show variables like ‘optimizer_switch’</p>
<img src="/blog/p/e4d2e8fb/%E4%BC%98%E5%8C%96%E5%99%A8%E5%BC%80%E5%85%B3show_variables.png" class="" title="优化器开关show_variables">

<p>3.Processlist<br>另一种观测MySQL行为的常用手段就是Processlist。</p>
<p>通过Processlist，我们可以看到当前在MySQL中执行的所有SQL 语句，有没有异常的会话或比较特殊的SQL状态。</p>
<p>查看会话操作可以通过2种途径:</p>
<ul>
<li>show [full] processlist;</li>
<li>information_schema.processlist。</li>
</ul>
<p>这里列出了几种常见的异常行为:</p>
<ol>
<li>Copy to tmp table<br>出现在某些Alter Table语句的Copy Table操作。</li>
<li>Copying to tmp table on disk<br>由于临时结果集大于tmp_table_size，正在将临时表从内存存储转为磁盘存储以此节省内存。</li>
<li>Converting HEAP to MyISAM<br>线程正在转换内部Memory临时表到磁盘MyISAM临时表。</li>
<li>Creating sort index<br>正在使用内部临时表处理Select查询。</li>
<li>Sorting index<br>磁盘排序操作的一个过程。</li>
<li>Sending data<br>正在处理Select查询的记录，同时正在把结果发送给客户端。</li>
<li>Waiting for table metadata lock<br>等待元数据锁。</li>
</ol>
<h5 id="常规优化策略"><a href="#常规优化策略" class="headerlink" title="常规优化策略"></a>常规优化策略</h5><h6 id="一-Select优化"><a href="#一-Select优化" class="headerlink" title="(一)Select优化"></a>(一)Select优化</h6><p>####### 1. Order by<br>Order by查询的两种情况:</p>
<ol>
<li>Using index，是针对查询优化器的两种行为来去区分的。Using index就是说MySQL它可以直接通过索引去返回有序 的记录，而不需要去经过额外的排序的操作;</li>
<li>Using filesort需要去做额外的排序，在某些特殊的情况下，可能还会出现临时表排序的情况。</li>
</ol>
<p>优化目标:尽量通过索引来避免额外的排序，减少CPU资源的消耗。</p>
<p>主要优化策略:</p>
<ul>
<li>Where条件和Order by使用相同的索引;</li>
<li>Order by的顺序和索引顺序相同;</li>
<li>Order by 的字段同为升序或降序。</li>
</ul>
<p>注:当Where条件中的过滤字段为覆盖索引的前缀列，而Order by字段是第二个索引列时，只有Where条件是Const匹配 时，才可以通过索引消除排序，而between…and或&gt;?、&lt;?这种Range匹配都无法避免Filesort操作。</p>
<p><strong>当无法避免Filesort操作时，优化思路就是让Filesort的操作更快。</strong></p>
<p>排序算法</p>
<ol>
<li>两次扫描算法。两次访问数据，第一步获取排序字段的行指针信息，在内存中排序，第二步根据行指针获取记录。</li>
<li>一次扫描算法。一次性取出满足条件的所有记录，在排序区中排序后输出结果集。是采用空间换时间的方式。<br>注:需要排序的字段总长度越小，越趋向于第二种扫描算法，MySQL通过max_length_for_sort_data参数的值来进行参 考选择。</li>
</ol>
<p>优化策略</p>
<ol>
<li>适当调大max_length_for_sort_data这个参数的值，让优化器更倾向于选择第二种扫描算法;</li>
<li>只使用必要的字段，不要使用Select *的写法;</li>
<li>适当加大sort_buffer_size这个参数的值，避免磁盘排序的出现(线程参数，不要设置过大)。</li>
</ol>
<p>####### 2. Subquery<br>对于子查询，一般的优化策略是做等价改写，在MySQL查询优化器中也叫反嵌套。在MySQL里，查询优化器本身也可以 做一些简单查询的反嵌套操作，但在绝大部分情况下还是需要去做一些人为的干预。</p>
<p>Subquery优化总结:</p>
<ol>
<li>子查询会用到临时表，需尽量避免;</li>
<li>可以使用效率更高的Join查询来替代。</li>
</ol>
<p>优化策略 等价改写、反嵌套。 如下SQL:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">where</span> customer_id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> customer_id <span class="keyword">from</span> payment)</span><br></pre></td></tr></table></figure>
<p>改写形式:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer a <span class="keyword">left</span> <span class="keyword">join</span> payment b <span class="keyword">on</span> a.customer_id<span class="operator">=</span>b.customer_id <span class="keyword">where</span> b.customer_id <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<p>如上所示，SQL语句用Not In的这样的方式，在子查询里执行Select语句。对于这个SQL语句，直接把Not In改写成Left Join，从而提升它的执行效率。在MySQL里，一般情况下Join的效率比子查询要高。</p>
<p>####### 3. Limit<br>分页查询，就是将过多的结果在有限的界面上分多页来显示。<br>其实质是每次查询只返回有限行，翻页一次执行一次。<br>优化目标：</p>
<ol>
<li>消除排序;</li>
<li>避免扫描到大量不需要的记录。</li>
</ol>
<p>SQL场景(film_id为主键):<code>select film_id,description from film order by title limit 10000,20</code></p>
<p>此时MySQL排序出前10020条记录后仅仅需要返回第10001到10020条记录，前 10000条记录造成额外的代价消耗。</p>
<p><strong>对于分页查询的优化的策略</strong><br>优化策略一：“覆盖索引”<br><code>Alter table film add index idx_lmtest(title,description);</code><br>记录直接从索引中获取，效率最高。 仅适合查询字段较少的情况。</p>
<p>优化策略二：“SQL改写”<br><code>select a.film_id,a.description from film a inner join (select film_id from film order by title limit 1000,20) b on a.film_id=b.film_id;</code><br>优化的前提是Title字段有索引。<br>思路是从索引中取出20条满足条件记录的主键值，然后回表获取记录。</p>
<p>####### 4. Or&#x2F;And Condition</p>
<img src="/blog/p/e4d2e8fb/Condition:Or_And.png" class="" title="Condition:Or_And">

<p>And结果集为关键字前后过滤结果的交集;<br>Or结果集为关键字前后分别查询的并集;<br>And条件可以在前一个条件过滤基础上过滤;<br>Or条件被处理为UNION，相当于两个单独条件的查询;<br>复合索引对于Or条件相当于一个单列索引。</p>
<p>处理策略</p>
<ol>
<li>And子句多个条件中拥有一个过滤性较高的索引即可;</li>
<li>Or条件前后字段均要创建索引;</li>
<li>为最常用的And组合条件创建复合索引。</li>
</ol>
<h6 id="二-Join优化"><a href="#二-Join优化" class="headerlink" title="(二)Join优化"></a>(二)Join优化</h6><p>####### 1. Nested-Loop Join算法</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="keyword">in</span> t1 matching range &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="keyword">in</span> t2 matching reference key &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="keyword">in</span> t3 &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">row</span> satisfies <span class="keyword">join</span> conditions, send toclient</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在MySQL里，关于join的典型算法就是Nested-Loop Join，也就是嵌套循环。<br>如上图所示，T1、T2、T3三张表Join，首先扫描T1表找到匹配条件的行，然后根据T1、T2的关联条件，再扫描 T2表找 到匹配条件的的行，T2、T3也做同样的操作。<br>既然本质是嵌套循环，那么我们主要需要注意两点:</p>
<ol>
<li>关联字段索引:每层内部循环仅获取需要关心的数据。 引申算法:Bloack Nested-Loop。<img src="/blog/p/e4d2e8fb/Nested-Loop.png" class="" title="Nested-Loop">
如上图所示，下方是Bloack Nested-Loop，在MySQL里有一个特性叫join_buffer，当两张表关联，如果不能够通过索 引去做关联条件的匹配，这时候就会产生join_buffer的使用。<br>当SQL的Join语句，执行计划里出现Bloack Nested-Loop时，通常情况下，需要看关联条件是否有索引，或者是其他原 因而导致关联条件的匹配没有正常使用到索引。一旦SQL语句执行计划出现Bloack Nested-Loop，绝大部分场景下都意 味着SQL执行效率会大幅下降。</li>
<li>小表驱动原则:外层循环的结果集尽量小，目的是为了减少循环的次数。</li>
</ol>
<p>####### 2. 关联字段索引的必要性<br>案例:</p>
<img src="/blog/p/e4d2e8fb/%E5%85%B3%E8%81%94%E5%AD%97%E6%AE%B5%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7-%E6%A1%88%E4%BE%8B.png" class="" title="关联字段索引的必要性-案例">
<p>如上图所示，对于这一条Select语句，是两个表Join关联。SQL语句执行计划时，出现了join_buffer，执行计划extra部 分就是前面所说的Bloack Nested-Loop。</p>
<p>我们可以看到，通过b表关联访问a表时，Rows是127042，整个访问过程的代价特别大，对于这种场景，优化策略是给关 联条件添加索引。如下图所示:</p>
<img src="/blog/p/e4d2e8fb/%E5%85%B3%E8%81%94%E5%AD%97%E6%AE%B5%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7-%E6%A1%88%E4%BE%8B02.png" class="" title="关联字段索引的必要性-案例02">
<p>后面可以看到，通过b表访问a表时，执行计划里Key使用到了刚才所添加的索引，Rows从127042下降到125。前者执行 时间接近两分钟，后者只需要0.31秒，执行效率大幅提升。</p>
<p>####### 3. 小表驱动原则<br>忽略b表的索引，使b表作为驱动表，如下图所示:</p>
<img src="/blog/p/e4d2e8fb/%E5%B0%8F%E8%A1%A8%E9%A9%B1%E5%8A%A8%E5%8E%9F%E5%88%99-%E6%A1%88%E4%BE%8B03.png" class="" title="小表驱动原则-案例03">
<p>同样的SQL语句，这里增加忽略索引的hints，目的是为了通过b表做驱动表，可以看到Rows是4000×125，执行时间是 0.31秒。<br>忽略a表的索引，使a表作为驱动表:</p>
<img src="/blog/p/e4d2e8fb/%E5%B0%8F%E8%A1%A8%E9%A9%B1%E5%8A%A8%E5%8E%9F%E5%88%992.png" class="" title="小表驱动原则2">
<img src="/blog/p/e4d2e8fb/%E5%B0%8F%E8%A1%A8%E9%A9%B1%E5%8A%A8%E5%8E%9F%E5%88%993.png" class="" title="小表驱动原则3">
<p>这时b表成了被驱动表，Rows为127042×4，总行数接近的情况下后者驱动表行数有明显增加。</p>
<p>这两个SQL语句做关联时，无论通过a表还是b表驱动，最后关联时都通过索引进行数据检索。但是由于驱动表的大小问 题，导致了执行效率的不同，后面一条语句执行的时间是0.53秒，比前者慢了一倍左右。</p>
<h6 id="三-Insert优化"><a href="#三-Insert优化" class="headerlink" title="(三)Insert优化"></a>(三)Insert优化</h6><p>关于Insert的插入优化策略主要有2种:</p>
<ol>
<li>优化策略一: “减少交互次数”<br>如批量插入语句:<br><code>insert into test values(1,2,3); insert into test values(4,5,6); insert into test </code>values(7,8,9); …<br>可改写为如下形式:<br><code>insert into test values(1,2,3),(4,5,6),(7,8,9) ...</code></li>
<li>优化策略二: “文本装载方式”<br>通过LOAD DATA INFILE句式从文本装载数据，通常比Insert语句快20倍。</li>
</ol>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>常规优化策略:MySQL查询优化</p>
<ol>
<li>关于MySQL的查询优化目的和目标:<ul>
<li>优化的目的是让资源发挥价值;</li>
<li>SQL和索引是调优的关键，往往可以起到“四两拨千斤”的效果。</li>
</ul>
</li>
<li>关于优化的流程和思路:<br>充分了解核心指标，并构建完备的监控体系，这是优化工作的前提; SQL优化的原则是减少数据访问及计算; 常用的优化方法主要是调整索引、改写SQL、干预执行计划。<br>Apache监控软件:<ul>
<li>skywalking <a href="https://github.com/apache/skywalking" target="_blank" rel="noopener">https://github.com/apache/skywalking</a></li>
<li>prometheus <a href="https://github.com/prometheus/prometheus" target="_blank" rel="noopener">https://github.com/prometheus/prometheus</a></li>
<li>netdata</li>
</ul>
</li>
<li>关于MySQL的核心概念及原理:<ul>
<li>Innodb的表是典型的IOT，数据本身是B+ tree索引的叶节点;</li>
<li>扫描二级索引可以直接获取数据，或者返回主键ID;</li>
<li>优化器是数据库的大脑，我们要了解优化器，并观测以及干预MySQL的行为。</li>
</ul>
</li>
</ol>
<p>数据库级别优化<br>例如：</p>
<ul>
<li>应用程序是否使用适当的 锁定策略？(行表锁)</li>
<li>用于缓存的 所有内存区域大小是否正确？</li>
<li>是否为每个表使用了 <code>正确的存储引擎</code></li>
<li><code>表结构</code> 是否正确</li>
<li>是否使用了 <code>正确的索引</code>，提高查询效率</li>
<li>是否为每一行使用了 <code>正确的属性</code></li>
</ul>
<table>
<thead>
<tr>
<th>支持事务</th>
<th>系统崩溃后安全恢复</th>
<th>锁</th>
<th>文件存储</th>
<th>使用场景</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>InnoDB</td>
<td>√</td>
<td>√</td>
<td>行锁(select * … for update)(只能在事务以及InnoDB中执行)</td>
<td><b>.frm文件</b>：与该表相关的元数据信息、表结构的定义信息等。<br> <b>.ibd文件</b>：与该表相关的数据、索引、表的内部数据字典信息。</td>
<td><b>小型数据</b>：全盘扫描<br> <b>中型数据</b>：索引<br> <b>大型数据</b>：索引+分区分表<br></td>
</tr>
<tr>
<td>MyISAM</td>
<td>×</td>
<td>×</td>
<td>表锁</td>
<td>MYD(数据文件)<br>MYI(索引文件)</td>
<td></td>
</tr>
</tbody></table>
<p>InnoDB中<br>主键查询，可能是行级锁<br>索引查询，可能是行级锁<br>非主键查询，可能是表锁</p>
<p>以下情况下，表锁优于行级锁</p>
<ol>
<li>表的大多数语句均为读取</li>
</ol>
<h4 id="官网文档，待整理"><a href="#官网文档，待整理" class="headerlink" title="官网文档，待整理"></a>官网文档，待整理</h4><blockquote>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/optimization.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/optimization.html</a></p>
</blockquote>
<h5 id="优化SQL语句"><a href="#优化SQL语句" class="headerlink" title="优化SQL语句"></a>优化SQL语句</h5><ol>
<li>添加合理的索引，EXPLAIN查询是否正确使用</li>
<li>隔离和调整查询中花费时间过多的任何地方，例如函数调用。根据查询的结构，可以对结果集中的每一行调用一次函数，甚至可以对表中的每一行调用一次函数，从而极大地提高了效率。</li>
<li>减少全盘扫描的次数，特别是大表</li>
<li>通过 <code>analyze table</code> 定期使用该语句来使表统计信息保持最新 ，因此优化器具有构造有效执行计划所需的信息。</li>
<li>优化存储引擎</li>
<li>优化InnoDB表的 单查询事务</li>
<li>避免以难以理解的方式转换查询，尤其是在优化程序自动执行某些相同转换的情况下。</li>
<li>通过阅读EXPLAIN计划并调整索引，WHERE子句，连接子句等来调查特定查询的内部详细信息 。</li>
<li>调整MySQL用于缓存的内存区域的大小和属性。通过有效地使用 InnoDB 缓冲池， MyISAM键高速缓存和MySQL查询高速缓存，重复查询的运行速度更快，因为第二次及其后的结果是从内存中检索的。</li>
<li>进一步优化缓存区域快速运行的查询</li>
<li>处理锁定问题，其中其他会话同时访问表可能会影响查询速度。</li>
</ol>
<h5 id="优化InnoDB缓冲池"><a href="#优化InnoDB缓冲池" class="headerlink" title="优化InnoDB缓冲池"></a>优化InnoDB缓冲池</h5><p>概念</p>
<ol>
<li>缓冲池(buffer pool)是一种常见的降低磁盘访问的机制；</li>
<li>缓冲池通常以页(page)为单位缓存数据；</li>
<li>缓冲池的常见管理算法是LRU，memcache，OS，InnoDB都使用了这种算法；</li>
<li>InnoDB对普通LRU进行了优化：</li>
</ol>
<p>将缓冲池分为老生代和新生代，入缓冲池的页，优先进入老生代，页被访问，才进入新生代，以解决预读失效的问题<br>页被访问，且在老生代停留时间超过配置阈值的，才进入新生代，以解决批量数据访问，大量热数据淘汰的问题</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">参数：innodb_buffer_pool_size，默认128MB</span><br><span class="line">介绍：配置缓冲池的大小，在内存允许的情况下，DBA往往会建议调大这个参数，越多数据和索引放到内存里，数据库的性能会越好。</span><br><span class="line"></span><br><span class="line">参数：innodb_old_blocks_pct</span><br><span class="line"><span class="section">介绍：老生代占整个LRU链长度的比例，默认是37，即整个LRU中新生代与老生代长度比例是63:37。</span></span><br><span class="line"></span><br><span class="line">画外音：如果把这个参数设为100，就退化为普通LRU了。</span><br><span class="line">参数：innodb_old_blocks_time</span><br><span class="line">介绍：老生代停留时间窗口，单位是毫秒，默认是1000，即同时满足“被访问”与“在老生代停留时间超过1秒”两个条件，才会被插入到新生代头部。</span><br></pre></td></tr></table></figure>
<h5 id="优化-where子句"><a href="#优化-where子句" class="headerlink" title="优化 where子句"></a>优化 where子句</h5><ol>
<li>删除不必要的括号<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">   ((a <span class="keyword">AND </span><span class="keyword">b) </span><span class="keyword">AND </span>c <span class="keyword">OR </span>(((a <span class="keyword">AND </span><span class="keyword">b) </span><span class="keyword">AND </span>(c <span class="keyword">AND </span>d))))</span><br><span class="line">-&gt; (a <span class="keyword">AND </span><span class="keyword">b </span><span class="keyword">AND </span>c) <span class="keyword">OR </span>(a <span class="keyword">AND </span><span class="keyword">b </span><span class="keyword">AND </span>c <span class="keyword">AND </span>d)</span><br></pre></td></tr></table></figure></li>
<li>恒定折叠<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">   (a&lt;<span class="keyword">b </span><span class="keyword">AND </span><span class="keyword">b=c) </span><span class="keyword">AND </span>a=<span class="number">5</span></span><br><span class="line">-&gt; <span class="keyword">b&gt;5 </span><span class="keyword">AND </span><span class="keyword">b=c </span><span class="keyword">AND </span>a=<span class="number">5</span></span><br></pre></td></tr></table></figure></li>
<li>恒定条件消除<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">   (b&gt;=5 <span class="keyword">AND</span> <span class="attribute">b</span>=5) <span class="keyword">OR</span> (<span class="attribute">b</span>=6 <span class="keyword">AND</span> <span class="attribute">5</span>=5) <span class="keyword">OR</span> (<span class="attribute">b</span>=7 <span class="keyword">AND</span> <span class="attribute">5</span>=6)</span><br><span class="line">-&gt; <span class="attribute">b</span>=5 <span class="keyword">OR</span> <span class="attribute">b</span>=6</span><br></pre></td></tr></table></figure></li>
<li>索引使用的常量表达式仅计算一次。</li>
</ol>
<h3 id="Mysql高可用"><a href="#Mysql高可用" class="headerlink" title="Mysql高可用"></a>Mysql高可用</h3><p>解决的问题：<code>单点故障</code></p>
<p>实现方案：MGR8.0</p>
<ul>
<li>数据库切换</li>
<li>跨IDC(互联网数据中心)同步</li>
</ul>
<h4 id="（1）主从复制是异步复制"><a href="#（1）主从复制是异步复制" class="headerlink" title="（1）主从复制是异步复制"></a>（1）主从复制是异步复制</h4><blockquote>
<p>master事务的提交不需要经过slave的确认，slave是否接收到master的binlog，master并不care。slave接收到master binlog后先写relay log，最后异步地去执行relay log中的sql应用到自身。</p>
</blockquote>
<p>导致的问题：</p>
<ul>
<li>数据的一致性问题无法保证：当slave接受master binlog失败或者relay log应用失败，master无法感知。</li>
</ul>
<h4 id="（2）半同步复制"><a href="#（2）半同步复制" class="headerlink" title="（2）半同步复制"></a>（2）半同步复制</h4><blockquote>
<p>对传统异步复制的改进，主库commit之前开启从库的ACK，收到回馈再进行commit。</p>
</blockquote>
<p>导致的问题：</p>
<ul>
<li>数据的一致性问题无法保证：slave对于relay log的应用仍然是异步进行的。</li>
</ul>
<h4 id="（3）组复制-MGR"><a href="#（3）组复制-MGR" class="headerlink" title="（3）组复制 MGR"></a>（3）组复制 MGR</h4><blockquote>
<p>MGR是具备强大的分布式协调能力，可用于创建弹性、高可用性、高容错的复制拓扑的一个MySQL插件。</p>
</blockquote>
<p><strong>通讯协议</strong> ：基于Paxos算法的GCS原子广播协议，保证了一条事务在集群内要么在全部节点上提交，要么全部回滚。</p>
<p><strong>组成员资格</strong> ：MGR内部提供一个视图服务，集群节点之间相互交换各自的视图信息， 从而且实现集群整体的稳态。</p>
<p><strong>数据一致性</strong> ：MGR内部实现了一套不同事务之间修改数据的冲突认证检测机制。在集群的所有节点当中进行一个冲突认证检测，反之，通过冲突认证检测的事务即可提交成功。</p>
<img src="/blog/p/e4d2e8fb/MGR%E7%A4%BA%E4%BE%8B.png" class="" title="MGR示例.png">
<blockquote>
<p>上图是一个三节点的MGR实例集群，Member1代表Primary主节点，Member2、Member3代表 Secondary副节点。</p>
</blockquote>
<h4 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h4><p>当一个<strong>事务发起提交后</strong>，它会通过原子广播协议分发到集群其他 Secondary副节点。集群的 Secondary副节点 通过冲突检测之后，事务提交成功。在大多数的 Secondary副节点 提交成功之后，会在Primary主节点进行提交。</p>
<p>反之，如果在冲突认证检测失败，Secondary副节点会丢弃这段事务对应的Binlog，Primary主节点 回滚该事务。</p>
<h4 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h4><blockquote>
<p>MGR架构分为单主模式和多主模式。</p>
</blockquote>
<h5 id="单主模式"><a href="#单主模式" class="headerlink" title="单主模式"></a>单主模式</h5><blockquote>
<p>group_replication_single_primary_mode &#x3D; ON # ON表示单主模式，也是默认模式，OFF表示多主模式。</p>
</blockquote>
<p>注意事项：</p>
<ul>
<li>同一个组中，不能将成员部署在不同模式中。例如，一个成员配置为单主 模式，另一个成员配置为多主模式。</li>
<li>该集群具有一个设置为读写模式的主节点，组中的所有其他成员都设置为只读模式(superread-only &#x3D; ON);<img src="/blog/p/e4d2e8fb/%E5%8D%95%E4%B8%BB%E6%A8%A1%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%8E%9F%E7%90%86%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class="" title="单主模式集群原理流程图.png"></li>
<li>读写节点通常是引导该组的第一个节点，加入该集群的所有其他只读节点均需要从读写节点同步数据，并自动设置为只 读模式。</li>
</ul>
<h5 id="多主模式"><a href="#多主模式" class="headerlink" title="多主模式"></a>多主模式</h5><blockquote>
<p>group_replication_single_primary_mode &#x3D; OFF # ON表示单主模式，也是默认模式，OFF表示多主模式。</p>
</blockquote>
<img src="/blog/p/e4d2e8fb/%E5%A4%9A%E4%B8%BB%E6%A8%A1%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%8E%9F%E7%90%86%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class="" title="多主模式集群原理流程图.png">
<p>注意事项：</p>
<ol>
<li>所有节点不会区分Primary和Standby角色</li>
<li>加入该集群时，与其他组成员兼容的任何节点都被设置为读写模式，并且可以处理写请求，即使它们在集群内是并发执 行的;</li>
<li>如果组复制中的某个节点停止接受写事务，例如，在某个节点意外宕机的情况下，可以将与其连接的客户端重定向或故 障转移到处于读写模式的任何其他健康的节点;</li>
<li>组复制本身不处理客户端故障转移，因此需要使用中间件框架(例如MySQL Router 8.0代理，连接器或应用程序本 身)来实现。</li>
</ol>
<blockquote>
<p>MySQL Router 8.0 <a href="https://dev.mysql.com/doc/mysql-router/8.0/en/mysql-router-deploying-bootstrapping.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/mysql-router/8.0/en/mysql-router-deploying-bootstrapping.html</a></p>
</blockquote>
<h3 id="Mysql数据一致性"><a href="#Mysql数据一致性" class="headerlink" title="Mysql数据一致性"></a>Mysql数据一致性</h3><p>排他锁(悲观锁) &#x3D; 行锁 或 表锁<br>并发处理方案：</p>
<ol>
<li>排他锁(悲观锁)，但是会阻塞其他请求，效率低下</li>
<li>乐观锁(CAS，Version)，但是有ABA的问题以及bad请求过多，解决办法：重入机制</li>
</ol>
<h3 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h3><p>CONCAT() 用于连接两个字段。许多数据库会使用空格把一个值填充为列宽，因此连接的结果会出现一些不必要的空格，使用 TRIM() 可以去除首尾空格。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(TRIM(col1), <span class="string">&#x27;(&#x27;</span>, TRIM(col2), <span class="string">&#x27;)&#x27;</span>) <span class="keyword">AS</span> concat_col</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></table></figure>


<h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>自连接可以看成内连接的一种，只是连接的表是自身而已。</p>
<p>一张员工表，包含员工姓名和员工所属部门，要找出与 Jim 处在同一部门的所有员工姓名。</p>
<p>子查询版本</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="type">name</span></span><br><span class="line"><span class="keyword">FROM</span> employee</span><br><span class="line"><span class="keyword">WHERE</span> department = (</span><br><span class="line"><span class="keyword">SELECT</span> department</span><br><span class="line"><span class="keyword">FROM</span> employee</span><br><span class="line"><span class="keyword">WHERE</span> <span class="type">name</span> = &quot;Jim&quot;);</span><br></pre></td></tr></table></figure>

<p>自连接版本</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.name</span><br><span class="line"><span class="keyword">FROM</span> employee <span class="keyword">AS</span> e1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employee <span class="keyword">AS</span> e2</span><br><span class="line"><span class="keyword">ON</span> e1.department = e2.department</span><br><span class="line"><span class="keyword">AND</span> e2.name = &quot;Jim&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h4><p>自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。</p>
<p>内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.<span class="keyword">value</span>, B.<span class="keyword">value</span></span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B;</span><br></pre></td></tr></table></figure>

<h3 id="关联更新"><a href="#关联更新" class="headerlink" title="关联更新"></a>关联更新</h3><ol>
<li><p>交叉连接CROSS JOIN</p>
<blockquote>
<p>没有关联条件，结果是笛卡尔积，没有任何意义</p>
</blockquote>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from A,B(,C)</span><br><span class="line">||</span><br><span class="line">select * from A CROSS JOIN B(CROSS JOIN C)</span><br></pre></td></tr></table></figure></li>
<li><p>内连接 INNER JION 或 JOIN</p>
<blockquote>
<p>多表中同时符合某种条件的数据记录的集合</p>
</blockquote>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ON A.id &gt; B.id</span><br><span class="line">ON A.id &gt; B.id</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from A INNER JOIN B on A.id = B.id</span><br></pre></td></tr></table></figure>
</li>
<li><p>全连接FULL JOIN(Mysql不支持)</p>
<blockquote>
<p>可以使用 外连接和联合查询 联合使用</p>
</blockquote>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM A LEFT JOIN B ON A.id=B.id UNION</span><br><span class="line">SELECT * FRPM A RIGHT JOIN B ON A.id=B.id</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h3><p>使用 UNION 来组合两个查询，如果第一个查询返回 M 行，第二个查询返回 N 行，那么组合查询的结果一般为 M+N 行。</p>
<p>每个查询必须包含相同的列、表达式和聚集函数。</p>
<p>默认会去除相同行，如果需要保留相同行，使用 UNION ALL。</p>
<p>只能包含一个 ORDER BY 子句，并且必须位于语句的最后。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col</span><br><span class="line">    <span class="keyword">FROM</span> mytable</span><br><span class="line">    <span class="keyword">WHERE</span> col = <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> col</span><br><span class="line">    <span class="keyword">FROM</span> mytable</span><br><span class="line">    <span class="keyword">WHERE</span> col =<span class="number">2</span>;</span><br></pre></td></tr></table></figure>



<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>Engine|事务|锁级别|外键|热备份|全文索引|系统崩溃后安全恢复|存储方式|说明<br>-|-|-|-|-<br>InnoDB(default)|支持|行锁-支持更高的并发|支持|支持||支持|.frm文件：与该表相关的元数据信息、表结构的定义信息等。 <br>.ibd文件：与该表相关的数据、索引、表的内部数据字典信息。|默认的事务型存储引擎，只有需要用到它不支持的特性时，才考虑使用其它存储引擎<br>MyISAM||表锁|||支持||MYD(数据文件) <br>MYI(索引文件)|非事务处理存储引擎<br>MEMORY||表锁|||||全部数据放在内存中|访问速度较快，但是系统崩溃的话数据都会丢失。<br>CSV||||||||主要存储的是.csv格式的文本数据，可以直接打开存储的文件进行编辑。</p>
<h4 id="InnoDB补充"><a href="#InnoDB补充" class="headerlink" title="InnoDB补充"></a>InnoDB补充</h4><p>主索引是聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。</p>
<p>内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。</p>
<p>支持真正的在线热备份。其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。</p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。</p>
<h4 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h4><ul>
<li><code>原子性(Atomicity)</code>：被视为不可分割的最小单元，所有操作要么全部提交成功，要么全部失败回滚。</li>
<li><code>一致性(Consistency)</code>：数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果都是相同的。</li>
<li><code>隔离性(Isolation)</code>一个事务所做的修改在最终提交以前，对其他事务是不可见的。</li>
<li><code>持久性(Durability)</code>：一旦事务提交，则其所做的修改就会永久保存到数据库中，即使系统发生崩溃，事务执行的结果也不能丢失，应对系统崩溃的情况。<ul>
<li>系统发生崩溃可以用重做日志（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。</li>
</ul>
</li>
</ul>
<h4 id="AUTOCOMMIT"><a href="#AUTOCOMMIT" class="headerlink" title="AUTOCOMMIT"></a>AUTOCOMMIT</h4><p>MySQL 默认采用自动提交模式。也就是说，如果不显式使用START TRANSACTION语句来开始一个事务，那么每个查询操作都会被当做一个事务并自动提交。</p>
<h4 id="并发一致性的问题"><a href="#并发一致性的问题" class="headerlink" title="并发一致性的问题"></a>并发一致性的问题</h4><h5 id="丢失修改"><a href="#丢失修改" class="headerlink" title="丢失修改"></a>丢失修改</h5><p>丢失修改指一个事务的更新操作被另外一个事务的更新操作替换。</p>
<p>一般在现实生活中常会遇到， 例如：T1 和 T2 两个事务都对一个数据进行修改，T1 先修改并提交生效，T2 随后修改，T2 的修改覆盖了 T1 的修改。</p>
<img src="/blog/p/e4d2e8fb/%E4%B8%A2%E5%A4%B1%E4%BF%AE%E6%94%B9.png" class="" title="丢失修改.png">

<h5 id="读脏数据"><a href="#读脏数据" class="headerlink" title="读脏数据"></a>读脏数据</h5><p>读脏数据指在不同的事务下，当前事务可以读到另外事务未提交的数据。</p>
<p>例如：T1 修改一个数据但未提交，T2 随后读取这个数据。如果 T1 撤销了这次修改，那么 T2 读取的数据是脏数据。</p>
<img src="/blog/p/e4d2e8fb/%E8%AF%BB%E8%84%8F%E6%95%B0%E6%8D%AE.png" class="" title="读脏数据">

<h5 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h5><p>不可重复读指在一个事务内多次读取同一数据集合。<br>在这一事务还未结束前，另一事务也访问了该同一数据集合并做了修改，由于第二个事务的修改，第一次事务的两次读取的数据可能不一致。</p>
<p>例如：T2 读取一个数据，T1 对该数据做了修改。如果 T2 再次读取这个数据，此时读取的结果和第一次读取的结果不同。</p>
<img src="/blog/p/e4d2e8fb/%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB.png" class="" title="不可重复读.png">


<h5 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h5><p>幻读本质上也属于不可重复读的情况</p>
<p>T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。</p>
<img src="/blog/p/e4d2e8fb/%E5%B9%BB%E8%AF%BB.png" class="" title="幻读.png">


<p>产生并发不一致性问题的主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。<br>并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。</p>
<h4 id="封锁"><a href="#封锁" class="headerlink" title="封锁"></a>封锁</h4><h5 id="封锁粒度"><a href="#封锁粒度" class="headerlink" title="封锁粒度"></a>封锁粒度</h5><p>MySQL 中提供了两种封锁粒度：行级锁以及表级锁。</p>
<p>应该尽量只锁定需要修改的那部分数据，而不是所有的资源。<br>锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。</p>
<p>但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。<br>因此封锁粒度越小，系统开销就越大。</p>
<p>在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。</p>
<h5 id="封锁类型"><a href="#封锁类型" class="headerlink" title="封锁类型"></a>封锁类型</h5><ol>
<li>读写锁</li>
</ol>
<ul>
<li>互斥锁（Exclusive），简写为 X 锁，又称写锁。</li>
<li>共享锁（Shared），简写为 S 锁，又称读锁。</li>
</ul>
<p>有以下两个规定：</p>
<ul>
<li>一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。</li>
<li>一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。</li>
</ul>
<p>锁的兼容关系如下：</p>
<img src="/blog/p/e4d2e8fb/%E9%94%81%E7%9A%84%E5%85%BC%E5%AE%B9%E5%85%B3%E7%B3%BB.png" class="" title="锁的兼容关系.png">

<ol start="2">
<li>意向锁<br>使用意向锁（Intention Locks）可以更容易地支持多粒度封锁。</li>
</ol>
<p>在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。</p>
<p>意向锁在原来的 X&#x2F;S 锁之上引入了 IX&#x2F;IS，IX&#x2F;IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。<br>有以下两个规定：</p>
<ul>
<li>一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；</li>
<li>一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。</li>
</ul>
<p>通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X&#x2F;IX&#x2F;S&#x2F;IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。</p>
<p>各种锁的兼容关系如下：</p>
<img src="/blog/p/e4d2e8fb/%E5%90%84%E7%A7%8D%E9%94%81%E7%9A%84%E5%85%BC%E5%AE%B9%E5%85%B3%E7%B3%BB.png" class="" title="各种锁的兼容关系.png">

<p>解释如下：</p>
<p>任意 IS&#x2F;IX 锁之间都是兼容的，因为它们只表示想要对表加锁，而不是真正加锁；<br>这里兼容关系针对的是表级锁，而表级的 IX 锁和行级的 X 锁兼容，两个事务可以对两个数据行加 X 锁。<br>（事务 T1 想要对数据行 R1 加 X 锁，事务 T2 想要对同一个表的数据行 R2 加 X 锁，两个事务都需要对该表加 IX 锁，但是 IX 锁是兼容的，并且 IX 锁与行级的 X 锁也是兼容的，因此两个事务都能加锁成功，对同一个表中的两个数据行做修改。）</p>
<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>事务中有四个标准的隔离级别，<code>默认级别</code>是 <code>可重复读(Repeatable read)</code>。</p>
<p>隔离级别|含义|实现方式|出现的问题|问题核心|举例问题|解决办法<br>-|-|-|-|-|-<br>读未提交<br>(Read uncommitted)|A事务中修改了数据但还没提交时，别的事务就可以看到修改后的数据|直接读取最新值|<span style="color:red;font-weight: bold;">脏读</span>|读取到了其他事务未提交或者回滚的数据|A事务读取到了B未提交的数据|隔离级别设置为读已提交<br>读已提交<br>(Read committed)|A事务提交之后，别的事务才可以看到修改的数据|每一次读数据都生成快照，读取快照值(先不深入)|<span style="color:red;font-weight: bold;">不可重复读</span>|在一次事务中读到的数据不一样（这期间别的事务提交了）|A事务两次相同的查询语句，结果却不一样。|隔离级别设置为可重复读<br>可重复读<br>(Repeatable read)|保证在同一个事务中多次读取同一数据的结果是一样的。|事务开始后第一次读的时候生成快照，之后的操作都重复使用这个快照，从而避免幻读。|<span style="color:red;font-weight: bold;">幻读</span>|一个事务按相同条件检索，发现了新的数据（发现不了修改了的数据）|A事务把表中某个字段+1，恰巧这时候事务B向该表中表中插入了一条数据。A用户提交事务之后发现还有数据未修改，好像产生了幻觉。|隔离级别设置成串行化（效率差），不建议。｜｜增加范围锁RangeS，锁定检索范围为只读<br>可串行化<br>(Serializable)|强制事务串行执行，这样多个事务互不干扰，不会出现并发一致性问题。|需要加锁实现||||</p>
<h4 id="多版本并发控制"><a href="#多版本并发控制" class="headerlink" title="多版本并发控制"></a>多版本并发控制</h4><p>多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。<br>而未提交读隔离级别总是读取最新的数据行，要求很低，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p>
<h4 id="解决幻读"><a href="#解决幻读" class="headerlink" title="解决幻读"></a>解决幻读</h4><p>MySQL 可重复读隔离级别并没有彻底解决幻读，只是很大程度上避免了幻读现象的发生。<br>要完全解决幻读需要在开启事务之后，马上执行 select … for update 这类当前读的语句，因为它会对记录加 next-key lock，从而避免其他事务插入一条新记录。</p>
<h3 id="Mysql分区、分表、负载均衡"><a href="#Mysql分区、分表、负载均衡" class="headerlink" title="Mysql分区、分表、负载均衡"></a>Mysql分区、分表、负载均衡</h3><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><h5 id="简述-2"><a href="#简述-2" class="headerlink" title="简述"></a>简述</h5><ul>
<li>对于Mysql底层：将表分成多个物理表</li>
<li>对于用户和程序调用MYSQL处是无感知的</li>
</ul>
<h5 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h5><p>创建表时使用 <code>partition by</code> 子句定义每个分区存放的数据，执行查询时，优化器会根据分区定义过滤那些没有我们需要数据的分区，这样查询只需要查询所需数组在的分区即可<br>如果想一次性删除整个分区的数据也方便<br>比如：以年龄分配，更新时间分配</p>
<h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ol>
<li>容易维护，可以对独立的分区进行独立的操作</li>
<li>分区表的数据可以分布在不同的机器上，从而高效的使用资源</li>
<li>方便备份和恢复独立的分区</li>
</ol>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol>
<li>一个表只能有1024个分区</li>
<li>5.1版本分区表表达式必须是整数，5.5可以使用列分区</li>
<li>分区字段中如果有主键和唯一索引列，那么主键列和唯一列都必须包含进来</li>
<li>分区表中无法使用外键约束</li>
<li>现有表想分区则需要修改表的结构</li>
<li>所有分区都必须使用相同的存储引擎</li>
<li>分区函数中可以使用的函数和表达式会有一些限制</li>
<li>InnoDB和MyISAM都可以使用分区，但是有些不支持分区功能</li>
<li>对于MyISAM的分区表，不能使用load index into cache</li>
<li>对于MyISAM的分区表，需要打开更多的文件描述符</li>
</ol>
<h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ol>
<li>表非常大</li>
<li>局部有热点数据，其他都是不常更新XX数据</li>
</ol>
<h4 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h4><ul>
<li>分表的缺点<ol>
<li>有些分表的策略基于应用层的逻辑算法，一旦改变，整个分表逻辑都会改变，扩展性较差</li>
<li>对于应用层，逻辑算法增加开发成本</li>
</ol>
</li>
</ul>
<h5 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h5><p>通过一些HASH算法或者工具时限将一张数据表垂直或者水平进行物理切分</p>
<ol>
<li>通过hash算法，找出 已经切分中 存放的数据表</li>
</ol>
<h5 id="分表方式"><a href="#分表方式" class="headerlink" title="分表方式"></a>分表方式</h5><ol>
<li><p>水平分割<br>表很大，分割后可以降低在查询时需要读的数据和索引的页数，同时也降低了索引的层数，提高查询速度</p>
<ul>
<li><p>作用</p>
<ol>
<li>按照活跃、不活跃数据区分</li>
<li>按照不同地区、不同时期区分</li>
<li>需要把数据存放在多个介质上(缓存、不同服务器)</li>
</ol>
</li>
<li><p>缺点</p>
<ol>
<li>操作变复杂，通常查询时需要多个表明，查询所有数据时需要UNION操作</li>
<li>使用水平分表查询时，会增加一个读索引层的磁盘次数</li>
</ol>
</li>
<li><p>使用场景</p>
</li>
</ul>
</li>
<li><p>垂直分割<br>把主键和一些列放在一个表，然后把主键和另外的列放在另外一个表中</p>
<ul>
<li><p>作用</p>
<ol>
<li>可以使数据行变小，一个数据页能存储更多的数据，查询时减少I&#x2F;O次数</li>
</ol>
</li>
<li><p>缺点</p>
<ol>
<li>管理冗余列，查询所有数据都需要关联操作(JION)</li>
</ol>
</li>
<li><p>使用场景</p>
<ol>
<li>如果一个表中某些列常用，另外一些列不常用</li>
<li>可以将</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="主从复制-和-负载均衡"><a href="#主从复制-和-负载均衡" class="headerlink" title="主从复制 和 负载均衡"></a>主从复制 和 负载均衡</h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><ol>
<li>将主库上 把数据更改 记录到 二进制日志</li>
<li>从库将 主库的日志 复制到自己的 中继日志</li>
<li>从库读取中继日志的事件(SQL)，将其重放到从库数据中</li>
</ol>
<h5 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h5><ol>
<li>数据分布：随意停止或开始复制，并在不同地理位置分布数据备份</li>
<li>负载均衡：降低单个服务器的压力</li>
<li>高可用和故障切换：帮助应用程序避免单点失败</li>
<li>升级测试：可以使用更高版本的Mysql作为从库 (灰度测试从库，可以则全部覆盖)</li>
</ol>
<h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><ol>
<li>分区分表 概述 优点 缺点 使用场景</li>
<li>主从复制、负载均衡 概述 优点 缺点 使用场景</li>
</ol>
<h5 id="真题："><a href="#真题：" class="headerlink" title="真题："></a>真题：</h5><ul>
<li>设定网站的用户数量在千万级，但是活跃用户的数量只有1%，如何优化数据库提高活跃用户访问数据？</li>
</ul>
<hr>
<h3 id="Mysql安全性"><a href="#Mysql安全性" class="headerlink" title="Mysql安全性"></a>Mysql安全性</h3><h4 id="SQL安全"><a href="#SQL安全" class="headerlink" title="SQL安全"></a>SQL安全</h4><ol>
<li>使用预处理语句，防止SQL注入，建议使用PDO， <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url= &#x27;user/delete/?id=1 or 1=1&#x27;</span><br><span class="line">delete from user where id = 1 or 1=1;</span><br><span class="line">PDO prepare(预处理)</span><br></pre></td></tr></table></figure></li>
<li>写入数据库的数据要进行特殊字符的转义</li>
<li>查询错误信息不返回给用户，将错误记录到日志</li>
</ol>
<h4 id="其他安全设置"><a href="#其他安全设置" class="headerlink" title="其他安全设置"></a>其他安全设置</h4><ol>
<li>定期做数据备份</li>
<li>不给查询用户ROOT权限，合理分配权限(sql权限)</li>
<li>限制用户对数据文件的访问权限(文件权限)</li>
<li>限制一般用户浏览其他库</li>
<li>关闭远程访问数据库权限</li>
<li>修改ROOT密码</li>
<li>删除多余的用户</li>
<li>改变root用户的名称</li>
</ol>
<h4 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h4><ul>
<li>为什么使用PDO和mysqli连接数据库会比mysql函数库更加安全<br>答：Mysqli和PDO有预处理功能，防止SQL注入，安全性高</li>
</ul>
<h4 id="PDO使用方式"><a href="#PDO使用方式" class="headerlink" title="PDO使用方式"></a>PDO使用方式</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dsn: &quot;mysql:host=127.0.0.1;dbname=study&quot;</span></span><br><span class="line"><span class="comment">#options = [PDO::MYSQL_ATTR_INIT_COMMAND=&gt;&quot;SET NAMES UTF8&quot;]</span></span><br><span class="line"><span class="variable">$pdo</span> = <span class="keyword">new</span> PDO(<span class="variable">$dsn</span>,<span class="variable">$username</span>,<span class="variable">$password</span>,<span class="keyword">array</span> <span class="variable">$options</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#增(方式1)</span></span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"><span class="variable">$pdo_pre</span> = <span class="string">&#x27;insert into liuyan(`name`,`content`) values(?,?)&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo_pre</span>-&gt;bindValue(<span class="number">1</span>,<span class="variable">$name</span>);</span><br><span class="line"><span class="variable">$pdo_pre</span>-&gt;bindValue(<span class="number">2</span>,<span class="variable">$content</span>);</span><br><span class="line"><span class="variable">$pdo_pre</span>-&gt;execute()</span><br><span class="line"><span class="variable">$pdo</span>-&gt;insertLastId();</span><br><span class="line"></span><br><span class="line"><span class="comment">#增(方式2)</span></span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"><span class="variable">$pdo_pre</span> = <span class="string">&#x27;insert into liuyan(`name`,`content`) values(name=:name,content:content)&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo_pre</span>-&gt;execute([<span class="string">&#x27;:name&#x27;</span>=&gt;<span class="variable">$name</span>,<span class="string">&#x27;:content&#x27;</span>=&gt;<span class="variable">$content</span>]);</span><br><span class="line"><span class="variable">$pdo</span>-&gt;insertLastId();</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询(方式1)</span></span><br><span class="line"><span class="variable">$content</span> = <span class="string">&#x27;neirong&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&#x27;select * from liuyan where content = ?&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo_pre</span> = <span class="variable">$pdo</span>-&gt;prepare(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$pdo_pre</span>-&gt;bindvalue(<span class="number">1</span>,<span class="variable">$content</span>);</span><br><span class="line"><span class="variable">$pdo_pre</span>-&gt;execute();</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$pdo_pre</span>-&gt;fetchAll(PDO::FETCH_ASSOC);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询(方式2)</span></span><br><span class="line"><span class="variable">$content</span> = <span class="string">&#x27;neirong&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&#x27;select * from liuyan where content = :content&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo_pre</span> = <span class="variable">$pdo</span>-&gt;prepare(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$pdo_pre</span>-&gt;execute([<span class="string">&#x27;:content&#x27;</span>=&gt;<span class="variable">$content</span>]);</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$pdo_pre</span>-&gt;fetchAll(PDO::FETCH_ASSOC);</span><br></pre></td></tr></table></figure>



<h3 id="主从复制-1"><a href="#主从复制-1" class="headerlink" title="主从复制"></a>主从复制</h3><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>主要涉及三个线程：binlog 线程、I&#x2F;O 线程和 SQL 线程。</p>
<ul>
<li>binlog 线程 ：数据更改后，负责将主服务器上的数据更改写入二进制日志（Binary log）中。</li>
<li>I&#x2F;O 线程 ：负责通过端口从主服务器上读取二进制日志，并写入从服务器的中继日志（Relay log）。</li>
<li>SQL 线程 ：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放（Replay）。<img src="/blog/p/e4d2e8fb/zhucongfuzhi.png" class="" title="zhucongfuzhi.png"></li>
</ul>
<h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。</p>
<p>读写分离能提高性能的原因在于：</p>
<ul>
<li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</li>
<li>从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；</li>
<li>增加冗余，提高可用性。</li>
</ul>
<p>读写分离常用代理方式来实现(php框架几乎都有读写分离代理功能)，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。</p>
<img src="/blog/p/e4d2e8fb/duxiefenliproxy.png" class="" title="duxiefenliproxy.png">

<h4 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h4><h5 id="主服务器"><a href="#主服务器" class="headerlink" title="主服务器"></a>主服务器</h5><ol>
<li><p>修改主服务器mysql的配置文件，开启 binary log</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">vim /etc/mysql/bin/my.ini</span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin <span class="comment">#mysql-bin是日志文件名称</span></span><br><span class="line"><span class="attr">bin_log_format</span>=fixed <span class="comment">#混合模式，记录SQL语句 以及 被修改的数据详情</span></span><br><span class="line"><span class="attr">server_id</span>=唯一的id <span class="comment">#可以设置成ip的最后面位数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启主服务器</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会在mysql目录下的var目录生成日志文件 XXX.00001/XXX.00002</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看主服务器的状态信息</span></span><br><span class="line">show <span class="keyword">master</span> <span class="title">status</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置master的信息</span></span><br><span class="line">reset <span class="keyword">master</span> <span class="title"></span></span><br></pre></td></tr></table></figure>

</li>
<li><p>设置 允许从服务器监听</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt;<span class="keyword">grant</span> <span class="keyword">replication</span> slave <span class="keyword">on</span> \*\.\*(所有库的所有表) <span class="keyword">to</span> slave@<span class="number">192.168</span><span class="number">.1</span>.IP identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span></span><br><span class="line">允许slave用户 使用ip和密码访问 主服务器所有库的所有表信息</span><br><span class="line">&gt; <span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> SLAVE <span class="keyword">ON</span> *.* <span class="keyword">to</span> <span class="string">&#x27;slave3110&#x27;</span>@<span class="string">&#x27;192.168.3.110&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;abcABC123&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="从服务器"><a href="#从服务器" class="headerlink" title="从服务器"></a>从服务器</h5><ol>
<li><p>开启 binary log</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/my</span>sql<span class="regexp">/bin/my</span>.ini</span><br><span class="line"></span><br><span class="line"><span class="comment">#log-bin=mysql-bin #注释掉</span></span><br><span class="line"><span class="comment">#bin_log_format=fixed #注释掉</span></span><br><span class="line">relay_log=mysql-relay-bin <span class="comment">#mysql-relay-bin是中继日志文件名称</span></span><br><span class="line">server_id=唯一的id <span class="comment">#可以设置成ip的最后面位数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启</p>
</li>
<li><p>确定是否与主服务器ip连通 <code>ping 主服务器ip</code></p>
</li>
<li><p>监听主服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;change master to</span><br><span class="line">master_host=&#x27;主服务器ip,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_user=&#x27;slave&#x27;,</span><br><span class="line">master_password=&#x27;&#x27;,</span><br><span class="line">master_log_file=&#x27;中继文件名称&#x27; ,</span><br><span class="line">master_log_pos=主服务器show master status时显示的位置;</span><br><span class="line"></span><br><span class="line">&gt;start slave;  #开启监听</span><br><span class="line">&gt;show slave status;</span><br><span class="line">#查看 slave status的 `Slave_IO_Running: Yes` 以及 `Slave_SQL_Running: Yes` 判断是否连接成功即可</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Mysql-双主热备"><a href="#Mysql-双主热备" class="headerlink" title="Mysql 双主热备"></a>Mysql 双主热备</h3><p>概念：Master挂掉不会影响业务，实现心跳感应</p>
<img src="/blog/p/e4d2e8fb/Mysql%E5%BC%80%E5%90%AF%E5%8F%8C%E4%B8%BB%E7%83%AD%E5%A4%87.png" class="" title="Mysql开启双主热备">

<p>核心：将一台正在使用的Slave更改成主服务器</p>
<blockquote>
<p>服务器A 和 服务器B 互为主从</p>
</blockquote>
<img src="/blog/p/e4d2e8fb/Mysql%E5%BC%80%E5%90%AF%E5%8F%8C%E4%B8%BB%E7%83%AD%E5%A4%87_%E4%BA%92%E4%B8%BA%E4%B8%BB%E4%BB%8E.png" class="" title="Mysql开启双主热备_互为主从.png">

<p><font color="red"><b>注意事项：</b></font></p>
<ol>
<li>从服务器开启 binary 日志记录 <font color="red"><b>和 <code>log_slave_updates = 1</code></b></font></li>
<li>主服务器开启 relay 日志拷贝</li>
<li>从服务器赋予 主服务器权限 以及 从服务器&#x2F;用户名&#x2F;密码&#x2F;master_pos</li>
<li>主服务器 <code>change master to (主服务器/用户名/密码/master_pos)</code> 并 <code>start master</code> 开启监听</li>
<li>使用 <code>show master</code> 查看是否正常运行</li>
</ol>
<p>从服务器设置</p>
<ol>
<li><p>从服务器开启 <code>log_slave_updates = 1</code><br>vim &#x2F;etc&#x2F;mysql&#x2F;bin&#x2F;my.ini</p>
<p>log-bin&#x3D;mysql-bin #打开<br>bin_log_format&#x3D;fixed #打开<br>新增 <code>log_slave_updates = 1</code> #含义是将中继日志文件的内容拷贝到 日志文件(mysql-bin)当中<br>relay_log&#x3D;mysql-relay-bin #mysql-relay-bin是中继日志文件名称<br>server_id&#x3D;唯一的id #可以设置成ip的最后面位数</p>
</li>
<li><p>重启从服务器</p>
</li>
<li><p>确定是否与主服务器ip连通 <code>ping 主服务器ip</code></p>
</li>
<li><p>授权主服务器可以监听<br>mysql&gt;grant replication slave on *.*(所有库的所有表) to master@主服务器IP indentified by ‘密码’<br>允许master用户 使用ip和密码访问 从服务器所有库的所有表信息</p>
</li>
<li><p>在主服务器的my.ini开启 <code>relay_log = mysql-relay-bin</code> 和 <code>log_slave_updates = 1</code></p>
</li>
<li><p>主服务器 监听 从服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;change master to</span><br><span class="line">master_host=&#x27;从服务器ip,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_user=&#x27;master&#x27;,</span><br><span class="line">master_password=&#x27;&#x27;,</span><br><span class="line">master_log_file=&#x27;中继文件名称&#x27; ,</span><br><span class="line">master_log_pos=从服务器show master status时显示的位置;</span><br><span class="line"></span><br><span class="line">&gt;start master;  #开启监听</span><br><span class="line">&gt;show master status;</span><br><span class="line">#查看 master status的 `Slave_IO_Running: Yes` 以及 `Slave_SQL_Running: Yes` 判断是否连接成功即可</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Mysql中间件-Mycat-代理"><a href="#Mysql中间件-Mycat-代理" class="headerlink" title="Mysql中间件 Mycat 代理"></a>Mysql中间件 Mycat 代理</h3><p>基本概念：彻底开源，面向企业应用开发的大数据库集群</p>
<hr>
<h3 id="并发检查"><a href="#并发检查" class="headerlink" title="并发检查"></a>并发检查</h3><p>优化索引<br>是否建立合理的索引<br>查看索引是否正常使用<br>优化SQL</p>
<h2 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h2><h3 id="生成大量测试数据"><a href="#生成大量测试数据" class="headerlink" title="生成大量测试数据"></a>生成大量测试数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">set_time_limit(<span class="number">1000</span>);</span><br><span class="line"><span class="variable">$t</span> = time();</span><br><span class="line"><span class="variable">$pwd</span> = getcwd();</span><br><span class="line"><span class="variable">$myFile</span> = <span class="variable">$pwd</span> . <span class="string">&#x27;\\&#x27;</span> . <span class="string">&#x27;insert.sql&#x27;</span>;</span><br><span class="line"><span class="variable">$fhandler</span> = fopen(<span class="variable">$myFile</span>, <span class="string">&#x27;wb&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$fhandler</span>) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="variable">$i</span> = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="variable">$i</span> &lt; <span class="number">1000</span>)<span class="comment">//1,0000,000</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="variable">$name</span> = <span class="string">&#x27;linfeng&#x27;</span> . <span class="variable">$i</span>;</span><br><span class="line">		<span class="variable">$age</span> = rand(<span class="number">1</span>, <span class="number">150</span>);</span><br><span class="line">		<span class="variable">$m</span> = rand(<span class="number">100000000</span>, <span class="number">999999999</span>);</span><br><span class="line">		<span class="variable">$phone</span> = <span class="string">&#x27;13&#x27;</span> . <span class="variable">$m</span>;</span><br><span class="line">		<span class="variable">$time</span> = time();</span><br><span class="line">		<span class="variable">$static</span> = rand(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">		<span class="variable">$i</span>++;</span><br><span class="line">		<span class="variable">$sql</span> = <span class="string">&quot;<span class="subst">$i</span>\t<span class="subst">$name</span>\t<span class="subst">$age</span>\t<span class="subst">$phone</span>\t<span class="subst">$time</span>\t<span class="subst">$static</span>&quot;</span>;</span><br><span class="line">		fwrite(<span class="variable">$fhandler</span>, <span class="variable">$sql</span> . <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;写入成功,耗时：&quot;</span>, time() - <span class="variable">$t</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">exists</span> `cache`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `cache`</span><br><span class="line">(</span><br><span class="line">    `id`    <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `name`  <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `age`   <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `phone` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `<span class="type">time</span>`  <span class="type">TIMESTAMP</span>   <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `<span class="keyword">static</span>`  <span class="type">varchar</span>(<span class="number">50</span>)   <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">    #KEY `a` (`a`),</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use study;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">exists</span> `cache`;</span><br><span class="line"></span><br><span class="line">LOAD DATA <span class="keyword">local</span> INFILE <span class="string">&#x27;C:/Users/Administrator/Desktop/study_php/insert.sql&#x27;</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> `cache`(`id`,`name`,`age`,`phone`,`<span class="type">time</span>`,`<span class="keyword">static</span>`);</span><br></pre></td></tr></table></figure>


<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><p>连接</p>
<blockquote>
<p>mysql -u -p -h -P 用户名 密码 主机 端口</p>
</blockquote>
</li>
<li><p>关闭 or 其他</p>
</li>
<li><p><code>\G</code> 打印结果格式化 垂直显示</p>
</li>
<li><p><code>\c</code> 取消当前mysql命令</p>
</li>
<li><p><code>\q</code> 退出mysql</p>
</li>
<li><p><code>\s</code> 显示服务器状态</p>
</li>
<li><p><code>\h</code> 显示帮助信息</p>
</li>
<li><p><code>\d</code> 改变 执行符号;</p>
</li>
</ul>
<p><strong>查看配置文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有端口(或3306)的进程信息</span></span><br><span class="line">lsof -i(:3306)</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出指定进程所打开的文件</span></span><br><span class="line">lsof -c mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看my.ini的存储位置优先级排序</span></span><br><span class="line">mysql --<span class="built_in">help</span> | grep <span class="string">&#x27;my.cnf&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="面试相关"><a href="#面试相关" class="headerlink" title="面试相关"></a>面试相关</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h4><h4 id="Server架构"><a href="#Server架构" class="headerlink" title="Server架构"></a>Server架构</h4><p>网络连接层<br>服务层<br>存储引擎层<br>系统文件层</p>
<p>数据查询<br>常用函数<br>模糊查询<br>多表连接查询</p>
<h3 id="真题-1"><a href="#真题-1" class="headerlink" title="真题"></a>真题</h3><p>A(id, sex, par, c1, c2)<br>B(id, age, c1, c1)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update A,B set A.c1 = B.c1,A.c2=B.c2</span><br><span class="line">where A.id = B.id and B.age&gt;50</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update A INNER JOIN B on A.id = B.id #on做关联</span><br><span class="line">set A.c1 = B.c1,A.c2=B.c2 #修改的数据</span><br><span class="line">where B.age&gt;50 #设置条件</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/blog/p/b543ced0/</url>
    <content><![CDATA[<p>RabbitMQ基础知识+生产环境所遇到的问题的总结。</p>
<span id="more"></span>
<h2 id="RabbitMQ-是什么？"><a href="#RabbitMQ-是什么？" class="headerlink" title="RabbitMQ 是什么？"></a>RabbitMQ 是什么？</h2><p>一个开源的消息中间件，它能帮助我们在分布式系统中管理消息传递。</p>
<h2 id="AMQP的作用"><a href="#AMQP的作用" class="headerlink" title="AMQP的作用"></a>AMQP的作用</h2><ul>
<li>解耦 <ul>
<li>例子：用户注册后有一系列操作： 头像剪裁压缩水印、汇总该用户可能认识的人、将用户的整个一体系信息汇总到可视化表中<br>通过消息队列分配给 <code>具有不同单一职责的消费者</code> 进行处理，极大程度上<code>解耦</code>。</li>
</ul>
</li>
<li>异步应用<ul>
<li>例子：一个请求中使用异步处理可以 <code>缩短请求时间</code>，并且可以 <code>避免一个请求中任何环节出现问题</code> 影响业务逻辑。</li>
</ul>
</li>
<li>流量削峰<ul>
<li>一天内每个时段系统请求的数量都不同，存在 <code>请求高峰期</code>，对于mq来说，设置合理的消费者每s消费的数量，在不影响系统稳定性的前提下依然能够处理数据。</li>
</ul>
</li>
</ul>
<h2 id="AMQP的缺陷"><a href="#AMQP的缺陷" class="headerlink" title="AMQP的缺陷"></a>AMQP的缺陷</h2><ul>
<li>降低系统可用性<ul>
<li>引入外部依赖越多，系统稳定性越低，MQ挂了应用就停滞数据处理，业务造成影响。</li>
</ul>
</li>
<li>系统复杂度提高<ul>
<li>会出现许多问题，如何保证消息没有重复消费？如何处理消息丢失的情况？如何保证消息传递的顺序性？</li>
</ul>
</li>
<li>一致性问题<ul>
<li>使用异步消息队列分成若干个小系统，有的系统会处理失败，对用户体验造成影响。</li>
</ul>
</li>
</ul>
<h2 id="如何选择-各个AMQP产品的对比"><a href="#如何选择-各个AMQP产品的对比" class="headerlink" title="如何选择(各个AMQP产品的对比)"></a>如何选择(各个AMQP产品的对比)</h2><table>
<thead>
<tr>
<th>AMQP</th>
<th>单机吞吐量</th>
<th>topic数量对吞吐量的影响</th>
<th>时效性</th>
<th>可用性</th>
<th>消息可靠性</th>
<th>功能支持</th>
</tr>
</thead>
<tbody><tr>
<td>ActiveMQ</td>
<td>w级</td>
<td>-</td>
<td>毫秒级</td>
<td>高可用，主从架构</td>
<td>有较低的概率丢失数据</td>
<td>MQ领域中的功能及其完备</td>
</tr>
<tr>
<td>RabbitMQ</td>
<td>w级</td>
<td>-</td>
<td>微妙级，低延迟</td>
<td>高可用，主从架构</td>
<td>-</td>
<td>基于erlang开发，并发能力很强，性能好，延时很低</td>
</tr>
<tr>
<td>RockerMQ</td>
<td>10w级</td>
<td>topic达到几百、几千的级别，吞吐量会有较小幅度的下降，这是RocketMQ的优势，在同等机器的数量下，可以支持大量的topic</td>
<td>毫秒级</td>
<td>非常高，分布式架构</td>
<td>参数优化后可以0丢失</td>
<td>MQ功能完善，支持分布式扩招</td>
</tr>
<tr>
<td>Kafka</td>
<td>10w级</td>
<td>topic达到几十到几百个的时候，吞吐量会大幅度下降，在同等的机器数量下，Kafka尽量保证topic的数量不要过多，如果需要支持支撑大规模的topic，需要增加机器资源</td>
<td>延迟在毫秒级以内</td>
<td>非常高，分布式架构，一个数据多个副本，少数机器宕机，不会丢失数据</td>
<td>参数优化后可以0丢失</td>
<td>功能较为简单，支持简单的MQ功能，主要用于大数据领域，如实时计算以及日志采集等场景，缺点就是学习成本高，比如需要额外学习zookeeper(分布式协调服务)</td>
</tr>
</tbody></table>
<p>总结：</p>
<ul>
<li><code>ActiveMQ</code> 最早使用，但是没经历过大吞吐场景验证，社区不活跃</li>
<li><code>RabbitMQ</code> 稳定，高吞吐，适合单机或主从部署</li>
<li><code>RocketMQ</code> 稳定，阿里出品，进入了Apache基金会，社区活跃，支持分布式</li>
<li><code>Kafka</code> 稳定，社区活跃，适合大数据领域的实时计算、日志采集等场景，支持分布式</li>
</ul>
<h2 id="RabbitMQ-概念"><a href="#RabbitMQ-概念" class="headerlink" title="RabbitMQ 概念"></a>RabbitMQ 概念</h2><img src="/blog/p/b543ced0/exchanges-topic-fanout-direct.png" class="" title="交换器所有的类型(exchanges&#x2F;topic&#x2F;fanout&#x2F;direct)">
<ul>
<li><p><code>Broker</code>：简单来说就是消息队列服务器实体。</p>
</li>
<li><p><code>Exchange</code>：消息交换机，它指定消息按什么规则，路由到哪个队列。</p>
</li>
<li><p><code>Queue</code>：消息队列载体，每个消息都会被投入到一个或多个队列。</p>
</li>
<li><p><code>Binding</code>：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。</p>
</li>
<li><p><code>Routing Key</code>：路由关键字，exchange根据这个关键字进行消息投递。</p>
</li>
<li><p><code>vhost</code>：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。</p>
</li>
<li><p><code>producer</code>：消息生产者，就是投递消息的程序。</p>
</li>
<li><p><code>consumer</code>：消息消费者，就是接受消息的程序。</p>
</li>
<li><p><code>Connection</code>：脚本程序 和 amqp程序 之间真实的 <code>TCP</code> 连接。</p>
</li>
<li><p><code>Channel</code>：虚拟通道，复用 <code>Connection</code>节省系统开销，可建立多个channel，每个channel代表一个会话任务。</p>
<blockquote>
<p>在生产中： 一个 <code>消费者</code> 一个 <code>channel</code>(出于 监听queue 和 消费速度 考虑)，对于 <code>生产者</code> 复用一个 <code>channel</code> 就行。</p>
</blockquote>
</li>
</ul>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ol>
<li>php脚本(客户端)连接到消息队列服务器(tcp进程)，并打开一个channel(线程)。</li>
<li>php脚本(客户端)声明一个 exchange、routing key、queue，绑定好其关系并设置相关属性。</li>
<li>php脚本(客户端)投递消息到exchange。<ul>
<li>exchange 接收到消息后，就根据消息的 key 和已经设置的 binding，进行消息路由，将消息投递到一个或多个队列里。</li>
<li>exchange 也有几个类型，完全根据key进行投递的叫做 <code>Direct</code> 交换机，例如，绑定时设置了 routing key 为”abc”，那么客户端提交的消息，只有设置了key为”abc”的才会投递到队列。对key进行模式匹配后进行投递的叫做 <code>Topic</code> 交换机，符号”#”匹配一个或多个词，符号”*”匹配正好一个词。例如”abc.#”匹配”abc.def.ghi”，”abc.*”只匹配”abc.def”。还有一种不需要key的，叫做 <code>Fanout</code> 交换机，它采取广播模式，一个消息进来时，投递到与该交换机绑定的所有队列。</li>
</ul>
</li>
</ol>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><blockquote>
<p>三者都需要开启持久化，缺一不可</p>
</blockquote>
<ol>
<li>交换器持久化 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">                                                        <span class="comment">#持久化bool</span></span><br><span class="line"><span class="variable">$channel</span>-&gt;exchange_declare(<span class="string">&#x27;direct_logs&#x27;</span>, <span class="string">&#x27;direct&#x27;</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li>
<li>队列持久化 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">                                      <span class="comment">#持久化bool</span></span><br><span class="line"><span class="variable">$channel</span>-&gt;queue_declare(<span class="string">&#x27;hello&#x27;</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li>
<li>Message持久化 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> AMQPMessage(<span class="string">&#x27;Hello World!&#x27;</span>,[</span><br><span class="line">    <span class="string">&#x27;delivery_mode&#x27;</span> =&gt; AMQPMessage::DELIVERY_MODE_PERSISTENT </span><br><span class="line">]);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="投递失败"><a href="#投递失败" class="headerlink" title="投递失败"></a>投递失败</h3><p>什么情况下产生的？</p>
<ul>
<li>生产者将消息 传递到RabbitMQ后PHP故障没有回应，MQ拒收</li>
</ul>
<p>解决方案：</p>
<ul>
<li>消息失败后记录信息，后台可视化界面判断是否重复发送</li>
</ul>
<h3 id="重复消息"><a href="#重复消息" class="headerlink" title="重复消息"></a>重复消息</h3><p>什么情况下产生的？</p>
<ul>
<li><p>生产者重复：生产者将消息 传递给到RabbitMQ后，RabbitMQ故障，迟迟没有给生产者确认，生产者可能重复发送。 </p>
</li>
<li><p>消费者重复：处理完数据后 RabbitMQ宕机或其他(网络波动，内部错误，超时) 没有及时返回ack</p>
<hr>
<hr>
<p>  <b>详细解释</b>：<br>  在互联网应用中，尤其在网络不稳定的情况下，消息队列RabbitMQ版的消息有可能会出现重复。如果消息重复消费会影响您的业务处理，请对消息做幂等处理。消息重复的可能原因如下：</p>
<ul>
<li><p>发送时消息重复</p>
<blockquote>
<p>当一条消息已被成功发送到服务端并完成持久化，此时出现了网络闪断或者客户端宕机，导致服务端对客户端应答失败。 如果此时Producer意识到消息发送失败并尝试再次发送消息，Consumer后续会收到两条内容相同并且Message ID也相同的消息。</p>
</blockquote>
</li>
<li><p>投递时消息重复</p>
<blockquote>
<p>消息消费的场景下，消息已投递到Consumer并完成业务处理，当客户端给服务端反馈应答的时候网络闪断。为了保证消息至少被消费一次，消息队列RabbitMQ版的服务端将在网络恢复后再次尝试投递之前已被处理过的消息，Consumer后续会收到两条内容相同并且Message ID也相同的消息。</p>
</blockquote>
</li>
<li><p>负载均衡时消息重复（包括但不限于网络抖动、服务端重启以及Consumer应用重启）</p>
<blockquote>
<p>当消息队列RabbitMQ版的服务端或客户端重启、扩容或缩容时，会触发Rebalance，此时Consumer可能会收到重复消息。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>解决思路：使用幂等性概念解决</p>
<blockquote>
<p>幂等性: 执行一次和多次产生的影响均相同</p>
</blockquote>
<p>解决方法：</p>
<ol>
<li>在数据库中创建一个 <code>含有唯一索引的key</code> 在消费时<code>开启事务</code>并 Insert <code>唯一Message ID</code></li>
<li>解决重复发送：发送的时候ack确认，生成唯一ID(查询表验证唯一性) 并传递 <code>唯一Message ID</code></li>
<li>解决重复消费：消费的时候ack确认，并且以唯一 <code>Message ID</code> 判断是否重复消费(Mysql事务)，对于重复投递的消息：<code>记录+不执行+确认ACK</code>，等待管理员判断</li>
</ol>
<h3 id="发送者确认模式"><a href="#发送者确认模式" class="headerlink" title="发送者确认模式"></a>发送者确认模式</h3><ol>
<li><b>无法路由</b>，使用 <code>mandatory = ture</code><ul>
<li>进而使用备用交换器(声明交换器时，将备用捆绑到主交换器上)，可以将无法路由的 <code>Message</code> 提交，避免无法路由的情况 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">returnCallBack;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><b>可以路由</b>，但是内部异常，使用发送者通知模式 <code>confirmSelect</code>，并且可以使用异步模式<ul>
<li>成功返回 <code>hack</code></li>
<li>失败返回 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ConfirmCallBack;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="消费者确认模式"><a href="#消费者确认模式" class="headerlink" title="消费者确认模式"></a>消费者确认模式</h3><ol>
<li><p><code>get</code> 手动确认</p>
</li>
<li><p><code>consume</code> 自动确认<br> 可以返回 <code>reject</code> 拒绝该 <code>Message</code>，拒绝后，进入队列中重新分发，可以声明并进入到 死信队列</p>
<blockquote>
<p>死信队列(声明队列时)：1.消息过期 2.队列过期 3.队列消息数满了，后续的进入死信队列</p>
</blockquote>
</li>
<li><p><code>ack</code> 单条数据执行成功，返回已执行标识 </p>
</li>
<li><p><code>nack</code> 单条数据执行失败，返回未执行标识</p>
</li>
</ol>
<h3 id="死信Exchange"><a href="#死信Exchange" class="headerlink" title="死信Exchange"></a>死信Exchange</h3><blockquote>
<p><a href="https://help.aliyun.com/document_detail/148081.htm?spm=a2c4g.11186623.0.0.44e61cf4zhvLbh#concept-2341972" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/148081.htm?spm=a2c4g.11186623.0.0.44e61cf4zhvLbh#concept-2341972</a></p>
</blockquote>
<p><code>死信Exchange</code>适用于处理被消费者否定应答或重试失败的消息。</p>
<img src="/blog/p/b543ced0/%E6%AD%BB%E4%BF%A1.png" class="" title="死信">
<p>消息变成死信消息的可能原因如下：</p>
<ul>
<li>requeue参数被设置为true，消息重试超过16次，消息重试失败</li>
<li>requeue参数被设置为false，消费者使用basic.reject或basic.nack否定应答（NACK）消息。</li>
</ul>
<div class="tip">
注意 过期消息或超过队列最大长度被丢弃的消息不会成为死信消息。
</div>

<p>路由流程：</p>
<ol>
<li>消费者消费失败后消息重试次数超过16次依然没有成功，或者消费者没有消费消息而直接否定应答，消息变成死信消息。</li>
<li>Queue根据x-dead-letter-exchange将死信消息发送到死信Exchange，并根据x-dead-letter-routing-key为死信消息设置死信Routing Key。</li>
<li>死信Exchange将死信消息路由到死信Queue。</li>
</ol>
<h3 id="延时队列"><a href="#延时队列" class="headerlink" title="延时队列"></a>延时队列</h3><ul>
<li><p>简介:带有延迟功能的消息队列</p>
</li>
<li><p>用处:</p>
<ol>
<li>订单未支付，自动更新为 <code>过期</code> 状态</li>
<li>支付相关的分频通知请求</li>
</ol>
</li>
<li><p>使用方式:</p>
<ul>
<li>使用Rabbitmq中的插件 <code>rabbitmq_delayed_message_exchange</code></li>
</ul>
</li>
</ul>
<h2 id="发布消息时的权衡"><a href="#发布消息时的权衡" class="headerlink" title="发布消息时的权衡"></a>发布消息时的权衡</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ol>
<li>有严重的性能问题(降低2-10倍的性能)</li>
<li>使生产者应用产生同步</li>
</ol>
<p>解决方案：</p>
<ol>
<li>开启失败通知 <code>mandatory</code> ，解决无法路由的问题</li>
<li>开启发送方确认模式，交换器将信件通过路由交给队列时，通知生产者投递成功<ul>
<li>揽收成功 ack</li>
<li>发生内部错误无法投递进入队列 nack</li>
</ul>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.开启失败通知</span></span><br><span class="line"><span class="comment">#2.开启发送方确认模式confirmSelect</span></span><br><span class="line"><span class="comment">#3.批量确认waitForConfirmsOrDie</span></span><br><span class="line"><span class="comment">#4.开启异步模式addConfirmListener，不添加就是同步</span></span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_publish(<span class="variable">$msg</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><code>1线程</code> 对应 <code>1信道</code>，<code>n线程</code> 共享 <code>1TCP连接</code></li>
<li>消息需要确认，如果一直不确认，则会一直存在</li>
<li>多个消费者共同绑定多个交换器，MQ会轮询消费者</li>
<li>生产者发送message，没有路由键匹配和相应的配置(<code>mandatory=true</code>打开发消息时的失败通知)，则会被丢弃<br> 无法获取消息是否发送成功 的状态 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第四个参数 $mandatory 开启失败通知</span></span><br><span class="line"><span class="variable">$channel</span>-&gt;basic_publish(<span class="variable">$msg</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li>
<li>如果exchange和queue都是持久化的，那么它们之间的binding也是持久化的。如果exchange和queue两者之间有一个持久化，一个非持久化，就不允许建立绑定。</li>
<li>当路由键找不到主交换器时(无法路由)，进入备用交换器进行消费</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p><a href="https://www.rabbitmq.com/install-rpm.html" target="_blank" rel="noopener">https://www.rabbitmq.com/install-rpm.html</a><br><a href="https://github.com/rabbitmq/rabbitmq-server" target="_blank" rel="noopener">https://github.com/rabbitmq/rabbitmq-server</a><br><a href="https://github.com/rabbitmq/rabbitmq-server/releases" target="_blank" rel="noopener">https://github.com/rabbitmq/rabbitmq-server/releases</a></p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#安装依赖</span><br><span class="line">yum install -y socat logrotate </span><br><span class="line"></span><br><span class="line">#安装erlang</span><br><span class="line">yum install -y erlang-R16B-<span class="number">03</span>.<span class="number">18</span>.el7.x86_64 epel-release</span><br><span class="line"></span><br><span class="line">#安装rabbitmq-server</span><br><span class="line"><span class="built_in">cd</span> /usr/local/src &amp;&amp; wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.<span class="number">6</span>.<span class="number">6</span>/rabbitmq-server-<span class="number">3</span>.<span class="number">6</span>.<span class="number">6</span>-<span class="number">1</span>.el7.noarch.rpm</span><br><span class="line">yum install –y rabbitmq-server-<span class="number">3</span>.<span class="number">6</span>.<span class="number">6</span>-<span class="number">1</span>.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line">#开机自启</span><br><span class="line">chkconfig rabbitmq-server on</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#使用命令：<span class="built_in">start</span>|stop|restart|try-restart|reload|force-reload|status</span><br><span class="line">service rabbitmq-server 命令</span><br><span class="line">##开机自启后，就需要使用下方的命令重启一次服务，生成cookie</span><br><span class="line">systemctl restart rabbitmq-server.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#复制配置文件</span><br><span class="line">cp /usr/share/doc/rabbitmq-server-<span class="number">3</span>.<span class="number">6</span>.<span class="number">6</span>/rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</span><br><span class="line"></span><br><span class="line">#修改配置文件</span><br><span class="line">#使任意的ip都可以使用guest账号访问(待验证)</span><br><span class="line">loopback_users(待验证)</span><br><span class="line">#打开端口(待验证)</span><br><span class="line">&#123;rabbitmq_management,</span><br><span class="line">     &#123;listener, [&#123;port,     <span class="number">15672</span>&#125;]&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#开启端口 RabbitMQ常用端口：client端通信端口： <span class="number">5672</span>      管理端口 ： <span class="number">15672</span>   server间内部通信端口： <span class="number">25672</span></span><br><span class="line">##查看服务器<span class="number">80</span>端口是否打开</span><br><span class="line">firewall-<span class="built_in">cmd</span> --query-port=<span class="number">15672</span>/tcp </span><br><span class="line"></span><br><span class="line">##--permanent #打开<span class="number">80</span>端口，`--permanent`永久生效，没有此参数重启后失效</span><br><span class="line">firewall-<span class="built_in">cmd</span> --add-port=<span class="number">15672</span>/tcp --permanent</span><br><span class="line">firewall-<span class="built_in">cmd</span> --add-port=<span class="number">5672</span>/tcp --permanent</span><br><span class="line">firewall-<span class="built_in">cmd</span> --add-port=<span class="number">25672</span>/tcp --permanent</span><br><span class="line">firewall-<span class="built_in">cmd</span> --add-port=<span class="number">4369</span>/tcp --permanent</span><br><span class="line"></span><br><span class="line">#重启防火墙</span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure>
<h3 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/usr/share/doc/rabbitmq-server-3.6.6</span><br></pre></td></tr></table></figure>
<h3 id="rabbitmq-plugins"><a href="#rabbitmq-plugins" class="headerlink" title="rabbitmq-plugins"></a>rabbitmq-plugins</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#查看所有插件 以及 状态</span><br><span class="line">rabbitmq-plugins list</span><br><span class="line"></span><br><span class="line">#开启插件</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"></span><br><span class="line">#先安装界面管理工具再配置(rabbitmq_management)</span><br><span class="line">#增加用户 rmq150，增加后就可以使用management登陆了</span><br><span class="line">rabbitmqctl add_user rmq150 rmq150</span><br><span class="line">rabbitmqctl set_user_tags rmq150 administrator</span><br><span class="line"></span><br><span class="line">默认浏览器访问端口：`http://localhost:15672/#/`</span><br><span class="line">默认账号密码：guest/guest</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#开启管理界面</span><br><span class="line">#日志一般放在：</span><br><span class="line">    /var/log/rabbitmq/rabbit@centosvm.log</span><br><span class="line">    /var/log/rabbitmq/rabbit@centosvm-sasl.log</span><br><span class="line"></span><br><span class="line">#管理虚拟主机 </span><br><span class="line">    rabbitmqctl add_vhost [vhost_name] </span><br><span class="line">    rabbitmqctl list_vhosts </span><br><span class="line"></span><br><span class="line">#启动和关闭rabbitmq</span><br><span class="line">    rabbitmq-server 会启动Erlang节点和Rabbitmq应用</span><br><span class="line">    rabbitmqctl stop 会关闭Erlang节点和Rabbitmq应用</span><br><span class="line">    rabbitmqctl stop_app 关闭Rabbitmq应用</span><br><span class="line">    rabbitmqctl start_app 启动Rabbitmq应用</span><br><span class="line"></span><br><span class="line">#用户管理</span><br><span class="line">    rabbitmqctl add_user [username] [pwd]</span><br><span class="line">    rabbitmqctl delete_user [username]</span><br><span class="line"></span><br><span class="line">#用户权限控制</span><br><span class="line">    rabbitmqctl set_permissions [-p &lt;vhostpath&gt;] &lt;user&gt; &lt;conf&gt; &lt;write&gt; &lt;read&gt;</span><br><span class="line"></span><br><span class="line">#如用户Mark在虚拟主机logHost上的所有权限：</span><br><span class="line">    rabbitmqctl set_permissions –p logHost Mark  “.*” “.*” “.*” </span><br><span class="line"></span><br><span class="line">查看队列</span><br><span class="line">rabbitmqctl list_queues</span><br><span class="line"></span><br><span class="line">查看交换器</span><br><span class="line">rabbitmqctl list_exchanges</span><br><span class="line"></span><br><span class="line">查看绑定</span><br><span class="line">rabbitmqctl list_bindings</span><br></pre></td></tr></table></figure>

<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>优势：</p>
<ol>
<li>负载均衡</li>
</ol>
<p>注意事项：</p>
<ol>
<li>只能在同一机房下的局域网中配置</li>
<li>集群节点有两种类型：磁盘节点、内存节点(–ram)</li>
</ol>
<h3 id="第一步-hosts，并且hosts需要可执行-chmod-777-etc-hosts"><a href="#第一步-hosts，并且hosts需要可执行-chmod-777-etc-hosts" class="headerlink" title="第一步 hosts，并且hosts需要可执行 chmod 777 /etc/hosts"></a>第一步 hosts，并且hosts需要可执行 <code>chmod 777 /etc/hosts</code></h3><blockquote>
<p>如果不填写的话，能配置成功，但是集群是不通信的</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#有多少个集群就需要配置多少个地址-&gt;节点</span><br><span class="line">#每个机器下面都需要写同一份配置</span><br><span class="line"></span><br><span class="line">192.168.3.160 ip160</span><br><span class="line">192.168.3.161 ip161</span><br><span class="line">192.168.3.162 ip162</span><br><span class="line">192.168.3.163 ip163</span><br></pre></td></tr></table></figure>

<h3 id="第二步-ls-l-var-lib-rabbitmq-erlang-cookie，需要与所有的集群机器一致"><a href="#第二步-ls-l-var-lib-rabbitmq-erlang-cookie，需要与所有的集群机器一致" class="headerlink" title="第二步 ls -l /var/lib/rabbitmq/.erlang.cookie，需要与所有的集群机器一致"></a>第二步 <code>ls -l /var/lib/rabbitmq/.erlang.cookie</code>，需要与所有的集群机器一致</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">修改的时候，需要设置 `chmod 777`</span><br><span class="line">修改后，需要设置成 `chmod 400`</span><br></pre></td></tr></table></figure>
<h3 id="第三步-开启tcp和udp"><a href="#第三步-开启tcp和udp" class="headerlink" title="第三步 开启tcp和udp"></a>第三步 开启tcp和udp</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=15672/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=5672/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=25672/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=4369/tcp --permanent</span><br><span class="line">systemctl restart firewalld  #重启防火墙</span><br></pre></td></tr></table></figure>
<h3 id="第四步-添加环境变量文件"><a href="#第四步-添加环境变量文件" class="headerlink" title="第四步 添加环境变量文件"></a>第四步 添加环境变量文件</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">vim /etc/rabbitmq/rabbitmq-env.conf</span><br><span class="line"></span><br><span class="line">NODENAME=rabbit@ipXXX</span><br></pre></td></tr></table></figure>

<h3 id="第五步-添加集群"><a href="#第五步-添加集群" class="headerlink" title="第五步 添加集群"></a>第五步 添加集群</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br><span class="line"></span><br><span class="line">rabbitmqctl reset</span><br><span class="line"></span><br><span class="line">rabbitmqctl join_cluster rabbit@ip161 --ram</span><br><span class="line"></span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure>

<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li>运行rabbitmqctl status出现Error: unable to connect to node rabbit@controller: nodedown之类问题考虑如下几种解决办法：<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1、重启服务</span><br><span class="line">service rabbitmq-server stop</span><br><span class="line">service rabbitmq-server start</span><br><span class="line"></span><br><span class="line">2、检查/var/lib/rabbitmq中是否存在.erlang.cookie，没有则新建一个，里面随便输入一段字符串</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 报错Server ack<span class="symbol">&#x27;ed</span> unknown delivery_tag <span class="string">&quot;2&quot;</span></span><br><span class="line">循环publisher时， $this<span class="punctuation">-&gt;</span>channel<span class="punctuation">-&gt;</span><span class="title function_ invoke__">confirm_select</span>();要首先执行，不能嵌入</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>AMQP</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/blog/p/f3599f9d/</url>
    <content><![CDATA[<p>Redis基础知识+生产环境所遇到的问题的总结。</p>
<span id="more"></span>

<h2 id="为什么使用redis-缓存中间件"><a href="#为什么使用redis-缓存中间件" class="headerlink" title="为什么使用redis(缓存中间件)"></a>为什么使用redis(缓存中间件)</h2><p>为什么要使用缓存层？<br>因为请求量级达到一定程度，会对系统造成宕机。</p>
<p>为什么要用Redis？<br>做对比</p>
<h3 id="对比-其他-缓存中间件"><a href="#对比-其他-缓存中间件" class="headerlink" title="对比 其他 缓存中间件"></a>对比 其他 缓存中间件</h3><table>
<thead>
<tr>
<th>中间件</th>
<th>-</th>
<th>支持类型</th>
<th>持久化(灾难恢复)</th>
<th>分布式</th>
<th>内存管理机制</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>Redis</td>
<td>非关系型&amp;内存键值数据库</td>
<td>多种(5基础+3特殊)</td>
<td>RDB快照、AOF日志</td>
<td>Redis Cluster 可以实现</td>
<td>惰性删除+定期删除</td>
<td>支持lua脚本</td>
</tr>
<tr>
<td>Memcache</td>
<td>非关系型&amp;内存键值数据库</td>
<td>仅支持字符串类型</td>
<td>-</td>
<td>不支持，只能通过在客户端使用一致性哈希来实现分布式存储，这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点。</td>
<td>只有惰性删除</td>
<td>-</td>
</tr>
</tbody></table>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>Redis</code> 非关系型（NoSQL）kv数据库，使用单线程事件循环和 IO 多路复用完成任务</p>
<h3 id="为什么快"><a href="#为什么快" class="headerlink" title="为什么快"></a>为什么快</h3><ul>
<li><p>基于内存，内存的访问速度比磁盘快(CPU1-2-3-4缓存，到内存，到固态，到机械硬盘)</p>
</li>
<li><p>基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用</p>
</li>
<li><p>内置了多种优化后的数据结构实现</p>
<p>  Tips：redis6版本引入了多线程(CPU)，但是只是针对于提高网络IO读写功能，因为redis的主要瓶颈主要受限于内存和网络，并不是CPU</p>
<blockquote>
<p>如果要开启redis6的多线程，要从默认关闭的配置项中开启 <code>edit redis.conf</code></p>
</blockquote>
</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis6.0 启用多线程</span></span><br><span class="line"><span class="attribute">io</span>-threads-do-reads yes; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 并且设置线程数</span></span><br><span class="line"><span class="attribute">io</span>-threads <span class="number">4</span> #官网建议<span class="number">4</span>核的机器建议设置为<span class="number">2</span>或<span class="number">3</span>个线程，<span class="number">8</span>核的建议设置为<span class="number">6</span>个线程</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tips：如果开启多线程，至少要4核的机器，且Redis实例已经占用相当大的CPU耗时的时候才建议采用，否则使用多线程没有意义。</span></span><br></pre></td></tr></table></figure>

<img src="/blog/p/f3599f9d/why-redis-so-fast.png" class="" title="why-redis-so-fast">




<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>储存结构</th>
<th>简介</th>
<th>优缺点</th>
<th>补充</th>
</tr>
</thead>
<tbody><tr>
<td>String(字符串)</td>
<td>类似java的ArrayList</td>
<td>普通kv存储</td>
<td>可以包含任何数据，但是一个键最大能存储512M</td>
<td></td>
</tr>
<tr>
<td>List(列表)</td>
<td>类似java的LinkedList</td>
<td>链表(双向链表)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Hash(字典、散列)</td>
<td>类似java的HashMap</td>
<td>键值对集合</td>
<td>编程语言中的Map类型</td>
<td></td>
</tr>
<tr>
<td>Set(集合)</td>
<td>未知，不可重复</td>
<td>哈希表实现,元素不重复</td>
<td>1、添加、删除,查找的复杂度都是O(1) <br>2、为集合提供了求交集、并集、差集等操作</td>
<td></td>
</tr>
<tr>
<td>Sorted Set</td>
<td>未知，不可重复</td>
<td>zSet(有序集合)将zSet中的元素增加一个权重参数score,元素按score有序排列</td>
<td>数据插入集合时,已经进行天然排序</td>
<td></td>
</tr>
<tr>
<td>HyperLogLog(基数统计)</td>
<td>未知</td>
<td>基数统计(统计一个集合中不重复的元素个数)</td>
<td>节省空间，但是有误差</td>
<td>统计Google 主页面每天被多少个不同的账户访问</td>
</tr>
<tr>
<td>Geo(地理位置)</td>
<td>未知</td>
<td>地理信息定位</td>
<td>可以处理空间维度的数据<br>内部是以zset方式存储数据，可以维护一个集合的数据</td>
<td>检索用户附近的人(经纬度) <span style="color:red">需要补充</span></td>
</tr>
<tr>
<td>Bitmap(位存储)</td>
<td>未知</td>
<td>需要保存状态信息（0&#x2F;1 即可表示）的场景</td>
<td></td>
<td>Bitmap 存储的是连续的二进制数字（0 和 1），通过 Bitmap, 只需要一个 bit 位来表示某个元素对应的值或者状态，key 就是对应元素本身 。我们知道 8 个 bit 可以组成一个 byte，所以 Bitmap 本身会极大的节省储存空间。</td>
</tr>
</tbody></table>
<p>相关文章：<br><a href="https://mp.weixin.qq.com/s/AvPoG8ZZM8v9lKLyuSYnHQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/AvPoG8ZZM8v9lKLyuSYnHQ</a></p>
<h2 id="内存淘汰机制"><a href="#内存淘汰机制" class="headerlink" title="内存淘汰机制"></a>内存淘汰机制</h2><h3 id="键的过期时间"><a href="#键的过期时间" class="headerlink" title="键的过期时间"></a>键的过期时间</h3><p>Redis 可以为每个键设置过期时间，当键过期时，会自动删除该键。</p>
<p>Redis 中除了字符串类型有自己独有设置过期时间的命令 setex 外，其他方法都需要依靠 expire 命令来设置过期时间 。另外， persist 命令可以移除一个键的过期时间。</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; expire key <span class="number">60</span> # 数据在 60s 后过期</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; setex key <span class="number">60</span> value # 数据在 60s 后过期 (setex:<span class="string">[set]</span> + <span class="string">[ex]</span>pire)</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; ttl key # 查看数据还有多久过期</span><br><span class="line">(integer) <span class="number">56</span></span><br></pre></td></tr></table></figure>
<p><code>hash</code> 只能设置整个键的过期时间，而不能设置里面单个元素的过期时间</p>
<h3 id="过期数据的-删除策略"><a href="#过期数据的-删除策略" class="headerlink" title="过期数据的 删除策略"></a>过期数据的 删除策略</h3><p>假设设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的？<br>常用的过期数据的删除策略就两个：</p>
<ol>
<li>惰性删除 ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。</li>
<li>定期删除 ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。</li>
</ol>
<p>定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 定期删除+惰性&#x2F;懒汉式删除 。</p>
<p>但是，还有一些遗漏的(但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。)</p>
<p>解决方案：Redis内存淘汰机制</p>
<h3 id="非热点数据的-淘汰策略"><a href="#非热点数据的-淘汰策略" class="headerlink" title="非热点数据的 淘汰策略"></a>非热点数据的 淘汰策略</h3><blockquote>
<p>相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?</p>
</blockquote>
<p>Redis 提供有 6 种淘汰策略：</p>
<table>
<thead>
<tr>
<th>策略</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>allkeys-lru</td>
<td>从所有数据集中挑选最近<code>最少使用</code>的数据淘汰</td>
</tr>
<tr>
<td>volatile-lru</td>
<td>从<code>已设置过期时间</code>的数据集中挑选最近<code>最少使用</code>的数据淘汰</td>
</tr>
<tr>
<td>volatile-ttl</td>
<td>从<code>已设置过期时间</code>的数据集中挑选<code>将要过期</code>的数据淘汰</td>
</tr>
<tr>
<td>volatile-random</td>
<td>从<code>已设置过期时间</code>的数据集中<code>任意选择</code>数据淘汰</td>
</tr>
<tr>
<td>allkeys-random</td>
<td>从所有数据集中<code>任意选择</code>数据进行淘汰</td>
</tr>
<tr>
<td>noeviction</td>
<td>禁止驱逐数据</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Redis 4.0 引入的策略</th>
<th>描述(LFU 策略通过统计访问频率，将访问频率最少的键值对淘汰)</th>
</tr>
</thead>
<tbody><tr>
<td>allkeys-lfu</td>
<td>当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key</td>
</tr>
<tr>
<td>volatile-lfu</td>
<td>从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰</td>
</tr>
</tbody></table>
<p>作为内存数据库，出于对性能和内存消耗的考虑，Redis 的淘汰算法实际实现上并非针对所有 key，而是<code>抽样一小部分</code>并且从中选出被淘汰的 key。</p>
<p>使用 Redis 缓存数据时，为了提高缓存命中率，需要保证缓存数据都是热点数据。可以将内存最大使用量设置为热点数据占用的内存量，然后启用 allkeys-lru 淘汰策略，将最近最少使用的数据淘汰。<br>最终方案：</p>
<ul>
<li>将内存最大使用量设置为热点数据占用的内存量</li>
<li>启用 <code>allkeys-lru</code> 淘汰策略，将最近最少使用的数据淘汰</li>
</ul>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>Redis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。</p>
<h3 id="整体对比"><a href="#整体对比" class="headerlink" title="整体对比"></a>整体对比</h3><table>
<thead>
<tr>
<th>方式</th>
<th>含义</th>
<th>存储的数据内容</th>
<th>优缺点</th>
</tr>
</thead>
<tbody><tr>
<td>RDB</td>
<td>快照(某个时间点的全量数据快照)</td>
<td>二进制文件</td>
<td>Redis是单线程工作的，开启了快照后，在redis工作中备份和相应请求需要同时处理，进程会堵塞</td>
</tr>
<tr>
<td>AOF</td>
<td>日志(Redis服务器顺序指令序列)</td>
<td>内存数据修改指令记录的文件(RESP协议)</td>
<td>AOF日志如果不定期进行处理，则随着时间增长数据量会非常庞大，redis服务进行重启加载aof文件时很耗时，导致无法对外提供服务</td>
</tr>
<tr>
<td>RDB &amp; AOF</td>
<td>RDB做全量持久化，AOF做增量持久化</td>
<td>AOF 重写产生的文件将同时包含 RDB 格式的内容和 AOF 格式的内容，该文件的前半段是 RDB 格式的全量数据，而后半段是 Redis 命令格式的增量数据</td>
<td>AOF日志如果不进行处理，则数据量会非常庞大，在redis服务进行重启加载aof文件时长非常长(使用AOF重写)</td>
</tr>
</tbody></table>
<h3 id="持久化流程执行图"><a href="#持久化流程执行图" class="headerlink" title="持久化流程执行图"></a>持久化流程执行图</h3><ol>
<li>当AOF和RDB文件同时存在时，优先加载AOF</li>
<li>若关闭了AOF，加载RDB文件</li>
<li>加载AOF&#x2F;RDB成功，redis重启成功</li>
<li>AOF&#x2F;RDB存在错误，启动失败打印错误信息<img src="/blog/p/f3599f9d/redis%E9%87%8D%E5%90%AF%E6%97%B6%E5%8A%A0%E8%BD%BDAOF%E4%B8%8ERDB%E7%9A%84%E9%A1%BA%E5%BA%8F.jpg" class="" title="redis重启时加载AOF与RDB的顺序"></li>
</ol>
<h3 id="RDB快照"><a href="#RDB快照" class="headerlink" title="RDB快照"></a>RDB快照</h3><p>Redis是单线程工作的，开启了快照后，在redis工作中备份和相应请求需要同时处理。这样就造成了性能下滑。<br>Redis RBD 快照使用了 操作系统ROW机制(Copy On Write)机制实现持久化。</p>
<p>Redis 使用glibc fork(派生)出一个子进程负责快照的创建<br>父子两个进程共享内存数据</p>
<ul>
<li>父进程继续处理请求，对内存数据结构不间断修改</li>
<li>子进程对内存中的数据结构进行遍历读取，然后序列化写入磁盘中</li>
</ul>
<p>在共享的数据中</p>
<ul>
<li>父进程要处理请求，就要修改数据，这个时候会使用操作系统的COW机制，将将要修改的数据复制一份出来</li>
<li>子进程备份的是fork出进程时那一刻的数据(快照数据)，那一刻起，数据就已经凝固了，能安安静静的持久化到磁盘，所以也叫快照数据；它和已经修改的数据(复制出来的数据)互不干扰，当然被分离出来的数据&lt;&#x3D;快照数据</li>
</ul>
<h4 id="RDB配置-下面的例子没有被证明正确性"><a href="#RDB配置-下面的例子没有被证明正确性" class="headerlink" title="RDB配置 下面的例子没有被证明正确性"></a>RDB配置 下面的例子没有被证明正确性</h4><ol>
<li><code>appendonly no</code> 关闭aof</li>
<li><code>dbfilename dump.rdb</code> 确认rdb文件名</li>
<li><code>dir ./</code> 确认rdb存放路径，可以通过 <code>127.0.0.1:6379&gt;config get dir</code> 查看具体的路径</li>
<li><code>redis-cli SHUTDOWN</code> 关闭redis <b style="color:red">切记使用 <code>sudo</code> 权限并且关闭所有的redis进程，否则可能恢复数据失败</b></li>
<li>将 <code>dump.rdb</code> 文件放入 <code>dir</code> 中</li>
<li>重启redis</li>
</ol>
<blockquote>
<p>save 同步备份(不推荐)</p>
</blockquote>
<ul>
<li><code>vi redis.conf</code></li>
<li><code>save 900 1</code> 90秒内有一条写的指令就触发save</li>
<li><code>save 300 10</code></li>
<li><code>save 60 10000</code></li>
<li><code>stop-writes-on-bysave-error yes</code> 当备份进程出错时，主进程停止写入心得指令，保护一致性问题</li>
<li><code>rdbcompression no</code> 是否先压缩再进行备份保存，推荐no，如果有完善Redis体系推荐yes</li>
</ul>
<blockquote>
<p>save 同步备份(不推荐)</p>
</blockquote>
<ul>
<li>通过COW机制(copy on write) fork(派生)一个子进程异步进行备份</li>
</ul>
<h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>将写命令添加到 AOF 文件（Append Only File）的末尾。</p>
<p>使用 AOF 持久化需要设置同步选项，从而确保写命令同步到磁盘文件上的时机。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>同步频率</th>
</tr>
</thead>
<tbody><tr>
<td>always</td>
<td>每个写命令都同步</td>
</tr>
<tr>
<td>everysec</td>
<td>每秒同步一次</td>
</tr>
<tr>
<td>no</td>
<td>让操作系统来决定何时同步</td>
</tr>
</tbody></table>
<ul>
<li><code>always</code> 选项会严重减低服务器的性能；</li>
<li><code>everysec</code> 选项比较合适，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响；</li>
<li><code>no</code> 选项并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量。</li>
</ul>
<p>随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。</p>
<h4 id="AOF配置-下面的例子没有被证明正确性"><a href="#AOF配置-下面的例子没有被证明正确性" class="headerlink" title="AOF配置 下面的例子没有被证明正确性"></a>AOF配置 下面的例子没有被证明正确性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启用aof持久化方式</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line">appendfsync (always|everysec|no)</span><br><span class="line">    always #每收到写命令就立即强制写入磁盘，最慢的，但是保证完全的持久化，不推荐使用</span><br><span class="line">    everysec #每秒强制写入磁盘一次，性能和持久化方面做了折中，推荐</span><br><span class="line">    no #完全依赖os，性能最好,持久化没保证（操作系统自身的同步）</span><br><span class="line"></span><br><span class="line">#正在导出rdb快照的过程中,要不要停止同步aof</span><br><span class="line">no-appendfsync-on-rewrite yes</span><br><span class="line"></span><br><span class="line">#aof文件大小比起上次重写时的大小,增长率100%时,重写</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line">#aof文件,至少超过64M时,重写</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>

<h3 id="最终方案：RDB-和-AOF-的混合持久化"><a href="#最终方案：RDB-和-AOF-的混合持久化" class="headerlink" title="最终方案：RDB 和 AOF 的混合持久化"></a>最终方案：RDB 和 AOF 的混合持久化</h3><blockquote>
<p><a href="https://redis.io/docs/management/persistence/" target="_blank" rel="noopener">https://redis.io/docs/management/persistence/</a></p>
</blockquote>
<p>配置项 <code>aof-use-rdb-preamble</code> 开启即可</p>
<p>如果把混合持久化打开，AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。<br>这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。当然缺点也是有的， AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。</p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote>
<p>生产时遇到的bug：一个用户的<code>多个消费请求</code>(刷礼物连续点击送小心心x1000次)进入脚本层，<code>判断redis当中用户的余额是否足够</code> and <code>扣减redis当中用户的余额</code> 是两个redis-&gt;key操作，不具备原子性，解决方案Lua脚本。</p>
</blockquote>
<p>一个事务包含了多个命令，服务器在执行事务期间，不会改去执行其它客户端的命令请求。</p>
<p>事务中的多个命令被一次性发送给服务器，而不是一条一条发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。</p>
<p>Redis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。</p>
<p>redis事务在运行错误的情况下，不支持回滚操作，替补方案就是结合lua脚本将多个语句变换成单一具有原子性的语句执行。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>待补充…</p>
<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>通过使用 slaveof host port 命令来让一个服务器成为另一个服务器的从服务器。</p>
<p>一个从服务器只能有一个主服务器，并且不支持主主复制。</p>
<p>主从服务器最好架构是 一台主节点、两台从节点服务器，因为从节点增多，主节点带宽压力很大</p>
<h3 id="连接过程"><a href="#连接过程" class="headerlink" title="连接过程"></a>连接过程</h3><p>主服务器创建快照文件，发送给从服务器，并在发送期间使用缓冲区记录执行的写命令。快照文件发送完毕之后，开始向从服务器发送存储在缓冲区中的写命令；</p>
<p>从服务器丢弃所有旧数据，载入主服务器发来的快照文件，之后从服务器开始接受主服务器发来的写命令；</p>
<p>主服务器每执行一次写命令，就向从服务器发送相同的写命令。</p>
<h3 id="主从链"><a href="#主从链" class="headerlink" title="主从链"></a>主从链</h3><p>随着负载不断上升，主服务器可能无法很快地更新所有从服务器，或者重新连接和重新同步从服务器将导致系统超载。为了解决这个问题，可以创建一个中间层来分担主服务器的复制工作。中间层的服务器是最上层服务器的从服务器，又是最下层服务器的主服务器。</p>
<img src="/blog/p/f3599f9d/%E4%B8%BB%E4%BB%8E%E9%93%BE.png" class="" title="主从链">

<h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><blockquote>
<p>主节点ip：192.168.3.150<br>从节点ip1：192.168.3.161<br>从节点ip2：192.168.3.162</p>
</blockquote>
<h3 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h3><ol>
<li>方式一、在从服务器上(161)的 <code>redis.conf</code> 新增, 加入 <code>slaveof 192.168.3.150 6379</code>, 主服务器(150)启动完后再启动服务器(161)，完成配置；</li>
<li>方式二、<code>redis-server --slaveof 192.168.3.150 6379</code></li>
<li>查看状态：进入redis后执行 <code>info replication</code></li>
<li>解除从节点：在从节点，进入redis后执行 <code>&gt;slaveof no one</code></li>
<li>断开后再变成主从复制：在从服务器上(161)，进入redis后执行 <code>&gt; slaveof 192.168.3.150 6379</code></li>
<li>数据较重要的节点，主从复制时使用密码验证： <code>requirepass</code></li>
<li>从节点建议用只读模式 <code>slave-read-only=yes</code>, 若从节点修改数据，主从数据不一致</li>
</ol>
<h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><ol>
<li>保存主节点信息</li>
<li>主从建立socket连接</li>
<li>发送ping命令</li>
<li>权限验证(验证密码)</li>
<li>同步数据集</li>
<li>命令持续复制</li>
</ol>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<p>传输延迟：主从一般部署在不同机器上，复制时存在网络延时问题，redis提供repl-disable-tcp-nodelay参数决定是否关闭TCP_NODELAY,默认为关闭<br>参数关闭时：无论大小都会及时发布到从节点，占带宽，适用于主从网络好的场景，<br>参数启用时：主节点合并所有数据成TCP包节省带宽，默认为40毫秒发一次，取决于内核，主从的同步延迟40毫秒，适用于网络环境复杂或带宽紧张，如跨机房</p>
</blockquote>
<h2 id="Sentinel-哨兵"><a href="#Sentinel-哨兵" class="headerlink" title="Sentinel(哨兵)"></a>Sentinel(哨兵)</h2><p>哨兵可以监听集群中的服务器，并在主服务器进入下线状态时，自动从从服务器中选举出新的主服务器。</p>
<h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><img src="/blog/p/f3599f9d/redis%20%E6%8C%87%E4%BB%A4%E8%AF%B4%E6%98%8E.jpg" class="" title="redis 指令说明">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`bind` 如果指定了bind，则说明只允许来自指定网卡的Redis请求。如果没有指定，就说明可以接受来自任意一个网卡的Redis请求。</span><br></pre></td></tr></table></figure>

<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><h3 id="分片-不同的key分散到不同节点"><a href="#分片-不同的key分散到不同节点" class="headerlink" title="分片(不同的key分散到不同节点)"></a>分片(不同的key分散到不同节点)</h3><p>一致性哈希算法：对2^32取模，将哈希值空间组织成虚拟的圆环</p>
<p>产生的问题：</p>
<ol>
<li>节点失效(宕机) 影响了哪些数据</li>
<li>节点节点(新增服务器) 影响了哪些数据</li>
<li>数据倾斜<br>解决办法：<ul>
<li>虚拟节点</li>
<li>ip+编号，数量&gt;32个</li>
</ul>
</li>
</ol>
<hr>
<p>分片是将数据划分为多个部分的方法，可以将数据存储到多台机器里面，这种方法在解决某些问题时可以获得线性级别的性能提升。</p>
<p>假设有 4 个 Redis 实例 R0，R1，R2，R3，还有很多表示用户的键 user:1，user:2，… ，有不同的方式来选择一个指定的键存储在哪个实例中。</p>
<ul>
<li>最简单的方式是范围分片，例如用户 id 从 0 ~ 1000 的存储到实例 R0 中，用户 id 从 1001 ~ 2000 的存储到实例 R1 中，等等。但是这样需要维护一张映射范围表，维护操作代价很高。</li>
<li>还有一种方式是哈希分片，使用 CRC32 哈希函数将键转换为一个数字，再对实例数量求模就能知道应该存储的实例。</li>
</ul>
<p>根据执行分片的位置，可以分为三种分片方式：</p>
<ul>
<li>客户端分片：客户端使用一致性哈希等算法决定键应当分布到哪个节点。</li>
<li>代理分片：将客户端请求发送到代理上，由代理转发请求到正确的节点上。</li>
<li>服务器分片：Redis Cluster。</li>
</ul>
<h2 id="通信方式-RESP协议"><a href="#通信方式-RESP协议" class="headerlink" title="通信方式-RESP协议"></a>通信方式-RESP协议</h2><blockquote>
<p><a href="https://redis.io/topics/protocol" target="_blank" rel="noopener">https://redis.io/topics/protocol</a><br>每种语言的redis扩展(php的php_redis扩展、java的Jredis扩展)底层都是通过RESP协议与redis进行交互<br>AOF文件存储的也是RESP协议的字符串 包括换行符</p>
</blockquote>
<h3 id="pipeline-非原子性"><a href="#pipeline-非原子性" class="headerlink" title="pipeline(非原子性)"></a>pipeline(非原子性)</h3><h4 id="pipeline出现的背景："><a href="#pipeline出现的背景：" class="headerlink" title="pipeline出现的背景："></a>pipeline出现的背景：</h4><p>redis客户端执行一条命令分4个过程：</p>
<ol>
<li>发送命令</li>
<li>命令排队</li>
<li>命令执行</li>
<li>返回结果</li>
</ol>
<p>核心：php通过socket与redis通信，传输经过组合的字符串，也就是符合Resp协议的字符串即可，收到回应后进行拆解。<br>这个过程称为Round trip time(简称RTT, 往返时间)，mget mset有效节约了RTT，但大部分命令（如hgetall，并没有mhgetall）不支持批量操作，需要消耗N次RTT ，这个时候需要pipeline来解决这个问题</p>
<p>resp协议特点：</p>
<ol>
<li>字符串都是以 <code>\r\n</code> 结尾</li>
<li><code>+</code> 简单字符串 <code>-</code> 异常</li>
<li><code>*</code> 数组</li>
<li><code>$1</code> 1表示字符串的长度</li>
</ol>
<ul>
<li><code>*0</code> 0表示空的数组</li>
<li><code>*-1</code> -1表示是null的数组<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. simple string. 简单的字符串.</span></span><br><span class="line"><span class="comment"> *      &quot;+OK\r\n&quot;</span></span><br><span class="line"><span class="comment"> * 2. error. 就是表示这是一个错误(异常)情况</span></span><br><span class="line"><span class="comment"> *      &quot;-ERR unknown command &#x27;foobar&#x27;\r\n&quot;</span></span><br><span class="line"><span class="comment"> * 3. integer 表示这是一个整数</span></span><br><span class="line"><span class="comment"> *      &quot;:1000\r\n&quot;</span></span><br><span class="line"><span class="comment"> * 4. bulk string. 表示是长字符串,但是必须小于512M.</span></span><br><span class="line"><span class="comment"> *      &quot;$0\r\n&quot;   --$后面的0表示这是一个空字符串</span></span><br><span class="line"><span class="comment"> *      &quot;$-1\r\n&quot;  -- $后面的-1表示这是一个null字符串,Null Bulk String要求客户端返回空对象,而不能简单地返回个空字符串</span></span><br><span class="line"><span class="comment"> *      &quot;$6\r\nABCDEF\r\n&quot;  -- ABCDEF是6个字节,所以$后面是6</span></span><br><span class="line"><span class="comment"> * 5. arrays. 表示这是一个数组,数组元素可以是上面的任意一种类型,也可以是一个数组</span></span><br><span class="line"><span class="comment"> *      &quot;*0\r\n&quot;   --*后面的0表示表示空的数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &quot;*-1\r\n&quot;  --*后面的-1表示表示是null数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &quot;*5\r\n     -- *5表示这是一个拥有5个元素的数组</span></span><br><span class="line"><span class="comment">        +bar\r\n    -- 第1个元素是简单的字符串</span></span><br><span class="line"><span class="comment">        -unknown command\r\n      -- 第2个元素是个异常</span></span><br><span class="line"><span class="comment">        :3\r\n      -- 第3个元素是个整数</span></span><br><span class="line"><span class="comment">        $3\r\n      -- 第4个元素是长度为3个字节的长字符串foo</span></span><br><span class="line"><span class="comment">        foo\r\n     -- 第4个元素的内容</span></span><br><span class="line"><span class="comment">         *3\r\n      -- 第5个元素又是个数组</span></span><br><span class="line"><span class="comment">        :1\r\n      -- 第5个元素数组的第1元素</span></span><br><span class="line"><span class="comment">        :2\r\n      -- 第5个元素数组的第2元素</span></span><br><span class="line"><span class="comment">        :3\r\n      -- 第5个元素数组的第3元素</span></span><br><span class="line"><span class="comment">        &quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Lua脚本-原子性"><a href="#Lua脚本-原子性" class="headerlink" title="Lua脚本(原子性)"></a>Lua脚本(原子性)</h2><ol>
<li>将Lua脚本加载到redis中，得到sha <code>./redis-cli -h -p -a script load &quot;$(cat redis.lua)&quot;</code><blockquote>
<p>redis.lua</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">redis.call(<span class="string">&#x27;set&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
<li>加载脚本 <code>evalsha sha member key [key ...] arg [arg ...]</code></li>
<li>清空Lua脚本内容 <code>script flush</code></li>
<li>杀掉正在执行的Lua脚本 <code>script kill</code></li>
<li>查看脚本是否存在 <code>script exists afe55555555555555555555555555555555555555</code></li>
</ol>
<h2 id="Redis优化"><a href="#Redis优化" class="headerlink" title="Redis优化"></a>Redis优化</h2><h4 id="优化键值"><a href="#优化键值" class="headerlink" title="优化键值"></a>优化键值</h4><blockquote>
<p><a href="https://developer.aliyun.com/article/531067?spm=5176.24320532.content1.2.4ebb3da0qjSV79" target="_blank" rel="noopener">https://developer.aliyun.com/article/531067?spm=5176.24320532.content1.2.4ebb3da0qjSV79</a></p>
</blockquote>
<h5 id="Key优化"><a href="#Key优化" class="headerlink" title="Key优化"></a>Key优化</h5><ol>
<li><p>可读性、可管理性，符号分隔(:_等)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user:&#123;uid&#125; <span class="comment">#业务名(或数据库名):前缀（防止key冲突）</span></span><br><span class="line"><span class="built_in">object</span>-<span class="built_in">type</span>:<span class="built_in">id</span>:attr</span><br></pre></td></tr></table></figure>
</li>
<li><p>简洁性(需要控制key的长度)</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">user:</span>&#123;uid&#125;<span class="symbol">:griends</span><span class="symbol">:messages</span><span class="symbol">:</span>&#123;mid&#125;  <span class="comment">#前期项目可以这样设计</span></span><br><span class="line"><span class="comment">#简化为</span></span><br><span class="line"><span class="symbol">u:</span>&#123;uid&#125;<span class="symbol">:fr</span><span class="symbol">:m</span><span class="symbol">:</span>&#123;mid&#125; <span class="comment">#后期项目key量非常大的时候，非常占内存，进行简化</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>BigKey<br>简单来说，如果一个 key 对应的 value 所占用的内存比较大，那这个 key 就可以看作是 bigkey。具体多大才算大呢？<br>有一个不是特别精确的参考标准：string 类型的 value 超过 10 kb，复合类型的 value 包含的元素超过 5000 个（对于复合类型的 value 来说，不一定包含的元素越多，占用的内存就越多）。</p>
</li>
</ol>
<p>除了会消耗更多的内存空间，bigkey 对性能也会有比较大的影响。<br>因此，我们应该尽量避免写入 bigkey！</p>
<p>如何发现 bigkey？</p>
<ol>
<li>使用 Redis 自带的 –bigkeys 参数来查找。<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="meta"># redis-cli -p 6379 --bigkeys</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Scanning the entire keyspace to find biggest keys as well as</span></span><br><span class="line"><span class="meta"># average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec</span></span><br><span class="line"><span class="meta"># per 100 SCAN commands (not usually needed).</span></span><br><span class="line"></span><br><span class="line">[<span class="number">00.00</span>%] Biggest string found so far <span class="string">&#x27;&quot;ballcat:oauth:refresh_auth:f6cdb384-9a9d-4f2f-af01-dc3f28057c20&quot;&#x27;</span> <span class="keyword">with</span> <span class="number">4437</span> bytes</span><br><span class="line">[<span class="number">00.00</span>%] Biggest <span class="built_in">list</span>   found so far <span class="string">&#x27;&quot;my-list&quot;&#x27;</span> <span class="keyword">with</span> <span class="number">17</span> <span class="built_in">items</span></span><br><span class="line"></span><br><span class="line">-------- summary -------</span><br><span class="line"></span><br><span class="line">Sampled <span class="number">5</span> <span class="built_in">keys</span> <span class="built_in">in</span> the keyspace!</span><br><span class="line">Total key length <span class="built_in">in</span> bytes is <span class="number">264</span> (avg len <span class="number">52.80</span>)</span><br><span class="line"></span><br><span class="line">Biggest   <span class="built_in">list</span> found <span class="string">&#x27;&quot;my-list&quot;&#x27;</span> has <span class="number">17</span> <span class="built_in">items</span></span><br><span class="line">Biggest string found <span class="string">&#x27;&quot;ballcat:oauth:refresh_auth:f6cdb384-9a9d-4f2f-af01-dc3f28057c20&quot;&#x27;</span> has <span class="number">4437</span> bytes</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> lists <span class="keyword">with</span> <span class="number">17</span> <span class="built_in">items</span> (<span class="number">20.00</span>% of <span class="built_in">keys</span>, avg <span class="built_in">size</span> <span class="number">17.00</span>)</span><br><span class="line"><span class="number">0</span> hashs <span class="keyword">with</span> <span class="number">0</span> fields (<span class="number">00.00</span>% of <span class="built_in">keys</span>, avg <span class="built_in">size</span> <span class="number">0.00</span>)</span><br><span class="line"><span class="number">4</span> strings <span class="keyword">with</span> <span class="number">4831</span> bytes (<span class="number">80.00</span>% of <span class="built_in">keys</span>, avg <span class="built_in">size</span> <span class="number">1207.75</span>)</span><br><span class="line"><span class="number">0</span> streams <span class="keyword">with</span> <span class="number">0</span> entries (<span class="number">00.00</span>% of <span class="built_in">keys</span>, avg <span class="built_in">size</span> <span class="number">0.00</span>)</span><br><span class="line"><span class="number">0</span> sets <span class="keyword">with</span> <span class="number">0</span> <span class="built_in">members</span> (<span class="number">00.00</span>% of <span class="built_in">keys</span>, avg <span class="built_in">size</span> <span class="number">0.00</span>)</span><br><span class="line"><span class="number">0</span> zsets <span class="keyword">with</span> <span class="number">0</span> <span class="built_in">members</span> (<span class="number">00.00</span>% of <span class="built_in">keys</span>, avg <span class="built_in">size</span> <span class="number">0.00</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>从这个命令的运行结果，我们可以看出：这个命令会扫描(Scan) Redis 中的所有 key ，会对 Redis 的性能有一点影响。并且，这种方式只能找出每种数据结构 top 1 bigkey（占用内存最大的 string 数据类型，包含元素最多的复合数据类型）。</p>
<ol start="2">
<li>分析 RDB 文件</li>
</ol>
<p>通过分析 RDB 文件来找出 big key。这种方案的前提是你的 Redis 采用的是 RDB 持久化。</p>
<p>网上有现成的代码&#x2F;工具可以直接拿来使用：</p>
<ul>
<li>redis-rdb-tools ：Python 语言写的用来分析 Redis 的 RDB 快照文件用的工具</li>
<li>rdb_bigkeys : Go 语言写的用来分析 Redis 的 RDB 快照文件用的工具，性能更好。</li>
</ul>
<h5 id="Value优化"><a href="#Value优化" class="headerlink" title="Value优化"></a>Value优化</h5><p>少用bigkey<br>防止网卡流量、慢查询，string类型控制在10KB以内，hash、list、set、zset元素个数不超过5000<br>反例：一个包含200万个元素的list。</p>
<p>非字符串的bigkey，不要使用del删除，使用hscan、sscan、zscan方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞，而且该操作不会不出现在慢查询中(latency可查))，查找方法和删除方法</p>
<p>选择适合的数据类型</p>
<p>例如：实体类型(要合理控制和使用数据结构内存编码优化配置,例如ziplist，但也要注意节省内存和性能之间的平衡)</p>
<p>反例：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">user</span>:<span class="number">1</span>:<span class="type">name</span> lee</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">user</span>:<span class="number">1</span>:age <span class="number">20</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">user</span>:<span class="number">1</span>:favor football</span><br></pre></td></tr></table></figure>

<p>正例:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hmset</span> user:<span class="number">1</span> name  age <span class="number">20</span> favor football</span><br></pre></td></tr></table></figure>

<h2 id="Redis-实战"><a href="#Redis-实战" class="headerlink" title="Redis 实战"></a>Redis 实战</h2><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h4 id="List双向链表实现"><a href="#List双向链表实现" class="headerlink" title="List双向链表实现"></a>List双向链表实现</h4><p>消息队列：<code>List</code> 是一个双向链表，可以通过 <code>lpush(写入头部)</code> 和 <code>rpop(取出最后一个元素)</code> 或是相反先进先出的写入和读取，完成</p>
<p>如果没数据可以消费，则是用list的 <code>Blpop</code> or <code>Brpop</code> 睡眠一段时间，它会阻塞到有消息来为止。</p>
<p>缺点：</p>
<ul>
<li>只支持单个消费</li>
<li>没有ACK确认机制</li>
</ul>
<h4 id="订阅发布实现"><a href="#订阅发布实现" class="headerlink" title="订阅发布实现"></a>订阅发布实现</h4><p>pub&#x2F;sub主题订阅者模式（生产者 &#x2F; 消费者模型），支持多个消费者</p>
<p>缺点：</p>
<ul>
<li>不支持持久化</li>
</ul>
<h4 id="Redis-Streams数据结构实现"><a href="#Redis-Streams数据结构实现" class="headerlink" title="Redis Streams数据结构实现"></a>Redis Streams数据结构实现</h4><blockquote>
<p><a href="https://redis.io/docs/data-types/streams/" target="_blank" rel="noopener">https://redis.io/docs/data-types/streams/</a></p>
</blockquote>
<p>Redis流是一种数据结构，其作用类似于只追加日志。您可以使用流实时记录和同时联合事件。Redis流用例示例包括：</p>
<ul>
<li>事件源（例如，跟踪用户操作、点击等）</li>
<li>传感器监测（例如，现场设备的读数）</li>
<li>通知（例如，在单独的流中存储每个用户的通知记录）</li>
</ul>
<p>Redis为每个流条目生成一个唯一的ID。您可以使用这些ID稍后检索它们的关联条目，或者读取和处理流中的所有后续条目。</p>
<p>Redis流支持多种微调策略（以防止流无限增长）和多种消费策略（请参阅XREAD、XREADGROUP和XRANGE）。</p>
<p>解决了：</p>
<ul>
<li>持久化问题</li>
<li>ACK确认机制</li>
</ul>
<h5 id="总结来看，看哪种策略更容易上生产"><a href="#总结来看，看哪种策略更容易上生产" class="headerlink" title="总结来看，看哪种策略更容易上生产"></a>总结来看，看哪种策略更容易上生产</h5><p>个人推荐使用专业的消息队列 Kafka、RabbitMQ 等消息中间件。</p>
<h3 id="延时消息队列"><a href="#延时消息队列" class="headerlink" title="延时消息队列"></a>延时消息队列</h3><p>zset<br>scope：被消费的时间<br>value：实体内容<br>消费者用zrangebyscore指令获取N秒之前的数据轮询进行处理</p>
<h3 id="Redis实现分布式锁"><a href="#Redis实现分布式锁" class="headerlink" title="Redis实现分布式锁"></a>Redis实现分布式锁</h3><blockquote>
<p><a href="https://javaguide.cn/distributed-system/distributed-lock.html#%E5%9F%BA%E4%BA%8E-redis-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81" target="_blank" rel="noopener">https://javaguide.cn/distributed-system/distributed-lock.html#%E5%9F%BA%E4%BA%8E-redis-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81</a></p>
</blockquote>
<a href="/blog/p/f3599f9f/" title="分布式锁">分布式锁</a>
<h4 id="自带-setnx-and-setxx-实现"><a href="#自带-setnx-and-setxx-实现" class="headerlink" title="自带 setnx and setxx 实现"></a>自带 <code>setnx</code> and <code>setxx</code> 实现</h4><p><code>nx</code> not exist,如果不存在，则执行<br><code>xx</code> 如果存在，则执行</p>
<p>完整流程：setnx抢锁，并expire(设置过期时间也是一起设置的，原子性)，防止死锁</p>
<p>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。<br>缺陷：</p>
<ul>
<li>只能作用于一个redis节点上</li>
</ul>
<h4 id="官方提供的-RedLock-分布式锁"><a href="#官方提供的-RedLock-分布式锁" class="headerlink" title="官方提供的 RedLock 分布式锁"></a>官方提供的 RedLock 分布式锁</h4><p>在Redis的分布式环境中，我们假设有N个Redis master。这些节点完全互相独立，不存在主从复制或者其他集群协调机制。<br>我们确保将在N个实例上使用与在Redis单实例下相同方法获取和释放锁。现在我们假设有5个Redis master节点，同时我们需要在5台服务器上面运行这些Redis实例，这样保证他们不会同时都宕掉。<br>为了取到锁，客户端应该执行以下操作:</p>
<ul>
<li>获取当前Unix时间，以毫秒为单位。</li>
<li>依次尝试从5个实例，使用相同的key和具有唯一性的value（例如UUID）获取锁。当向Redis请求获取锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为10秒，则超时时间应该在5-50毫秒之间。这样可以避免服务器端Redis已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试去另外一个Redis实例请求获取锁。</li>
<li>客户端使用当前时间减去开始获取锁时间（步骤1记录的时间）就得到获取锁使用的时间。当且仅当从大多数（N&#x2F;2+1，这里是3个节点）的Redis节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</li>
<li>如果取到了锁，key的真正有效时间等于有效时间减去获取锁所使用的时间（步骤3计算的结果）。</li>
<li>如果因为某些原因，获取锁失败（没有在至少N&#x2F;2+1个Redis实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的Redis实例上进行解锁（即便某些Redis实例根本就没有加锁成功，防止某些节点获取到锁但是客户端没有得到响应而导致接下来的一段时间不能被重新获取锁）。</li>
</ul>
<p> TODO 待补充…</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>会话缓存：可以使用 Redis 来统一存储多台应用服务器的会话信息。<br>限流桶</p>
<blockquote>
<p><a href="https://mp.weixin.qq.com/s/kyFAWH3mVNJvurQDt4vchA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/kyFAWH3mVNJvurQDt4vchA</a></p>
</blockquote>
<h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>场景：数据 不存在缓存 也不存在数据库中，每次都打到数据库中，中间缓存层失效，可能导致项目宕机</p>
<img src="/blog/p/f3599f9d/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F.png" class="" title="缓存穿透">

<h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><h6 id="脚本层优化校验"><a href="#脚本层优化校验" class="headerlink" title="脚本层优化校验"></a>脚本层优化校验</h6><ul>
<li>参数校验id不能&lt;0之类的</li>
</ul>
<h6 id="缓存无效key"><a href="#缓存无效key" class="headerlink" title="缓存无效key"></a>缓存无效key</h6><p>如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下： SET key value EX 10086 。<br>这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。<br>很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。<br>另外，这里多说一嘴，一般情况下我们是这样设计 key 的： 表名:列名:主键名:主键值 。</p>
<p>如果用 Java 代码展示的话，差不多是下面这样的：</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">Object</span> <span class="title function_">getObjectInclNullById</span>(Integer id) &#123;</span><br><span class="line">    <span class="comment">// 从缓存中获取数据</span></span><br><span class="line">    <span class="built_in">Object</span> cacheValue = cache.<span class="property">get</span>(id);</span><br><span class="line">    <span class="comment">// 缓存为空</span></span><br><span class="line">    <span class="keyword">if</span> (cacheValue == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 从数据库中获取</span></span><br><span class="line">        <span class="built_in">Object</span> storageValue = storage.<span class="property">get</span>(<span class="built_in">key</span>);</span><br><span class="line">        <span class="comment">// 缓存空对象</span></span><br><span class="line">        cache.<span class="property">set</span>(<span class="built_in">key</span>, storageValue);</span><br><span class="line">        <span class="comment">// 如果存储数据为空，需要设置一个过期时间(300秒)</span></span><br><span class="line">        <span class="keyword">if</span> (storageValue == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 必须设置过期时间，否则有被攻击的风险</span></span><br><span class="line">            cache.<span class="property">expire</span>(<span class="built_in">key</span>, <span class="number">60</span> * <span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> storageValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cacheValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h6><blockquote>
<p><a href="https://javaguide.cn/cs-basics/data-structure/bloom-filter.html" target="_blank" rel="noopener">https://javaguide.cn/cs-basics/data-structure/bloom-filter.html</a></p>
</blockquote>
<p>布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。</p>
<p>具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。</p>
<p>加入布隆过滤器之后的缓存处理流程图如下。</p>
<img src="/blog/p/f3599f9d/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8.png" class="" title="布隆过滤器">

<p>但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是： 布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。</p>
<p>为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！</p>
<p>我们先来看一下，当一个元素加入布隆过滤器中的时候，会进行哪些操作：</p>
<ol>
<li>使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。</li>
<li>根据得到的哈希值，在位数组中把对应下标的值置为 1。</li>
</ol>
<p>我们再来看一下，当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：</p>
<ol>
<li>对给定元素再次进行相同的哈希计算；</li>
<li>得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。</li>
</ol>
<p>然后，一定会出现这样一种情况：不同的字符串可能哈希出来的位置相同。 （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）</p>
<p>以下是补充…<br>布隆过滤器是一种数据结构，它通过将数据映射到一个固定大小的位数组中来快速确定数据是否存在。布隆过滤器可以用于高效地检测一个数据项是否在一个集合中，它通常被用来检测垃圾邮件，爬虫爬取的网页和社交网络中的垃圾信息等。</p>
<ul>
<li>首先，需要创建一个固定大小的位数组，用于存储数据。</li>
<li>然后，需要选择一些哈希函数，用于将数据映射到位数组中的位置。</li>
<li>接着，将数据添加到位数组中，可以通过对数据进行多次哈希，并将每次哈希结果映射到位数组中的不同位置来实现。</li>
<li>最后，可以通过检查数据是否存在于位数组中来确定数据是否在原始集合中。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接到 Redis 服务器</span></span><br><span class="line"><span class="variable">$redis</span> = <span class="keyword">new</span> Redis();</span><br><span class="line"><span class="variable">$redis</span>-&gt;connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义要添加到布隆过滤器的 ID</span></span><br><span class="line"><span class="variable">$ids</span> = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义哈希函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash1</span>(<span class="params"><span class="variable">$id</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> crc32(<span class="variable">$id</span>) % <span class="number">10000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash2</span>(<span class="params"><span class="variable">$id</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> md5(<span class="variable">$id</span>) % <span class="number">10000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往布隆过滤器中添加 ID</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$ids</span> <span class="keyword">as</span> <span class="variable">$id</span>) &#123;</span><br><span class="line">    <span class="variable">$redis</span>-&gt;setbit(<span class="string">&#x27;bloom_filter&#x27;</span>, hash1(<span class="variable">$id</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$redis</span>-&gt;setbit(<span class="string">&#x27;bloom_filter&#x27;</span>, hash2(<span class="variable">$id</span>), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测一个 ID 是否在布隆过滤器中</span></span><br><span class="line"><span class="variable">$id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$redis</span>-&gt;getbit(<span class="string">&#x27;bloom_filter&#x27;</span>, hash1(<span class="variable">$id</span>)) &amp;&amp; <span class="variable">$redis</span>-&gt;getbit(<span class="string">&#x27;bloom_filter&#x27;</span>, hash2(<span class="variable">$id</span>))) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;ID found&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;ID not found&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><blockquote>
<p>热点数据问题，通常是因为缓存数据过期了</p>
</blockquote>
<p>场景：数据 不存在缓存 存在数据库中，每次都打到数据库中，中间缓存层失效，可能导致项目宕机<br>具体例子：秒杀进行过程中，缓存中的某个秒杀商品的数据突然过期，这就导致瞬时大量对该商品的请求直接落到数据库上，对数据库造成了巨大的压力。</p>
<img src="/blog/p/f3599f9d/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF.png" class="" title="缓存击穿">

<p>解决办法：</p>
<ul>
<li>设置热点数据过期时间比较长。</li>
<li>限制流量。</li>
<li>请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。</li>
</ul>
<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>场景：缓存在同一时间大面积的失效，每次都打到数据库中，中间缓存层失效，可能导致项目宕机</p>
<img src="/blog/p/f3599f9d/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9.png" class="" title="缓存雪崩">

<p>解决办法：</p>
<ul>
<li>防止redis服务不可用的情况<ul>
<li>采用redis集群，避免单机出现故障</li>
</ul>
</li>
<li>防止热点缓存失效的情况<ul>
<li>设置不同的失效时间比如随机设置缓存的失效时间</li>
<li>设置二级缓存</li>
</ul>
</li>
</ul>
<p>上面提到过：对于过期 key，Redis 采用的是 定期删除+惰性&#x2F;懒汉式删除 策略。</p>
<p>定期删除执行过程中，如果突然遇到大量过期 key 的话，客户端请求必须等待定期清理过期 key 任务线程执行完成，因为这个这个定期任务线程是在 Redis 主线程中执行的。这就导致客户端请求没办法被及时处理，响应速度会比较慢。</p>
<p>如何解决呢？下面是两种常见的方法：</p>
<ul>
<li>给 key 设置随机过期时间。</li>
<li>开启 lazy-free（惰性删除&#x2F;延迟释放） 。lazy-free 特性是 Redis 4.0 开始引入的，指的是让 Redis 采用异步方式延迟释放 key 使用的内存，将该操作交给单独的子线程处理，避免阻塞主线程。</li>
</ul>
<p>个人建议不管是否开启 lazy-free，我们都尽量给 key 设置随机过期时间。</p>
<h4 id="缓存和数据库一致性问题"><a href="#缓存和数据库一致性问题" class="headerlink" title="缓存和数据库一致性问题"></a>缓存和数据库一致性问题</h4><blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIyOTYxNDI5OA==&amp;mid=2247487312&amp;idx=1&amp;sn=fa19566f5729d6598155b5c676eee62d&amp;chksm=e8beb8e5dfc931f3e35655da9da0b61c79f2843101c130cf38996446975014f958a6481aacf1&amp;scene=178&amp;cur_album_id=1699766580538032128#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzIyOTYxNDI5OA==&amp;mid=2247487312&amp;idx=1&amp;sn=fa19566f5729d6598155b5c676eee62d&amp;chksm=e8beb8e5dfc931f3e35655da9da0b61c79f2843101c130cf38996446975014f958a6481aacf1&amp;scene=178&amp;cur_album_id=1699766580538032128#rd</a></p>
</blockquote>
<p>分量级</p>
<h5 id="量级很小"><a href="#量级很小" class="headerlink" title="量级很小"></a>量级很小</h5><p>方案：全量存储，全部数据刷新到缓存当中，更新数据库之后，更新缓存，不设置过期时间，读缓存，读不到读数据库，并且重建缓存</p>
<p>问题：</p>
<ul>
<li>缓存利用率低：不经常用的数据也在缓存中</li>
<li>更新数据库和缓存，存在先后问题，因为有异常情况</li>
</ul>
<h5 id="量级中等-严谨一些"><a href="#量级中等-严谨一些" class="headerlink" title="量级中等(严谨一些)"></a>量级中等(严谨一些)</h5><p>方案：热点的数据过期时长长一些，并且设置淘汰策略将过期的淘汰掉，更新数据库之后，更新缓存，不设置过期时间，读缓存，读不到读数据库，并且重建缓存</p>
<p>问题：</p>
<ul>
<li>更新数据库和缓存，存在先后问题，因为有异常情况</li>
</ul>
<ol>
<li><p>先更新缓存，后更新数据库<br>如果数据库更新失败，用户端可能会看到自己修改过后的数据变回去了，对业务造成影响</p>
</li>
<li><p>先更新数据库，后更新缓存<br>如果缓存更新失败，用户端可能没看到变更提示，但是数据变更了，对业务造成影响</p>
</li>
</ol>
<p>解决方案：更新数据库+删除缓存</p>
<p>就算在线程并发的时候，也必须满足三个条件才会造成数据不一致</p>
<ul>
<li>缓存刚好已失效</li>
<li>读请求 + 写请求并发</li>
<li>更新数据库 + 删除缓存的时间（步骤 3-4），要比读数据库 + 写缓存时间短（步骤 2 和 5）</li>
</ul>
<p>如何保证两步都执行成功<br>异步重试：其实就是把重试请求写到「消息队列」中，然后由专门的消费者来重试，直到成功。<br>或者更直接的做法，为了避免第二步执行失败，我们可以把操作缓存这一步，直接放到消息队列中，由消费者来操作缓存。</p>
<h4 id="线上redis有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？"><a href="#线上redis有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？" class="headerlink" title="线上redis有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？"></a>线上redis有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？</h4><ol>
<li><p>首先考虑<code>keys 通配符</code>的方式，但是redis是单线程，执行过程中会阻塞其他进程，不能用</p>
</li>
<li><p>所以要用 <code>scan</code>+<code>游标</code>，每一次取keys列表都是原子性无堵塞的</p>
<p> 弊端：</p>
<ul>
<li>有一定重复概率，需要做去重处理</li>
<li>其他问题：待补充…</li>
</ul>
</li>
</ol>
<h4 id="新浪微博关注"><a href="#新浪微博关注" class="headerlink" title="新浪微博关注"></a>新浪微博关注</h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">关注单词是：attention</span><br><span class="line">(<span class="keyword">set</span>)attention:&#123;<span class="built_in">id</span>&#125;</span><br><span class="line">    user_id1</span><br><span class="line">    user_id...n</span><br></pre></td></tr></table></figure>
<h5 id="关注功能中，求共同关注-交集"><a href="#关注功能中，求共同关注-交集" class="headerlink" title="关注功能中，求共同关注(交集)"></a>关注功能中，求共同关注<b>(交集)</b></h5><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sInter <span class="keyword">set</span>1 <span class="keyword">set</span>2 </span><br></pre></td></tr></table></figure>
<img src="/blog/p/f3599f9d/redis%20sInter.jpg" class="" title="redis sInter">

<h5 id="关注功能中，可能认识的人-差集"><a href="#关注功能中，可能认识的人-差集" class="headerlink" title="关注功能中，可能认识的人(差集)"></a>关注功能中，可能认识的人<b>(差集)</b></h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#最终获取 set1中的内容 减去set2的内容</span><br><span class="line">sDiff set1 set2  </span><br></pre></td></tr></table></figure>
<img src="/blog/p/f3599f9d/redis%20sDiff.jpg" class="" title="redis sDiff">

<ol>
<li>标签</li>
<li>查询有共同爱好的人</li>
<li>支持交集、并集、差集</li>
</ol>
<h4 id="微信朋友圈点赞"><a href="#微信朋友圈点赞" class="headerlink" title="微信朋友圈点赞"></a>微信朋友圈点赞</h4><p>微信朋友圈点赞，因为朋友圈点赞是有顺序的</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#微信朋友圈动态单词是：dynamic</span><br><span class="line">(set)dynamic:&#123;id&#125;</span><br><span class="line">    userid1</span><br><span class="line">    userid2</span><br><span class="line">    userid...n</span><br></pre></td></tr></table></figure>
<div style="width:30%;margin:0 auto;">
<img src="/blog/p/f3599f9d/%E5%BE%AE%E4%BF%A1%E6%9C%8B%E5%8F%8B%E5%9C%88%E7%82%B9%E8%B5%9E%E5%8A%A8%E6%80%81.jpg" class="" title="微信朋友圈点赞动态.jpg">
</div>

<h4 id="投票功能"><a href="#投票功能" class="headerlink" title="投票功能"></a>投票功能</h4><h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><ol>
<li>文章按照投票分数排名</li>
<li>每个用户每个文章只能投1张票</li>
<li>文章投票有过期时间，超过则不允许投票</li>
</ol>
<h5 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#所有文章的排名key</span><br><span class="line">(zset)article</span><br><span class="line">分数:article_id</span><br><span class="line"></span><br><span class="line">(zset)article_日 date(&#x27;Ymd&#x27;)</span><br><span class="line">(zset)article_周 date(&#x27;W&#x27;)</span><br><span class="line">(zset)article_月 date(&#x27;Ym&#x27;)</span><br><span class="line"></span><br><span class="line"># 所有文章的过期时间，不使用下方代码。改为判断数据库或者文章hash的过期时间，更便捷一些</span><br><span class="line"># (zset)article:expire</span><br><span class="line"># 过期时间:article_id</span><br><span class="line"></span><br><span class="line">#记录某个文章投票的用户列表</span><br><span class="line">(set)article:&#123;id&#125;</span><br><span class="line">user_id1</span><br><span class="line">     ...</span><br><span class="line">user_idn</span><br></pre></td></tr></table></figure>

<h4 id="红包功能"><a href="#红包功能" class="headerlink" title="红包功能"></a>红包功能</h4><h5 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h5><a href="/blog/p/ff69a4f5/" title="实战：微信抢红包算法">实战：微信抢红包算法</a>

<ol>
<li>记录所有红包</li>
<li>抢了多少红包，需要记录多少红包</li>
<li>每个人每个红包只能抢一个</li>
<li>红包有顺序</li>
<li>红包金额可以相同</li>
</ol>
<h5 id="设计-1"><a href="#设计-1" class="headerlink" title="设计"></a>设计</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#红包信息</span></span><br><span class="line">(hash)redenvelopes:&#123;id&#125;</span><br><span class="line">id:<span class="number">1</span>,</span><br><span class="line">user_id,</span><br><span class="line">total_amount,</span><br><span class="line">single_amount,</span><br><span class="line">number,</span><br><span class="line">type,</span><br><span class="line">note,</span><br><span class="line">create_time</span><br><span class="line"></span><br><span class="line"><span class="comment">#某个红包下面的红包信息</span></span><br><span class="line">(<span class="keyword">list</span>)redenvelopesstock:&#123;id&#125;</span><br><span class="line">金额<span class="number">1</span>,</span><br><span class="line"> ...,</span><br><span class="line">金额n</span><br><span class="line"></span><br><span class="line"><span class="comment">#抢到红包的信息(包括用户)</span></span><br><span class="line">(zset)redenvelopes:&#123;id&#125;:info</span><br><span class="line">user_id:&#123;红包以及抢红包的用户信息&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h5><ol>
<li>检查用户是否抢过 <code>(zset)redenvelopes:&#123;id&#125;:info</code></li>
<li>rpop 获取一个红包，查看是否存在 以及 是否是最后一个</li>
<li>绑定用户与红包的信息<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-1 用户抢过</span></span><br><span class="line"><span class="comment">#-2 红包已经抢完啦</span></span><br><span class="line"><span class="comment">#1 抢到红包</span></span><br><span class="line"><span class="comment">#2 抢到最后一个红包</span></span><br><span class="line">    <span class="comment">#将该红包所有的信息存入sql，异步</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h4><p>ZSet 可以实现有序性操作，从而实现排行榜等功能。<br>使用sorted set和一个计算热度的算法便可以轻松打造一个热度排行榜</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Zrangebyscore 返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列。</span></span><br><span class="line"><span class="comment">## 显示整个有序集</span></span><br><span class="line"><span class="attribute">redis</span> <span class="number">127.0.0.1:6379</span>&gt; ZRANGEBYSCORE salary -inf +inf </span><br><span class="line"><span class="attribute">1</span>) <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="attribute">2</span>) <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="attribute">3</span>) <span class="string">&quot;peter&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示整个有序集及成员的 score 值</span></span><br><span class="line"><span class="attribute">redis</span> <span class="number">127.0.0.1:6379</span>&gt; ZRANGEBYSCORE salary -inf +inf WITHSCORES    </span><br><span class="line"><span class="attribute">1</span>) <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="attribute">2</span>) <span class="string">&quot;2500&quot;</span></span><br><span class="line"><span class="attribute">3</span>) <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="attribute">4</span>) <span class="string">&quot;5000&quot;</span></span><br><span class="line"><span class="attribute">5</span>) <span class="string">&quot;peter&quot;</span></span><br><span class="line"><span class="attribute">6</span>) <span class="string">&quot;12000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工资 &lt;=5000 的所有成员</span></span><br><span class="line"><span class="attribute">redis</span> <span class="number">127.0.0.1:6379</span>&gt; ZRANGEBYSCORE salary -inf <span class="number">5000</span> WITHSCORES    </span><br><span class="line"><span class="attribute">1</span>) <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="attribute">2</span>) <span class="string">&quot;2500&quot;</span></span><br><span class="line"><span class="attribute">3</span>) <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="attribute">4</span>) <span class="string">&quot;5000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工资大于 5000 小于等于 400000 的成员</span></span><br><span class="line"><span class="attribute">redis</span> <span class="number">127.0.0.1:6379</span>&gt; ZRANGEBYSCORE salary (<span class="number">5000</span> <span class="number">400000</span>            </span><br><span class="line"><span class="attribute">1</span>) <span class="string">&quot;peter&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Zrevrangebyscore 返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。</span></span><br><span class="line"><span class="comment">## 逆序排列所有成员</span></span><br><span class="line"><span class="attribute">redis</span> <span class="number">127.0.0.1:6379</span>&gt; ZREVRANGEBYSCORE salary +inf -inf   </span><br><span class="line"><span class="attribute">1</span>) <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="attribute">2</span>) <span class="string">&quot;peter&quot;</span></span><br><span class="line"><span class="attribute">3</span>) <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="attribute">4</span>) <span class="string">&quot;joe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 逆序排列薪水介于 10000 和 2000 之间的成员</span></span><br><span class="line"><span class="attribute">redis</span> <span class="number">127.0.0.1:6379</span>&gt; ZREVRANGEBYSCORE salary <span class="number">10000</span> <span class="number">2000</span>  </span><br><span class="line"><span class="attribute">1</span>) <span class="string">&quot;peter&quot;</span></span><br><span class="line"><span class="attribute">2</span>) <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="attribute">3</span>) <span class="string">&quot;joe&quot;</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><h2 id="Redis安装相关"><a href="#Redis安装相关" class="headerlink" title="Redis安装相关"></a>Redis安装相关</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p><code>https://redis.io/download</code></p>
</blockquote>
<p>务必安装 <a href="https://pecl.php.net/" target="_blank" rel="noopener">https://pecl.php.net/</a> php扩展</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">yum install -y gcc g++ gcc-c++ make</span><br><span class="line"></span><br><span class="line">cd <span class="regexp">/usr/</span>src</span><br><span class="line">wget http:<span class="regexp">//</span>download.redis.io<span class="regexp">/releases/</span>redis-<span class="number">5.0</span>.<span class="number">8</span>.tar.gz</span><br><span class="line">tar -zxvf redis-<span class="number">5.0</span>.<span class="number">8</span>.tar.gz</span><br><span class="line">cd redis-<span class="number">5.0</span>.<span class="number">8</span></span><br><span class="line">make PREFIX=<span class="regexp">/usr/</span>local/redis MALLOC=libc</span><br><span class="line"></span><br><span class="line">.<span class="regexp">/utils/i</span>nstall_server.sh</span><br><span class="line"><span class="comment">#make出现问题在下方找答案</span></span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line">mv redis-<span class="number">5.0</span>.<span class="number">8</span> <span class="regexp">/usr/</span>local/redis</span><br><span class="line"></span><br><span class="line">cp -r <span class="regexp">/usr/</span>local<span class="regexp">/redis/u</span>tils<span class="regexp">/redis_init_script /</span>etc<span class="regexp">/init.d/</span>redis &amp;&amp;</span><br><span class="line"></span><br><span class="line">./redis-server redis.conf <span class="comment">#启动服务|当前文件在src中</span></span><br><span class="line">`./redis-cli` <span class="comment">#进入控制台|当前文件在src中</span></span><br></pre></td></tr></table></figure>

<h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改redis启动文件</span></span><br><span class="line">vim <span class="regexp">/etc/i</span>nit.d/redis</span><br><span class="line"></span><br><span class="line">REDISPORT=<span class="number">6379</span></span><br><span class="line">EXEC=<span class="regexp">/usr/</span>local<span class="regexp">/redis/</span>bin/redis-server</span><br><span class="line">CLIEXEC=<span class="regexp">/usr/</span>local<span class="regexp">/redis/</span>bin/redis-cli</span><br><span class="line">PASSWORD=abcABC123</span><br><span class="line"></span><br><span class="line">PIDFILE=<span class="regexp">/var/</span>run/redis_<span class="variable">$REDISPORT</span>.pid</span><br><span class="line">CONF=<span class="string">&quot;/usr/local/redis/bin/redis.conf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在shutdown的时候，需要输入密码，填写进去</span></span><br><span class="line"><span class="variable">$CLIEXEC</span> -p <span class="variable">$REDISPORT</span> -a <span class="variable">$PASSWORD</span> shutdown</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#开机自启</span></span><br><span class="line">chkconfig redis on</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭开机自启</span></span><br><span class="line">chkconfig redis off</span><br></pre></td></tr></table></figure>



<h3 id="重启服务使用下面的命令"><a href="#重启服务使用下面的命令" class="headerlink" title="重启服务使用下面的命令"></a>重启服务使用下面的命令</h3><p>不能使用 <code>kill -9</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -h -p -a shutdown</span><br></pre></td></tr></table></figure>

<h3 id="开启远程登录"><a href="#开启远程登录" class="headerlink" title="开启远程登录"></a>开启远程登录</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/redis/</span>redis.conf</span><br><span class="line"></span><br><span class="line">requirepass password <span class="comment">#设置密码</span></span><br><span class="line"><span class="comment">#bind 127.0.0.1 #注释掉</span></span><br><span class="line">protected-mode yes <span class="comment">#检查开启安全保护(因为要开启所有网段都可访问，只有通过密码验证才能操控redis)</span></span><br></pre></td></tr></table></figure>

<h3 id="主从"><a href="#主从" class="headerlink" title="主从"></a>主从</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#master A</span><br><span class="line">1. 添加密码 requirepass 12345678</span><br><span class="line">2. 注释掉bind 192.168.3.150</span><br><span class="line"></span><br><span class="line">#slave B</span><br><span class="line">masterauth 12345678</span><br><span class="line">slaveof 192.168.3.150 6379</span><br><span class="line"></span><br><span class="line">#重启主redis，再重启从redis</span><br></pre></td></tr></table></figure>

<h3 id="redis-cli"><a href="#redis-cli" class="headerlink" title="redis-cli"></a>redis-cli</h3><blockquote>
<p>.&#x2F;redis-cli –help</p>
</blockquote>
<ul>
<li>查看redis是否正常工作 <code>telnet 127.0.0.1 6379</code> 或 <code>./redis-cli -h 127.0.0.1 -p 6379 -a abcABC123 ping</code></li>
<li>每秒输出一次当前redis的内存使用情况 <code>./redis-cli -h 127.0.0.1 -p 6379 -a abcABC123 -r 100 -i 1 info |grep used_memory_human</code></li>
</ul>
<h3 id="redis-server"><a href="#redis-server" class="headerlink" title="redis-server"></a>redis-server</h3><blockquote>
<p>.&#x2F;redis-server –help</p>
</blockquote>
<ul>
<li>指定配置文件启动 <code>./redis-server ./redis.conf &amp;</code></li>
<li>测试当前操作系统是否能提供1G内存给redis <code>./redis-cli --test-memory 1024</code></li>
</ul>
<h3 id="redis-benchmark"><a href="#redis-benchmark" class="headerlink" title="redis-benchmark"></a>redis-benchmark</h3><blockquote>
<p>.&#x2F;src&#x2F;redis-benchmark –help</p>
</blockquote>
<p>测试命令事例：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#100个并发连接，100000个请求，检测host为localhost 端口为6379的redis服务器性能</span><br><span class="line">./src/redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000</span><br><span class="line"></span><br><span class="line">#测试存取大小为100字节的数据包的性能</span><br><span class="line">./src/redis-benchmark -h 127.0.0.1 -p 6379 -q -d 100</span><br><span class="line"></span><br><span class="line">#只测试 set,lpush操作的性能</span><br><span class="line">./src/redis-benchmark -t set,lpush -n 100000 -q</span><br><span class="line"></span><br><span class="line">#只测试某些数值存取的性能</span><br><span class="line">./src/redis-benchmark -n 100000 -q script load &quot;redis.call(&#x27;set&#x27;,&#x27;foo&#x27;,&#x27;bar&#x27;)&quot;</span><br></pre></td></tr></table></figure>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">cc: error: ../deps/hiredis/libhiredis.a: No such file or directory</span><br><span class="line">cc: error: ../deps/lua/src/liblua.a: No such file or directory</span><br><span class="line">make[1]: *** [redis-server] Error 1</span><br><span class="line">make[1]: Leaving directory `/usr/local/src/redis-4.0.1/src&#x27;</span><br><span class="line">make: *** [all] Error 2</span><br></pre></td></tr></table></figure>
<img src="/blog/p/f3599f9d/make%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98-3.jpg" class="" title="make出现的问题-3.jpg">

<p>解决方案进入源码包目录下的deps目录中执行 <code>make lua hiredis linenoise</code></p>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><img src="/blog/p/f3599f9d/make%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98.jpg" class="" title="make出现的问题.jpg">

<p>解决方案：<code>yum install -y gcc g++ gcc-c++ make</code> 并且使用 <code>make MALLOC=libc PREFIX=/usr/local/redis</code></p>
<h3 id="生成很多数据"><a href="#生成很多数据" class="headerlink" title="生成很多数据"></a>生成很多数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>((i=1;i&lt;=20000000;i++)); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;set k<span class="variable">$i</span> v<span class="variable">$i</span>&quot;</span> &gt;&gt; /tmp/redisTest.txt</span><br><span class="line">vim /tmp/redisTest.txt</span><br><span class="line">:<span class="built_in">set</span> fileformat=dos</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /tmp/redisTest.txt | 路径/redis-cli -h 127.0.0.1 -p </span><br></pre></td></tr></table></figure>

<h3 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h3><ol>
<li>设置appendonly yes；</li>
<li>将appendonly.aof放到dir参数指定的目录；</li>
<li>启动Redis，Redis会自动加载appendonly.aof文件。</li>
</ol>
<h3 id="开启慢查询记录-内部存在队列中"><a href="#开启慢查询记录-内部存在队列中" class="headerlink" title="开启慢查询记录(内部存在队列中)"></a>开启慢查询记录(内部存在队列中)</h3><ol>
<li><p>config set slowlog-log-slower-than 10000 #10毫秒</p>
<ul>
<li>使用config set完后,若想将配置持久化保存到redis.conf，要执行config rewrite</li>
</ul>
</li>
<li><p>redis.conf修改：找到slowlog-log-slower-than 10000 ，修改保存即可</p>
<ul>
<li>注意：slowlog-log-slower-than &#x3D;0记录所有命令 -1命令都不记录</li>
</ul>
</li>
</ol>
<h2 id="面试总结"><a href="#面试总结" class="headerlink" title="面试总结"></a>面试总结</h2><p>什么是redis？为什么要使用缓存中间件(优势)？<br>介绍一下数据结构？优点、用法？<br>如何解决缓存和数据库双写一致性的问题？<br>如何解决缓存雪崩？<br>如何解决缓存穿透？<br>如何解决快速从大量key中找出少量数据？<br>如何实现异步队列<br>如何优化(正确使用)redis？<br>缓存更新策略？<br>lua脚本<br>实操</p>
<ul>
<li>主从复制</li>
<li>哨兵集群</li>
</ul>
<p>实战</p>
<ul>
<li>投票功能</li>
</ul>
<p>Redis 集群<br>Redis Sentinel ：</p>
<p>什么是 Sentinel？ 有什么用？<br>Sentinel 如何检测节点是否下线？主观下线与客观下线的区别?<br>Sentinel 是如何实现故障转移的？<br>为什么建议部署多个 sentinel 节点（哨兵集群）？<br>Sentinel 如何选择出新的 master（选举机制）?<br>如何从 Sentinel 集群中选择出 Leader ？<br>Sentinel 可以防止脑裂吗？<br>Redis Cluster ：</p>
<p>为什么需要 Redis Cluster？解决了什么问题？有什么优势？<br>Redis Cluster 是如何分片的？<br>为什么 Redis Cluster 的哈希槽是 16384 个?<br>如何确定给定 key 的应该分布到哪个哈希槽中？<br>Redis Cluster 支持重新分配哈希槽吗？<br>Redis Cluster 扩容缩容期间可以提供服务吗？<br>Redis Cluster 中的节点是怎么进行通信的？</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>SEO</title>
    <url>/blog/p/fad6aeba/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h1 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h1><p>寻求大站长平台收录本站<br>百度：<br>google：<br>搜狗：<a href="http://zhanzhang.sogou.com/" target="_blank" rel="noopener">http://zhanzhang.sogou.com/</a><br>360：<br>步骤<br>登录平台<br>    -添加网站<br>    -<br>Hexo个人博客站点被百度谷歌收录<br>百度搜索引擎<br><a href="http://ziyuan.baidu.com/site/index" target="_blank" rel="noopener">http://ziyuan.baidu.com/site/index</a><br>站点添加</p>
<p>谷歌验证<br><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">https://www.google.com/webmasters/tools/home?hl=zh-CN</a><br>站点添加</p>
<p>安装百度谷歌的站点地图文件<br>npm install hexo-generator-sitemap –save</p>
<p>npm install hexo-generator-baidu-sitemap –save  </p>
<p>hexo主配置文件_config.yml<br>url 需要填写<br>hexo g –debug</p>
<p>向谷歌提交链接<br>google站点平台：<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%B1%E6%98%AF%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7%E3%80%81%E9%AA%8C%E8%AF%81%E7%AB%99%E7%82%B9%E3%80%81%E6%8F%90%E4%BA%A4sitemap" target="_blank" rel="noopener">https://www.google.com/webmasters/tools/home?hl=zh-CN，然后就是注册账号、验证站点、提交sitemap</a></p>
<p>向百度提交链接文件<br>themes\next _config.yml baidu_push设置为true<br><a href="http://ziyuan.baidu.com/linksubmit/index" target="_blank" rel="noopener">http://ziyuan.baidu.com/linksubmit/index</a></p>
<p>验证收录情况<br>site:liguoqin.com</p>
<p><a href="https://liguoqin.com/" target="_blank" rel="noopener">https://liguoqin.com/</a><br><a href="https://liguoqin.com/" target="_blank" rel="noopener">https://liguoqin.com/</a><br><a href="https://liguoqin.com/sitemap.xml" target="_blank" rel="noopener">https://liguoqin.com/sitemap.xml</a><br><a href="https://www.processon.com/view/56662808e4b07d6b0c0fb802" target="_blank" rel="noopener">https://www.processon.com/view/56662808e4b07d6b0c0fb802</a></p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>Phpstorm</title>
    <url>/blog/p/41054029/</url>
    <content><![CDATA[<p>Phpstorm开发工具的使用说明</p>
<span id="more"></span>
<h2 id="注释不顶格"><a href="#注释不顶格" class="headerlink" title="注释不顶格"></a>注释不顶格</h2><ol>
<li>setting</li>
<li>editor</li>
<li>color style</li>
<li>PHP</li>
<li>Code Generatio</li>
<li>Comment Code</li>
<li>Line Comment at first column 取消勾选</li>
<li>勾选 add a space at comment start</li>
</ol>
<img src="/blog/p/41054029/%E6%B3%A8%E9%87%8A%E4%B8%8D%E9%A1%B6%E6%A0%BC.png" class="" title="注释不顶格.png">


<h2 id="设置-工具栏字体大小"><a href="#设置-工具栏字体大小" class="headerlink" title="设置 工具栏字体大小"></a>设置 工具栏字体大小</h2><ol>
<li>setting</li>
<li>appearance &amp; behavior</li>
<li>appearance</li>
</ol>
<img src="/blog/p/41054029/%E8%AE%BE%E7%BD%AE%E5%B7%A5%E5%85%B7%E6%A0%8F%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F.jpg" class="" title="设置工具栏字体大小.jpg">

<h2 id="设置工作区字体大小"><a href="#设置工作区字体大小" class="headerlink" title="设置工作区字体大小"></a>设置工作区字体大小</h2><ol>
<li>setting</li>
<li>editor</li>
<li>color scheme</li>
<li>color scheme font</li>
</ol>
<img src="/blog/p/41054029/%E8%AE%BE%E7%BD%AE%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F.jpg" class="" title="设置工作区字体大小.jpg">

<h2 id="空格代替制表符"><a href="#空格代替制表符" class="headerlink" title="空格代替制表符"></a>空格代替制表符</h2><ol>
<li>setting</li>
<li>editor</li>
<li>color style</li>
<li>PHP</li>
<li>tab和缩进</li>
<li>取消勾选 <code>Use tab character</code></li>
</ol>
<h2 id="命令行中文乱码"><a href="#命令行中文乱码" class="headerlink" title="命令行中文乱码"></a>命令行中文乱码</h2><ol>
<li>setting</li>
<li>editor</li>
<li>file encodings 全部设置为<code>utf8</code></li>
</ol>
<h2 id="添加template"><a href="#添加template" class="headerlink" title="添加template"></a>添加template</h2><ol>
<li>setting</li>
<li>editor</li>
<li>file and code templates</li>
<li>添加如下内容：<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">* <span class="variable">@Author</span>: Li Guo Xin &lt;guoxinlee129<span class="variable">@gmail</span>.com&gt;</span><br><span class="line">* <span class="variable">@Date</span>: <span class="variable">$&#123;</span>DATE&#125;</span><br><span class="line">* <span class="variable">@Time</span>: <span class="variable">$&#123;</span>TIME&#125;</span><br></pre></td></tr></table></figure>
<img src="/blog/p/41054029/phpstorm%E6%B7%BB%E5%8A%A0%E4%BD%9C%E8%80%85%E5%90%8D%E7%A7%B0template.jpg" class="" title="phpstorm添加作者名称template.jpg"></li>
</ol>
<h2 id="开启xdebug断点调试"><a href="#开启xdebug断点调试" class="headerlink" title="开启xdebug断点调试"></a>开启xdebug断点调试</h2><h3 id="注意：phpstorm2020-3才支持xdebug3断点调试"><a href="#注意：phpstorm2020-3才支持xdebug3断点调试" class="headerlink" title="注意：phpstorm2020.3才支持xdebug3断点调试"></a>注意：phpstorm2020.3才支持xdebug3断点调试</h3><ul>
<li>下载xdebug历史进入 <code>https://xdebug.org/download/historical</code></li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#php.ini xdebug2</span></span><br><span class="line"><span class="section">[xdebug]</span></span><br><span class="line"><span class="attr">xdebug.idekey</span>=<span class="string">&quot;PHPSTORM&quot;</span></span><br><span class="line"><span class="attr">xdebug.remote_enable</span> =<span class="number">1</span></span><br><span class="line"><span class="attr">xdebug.remote_handler</span> = <span class="string">&quot;dbgp&quot;</span></span><br><span class="line"><span class="attr">xdebug.remote_host</span> = localhost</span><br><span class="line"><span class="attr">xdebug.remote_mode</span> = <span class="string">&quot;req&quot;</span></span><br><span class="line"><span class="attr">xdebug.remote_port</span> = <span class="number">9001</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#php.ini xdebug3更新后的配置</span></span><br><span class="line"><span class="section">[xdebug]</span></span><br><span class="line"><span class="attr">zend_extension</span>=<span class="string">&quot;xdebug.so&quot;</span></span><br><span class="line"><span class="attr">xdebug.idekey</span>=<span class="string">&quot;PHPSTORM&quot;</span></span><br><span class="line"><span class="attr">xdebug.mode</span>=debug</span><br><span class="line"><span class="attr">xdebug.client_host</span> = localhost</span><br><span class="line"><span class="attr">xdebug.client_port</span> = <span class="number">9001</span></span><br></pre></td></tr></table></figure>

<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># dyld: Library not loaded: <span class="regexp">/opt/</span>homebrew<span class="regexp">/opt/i</span>cu4c<span class="regexp">/lib/</span>libicuio.<span class="number">68</span>.dylib</span><br><span class="line">ln -s <span class="regexp">/opt/</span>homebrew<span class="regexp">/include/</span>pcre2.h <span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/</span>php@<span class="number">7.4</span><span class="regexp">/7.4.16/i</span>nclude<span class="regexp">/php/</span>ext<span class="regexp">/pcre/</span>pcre2.h</span><br></pre></td></tr></table></figure>
<h1 id="使用-yasd"><a href="#使用-yasd" class="headerlink" title="使用 yasd"></a>使用 yasd</h1><h2 id="安装boost"><a href="#安装boost" class="headerlink" title="安装boost"></a>安装boost</h2><h3 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h3><p><code>brew install boost</code> 但是不知道目前为啥不行</p>
<h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 下载Boost源码 https:<span class="regexp">//</span>www.boost.org<span class="regexp">/doc/</span>libs<span class="regexp">/1_57_0/m</span>ore<span class="regexp">/getting_started/u</span>nix-variants.html</span><br><span class="line"><span class="number">2</span>. 解压放在任意目录</span><br><span class="line"><span class="number">3</span>. ./bootstrap.sh</span><br><span class="line"><span class="number">4</span>. ./b2 headers 查看headers可跳过</span><br><span class="line"><span class="number">5</span>. .<span class="regexp">/b2 install --prefix=/u</span>sr/local</span><br><span class="line"></span><br><span class="line">留意运行日志头文件目录: <span class="regexp">/usr/</span>local/boost_1_76_0</span><br><span class="line">lib目录: <span class="regexp">/usr/</span>local<span class="regexp">/boost_1_76_0/</span>stage/lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出现 checking for boost... configure: error: lib boost not found.  Try: install boost library</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line">export CPLUS_INCLUDE_PATH=<span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/</span>boost<span class="regexp">/1.75.0_3/i</span>nclude</span><br><span class="line">export LIBRARY_PATH=<span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/</span>boost<span class="regexp">/1.75.0_3/</span>lib</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Phpstorm</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH终端/SFTP XShell/XFtp Server 下载安装中文客户端破解版</title>
    <url>/blog/p/6d3d01e0/</url>
    <content><![CDATA[<p>经常用到软件合集。</p>
<span id="more"></span>
<h2 id="XFTP"><a href="#XFTP" class="headerlink" title="XFTP"></a>XFTP</h2><h3 id="下载相关安装包并解压"><a href="#下载相关安装包并解压" class="headerlink" title="下载相关安装包并解压"></a>下载相关安装包并解压</h3><ul>
<li>安装包：<a href="https://pan.baidu.com/s/1xjAS5Is0oHXFtAE0NgnZTQ" target="_blank" rel="noopener">Xftp中文客户端破解版-百度网盘</a><br>提取码：6y0h</li>
</ul>
<h3 id="运行可执行文件“绿化-bat”"><a href="#运行可执行文件“绿化-bat”" class="headerlink" title="运行可执行文件“绿化.bat”"></a>运行可执行文件“绿化.bat”</h3><blockquote>
<p>安装过程中请**<font color="red">放行</font>**操作，目的是写入 Host 屏蔽联网检查 KEY 和更新</p>
</blockquote>
<img src="/blog/p/6d3d01e0/1.jpg" class="" title="XFTP安装">

<h3 id="安装成功，打开软件"><a href="#安装成功，打开软件" class="headerlink" title="安装成功，打开软件"></a>安装成功，打开软件</h3><img src="/blog/p/6d3d01e0/2.jpg" class="" title="XFTP安装成功">

<h2 id="XShell-6"><a href="#XShell-6" class="headerlink" title="XShell 6"></a>XShell 6</h2><h3 id="下载相关安装包并解压-1"><a href="#下载相关安装包并解压-1" class="headerlink" title="下载相关安装包并解压"></a>下载相关安装包并解压</h3><ul>
<li>安装包：<br>提取码：bzph</li>
</ul>
<h3 id="运行可执行文件“绿化-bat”-1"><a href="#运行可执行文件“绿化-bat”-1" class="headerlink" title="运行可执行文件“绿化.bat”"></a>运行可执行文件“绿化.bat”</h3><blockquote>
<p>安装过程中请**<font color="red">放行</font>**操作，目的是写入 Host 屏蔽联网检查 KEY 和更新</p>
</blockquote>
<img src="/blog/p/6d3d01e0/3.jpg" class="" title="Xshell6安装">

<h3 id="安装成功，打开软件-1"><a href="#安装成功，打开软件-1" class="headerlink" title="安装成功，打开软件"></a>安装成功，打开软件</h3><img src="/blog/p/6d3d01e0/4.jpg" class="" title="Xshell6安装成功">
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>XFTP</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP</title>
    <url>/blog/p/1417dc7c/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="通过-Macports-安装"><a href="#通过-Macports-安装" class="headerlink" title="通过 Macports 安装"></a>通过 Macports 安装</h2><blockquote>
<p><a href="https://www.macports.org/install.php" target="_blank" rel="noopener">https://www.macports.org/install.php</a></p>
</blockquote>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询软件路径</span></span><br><span class="line">sudo <span class="keyword">port</span> contents boost | grep libboost</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否激活</span></span><br><span class="line">sudo <span class="keyword">port</span> installed boost180</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="安装-swoole"><a href="#安装-swoole" class="headerlink" title="安装 swoole"></a>安装 swoole</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo port <span class="keyword">install</span> php74</span><br><span class="line">sudo port <span class="keyword">install</span> php74-swoole</span><br></pre></td></tr></table></figure>
<p>php可执行文件<br>&#x2F;opt&#x2F;local&#x2F;etc&#x2F;php74&#x2F;php.ini<br>&#x2F;opt&#x2F;local&#x2F;bin&#x2F;php-config74<br>&#x2F;opt&#x2F;local&#x2F;bin&#x2F;php74<br>&#x2F;opt&#x2F;local&#x2F;bin&#x2F;phpize74</p>
<h3 id="安装-Swoole-Yasd调试工具"><a href="#安装-Swoole-Yasd调试工具" class="headerlink" title="安装 Swoole Yasd调试工具"></a>安装 Swoole Yasd调试工具</h3><p>&#x2F;Users&#x2F;liguoxin&#x2F;Downloads&#x2F;yasd-master</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">sudo port search boots</span><br><span class="line">sudo port install boots181</span><br><span class="line">sudo port installed boots181</span><br><span class="line">sudo port info boots181</span><br><span class="line"></span><br><span class="line"># 查看boost的安装路径，查询到是(注意这里要认真看) <span class="regexp">/opt/</span>local<span class="regexp">/libexec/</span>boost/<span class="number">1.81</span></span><br><span class="line">port contents boost181 | <span class="keyword">grep</span> libboost</span><br><span class="line"></span><br><span class="line">vim ~/.zshrc</span><br><span class="line">export CPLUS_INCLUDE_PATH=<span class="regexp">/opt/</span>local<span class="regexp">/libexec/</span>boost<span class="regexp">/1.81/i</span>nclude</span><br><span class="line">export LD_LIBRARY_PATH=<span class="regexp">/opt/</span>local<span class="regexp">/libexec/</span>boost<span class="regexp">/1.81/</span>lib</span><br><span class="line"><span class="keyword">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"># 提示：可以删除 unlink <span class="regexp">/usr/</span>local<span class="regexp">/include/</span>boost</span><br><span class="line"># 提示：一定要注意mt是多线程，链接的地址去掉mt，仔细看看</span><br><span class="line">sudo ln -s <span class="regexp">/opt/</span>local<span class="regexp">/libexec/</span>boost<span class="regexp">/1.81/i</span>nclude<span class="regexp">/boost /u</span>sr<span class="regexp">/local/i</span>nclude/boost</span><br><span class="line">sudo ln -s <span class="regexp">/opt/</span>local<span class="regexp">/libexec/</span>boost<span class="regexp">/1.81/</span>lib<span class="regexp">/libboost_filesystem-mt.dylib /u</span>sr<span class="regexp">/local/</span>lib/libboost_filesystem.dylib</span><br><span class="line">sudo ln -s <span class="regexp">/opt/</span>local<span class="regexp">/libexec/</span>boost<span class="regexp">/1.81/</span>lib<span class="regexp">/libboost_program_options-mt.dylib /u</span>sr<span class="regexp">/local/</span>lib/libboost_program_options.dylib</span><br><span class="line">sudo ln -s <span class="regexp">/opt/</span>local<span class="regexp">/libexec/</span>boost<span class="regexp">/1.81/</span>lib<span class="regexp">/libboost_system-mt.dylib /u</span>sr<span class="regexp">/local/</span>lib/libboost_system.dylib</span><br><span class="line"></span><br><span class="line"><span class="regexp">/opt/</span>local<span class="regexp">/bin/</span>phpize74 --clean</span><br><span class="line"><span class="regexp">/opt/</span>local<span class="regexp">/bin/</span>phpize74</span><br><span class="line">.<span class="regexp">/configure --with-php-config=/</span>opt<span class="regexp">/local/</span>bin/php-config74</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## brew</span><br><span class="line">phpize --clean</span><br><span class="line">phpize</span><br><span class="line">ln -s <span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/</span>pcre2<span class="regexp">/10.36/i</span>nclude<span class="regexp">/pcre2.h /</span>opt<span class="regexp">/homebrew/</span>Cellar<span class="regexp">/php/</span><span class="number">8.0</span>.<span class="number">2</span><span class="regexp">/include/</span>php<span class="regexp">/ext/</span>pcre/pcre2.h</span><br><span class="line">./configure \</span><br><span class="line">--enable-brotli \</span><br><span class="line">--enable-openssl \</span><br><span class="line">--enable-swoole \</span><br><span class="line">--with-openssl-dir=<span class="regexp">/opt/</span>homebrew<span class="regexp">/opt/</span>openssl@<span class="number">3</span> \</span><br><span class="line">--with-brotli-dir=<span class="regexp">/opt/</span>homebrew<span class="regexp">/opt/</span>brotli </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>“超文本预处理器”，是在服务器端执行的脚本语言，尤其适用于Web开发并可嵌入HTML中。</p>
<blockquote>
<p>php7新特性 <a href="https://www.php.net/manual/zh/migration70.new-features.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/migration70.new-features.php</a><br>php8新特性 <a href="https://www.php.net/manual/zh/migration80.new-features.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/migration80.new-features.php</a></p>
</blockquote>
<h2 id="各个框架的对比"><a href="#各个框架的对比" class="headerlink" title="各个框架的对比"></a>各个框架的对比</h2><table>
<thead>
<tr>
<th>框架</th>
<th>社区</th>
<th>特点</th>
<th>缺点</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>laravel</td>
<td>国内外非常活跃</td>
<td>全能</td>
<td>基于组件式的框架，所以比较臃肿，大部分为英文文档，源码难理解</td>
<td>使用率最高的框架，主流web(vue + laravel)</td>
</tr>
<tr>
<td>yii</td>
<td>不活跃</td>
<td>面向接口、敏捷开发，轻量框架，性能最好</td>
<td>组件非常少，多数为英文文档</td>
<td></td>
</tr>
<tr>
<td>thinkphp</td>
<td>国内最活跃</td>
<td>学习成本更低，易上手</td>
<td>没有很好的设计模式</td>
<td></td>
</tr>
<tr>
<td>Yaf</td>
<td>最不活跃</td>
<td>常驻内存，提高内存利用率</td>
<td>需要重复造轮子，维护成本高</td>
<td></td>
</tr>
<tr>
<td>Swoole</td>
<td>一般</td>
<td>让php不再局限于Web领域</td>
<td>学习成本高，容易造成内存泄漏</td>
<td></td>
</tr>
</tbody></table>
<h2 id="框架的实现方式有哪些不同"><a href="#框架的实现方式有哪些不同" class="headerlink" title="框架的实现方式有哪些不同"></a>框架的实现方式有哪些不同</h2><p>TODO待补充</p>
<h2 id="9大数据类型"><a href="#9大数据类型" class="headerlink" title="9大数据类型"></a>9大数据类型</h2><h3 id="标量类型4个"><a href="#标量类型4个" class="headerlink" title="标量类型4个"></a>标量类型4个</h3><ul>
<li>浮点类型(double)</li>
<li>整型</li>
<li>布尔型(true|false)</li>
<li>字符串</li>
</ul>
<h3 id="复合类型3个"><a href="#复合类型3个" class="headerlink" title="复合类型3个"></a>复合类型3个</h3><ul>
<li>数组</li>
<li>对象</li>
<li>可调用类型 <code>call_user_func()</code></li>
</ul>
<h3 id="特殊类型2个"><a href="#特殊类型2个" class="headerlink" title="特殊类型2个"></a>特殊类型2个</h3><ul>
<li>无类型null</li>
<li>资源类型resource</li>
</ul>
<h2 id="语言参考"><a href="#语言参考" class="headerlink" title="语言参考"></a>语言参考</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>false的7种情况: <code>0</code>, <code>0.0</code>,<code>&quot;0&quot; 或 &#39;0&#39;</code>,<code>false</code>,<code>null</code>,<code>[]</code>,<code>&quot;&quot;</code></p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="字符串的四种定义方式和区别"><a href="#字符串的四种定义方式和区别" class="headerlink" title="字符串的四种定义方式和区别"></a>字符串的四种定义方式和区别</h5><h6 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h6><ol>
<li>单引号<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$temp</span> = <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li>双引号<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$temp</span> = <span class="string">&quot;a&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li>nowdoc(类似单引号的性质)<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$temp</span> = &lt;&lt;&lt;<span class="string">&#x27;a&#x27;</span>;    </span><br><span class="line">这是内容</span><br><span class="line">a;</span><br></pre></td></tr></table></figure></li>
<li>heredoc(类似双引号的性质)<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$temp</span> = &lt;&lt;&lt;<span class="string">&quot;a&quot;</span>;<span class="comment">//这里可以使用双引号也可以不使用引号 &quot;a&quot;|a</span></span><br><span class="line">这是内容</span><br><span class="line">a;</span><br></pre></td></tr></table></figure></li>
</ol>
<h6 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h6><ul>
<li>单引号 <font color="red"><b>效率</b></font> 高于双引号</li>
<li>单引号<font color="red"><b>不解析</b></font>任何变量，双引号相反</li>
<li>单引号<font color="red"><b>不转义</b></font>除 <code>\</code> 和 <code>&#39;</code> 之外的任何字符，双引号可以转义部分支持的字符串</li>
</ul>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><h5 id="字符串转换成数字"><a href="#字符串转换成数字" class="headerlink" title="字符串转换成数字"></a>字符串转换成数字</h5><p>科学计数法</p>
<ol>
<li>a×10^b(aEb) E等于e 其中一个因数为a（1≤|a|&lt;10），另一个因数为10^n。</li>
<li><code>-1.3E-2</code> 是 (-1.3) * (10的-2次方)</li>
<li><code>-1.3E2</code> 是 (-1.3) * (10的2次方)</li>
</ol>
<ul>
<li>当一个字符串被当作一个数值来取值</li>
<li>该字符串的开始部分决定了它的值</li>
<li>如果该字符串以合法的数值开始，则使用该数值。否则其值为 0（零）。</li>
<li>包含 ‘.’，’e’ 或 ‘E’ 并且其数字值在整型的范围之内，取 <code>float</code><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">1</span> + <span class="string">&quot;10.5&quot;</span>;                <span class="comment">// $foo is float (11.5)</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">1</span> + <span class="string">&quot;-1.3e3&quot;</span>;              <span class="comment">// $foo is float (-1299) ☆☆☆☆☆</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">1</span> + <span class="string">&quot;bob-1.3e3&quot;</span>;           <span class="comment">// $foo is integer (1)</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">1</span> + <span class="string">&quot;bob3&quot;</span>;                <span class="comment">// $foo is integer (1)</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">1</span> + <span class="string">&quot;10 Small Pigs&quot;</span>;       <span class="comment">// $foo is integer (11)</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">4</span> + <span class="string">&quot;10.2 Little Piggies&quot;</span>; <span class="comment">// $foo is float (14.2)</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="string">&quot;10.0 pigs &quot;</span> + <span class="number">1</span>;          <span class="comment">// $foo is float (11)</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="string">&quot;10.0 pigs &quot;</span> + <span class="number">1.0</span>;        <span class="comment">// $foo is float (11)     </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><h5 id="循环数组的三种方式"><a href="#循环数组的三种方式" class="headerlink" title="循环数组的三种方式"></a>循环数组的三种方式</h5><ol>
<li>for循环：只能遍历索引数组</li>
<li>foreach循环：可以遍历索引和关联数组</li>
<li>list while each：可以遍历索引和关联数组<blockquote>
<p>php7已经将each废弃</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = [<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">22</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$value</span>) = each(<span class="variable">$a</span>)) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;dd&gt;<span class="subst">$key</span> : <span class="subst">$value</span>&lt;/dd&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>note:</p>
</li>
</ol>
<ul>
<li>效率最高的是foreach</li>
<li>第三种方法没有重置数组的指针，foreach执行前会重置指针</li>
</ul>
<hr>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><h4 id="定义方式-1"><a href="#定义方式-1" class="headerlink" title="定义方式"></a>定义方式</h4><ol>
<li><code>const</code></li>
<li><code>define</code></li>
</ol>
<ul>
<li>相同点：定义后不可被修改</li>
<li>不同点：const更快，const是定义类的常量</li>
</ul>
<h4 id="预定义常量"><a href="#预定义常量" class="headerlink" title="预定义常量"></a>预定义常量</h4><blockquote>
<p>快速记忆：<code>目录</code>&gt;<code>文件</code>&gt;<code>namespace</code>&gt;<code>类名</code>&gt;<code>类方法名</code>&gt;<code>行</code>，特殊的：<code>方法</code>和<code>TRAIT</code></p>
</blockquote>
<ul>
<li><code>__DIR__</code> 返回文件的所在目录</li>
<li><code>__FILE__</code> 返回该文件的完整路径和文件名</li>
<li><code>__NAMESPACE__</code> 返回本文件的命名空间</li>
<li><code>__CLASS__</code> 返回类的类名</li>
<li><code>__METHOD__</code> 返回类的方法名</li>
<li><code>__LINE__</code> 返回当前代码的行号</li>
<li><code>__FUNCTION__</code> 返回本函数的函数名</li>
<li><code>__TRAIT__</code> 返回Trait名</li>
</ul>
<hr>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h4><p>特点:</p>
<ol>
<li>unset引用变量只是取消引用，不是销毁内存<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure></li>
<li>对象不能被复制，复制后，也就是引用，目标都是指向的该对象<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Users;</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;name = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//a也会发生改变</span></span><br></pre></td></tr></table></figure>
题目：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//每一次循环结束后变量$data的值是什么</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">	<span class="variable">$val</span> = &amp;<span class="variable">$data</span>[<span class="variable">$key</span>];</span><br><span class="line">    var_dump(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解答步骤：</span></span><br><span class="line"><span class="number">1</span>.</span><br><span class="line"><span class="variable">$key</span> = <span class="number">0</span></span><br><span class="line"><span class="variable">$val</span> = a</span><br><span class="line"><span class="variable">$val</span> = &amp;<span class="variable">$data</span>[<span class="number">0</span>]</span><br><span class="line">输出：a b c</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.</span><br><span class="line"><span class="variable">$key</span> = <span class="number">1</span></span><br><span class="line"><span class="variable">$val</span> = b =&gt; <span class="variable">$data</span>[<span class="number">0</span>] 变成 b</span><br><span class="line"><span class="variable">$val</span> = &amp;<span class="variable">$data</span>[<span class="number">1</span>]</span><br><span class="line">输出：b b c</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.</span><br><span class="line"><span class="variable">$key</span> = <span class="number">2</span></span><br><span class="line"><span class="variable">$val</span> = c =&gt; <span class="variable">$data</span>[<span class="number">1</span>] 变成 c</span><br><span class="line"><span class="variable">$val</span> = &amp;<span class="variable">$data</span>[<span class="number">1</span>]</span><br><span class="line">输出：b c c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析</span></span><br><span class="line">核心要点在于 <span class="variable">$val</span> 与 <span class="variable">$data</span>[<span class="string">&#x27;n&#x27;</span>] 引用之后，当<span class="variable">$val</span>发生改变时，<span class="variable">$data</span>[<span class="string">&#x27;n&#x27;</span>]也会发生改变</span><br><span class="line">循环体<span class="number">1</span>&#123;</span><br><span class="line">  <span class="variable">$val</span>被赋值 a</span><br><span class="line">  <span class="variable">$val</span> = &amp;<span class="variable">$data</span>[<span class="number">0</span>]; 绑定到一起</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">循环体<span class="number">2</span>&#123;</span><br><span class="line">  <span class="variable">$val</span>被赋值 b</span><br><span class="line">  <span class="variable">$data</span>[<span class="number">0</span>]变成b</span><br><span class="line">  <span class="variable">$val</span> = &amp;<span class="variable">$data</span>[<span class="number">1</span>]; 绑定到一起</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">循环体<span class="number">3</span>&#123;</span><br><span class="line">  <span class="variable">$val</span>被赋值 c</span><br><span class="line">  <span class="variable">$data</span>[<span class="number">0</span>]变成c</span><br><span class="line">  <span class="variable">$val</span> = &amp;<span class="variable">$data</span>[<span class="number">2</span>]; 绑定到一起</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line">  [<span class="number">1</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line">  [<span class="number">2</span>] =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="变量范围"><a href="#变量范围" class="headerlink" title="变量范围"></a>变量范围</h4><h5 id="global关键字-x3D-x3D-GLOBALS-‘XX’"><a href="#global关键字-x3D-x3D-GLOBALS-‘XX’" class="headerlink" title="global关键字 &#x3D;&#x3D; $GLOBALS[‘XX’]"></a>global关键字 &#x3D;&#x3D; $GLOBALS[‘XX’]</h5><h5 id="static"><a href="#static" class="headerlink" title="static"></a>static</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$a</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="variable">$a</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>特点：</p>
<ol>
<li>只存在于局部作用域中</li>
<li>当程序执行完并且离开作用于时，值不丢失</li>
<li>可用于限制递归次数</li>
</ol>
<p>真题：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$count</span> = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_count</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">static</span> <span class="variable">$count</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$count</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$count</span>;</span><br><span class="line">++<span class="variable">$count</span>;</span><br><span class="line"><span class="keyword">echo</span> get_count();</span><br><span class="line"><span class="keyword">echo</span> get_count();</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果是 5 null 1 但是echo后是51</span></span><br></pre></td></tr></table></figure>

<h4 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h4><h5 id="超全局数组"><a href="#超全局数组" class="headerlink" title="超全局数组"></a>超全局数组</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$GLOBALS</span></span><br><span class="line">    <span class="variable">$_SESSION</span></span><br><span class="line">    <span class="variable">$_ENV</span></span><br><span class="line">    <span class="variable">$_SERVER</span></span><br><span class="line">        <span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_ADDR&#x27;</span>]</span><br><span class="line">        <span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_NAME&#x27;</span>]</span><br><span class="line">        <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]</span><br><span class="line">        <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>]</span><br><span class="line">        <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>]</span><br><span class="line">        <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URL&#x27;</span>]</span><br><span class="line">        <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_TIME&#x27;</span>]</span><br><span class="line">        <span class="variable">$_SERVER</span>[<span class="string">&#x27;PATH_INFO&#x27;</span>]</span><br><span class="line">    <span class="variable">$_FILES</span></span><br><span class="line">    <span class="variable">$_REQUEST</span></span><br><span class="line">        <span class="variable">$_GET</span></span><br><span class="line">        <span class="variable">$_POST</span></span><br><span class="line">        <span class="variable">$_COOKIE</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="错误控制运算符"><a href="#错误控制运算符" class="headerlink" title="错误控制运算符"></a>错误控制运算符</h4><p>@</p>
<h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><ul>
<li>递增递减 &gt; 逻辑运算符 &gt; 算数运算符 &gt; 比较运算符 &gt; 逻辑与 &gt; 逻辑或 &gt; 三元运算符 &gt; 赋值 &gt; and &gt; xor &gt; or</li>
<li>(++–)  &gt;    (!)    &gt;   (+-*&#x2F;)  &gt;    (&lt;&gt;&#x3D;)   &gt; (&amp;&amp;)  &gt;  (||) &gt;    (?:)    &gt; (&#x3D;) &gt; and &gt; xor &gt;  or</li>
</ul>
<h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><ol>
<li><code>+</code> 加</li>
<li><code>-</code> 减</li>
<li><code>*</code> 乘</li>
<li><code>/</code> 除</li>
<li><code>%</code> 模(余数)</li>
<li><code>**</code> 次方</li>
</ol>
<h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><ol>
<li><code>=</code> 把右边表达式的值赋给左边的运算数</li>
<li><code>+=</code></li>
<li><code>-=</code></li>
<li><code>*=</code></li>
<li><code>/=</code></li>
<li><code>%=</code></li>
<li><code>**=</code></li>
<li>引用赋值 <code>$a = &amp;$b</code></li>
</ol>
<h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><blockquote>
<p><a href="https://blog.csdn.net/weixin_38296030/article/details/88353914" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38296030/article/details/88353914</a></p>
</blockquote>
<ol>
<li><code>~ $a</code>  Not 按位取反：1换成0，0换成1</li>
<li><code>$a &lt;&lt; $b</code> Shift left 左移: 将 $a 中的位向左移动 $b 次（每一次移动都表示”乘以 2”）。</li>
<li><code>$a &gt;&gt; $b</code> Shift right 右移: 将 $a 中的位向右移动 $b 次（每一次移动都表示”除以 2”）。</li>
<li><code>$a &amp; $b</code> And 按位与：将把 $a 和 $b 中都为 1 的位设为 1。</li>
<li><code>$a ^ $b</code> Xor 按位异或： 将把 $a 和 $b 中一个为 1 另一个为 0 的位设为 1。</li>
<li><code>$a | $b</code> Or 按位或： 将把 $a 和 $b 中任何一个为 1 的位设为 1。</li>
</ol>
<p>解释：</p>
<ul>
<li><p>原码</p>
<blockquote>
<p>正数的<font color="red"><b>原码</b></font>是 按照绝对值大小转换成的二进制数<br>负数的<font color="red"><b>原码</b></font>是 按照绝对值大小转换成的二进制数，最高位补1</p>
</blockquote>
</li>
<li><p>补码</p>
<blockquote>
<p>正数的<font color="green"><b>补码</b></font> &#x3D;&#x3D; <font color="red"><b>原码</b></font><br>负数的<font color="green"><b>补码</b></font> &#x3D;&#x3D; 补码除符号外，各位取反，最后+1</p>
</blockquote>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = -<span class="number">3</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a的原码是 1000000000000011</span></span><br><span class="line"><span class="comment">//a的补码是 1111111111111101 也就是二进制码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//b的原码是 0000000000000100</span></span><br><span class="line"><span class="comment">//b的补码是 0000000000000100 也就是二进制码</span></span><br></pre></td></tr></table></figure>
<p><font color="red">记忆：如何获取负数的二进制码？</font></p>
<ol>
<li>获取负数的原码</li>
<li>获取负数的补码</li>
<li>补码就是二进制码</li>
</ol>
<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ol>
<li><code>$a == $b</code> 等于</li>
<li><code>$a === $b</code> 全等</li>
<li><code>$a != $b</code> 不等</li>
<li><code>$a &lt;&gt; $b</code> 不等</li>
<li><code>$a !== $b</code> 不全等</li>
<li><code>$a &lt; $b</code> 小于</li>
<li><code>$a &gt; $b</code> 大于</li>
<li><code>$a &lt;= $b</code> 小于等于</li>
<li><code>$a &gt;= $b</code>  大于等于</li>
<li><code>$a &lt;=&gt; $b</code>  太空船运算符（组合比较符）</li>
<li><code>$a ?? $b ?? $c</code>  NULL 合并操作符</li>
</ol>
<h4 id="无-执行运算符"><a href="#无-执行运算符" class="headerlink" title="无-执行运算符"></a>无-执行运算符</h4><h4 id="递增递减运算符"><a href="#递增递减运算符" class="headerlink" title="递增递减运算符"></a>递增递减运算符</h4><p>重点：</p>
<ol>
<li>布尔值无影响</li>
<li>递增null 会变成1，递减不会变</li>
<li>符号在前就先运算，再使用</li>
<li>短路题，从左到右对比两个符号</li>
</ol>
<p>试题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span> = <span class="number">3</span> &gt; <span class="number">0</span> || <span class="variable">$b</span> = <span class="number">3</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">	<span class="variable">$a</span>++;</span><br><span class="line">	<span class="variable">$b</span>++;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$a</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先执行 (3 &gt; 0) 从左到右看，其实就是在给$a赋值，看$a= 后面的值是多少</span></span><br><span class="line"><span class="comment">//再执行 (3 &gt; 0 || $b = 3 &gt; 0) 得出结果赋值给$a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#结果11</span></span><br></pre></td></tr></table></figure>

<h4 id="无-逻辑运算符"><a href="#无-逻辑运算符" class="headerlink" title="无-逻辑运算符"></a>无-逻辑运算符</h4><h4 id="无-无-字符串运算符"><a href="#无-无-字符串运算符" class="headerlink" title="无-无-字符串运算符"></a>无-无-字符串运算符</h4><h4 id="无-类型运算符"><a href="#无-类型运算符" class="headerlink" title="无-类型运算符"></a>无-类型运算符</h4><hr>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><ol>
<li>判断的值，只能是 <font color="red">整型、浮点、字符串以及表达式</font></li>
<li>在switch中的continue和break效果一样，foreach中continue是继续的意思</li>
</ol>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="返回值-return"><a href="#返回值-return" class="headerlink" title="返回值 return"></a>返回值 <code>return</code></h4><ol>
<li>返回值不能是多个值，可以通过数组返回</li>
<li>如果没有设置返回，则执行完函数 结果是 <code>null</code></li>
</ol>
<h4 id="自定义函数-已验证，是正确的"><a href="#自定义函数-已验证，是正确的" class="headerlink" title="自定义函数(已验证，是正确的)"></a>自定义函数(已验证，是正确的)</h4><ul>
<li>函数静态值修改</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeNumber</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">static</span> <span class="variable">$number</span> = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$number</span> = changeNumber();</span><br><span class="line"><span class="variable">$number</span> = <span class="number">10</span>;</span><br><span class="line">var_dump(changeNumber());</span><br><span class="line"><span class="comment">#这样无法修改，需要引用函数</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> &amp;<span class="title">changeNumber</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">static</span> <span class="variable">$number</span> = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$number</span> = &amp;changeNumber();</span><br><span class="line"><span class="variable">$number</span> = <span class="number">10</span>;</span><br><span class="line">var_dump(changeNumber());</span><br><span class="line"><span class="comment">#修改成功</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果要修改函数的参数值，可以使用 引用传参</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$number</span> = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeNumber</span>(<span class="params"><span class="variable">$number</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$number</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">changeNumber(<span class="variable">$number</span>);</span><br><span class="line">var_dump(<span class="variable">$number</span>);</span><br><span class="line"><span class="comment">#不会进行修改</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$number</span> = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeNumber</span>(<span class="params">&amp;<span class="variable">$number</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$number</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">changeNumber(<span class="variable">$number</span>);</span><br><span class="line">var_dump(<span class="variable">$number</span>);</span><br><span class="line"><span class="comment">#引用传参，会进行修改</span></span><br><span class="line"><span class="comment">#结果2</span></span><br></pre></td></tr></table></figure>
<h4 id="系统内置函数"><a href="#系统内置函数" class="headerlink" title="系统内置函数"></a>系统内置函数</h4><h5 id="IP处理函数"><a href="#IP处理函数" class="headerlink" title="IP处理函数"></a>IP处理函数</h5><ul>
<li>ip2long()</li>
<li>long2ip()</li>
</ul>
<h5 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h5><h5 id="打印函数"><a href="#打印函数" class="headerlink" title="打印函数"></a>打印函数</h5><p>重点</p>
<ol>
<li>排序</li>
<li>语法结构&#x2F;函数</li>
<li>是否可以打印多个值</li>
<li>是否可以打印数据类型</li>
<li>是否有返回值</li>
<li>应用场景</li>
</ol>
<table>
<thead>
<tr>
<th>*</th>
<th>语法结构(√) 函数(△)</th>
<th>可打印多个值</th>
<th>数据类型</th>
<th>有返回值</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>print</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>echo</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>print_r</td>
<td>△</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>var_dump</td>
<td>△</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>printf</td>
<td>△</td>
<td></td>
<td></td>
<td></td>
<td>格式化输出</td>
</tr>
<tr>
<td>sprintf</td>
<td>△</td>
<td></td>
<td></td>
<td>√</td>
<td>格式化输出</td>
</tr>
</tbody></table>
<h5 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h5><blockquote>
<p>序列化对象时，保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。</p>
</blockquote>
<ul>
<li>serialize</li>
<li>unserialize</li>
</ul>
<h5 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h5><p>bin2hex() 2进制字符串转为16进制，字节方式<br>hex2bin() 16进制字符串转为2进制，字节方式<br>chr() ascii码转为字符<br>ord() 字符转为ascii码</p>
<p>trim() 移除字符串两侧的空白字符或其他预定义字符<br>ltrim()<br>rtrim() 或 chop()<br>expload($glue符号, $str, [$limit]) 使用一个字符串分割另一个字符串 返回array<br>str_split($str, $split_lenth)<br>implode($glue符号, $array) 或 join() 将一个一维数组的值转化为字符串<br>stripos($str, $find_str) 查找字符串首次出现的位置 不区分大小写<br>strpos($str, $find_str) 找字符串首次出现的位置</p>
<p>stristr($str, $find_str, $false:如果是true，则返回字符串出现位置的前面部分) 查找字符串的首次出现 不区分大小写<br>strstr($str, $find_str, $false:如果是true，则返回字符串出现位置的前面部分) 查找字符串的首次出现<br>strtr 转换指定字符<br>strrchr($str, $find_str) 查找字符串的最后一次出现<br>substr($str, $start, [$length]]) 返回字符串的子串<br>strrev($str) 反转字符串<br>lcfirst 使一个字符串的第一个字符小写</p>
<p>strtolower() 将字符串全部转换成小写<br>strtoupper() 将字符串全部转换成大写<br>ucfirst() 将字符串首位转换成小写<br>uncwords() 将字符串首位转换成大写</p>
<p>money_format() 将数字格式化成 货币字符串<br>number_format() 将数字格式化</p>
<ul>
<li>格式化的数字</li>
<li>保留的小数位数</li>
<li>小数点符号</li>
<li>千分位分隔符显示的字符</li>
</ul>
<p>md5 计算字符串的 MD5 散列值<br>mdt_file 计算文件 MD5 散列值<br>crype() 单向字符串散列<br>password_hash() 封装的crype，哈希算法，足够强的盐值<br>password_verify() 验证密码是否和散列值匹配<br>password_get_info() 返回指定散列（hash）的相关信息</p>
<p>str_repeat($str, $count) 返回 一个重复n次的字符串<br>str_replace(‘字符串或数组’,’字符串或数组’,$str) 字符串替换<br>strstr 或 strchr</p>
<p>str_shuffle 随机打乱一个字符串<br>rand<br>mt_rand()</p>
<p>输入安全<br>stripslashes 反引用一个使用 addcslashes() 转义的字符串<br>htmlentities — 将字符转换为 HTML 转义字符<br>htmlspecialchars<br>strip_tags 从字符串中去除 HTML 和 PHP 标记</p>
<p>做总结，考点</p>
<h5 id="数组处理函数"><a href="#数组处理函数" class="headerlink" title="数组处理函数"></a>数组处理函数</h5><blockquote>
<p>r:reversal反转<br>k:key健名<br>a:value健值<br>u:custom自定义</p>
</blockquote>
<p>sort()	对数值数组进行升序排序。<br>rsort()	对数值数组进行降序排序。</p>
<p>ksort()	    对关联数组按照键名升序排序。<br>krsort()	对关联数组按照键名降序排序。</p>
<p>asort()	    对关联数组按照键值进行升序排序。<br>arsort()	对关联数组按照键值进行降序排序。</p>
<p>usort()	    使用用户自定义的比较函数对数组进行排序。<br>uasort()	使用用户自定义的比较函数对数组中的键值进行排序。<br>uksort()	使用用户自定义的比较函数对数组中的键名进行排序。</p>
<p>array_multisort()	对多个数组或多维数组进行排序。</p>
<p>其他：<br>array_change_key_case($arr,CASE_XX) 将数组中的键名修改成大小写 lower upper<br>array_chunk($array, $size, [false]如果设置为true，则保留键名)<br>array_column($array, ‘column_name’,[键名])<br>array_count_values() 统计数组中的值 结果为 <code>[&#39;值1&#39; =&gt; 次数,&#39;值2&#39; =&gt; 次数]</code><br>array_keys()<br>array_values()<br>array_key_exists()<br>array_mer<br>array_rand</p>
<h3 id="类与对象-单一继承-单一接口"><a href="#类与对象-单一继承-单一接口" class="headerlink" title="类与对象 (单一继承 单一接口)"></a>类与对象 (单一继承 单一接口)</h3><h4 id="类的自动加载"><a href="#类的自动加载" class="headerlink" title="类的自动加载"></a>类的自动加载</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动加载函数，在PHP5中，当我们实例化一个未定义的类时，就会触发此函数。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$class</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">#这里去require_once需要的文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用SPL标准库的自动加载函数，将函数注册到SPL的 __autoload函数中，三种书写方式</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;core/Loader.php&quot;</span>;</span><br><span class="line">spl_autoload_register(<span class="variable">$autoload_function</span>);</span><br><span class="line">spl_autoload_register(<span class="string">&quot;\\core\\Loader::autoload&quot;</span>);</span><br><span class="line">spl_autoload_register([<span class="string">&#x27;类名&#x27;</span>,<span class="string">&#x27;方法名&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">## 注意事项：如果在你的程序中已经实现了__autoload函数，它必须显式注册到__autoload栈中。</span></span><br><span class="line"><span class="comment">## 因为spl_autoload_register()函数会将Zend Engine中的__autoload函数取代为spl_autoload() 或 spl_autoload_call()。</span></span><br></pre></td></tr></table></figure>
<h4 id="访问控制关键字"><a href="#访问控制关键字" class="headerlink" title="访问控制关键字"></a>访问控制关键字</h4><ul>
<li><code>public</code> (默认)</li>
<li><code>private</code>(用于本类调用)</li>
<li><code>protected</code>(用于本类和继承类调用)</li>
</ul>
<h4 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h4><blockquote>
<p>如果方法名和类名一样，则也是构造函数 php7已经将其废弃</p>
</blockquote>
<ul>
<li><code>__construct()</code> 类创建时，执行</li>
<li><code>__destruct()</code> 类销毁时，执行</li>
</ul>
<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>特点</p>
<ol>
<li>定义为抽象的类不能被实例化</li>
<li>如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的</li>
<li>被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。</li>
<li>继承抽象类时，必须继承抽象类的所有方法及参数 包括 权限控制修饰符</li>
</ol>
<h4 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h4><blockquote>
<p>不可访问包括：不存在、无权限</p>
</blockquote>
<ul>
<li><code>__get()</code> 获取不可访问的属性值时，执行</li>
<li><code>__set()</code> 给不可访问的属性赋值时，执行</li>
<li><code>__isset()</code> 将不可访问的属性进行 <code>isset()</code> 或 <code>empty()</code> 时，执行</li>
<li><code>__unset()</code> 将不可访问的属性进行 <code>unset()</code> 时，执行</li>
<li><code>__call()</code> 访问不可访问的方法时，执行</li>
<li><code>__callStatic()</code> 访问不可访问的静态方法时，执行</li>
<li><code>__sleep()</code> 使用 <code>serialize</code> 操作该类时，执行</li>
<li><code>__wakeup()</code> 使用 <code>unserialize</code> 操作该类时，执行</li>
<li><code>__invoke($param)</code> 把对象当成函数运行时，执行: <code>$a = (new Obj)()</code></li>
<li><code>__toString()</code> 当对象转换成字符串时，执行。方法内部必须返回一个字符串供外部查看</li>
<li><code>__clone()</code> 克隆对象时，执行</li>
</ul>
<h4 id="Final-禁止继承-x2F-覆盖"><a href="#Final-禁止继承-x2F-覆盖" class="headerlink" title="Final 禁止继承&#x2F;覆盖"></a>Final 禁止继承&#x2F;覆盖</h4><blockquote>
<p>只适用于方法和类</p>
</blockquote>
<ul>
<li>如果 <code>声明方法为 final 时</code>，继承该类的类方法无法覆盖</li>
<li>如果 <code>声明类为 final 时</code>，类无法继承</li>
</ul>
<h4 id="代码复用"><a href="#代码复用" class="headerlink" title="代码复用"></a>代码复用</h4><blockquote>
<p>Trait 为了减少单继承语言的限制</p>
</blockquote>
<p>优先级: 类(调用类或者衍生类)的方法 &gt; Trait的方法 &gt; 被继承的类方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">SayWorld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">parent</span>::sayHello();</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;2 &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;3 &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHelloWorld</span> <span class="keyword">extends</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">use</span> <span class="title">SayWorld</span>;</span><br><span class="line">	<span class="comment">// public function sayHello()</span></span><br><span class="line">	<span class="comment">// &#123;</span></span><br><span class="line">	<span class="comment">// 	echo &#x27;1 &#x27;;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> MyHelloWorld();</span><br><span class="line"><span class="variable">$o</span>-&gt;sayHello();</span><br><span class="line"></span><br><span class="line">&gt; 输出：Hello World!</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheWorldIsNotEnough</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">HelloWorld</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Hello Universe!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> TheWorldIsNotEnough();</span><br><span class="line"><span class="variable">$o</span>-&gt;sayHello();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&gt; 输出：Hello Universe!</span><br></pre></td></tr></table></figure>



<h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><h4 id="外部文件引入"><a href="#外部文件引入" class="headerlink" title="外部文件引入"></a>外部文件引入</h4><p>include&#x2F;require和include_once&#x2F;require_one</p>
<ul>
<li>后者会检查是否包含过该文件，如果包含过就不再包含</li>
<li>include和require的区别：require找不到文件或报致命错误，前者只是报警告</li>
<li>如果在include&#x2F;require没有给出路径名，默认从include_path&#x2F;require_path路径寻找文件，如果还没有，则从脚本文件目录找</li>
</ul>
<h2 id="函数参考"><a href="#函数参考" class="headerlink" title="函数参考"></a>函数参考</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li><code>getcwd()</code> 获取当前目录(与linux的pwd不同，切记)</li>
<li><code>chdir()</code> 改变当前目录</li>
<li><code>chroot()</code> 改变根目录(window下不可操作,还需要Root权限)</li>
<li><code>dir($path)</code> 返回一个目录实例{path,read,handle}</li>
<li><code>opendir($path)</code> 打开目录句柄</li>
<li><code>readdir(实例)</code> 从目录句柄中读取条目</li>
<li><code>rewinddir(实例)</code> 将目录指针设置为第一个(倒回目录句柄)</li>
<li><code>closedir(实例)</code> 关闭目录句柄</li>
<li><code>scandir($path)</code> 列出所有目录和文件</li>
</ul>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ol>
<li><code>string basename( string $path[, string $suffix] )</code> 返回路径中的文件名部分<ul>
<li><code>path</code> 一个路径</li>
<li><code>suffix</code> 如果文件名是以 <code>suffix</code> 结束的，那这一部分也会被去掉。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;1) &quot;</span>.basename(<span class="string">&quot;/etc/sudoers.d&quot;</span>, <span class="string">&quot;.d&quot;</span>).PHP_EOL;  <span class="comment">#sudoers</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;2) &quot;</span>.basename(<span class="string">&quot;/etc/passwd&quot;</span>).PHP_EOL; <span class="comment">#passwd</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;3) &quot;</span>.basename(<span class="string">&quot;/etc/&quot;</span>).PHP_EOL; <span class="comment">#etc</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;4) &quot;</span>.basename(<span class="string">&quot;.&quot;</span>).PHP_EOL; <span class="comment">#.</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;5) &quot;</span>.basename(<span class="string">&quot;/&quot;</span>); <span class="comment">#null 也就是&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>string dirname( string $path)</code> 返回路径中的目录部分<ul>
<li><code>path</code> 一个路径</li>
</ul>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> dirname(<span class="string">&quot;/etc/passwd&quot;</span>) . PHP_EOL; <span class="comment"># /etc</span></span><br><span class="line"><span class="keyword">echo</span> dirname(<span class="string">&quot;/etc/&quot;</span>) . PHP_EOL; <span class="comment"># / (or \ on Windows)</span></span><br><span class="line"><span class="keyword">echo</span> dirname(<span class="string">&quot;.&quot;</span>); <span class="comment"># .</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><code>bool chgrp( string $filename, mixed $group)</code> 尝试将文件 <code>filename</code> 所属的组改成 <code>group</code>（通过组名或组 ID 指定）。<ul>
<li><code>filename</code> 文件的路径。</li>
<li><code>group</code> 组的名称或数字。</li>
</ul>
</li>
<li><code>bool chmod( string $filename, int $mode)</code> 改变文件模式<ul>
<li><code>filename</code> 文件的路径。</li>
<li><code>group</code> 组的名称或数字。 8进制数：数字 1 表示使文件可执行，数字 2 表示使文件可写，数字 4 表示使文件可读。 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">chmod(<span class="string">&quot;/somedir/somefile&quot;</span>, <span class="number">0755</span>);  <span class="comment">// 八进制数，正确的 mode 值</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>float disk_free_space( string $directory)</code> 或 <code>diskfreespace</code> 返回目录中的可用空间：字节数<ul>
<li><code>directory</code> 文件系统目录或者磁盘分区。 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// $df 包含根目录下可用的字节数</span></span><br><span class="line"><span class="variable">$df</span> = disk_free_space(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在 Windows 下:</span></span><br><span class="line"><span class="variable">$df_c</span> = disk_free_space(<span class="string">&quot;C:&quot;</span>);</span><br><span class="line"><span class="variable">$df_d</span> = disk_free_space(<span class="string">&quot;D:&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>float disk_total_space( string $directory)</code> 返回一个目录的磁盘总大小<ul>
<li><code>directory</code> 文件系统目录或者磁盘分区。 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#同上</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>pathinfo($path)</code> 返回文件路径的信息<ul>
<li><code>directory</code> 文件系统目录或者磁盘分区。 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$path_parts</span> = pathinfo(<span class="string">&#x27;/www/htdocs/inc/lib.inc.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$path_parts</span>[<span class="string">&#x27;dirname&#x27;</span>], <span class="string">&quot;\n&quot;</span>;  <span class="comment">#/www/htdocs/inc</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$path_parts</span>[<span class="string">&#x27;basename&#x27;</span>], <span class="string">&quot;\n&quot;</span>; <span class="comment">#lib.inc.php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$path_parts</span>[<span class="string">&#x27;extension&#x27;</span>], <span class="string">&quot;\n&quot;</span>; <span class="comment">#php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$path_parts</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="string">&quot;\n&quot;</span>; <span class="comment">// #lib.inc</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>rmdir()</code> 删除目录</li>
<li><code>unlink()</code> 删除文件</li>
<li><code>filemtime()</code> 文件修改时间</li>
<li><code>fileatime()</code> 文件上次访问时间</li>
<li><code>fileowner()</code> 文件所有者</li>
<li><code>filesize()</code> 文件大小</li>
<li><code>filetype()</code> 文件类型</li>
<li><code>fopen()</code> 打开文件或url</li>
</ol>
<ul>
<li>写入模式</li>
</ul>
<table>
<thead>
<tr>
<th><code>mode</code></th>
<th>打开模式</th>
<th>指针位置</th>
<th>是否清空</th>
<th>不存在是否创建</th>
</tr>
</thead>
<tbody><tr>
<td><code>r</code></td>
<td>只读</td>
<td>头部</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>r+</code></td>
<td>读写</td>
<td>头部</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>w</code></td>
<td>写入</td>
<td>头部</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td><code>w+</code></td>
<td>读写</td>
<td>头部</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td><code>a</code></td>
<td>写入</td>
<td>尾部</td>
<td></td>
<td>√</td>
</tr>
<tr>
<td><code>a+</code></td>
<td>读写</td>
<td>尾部</td>
<td></td>
<td>√</td>
</tr>
<tr>
<td><code>x</code></td>
<td>写入</td>
<td>头部</td>
<td></td>
<td>返回 <code>false</code> 并生成一条 <code>E_WARNING</code> 级别的错误信息</td>
</tr>
<tr>
<td><code>x+</code></td>
<td>读写</td>
<td>头部</td>
<td></td>
<td>返回 <code>false</code> 并生成一条 <code>E_WARNING</code> 级别的错误信息</td>
</tr>
</tbody></table>
<ol start="16">
<li><code>fclose()</code></li>
<li><code>flock()</code> 文件锁定</li>
<li><code>fread()</code> 读取文件</li>
<li><code>fwrite() || fputs()</code> 写入文件</li>
<li><code>mkdir()</code> 新建目录</li>
</ol>
<h4 id="文件指针"><a href="#文件指针" class="headerlink" title="文件指针"></a>文件指针</h4><ol>
<li>ftell</li>
<li>fseek</li>
<li>rewind</li>
</ol>
<h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><ol>
<li><code>fgets()</code> 获取一行</li>
<li><code>fgetc()</code> 获取一个字符</li>
</ol>
<p>真题1：循环将hello world添加至文件的第一行<br>重点：</p>
<ul>
<li>打开模式需要考虑：<ol>
<li>打开方式</li>
<li>是否清空</li>
<li>指针位置</li>
<li>是否创建<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化文件</span></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;hello.txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (is_file(<span class="variable">$file</span>)) &#123;</span><br><span class="line">	unlink(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个文件</span></span><br><span class="line"><span class="variable">$f</span> = fopen(<span class="variable">$file</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">fwrite(<span class="variable">$f</span>, <span class="string">&#x27;hello world!&#x27;</span>);</span><br><span class="line">fclose(<span class="variable">$f</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$count</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">	<span class="comment">//读取文件内容</span></span><br><span class="line">	<span class="variable">$f</span> = fopen(<span class="variable">$file</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">	flock(<span class="variable">$f</span>, LOCK_SH);<span class="comment">//取得共享锁定（读取的程序）</span></span><br><span class="line">	<span class="variable">$content</span> = fread(<span class="variable">$f</span>, filesize(<span class="variable">$file</span>));</span><br><span class="line">	flock(<span class="variable">$f</span>, LOCK_UN);</span><br><span class="line">	fclose(<span class="variable">$f</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将文件内容补充</span></span><br><span class="line">	<span class="variable">$new_content</span> = <span class="string">&#x27;hello world!&#x27;</span> . PHP_EOL . <span class="variable">$content</span>;</span><br><span class="line">	<span class="variable">$f</span> = fopen(<span class="variable">$file</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">	flock(<span class="variable">$f</span>, LOCK_EX);<span class="comment">//取得独占锁定（写入的程序）</span></span><br><span class="line">	fwrite(<span class="variable">$f</span>, <span class="variable">$new_content</span>);</span><br><span class="line">	flock(<span class="variable">$f</span>, LOCK_UN);</span><br><span class="line">	fclose(<span class="variable">$f</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//清除缓存，否则循环结果会改变</span></span><br><span class="line">	clearstatcache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<p>面试题1：PHP遍历一个文件夹下所有文件和子文件夹的函数<br>方式1：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each_dir</span>(<span class="params"><span class="variable">$path</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$array</span> = []; <span class="comment">//用static的作用是将所有子文件放在最外层，如果不用static则结果会有多维度(浅测试)</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$scandir_arr</span> = scandir(<span class="variable">$path</span>)) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$scandir_arr</span> <span class="keyword">as</span> <span class="variable">$resource</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$resource</span>, [</span><br><span class="line">                <span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;..&#x27;</span>,</span><br><span class="line">            ])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$file</span> = <span class="variable">$path</span> . DIRECTORY_SEPARATOR . <span class="variable">$resource</span>;</span><br><span class="line">            <span class="keyword">if</span> (is_dir(<span class="variable">$file</span>)) &#123;</span><br><span class="line">                each_dir(<span class="variable">$file</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (is_file(<span class="variable">$file</span>)) &#123;</span><br><span class="line">                    <span class="variable">$array</span>[] = <span class="variable">$path</span> . <span class="string">&#x27;--&#x27;</span> . <span class="variable">$resource</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$files_arr</span> = each_dir(getcwd());</span><br><span class="line">var_dump(<span class="variable">$files_arr</span>);</span><br></pre></td></tr></table></figure>
<p>方式2：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//rewinddir()没用到</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each_dir</span>(<span class="params"><span class="variable">$path</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">static</span> <span class="variable">$array</span> = [];</span><br><span class="line">	<span class="keyword">if</span> (is_dir(<span class="variable">$path</span>)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$dir_jubing</span> = opendir(<span class="variable">$path</span>)) &#123;</span><br><span class="line">			<span class="keyword">while</span> ((<span class="variable">$resource</span> = readdir(<span class="variable">$dir_jubing</span>)) !== <span class="literal">false</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="variable">$resource</span> != <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$resource</span> != <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">					<span class="variable">$file</span> = <span class="variable">$path</span> . DIRECTORY_SEPARATOR . <span class="variable">$resource</span>;</span><br><span class="line">					<span class="keyword">if</span> (is_dir(<span class="variable">$file</span>)) &#123;</span><br><span class="line">						each_dir(<span class="variable">$file</span>);</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (is_file(<span class="variable">$file</span>)) &#123;</span><br><span class="line">						<span class="variable">$array</span>[] = <span class="variable">$file</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			closedir(<span class="variable">$dir_jubing</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$files_arr</span> = each_dir(getcwd());</span><br><span class="line">var_dump(<span class="variable">$files_arr</span>);</span><br></pre></td></tr></table></figure>
<p>方式3：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each_dri</span>(<span class="params"><span class="variable">$path</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">static</span> <span class="variable">$array</span> = [];</span><br><span class="line">	<span class="variable">$dir_shili</span> = dir(<span class="variable">$path</span>);</span><br><span class="line">	<span class="keyword">while</span> ((<span class="variable">$res</span> = <span class="variable">$dir_shili</span>-&gt;read()) !== <span class="literal">false</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$res</span> != <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$res</span> != <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">			<span class="variable">$file</span> = <span class="variable">$path</span> . DIRECTORY_SEPARATOR . <span class="variable">$res</span>;</span><br><span class="line">			<span class="keyword">if</span> (is_dir(<span class="variable">$file</span>)) &#123;</span><br><span class="line">				each_dri(<span class="variable">$file</span>);</span><br><span class="line">			&#125; <span class="keyword">elseif</span> (is_file(<span class="variable">$file</span>)) &#123;</span><br><span class="line">				<span class="variable">$array</span>[] = <span class="variable">$res</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(each_dri(getcwd()));</span><br></pre></td></tr></table></figure>

<hr>
<p>面试题2：PHP复制一个文件夹以及里面的所有文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy_dir</span>(<span class="params"><span class="variable">$path</span>, <span class="variable">$newpath</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (is_dir(<span class="variable">$path</span>)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!is_dir(<span class="variable">$newpath</span>)) &#123;</span><br><span class="line">			mkdir(<span class="variable">$newpath</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$dir_jubing</span> = opendir(<span class="variable">$path</span>)) &#123;</span><br><span class="line">			<span class="keyword">while</span> ((<span class="variable">$item</span> = readdir(<span class="variable">$dir_jubing</span>)) !== <span class="literal">false</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="variable">$item</span> != <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$item</span> != <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">					<span class="variable">$wanzheng_path</span> = <span class="variable">$path</span> . <span class="string">&#x27;\\&#x27;</span> . <span class="variable">$item</span>;</span><br><span class="line">					<span class="keyword">if</span> (is_dir(<span class="variable">$item</span>)) &#123;</span><br><span class="line">						copy_dir(<span class="variable">$wanzheng_path</span>, <span class="variable">$newpath</span> . <span class="string">&#x27;\\&#x27;</span> . <span class="variable">$item</span>);</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (is_file(<span class="variable">$wanzheng_path</span>)) &#123;</span><br><span class="line">						copy(<span class="variable">$wanzheng_path</span>, <span class="variable">$newpath</span> . <span class="string">&#x27;\\&#x27;</span> . <span class="variable">$item</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			closedir(<span class="variable">$dir_jubing</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$newpath</span> = <span class="string">&quot;C:\Users\Administrator\Desktop\study_php2&quot;</span>;</span><br><span class="line">copy_dir(getcwd(), <span class="variable">$newpath</span>);</span><br></pre></td></tr></table></figure>

<p>面试题3：PHP删除一个文件夹里面的所有文件，不删除文件夹</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">del_dir</span>(<span class="params"><span class="variable">$path</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (is_dir(<span class="variable">$path</span>)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$scan_dir_info</span> = scandir(<span class="variable">$path</span>)) &#123;</span><br><span class="line">			<span class="keyword">foreach</span> (<span class="variable">$scan_dir_info</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="variable">$item</span> != <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$item</span> != <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">					<span class="variable">$wanzheng_path</span> = <span class="variable">$path</span> . <span class="string">&#x27;\\&#x27;</span> . <span class="variable">$item</span>;</span><br><span class="line">					<span class="keyword">if</span> (is_dir(<span class="variable">$wanzheng_path</span>)) &#123;</span><br><span class="line">						del_dir(<span class="variable">$wanzheng_path</span>);</span><br><span class="line">					&#125; <span class="keyword">elseif</span> (is_file(<span class="variable">$wanzheng_path</span>)) &#123;</span><br><span class="line">						unlink(<span class="variable">$wanzheng_path</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$newpath</span> = <span class="string">&quot;C:\Users\Administrator\Desktop\study_php2&quot;</span>;</span><br><span class="line">del_dir(<span class="variable">$newpath</span>);</span><br></pre></td></tr></table></figure>

<p>注意事项</p>
<ol>
<li>循环遍历目录的时候会多 <code>.</code>和<code>..</code></li>
<li>如果要将结果放置 <code>array</code> 当中，需要使用 <code>static</code> 关键字</li>
</ol>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="variable">$zhengze</span> = &lt;&lt;&lt;example</span><br><span class="line"><span class="comment">#问题至少写出一种139开头的11位手机号码的正则表达式</span></span><br><span class="line"><span class="comment">#作用：分割/查找/匹配/替换字符串</span></span><br><span class="line">    分隔符：正斜线(/) hash符号(<span class="comment">#) 取反符号(~)</span></span><br><span class="line">    通用原子：</span><br><span class="line">             \d 十进制 <span class="number">0</span>-<span class="number">9</span></span><br><span class="line">             \D 取反，除了<span class="number">0</span>-<span class="number">9</span></span><br><span class="line">             \w 数字字母下划线</span><br><span class="line">             \W 取反，除了数字字母下划线</span><br><span class="line">             \s 空白符</span><br><span class="line">             \S 取反，除了空白符</span><br><span class="line">    元字符：</span><br><span class="line">            . 除了换行符的任意字符</span><br><span class="line">            * 匹配前面的内容，出现<span class="number">0</span>次一次或者多次</span><br><span class="line">            ? <span class="number">0</span>次或者一次</span><br><span class="line">            ^ 开头</span><br><span class="line">            $ 结尾</span><br><span class="line">            + 出现一次或者多次</span><br><span class="line">            &#123;n&#125; 恰巧出现N次</span><br><span class="line">            &#123;n,&#125; 恰巧出现&gt;=N次</span><br><span class="line">            &#123;n,m&#125; 重复前面匹配的字符n-m次，至少n次，最多m次。</span><br><span class="line">            [] 集合 [abc]匹配a或者b或者c</span><br><span class="line">            () 重复前面匹配的字符n-m次，至少n次，最多m次。</span><br><span class="line">            [^] 取反 [^abc]除了a除了b除了c</span><br><span class="line">            | 或者</span><br><span class="line">            [-] 范围，[<span class="number">0</span>-<span class="number">9</span>]就是<span class="number">0123456789</span></span><br><span class="line">    模式修正符：</span><br><span class="line">            i 不区分大小写</span><br><span class="line">            m 分割字符串后 分别与之匹配</span><br><span class="line">            e 不常用，php7不存在了</span><br><span class="line">            s 修正 .的换行</span><br><span class="line">            U 取消贪婪模式 和 ？一样的效果</span><br><span class="line">            x 忽略模式中的空白符</span><br><span class="line">            A 必须以模式开头</span><br><span class="line">            D 修正$ 对 \n的忽略</span><br><span class="line">            u 进行utf8中文匹配的时候需要用到</span><br><span class="line">后向引用</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;&lt;b&gt;abc&lt;/b&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/&lt;b&gt;(.*)&lt;\/b&gt;/&#x27;</span>;</span><br><span class="line">preg_replace(<span class="variable">$pattern</span>,<span class="string">&#x27;\\1&#x27;</span>,<span class="variable">$str</span>);<span class="comment">#\1是指第一个括号里面匹配到的内容</span></span><br><span class="line"></span><br><span class="line">贪婪模式</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;&lt;b&gt;abc&lt;/b&gt;&lt;b&gt;xyz&lt;/b&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/&lt;b&gt;.*&lt;\/b&gt;/U&#x27;</span>;<span class="comment">#取消贪婪模式</span></span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/&lt;b&gt;.*?&lt;\/b&gt;/&#x27;</span>;<span class="comment">#取消贪婪模式</span></span><br><span class="line">preg_replace_all(<span class="variable">$pattern</span>,<span class="string">&#x27;\\1&#x27;</span>,<span class="variable">$str</span>);<span class="comment">#\1是指第一个括号里面匹配到的内容</span></span><br><span class="line"></span><br><span class="line">匹配手机号</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/^139\d&#123;8&#125;$/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">email</span><br><span class="line"></span><br><span class="line">ip</span><br><span class="line"></span><br><span class="line">url</span><br><span class="line"></span><br><span class="line">取出所有img标签中的src</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/&lt;img.*?src=&quot;(.*)?&quot;.*?\/?&gt;/i&#x27;</span>;</span><br><span class="line">.* 匹配多个字符</span><br><span class="line">？取消贪婪模式</span><br><span class="line">(.*)</span><br><span class="line">/i 不区分大小写</span><br><span class="line"></span><br><span class="line">preg_match()     <span class="regexp">//</span>执行匹配正则表达式</span><br><span class="line">preg_match_all() <span class="regexp">//</span>执行一个全局正则表达式匹配</span><br><span class="line">example;</span><br></pre></td></tr></table></figure>


<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><hr>
<h3 id="会话控制"><a href="#会话控制" class="headerlink" title="会话控制"></a>会话控制</h3><blockquote>
<p><code>web</code> 是通过http协议使客户端和服务端进行交互，但是http是无状态的，没有方法鉴别用户的状态<br>会话控制就是保留用户状态，用来跟踪和对用户的状态保持</p>
</blockquote>
<p>cookie是存储在用户客户端浏览器或硬盘的技术</p>
<ul>
<li>优点：不占用服务器的资源</li>
<li>缺点：安全性差</li>
<li>基本操作：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置</span></span><br><span class="line">setcookie(name,value,expire,path,domain,secure);</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取</span></span><br><span class="line"><span class="variable">$_COOKIE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">setcookie(name,<span class="string">&#x27;&#x27;</span>,-<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>session是将用户状态存储在服务器的技术</p>
<ul>
<li>优点：占用服务器资源</li>
<li>缺点：安全性比cookie高</li>
<li>基本操作</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启</span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="comment">#操作</span></span><br><span class="line"><span class="variable">$_SESSION</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#清除session</span></span><br><span class="line"><span class="variable">$_SESSION</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除session文件并把sessionid删除</span></span><br><span class="line">session_destory()</span><br><span class="line"></span><br><span class="line"><span class="comment">#session设置 php.ini</span></span><br><span class="line">session.auto_start <span class="comment">#自动开启session</span></span><br><span class="line">session.cookie_domain <span class="comment">#有效域名</span></span><br><span class="line">session.cookie_lifetime <span class="comment">#存储在cookie的最大生命周期</span></span><br><span class="line">session.cookie_path <span class="comment">#cookie的存放路径</span></span><br><span class="line">session.save_path <span class="comment">#session存放服务器的路径</span></span><br><span class="line">session.use_cookies <span class="comment">#是否使用cookie传递sessionid</span></span><br><span class="line">session.use_trans_id  <span class="comment">#是否可以使用连接传递sessionid</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#垃圾回收机制</span></span><br><span class="line">session.gc_probability <span class="comment">#清理次数</span></span><br><span class="line">session.gc_divisor <span class="comment">#请求次数</span></span><br><span class="line">session.gc_maxlifetime<span class="comment"># 最大生命周期  超过生命周期 视为垃圾</span></span><br></pre></td></tr></table></figure>
<ul>
<li>cookie和session的区别</li>
</ul>
<ol>
<li>存储位置</li>
<li>session存储的是序列化后的对象，session是字符串</li>
<li>session依赖于cookie，如果后者不工作，前者也失效<ul>
<li>因为session工作的机制是将生成的唯一标识PHPSESSID存入cookie中的，所以禁掉cookie，session也不能使用</li>
</ul>
</li>
</ol>
<p>禁用cookie后如何传递sessionid值？</p>
<ol>
<li>可以修改配置<br>session.use_cookies &#x3D; 0；设置客户端不用cookie保存sessionid值<br>session.use_only_cookies &#x3D; 1;  是否只使用cookie传递sessionid<br>session.use_trans_sid &#x3D; 1；  url自动加上PHPSESSID  这样session正常使用</li>
<li>使用url传递sessionid<br><code>&lt;a href=&quot;indx.php?&lt;?php echo session_name(). &#39;=&#39; .session_id();?&gt;&quot;&gt;&lt;/a&gt;</code><br>SID常量在禁用cookie的时候就是session_name和session_id的拼接，否则就是null<br><code>&lt;a href=&quot;indx.php?&lt;?php echo SID；?&gt;&quot;&gt;&lt;/a&gt;</code></li>
</ol>
<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><p>第一层：物理层<br>建立维护断开物理连接<br>第二层：数据链路层<br>简历逻辑连接，进行硬件地址寻址，差错校验等功能<br>第三层：网络层<br>进行逻辑地址寻址，实现不同网络之间的不同选择<br>第四层：传输层：定义传输数据<br>定义传输数据的协议端口号，以及流控和差错校验功能<br>TCP UDP数据包一旦离开网卡即进入网络传输层<br>第五层：会话层<br>建立管理终止会话<br>第六层：表示层<br>数据的表示安全压缩<br>第七层：应用层<br>网络服务与最终用户的一个接口，协议有ftp，http，tftp，smtp snmp dns telnet https pop3 dhcp<br>HTTP工作特点和工作原理<br>工作特点：B&#x2F;S模式 无状态，可以使用超文本传输协议<br>原理:客户端请求服务器后，使用tcp协议，指定端口号请求，服务器监听客户端，<br>一旦收到请求，处理请求返回状态码以及内容</p>
<ul>
<li>会话控制</li>
<li>面相对象</li>
<li>网络协议考察点</li>
<li>开发环境及配置</li>
</ul>
<p>面试题2：5种方式获取文件后缀名</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext1</span>(<span class="params"><span class="variable">$filename</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strrchr(<span class="variable">$filename</span>,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext2</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> substr(<span class="variable">$filename</span>,strrpos(<span class="variable">$filename</span>,<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext3</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array_pop(explode(<span class="string">&#x27;.&#x27;</span>,<span class="variable">$filename</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext4</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pathinfo(<span class="variable">$filename</span>,PATHINFO_EXTENSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext5</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strrev(substr(strrev(<span class="variable">$filename</span>),<span class="number">0</span>,strpos(strrev(<span class="variable">$filename</span>),<span class="string">&#x27;.&#x27;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&quot;1.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> get_ext1(<span class="variable">$filename</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> get_ext2(<span class="variable">$filename</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> get_ext3(<span class="variable">$filename</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> get_ext4(<span class="variable">$filename</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> get_ext5(<span class="variable">$filename</span>).<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="请简述-cgi-x2F-fast-cgi-x2F-php-fpm-的区别"><a href="#请简述-cgi-x2F-fast-cgi-x2F-php-fpm-的区别" class="headerlink" title="请简述 cgi&#x2F;fast-cgi&#x2F;php-fpm 的区别"></a>请简述 cgi&#x2F;fast-cgi&#x2F;php-fpm 的区别</h2><blockquote>
<p><a href="https://jaminzhang.github.io/web/CGI-FastCGI-PHP-CGI-PHP-FPM-Concepts-Understanding/" target="_blank" rel="noopener">https://jaminzhang.github.io/web/CGI-FastCGI-PHP-CGI-PHP-FPM-Concepts-Understanding/</a></p>
</blockquote>
<img src="/blog/p/1417dc7c/cgi_fast-cgi_php-fpm.png" class="" title="cgi_fast-cgi_php-fpm.png">

<ol>
<li>Apache调用php执行的过程：<code>apache -&gt; httpd -&gt; php5_module -&gt; sapi -&gt; php</code></li>
<li>CGI:全称是“通用网关接口”，专门用来和 web 服务器打交道，缺点是：每一次web请求都会有启动和退出过程，不适合并发情况</li>
<li>FastCGI类似一个常驻(long-live)型的CGI，提高性能，但是因为是多进程，所以比 CGI 多线程消耗更多的服务器内存，PHP-CGI 解释器每进程消耗 7 至 25 兆内存，将这个数字乘以 50 或 100 就是很大的内存数。</li>
<li>PHP-CGI 是 PHP 自带的 FastCGI 管理器。<ul>
<li>php-cgi 变更 php.ini 配置后需重启 php-cgi 才能让新的 php-ini 生效，不可以平滑重启。</li>
<li>直接杀死 php-cgi 进程，php就不能运行了。(PHP-FPM 和 Spawn-FCGI就没有这个问题，守护进程会平滑从新生成新的子进程。）</li>
</ul>
</li>
<li>PHP-FPM 是对于 FastCGI 协议的具体实现<ul>
<li>负责管理一个进程池，来处理来自Web服务器的请求。</li>
<li>通过生成新的子进程可以实现php.ini修改后的平滑重启。</li>
</ul>
</li>
</ol>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 尽量使用foreach，少用for</span></span><br><span class="line"><span class="comment">#2. 尽量将if拆解成 if+switch 或者 全部是switch的操作</span></span><br><span class="line"><span class="comment">#3. 尽量将在if语句中大概率出现的条件放置在最前面</span></span><br><span class="line"><span class="comment">#4. 尽量使用const 而不使用define</span></span><br><span class="line"><span class="comment">#尽量使用static声明类的方法</span></span><br><span class="line"><span class="comment">#字符串替换中，strtr效率最高</span></span><br><span class="line"><span class="comment">#尽量多用PHP的内置函数</span></span><br><span class="line"><span class="comment">#单双引号的声明</span></span><br></pre></td></tr></table></figure>


<h2 id="SPL-标准异常类"><a href="#SPL-标准异常类" class="headerlink" title="SPL 标准异常类"></a>SPL 标准异常类</h2><p>Standard PHP Library(PHP标准库,PHP5以后编译后自带的框架)为解决一些在Web开发中普遍的问题，提供了一系列的接口(interface)和类库(classes)的。<br>这些所有类库,你都可以在PHP编译本中找到(ext\SPL下的文件夹),基类文件在SPL.PHP等文件内,SPL提供了迭代器(Iterator)、数组对象(ArrayObject)、运行期违例(RuntimeException InvalidArgumentException……)、观察者模式(Observer Pattern)等一些解决方案。</p>
<img src="/blog/p/1417dc7c/spl.exceptions.jpg" class="" title="spl.exceptions">

<h3 id="继承与LogicException的异常类-一般情况下是系统编译时导致的"><a href="#继承与LogicException的异常类-一般情况下是系统编译时导致的" class="headerlink" title="继承与LogicException的异常类(一般情况下是系统编译时导致的)"></a>继承与LogicException的异常类(一般情况下是系统编译时导致的)</h3><h4 id="DomainException-与-RangeException-对应"><a href="#DomainException-与-RangeException-对应" class="headerlink" title="DomainException 与 RangeException 对应"></a>DomainException 与 RangeException 对应</h4><blockquote>
<p>判断某个值不在有效数据域时，抛出异常。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderImage</span>(<span class="params"><span class="variable">$imageResource</span>, <span class="variable">$imageType</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="variable">$imageType</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;jpg&#x27;</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;jpeg&#x27;</span>:</span><br><span class="line">    header(<span class="string">&#x27;Content-type: image/jpeg&#x27;</span>);</span><br><span class="line">    imagejpeg(<span class="variable">$imageResource</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;png&#x27;</span>:</span><br><span class="line">    header(<span class="string">&#x27;Content-type: image/png&#x27;</span>);</span><br><span class="line">    imagepng(<span class="variable">$imageResource</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">DomainException</span>(<span class="string">&#x27;Unknown image type: &#x27;</span> . <span class="variable">$imageType</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  imagedestroy(<span class="variable">$imageResource</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="InvalidArgumentException"><a href="#InvalidArgumentException" class="headerlink" title="InvalidArgumentException"></a>InvalidArgumentException</h4><blockquote>
<p>如果参数不是期望的类型，则抛出异常。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tripleInteger</span>(<span class="params"><span class="variable">$int</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!is_int(<span class="variable">$int</span>))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;tripleInteger function only accepts integers. Input was: &#x27;</span>.<span class="variable">$int</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$int</span> * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = tripleInteger(<span class="number">4</span>); <span class="comment">//$x == 12</span></span><br><span class="line"><span class="variable">$x</span> = tripleInteger(<span class="number">2.5</span>); <span class="comment">//exception will be thrown as 2.5 is a float</span></span><br><span class="line"><span class="variable">$x</span> = tripleInteger(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">//exception will be thrown as &#x27;foo&#x27; is a string</span></span><br><span class="line"><span class="variable">$x</span> = tripleInteger(<span class="string">&#x27;4&#x27;</span>); <span class="comment">//exception will throw as &#x27;4&#x27; is also a string</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="LengthException"><a href="#LengthException" class="headerlink" title="LengthException"></a>LengthException</h4><blockquote>
<p>如果长度无效，则抛出异常。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="BadFunctionCallException"><a href="#BadFunctionCallException" class="headerlink" title="BadFunctionCallException"></a>BadFunctionCallException</h4><blockquote>
<p>如果回调引用未定义的函数或缺少某些参数，则引发异常。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$func</span> = <span class="string">&#x27;do&#x27;</span> . <span class="variable">$arg</span>;</span><br><span class="line">    <span class="keyword">if</span> (!is_callable(<span class="variable">$func</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">BadFunctionCallException</span>(<span class="string">&#x27;Function &#x27;</span> . <span class="variable">$func</span> . <span class="string">&#x27; is not callable&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="BadMethodCallException"><a href="#BadMethodCallException" class="headerlink" title="BadMethodCallException"></a>BadMethodCallException</h4><blockquote>
<p>当一个回调方法是一个未定义的方法或缺失一些参数时会抛出该异常。</p>
</blockquote>
<h3 id="继承与RuntimeException的异常类-一般情况下是用户运行时导致的"><a href="#继承与RuntimeException的异常类-一般情况下是用户运行时导致的" class="headerlink" title="继承与RuntimeException的异常类(一般情况下是用户运行时导致的)"></a>继承与RuntimeException的异常类(一般情况下是用户运行时导致的)</h3><h4 id="OutOfBoundsException"><a href="#OutOfBoundsException" class="headerlink" title="OutOfBoundsException"></a>OutOfBoundsException</h4><blockquote>
<p>如果值不是有效键，则抛出异常。这表示在编译时无法检测到的错误。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandleApplication</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$params</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$params</span>[<span class="string">&#x27;secretCode&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">OutOfBoundsException</span>(<span class="string">&#x27;Application hasn\&#x27;t sent secret code for authenticate&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> HandleApplication([]);</span><br></pre></td></tr></table></figure>

<h4 id="OverflowException"><a href="#OverflowException" class="headerlink" title="OverflowException"></a>OverflowException</h4><blockquote>
<p>将元素添加到完整容器中时引发异常。</p>
</blockquote>
<h4 id="RangeException-与-DomainException-对应"><a href="#RangeException-与-DomainException-对应" class="headerlink" title="RangeException 与 DomainException 对应"></a>RangeException 与 DomainException 对应</h4><blockquote>
<p>引发异常以指示程序执行期间的范围错误。通常，这意味着除下溢&#x2F;上溢外还存在算术错误。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params"><span class="variable">$divident</span>, <span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$input</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeException</span>(<span class="string">&quot;Divisor must not be zero&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$divident</span> / <span class="variable">$input</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="UnderflowException"><a href="#UnderflowException" class="headerlink" title="UnderflowException"></a>UnderflowException</h4><blockquote>
<p>对空容器执行无效操作（例如删除元素）时引发的异常。</p>
</blockquote>
<h4 id="UnexpectedValueException"><a href="#UnexpectedValueException" class="headerlink" title="UnexpectedValueException"></a>UnexpectedValueException</h4><blockquote>
<p>如果一个值与一组值不匹配，则抛出异常。通常，当一个函数调用另一个函数并期望返回值是某种类型或不包括与算术或缓冲区相关的错误的值时，就会发生这种情况。</p>
</blockquote>
<p>补充：<br>php脚本层优化<br>if</p>
<ul>
<li>if经常出现的条件放在最前面，省去其他不必要的判断</li>
<li>条件允许情况下，if多结合switch使用，效率高</li>
</ul>
<h3 id="Laravel-ORM使用"><a href="#Laravel-ORM使用" class="headerlink" title="Laravel ORM使用"></a>Laravel ORM使用</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#保存</span></span><br><span class="line"><span class="variable">$flight</span> = <span class="keyword">new</span> Flight;</span><br><span class="line"><span class="variable">$flight</span>-&gt;name = <span class="variable">$request</span>-&gt;name;</span><br><span class="line"><span class="variable">$flight</span>-&gt;save();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$flight</span> = App\Flight::find(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$flight</span>-&gt;name = <span class="string">&#x27;New Flight Name&#x27;</span>;</span><br><span class="line"><span class="variable">$flight</span>-&gt;save(); <span class="comment">#更新</span></span><br><span class="line"><span class="variable">$flight</span>-&gt;delete(); <span class="comment">#删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据主键删除</span></span><br><span class="line">App\Flight::destroy(<span class="number">1</span>);</span><br><span class="line">App\Flight::destroy(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">App\Flight::destroy([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">App\Flight::destroy(collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">#批量更新</span></span><br><span class="line">App\Flight::where(<span class="string">&#x27;active&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">          -&gt;where(<span class="string">&#x27;destination&#x27;</span>, <span class="string">&#x27;San Diego&#x27;</span>)</span><br><span class="line">          -&gt;update([<span class="string">&#x27;delayed&#x27;</span> =&gt; <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询所有数据</span></span><br><span class="line"><span class="variable">$flights</span> = App\Flight::all();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$flights</span> <span class="keyword">as</span> <span class="variable">$flight</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flight</span>-&gt;name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询符合规则的数据</span></span><br><span class="line"><span class="variable">$flights</span> = App\Flight::where(<span class="string">&#x27;active&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">               -&gt;orderBy(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)</span><br><span class="line">               -&gt;take(<span class="number">10</span>)</span><br><span class="line">               -&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据之后返回模型</span></span><br><span class="line"><span class="variable">$user</span> = User::create([</span><br><span class="line">    <span class="string">&#x27;first_name&#x27;</span> =&gt; <span class="string">&#x27;Taylor&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;last_name&#x27;</span> =&gt; <span class="string">&#x27;Otwell&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;Developer&#x27;</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">#console命令行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="查看配置文件"><a href="#查看配置文件" class="headerlink" title="查看配置文件"></a>查看配置文件</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">#查看php安装的扩展</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/php/</span>sbin/php -m 或 php -m | <span class="keyword">grep</span> zip</span><br><span class="line"></span><br><span class="line">#查看php.ini的存储位置</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/php/</span>sbin/php -i | <span class="keyword">grep</span> <span class="string">&#x27;php.ini&#x27;</span></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/php/</span>sbin/php-fpm -i | <span class="keyword">grep</span> <span class="string">&#x27;php.ini&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-root权限"><a href="#安装-root权限" class="headerlink" title="安装(root权限)"></a>安装(root权限)</h2><blockquote>
<p><code>https://www.php.net/downloads.php</code></p>
</blockquote>
<h3 id="安装相关依赖包："><a href="#安装相关依赖包：" class="headerlink" title="安装相关依赖包："></a>安装相关依赖包：</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">yum</span> <span class="comment">install</span> <span class="literal">-</span><span class="comment">y</span> <span class="comment">gcc</span> <span class="comment">curl</span> <span class="comment">libxml2</span> <span class="comment">libxml2</span><span class="literal">-</span><span class="comment">devel</span> <span class="comment">openssl</span> <span class="comment">openssl</span><span class="literal">-</span><span class="comment">devel</span> <span class="comment">bzip2</span> <span class="comment">bzip2</span><span class="literal">-</span><span class="comment">devel libcurl libcurl-devel libjpeg libjpeg</span><span class="literal">-</span><span class="comment">devel libpng libpng-devel freetype freetype</span><span class="literal">-</span><span class="comment">devel gmp gmp-devel libmcrypt libmcrypt</span><span class="literal">-</span><span class="comment">devel readline readline-devel libxslt libxslt</span><span class="literal">-</span><span class="comment">devel</span> <span class="comment">re2c</span></span><br></pre></td></tr></table></figure>

<h3 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h3><blockquote>
<p><code>http://hk2.php.net</code>是国内网站，mirror是压缩包，下载后解压获得所有php文件<br>备用链接<br><code>http://hk1.php.net/get/php-7.1.26.tar.gz/from/this/mirror</code><br><code>http://php.net/get/php-7.1.26.tar.gz/from/a/mirror</code></p>
</blockquote>
<h3 id="编译安装php"><a href="#编译安装php" class="headerlink" title="编译安装php"></a>编译安装php</h3><p>安装dg-jpeg扩展</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载jpeg扩展包</span></span><br><span class="line">wget http:<span class="regexp">//</span>www.ijg.org<span class="regexp">/files/</span>jpegsrc.v8b.tar.gz </span><br><span class="line"><span class="comment">#解压缩扩展包</span></span><br><span class="line">tar -zxvf  jpegsrc.v8b.tar.gz </span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">cd jpeg-<span class="number">8</span>b</span><br><span class="line">.<span class="regexp">/configure --prefix=/u</span>sr<span class="regexp">/local/</span>php-kuozhan/jpeg --enable-shared --enable-static </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>src/</span><br><span class="line">wget http:<span class="regexp">//</span>php.net<span class="regexp">/get/</span>php-<span class="number">7.2</span>.<span class="number">30</span>.tar.gz<span class="regexp">/from/</span>a/mirror</span><br><span class="line">tar -zxvf mirror</span><br></pre></td></tr></table></figure>

<p>–with-php-config&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;php-config \ 指定版本号，暂时不适用</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">cd php-<span class="number">7.2</span>.<span class="number">30</span></span><br><span class="line">./configure <span class="string">\</span></span><br><span class="line">--prefix=/usr/local/php <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-config-file-path=/usr/local/php/etc <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-pear=DIR <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-tsrm-pthreads <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-pdo-mysql <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-mysqli <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-freetype-dir=/usr/include/freetype2 <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-openssl <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-curl <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-gettext <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-zlib=/usr <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-png-dir <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-freetype-dir <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-jpeg-dir <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-zlib-dir <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-gd <span class="string">\</span></span><br><span class="line">--enable-opcache <span class="string">\</span></span><br><span class="line">--enable-bcmath <span class="string">\</span></span><br><span class="line">--enable-mbstring <span class="string">\</span></span><br><span class="line">--enable-sockets <span class="string">\</span></span><br><span class="line">--enable-zip <span class="string">\</span></span><br><span class="line">--enable-fpm <span class="string">\</span></span><br><span class="line">--enable-xml <span class="string">\</span></span><br><span class="line">--enable-cli <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-jpeg-dir=/usr/local/php-kuozhan/jpeg</span><br><span class="line"></span><br><span class="line"><span class="comment">#暂时注释掉--with-apxs2=/usr/local/apache/bin/apxs \</span></span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h3 id="复制配置文件-php-ini"><a href="#复制配置文件-php-ini" class="headerlink" title="复制配置文件(php.ini)"></a>复制配置文件(php.ini)</h3><p>php配置文件的路径已经指定到&#x2F;usr&#x2F;local&#x2F;etc<br>只需要复制源码中的 <code>php.ini-development</code>或者 <code>php.ini-production</code>到usr&#x2F;local&#x2F;etc目录下即可，vi打开需要的扩展包</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/usr/</span>src<span class="regexp">/php-7.2.30/</span>php.ini-development <span class="regexp">/usr/</span>local<span class="regexp">/php/</span>etc/php.ini &amp;&amp;</span><br><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/php/</span>etc<span class="regexp">/php-fpm.conf.default /u</span>sr<span class="regexp">/local/</span>php<span class="regexp">/etc/</span>php-fpm.conf &amp;&amp;</span><br><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/php/</span>etc<span class="regexp">/php-fpm.d/</span>www.conf.<span class="keyword">default</span> <span class="regexp">/usr/</span>local<span class="regexp">/php/</span>etc<span class="regexp">/php-fpm.d/</span>www.conf &amp;&amp;</span><br><span class="line">cp <span class="regexp">/usr/</span>src<span class="regexp">/php-7.2.30/</span>sapi<span class="regexp">/fpm/i</span>nit.d.php-fpm <span class="regexp">/etc/i</span>nit.d/php-fpm &amp;&amp;</span><br><span class="line">chmod +x <span class="regexp">/etc/i</span>nit.d/php-fpm &amp;&amp;</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/php/</span>sbin/php-fpm -t</span><br></pre></td></tr></table></figure>


<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#export前增加环境变量</span></span><br><span class="line">PATH=<span class="variable">$PATH</span><span class="symbol">:/usr/local/php/bin</span><span class="symbol">:/usr/local/php/sbin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重新载入profile</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>


<h3 id="Pear设置"><a href="#Pear设置" class="headerlink" title="Pear设置"></a>Pear设置</h3><ol>
<li><code>pear config-set http_proxy &#39;http://127.0.0.1:10808&#39;</code> 设置pecl源，之后可以在 <code>/usr/local/src/php-XXXX/</code> 执行 <code>pear install xxx</code></li>
</ol>
<h2 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h2><h3 id="Reids"><a href="#Reids" class="headerlink" title="Reids"></a>Reids</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">cd /usr/src/</span><br><span class="line">wget https://pecl.php.net/get/redis-5.2.0.tgz</span><br><span class="line">tar -zxvf redis-5.2.0.tgz</span><br><span class="line">cd redis-5.2.0</span><br><span class="line"></span><br><span class="line">/usr/local/php/bin/phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">vim /usr/local/php/etc/php.ini</span><br><span class="line">#shift + g 跳到最后一行</span><br><span class="line">[redis]</span><br><span class="line">extension=redis.so</span><br><span class="line"></span><br><span class="line">php -m</span><br></pre></td></tr></table></figure>
<h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><h2 id="安装Redis扩展"><a href="#安装Redis扩展" class="headerlink" title="安装Redis扩展"></a>安装Redis扩展</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">cd /usr/src/</span><br><span class="line">wget https://pecl.php.net/get/zookeeper-0.6.4.tgz</span><br><span class="line">tar -zxvf zookeeper-0.6.4.tgz</span><br><span class="line">cd zookeeper-0.6.4</span><br><span class="line"></span><br><span class="line">/usr/local/php/bin/phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php/bin/php-config  --with-libzookeeper-dir=/usr/local/zookeeper</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">vim /usr/local/php/etc/php.ini</span><br><span class="line">#shift + g 跳到最后一行</span><br><span class="line">[zookeeper]</span><br><span class="line">extension=zookeeper.so</span><br><span class="line"></span><br><span class="line">php -m</span><br></pre></td></tr></table></figure>
<h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p>一般Server程序都是运行在系统后台，这与普通的交互式命令行程序有很大的区别。<code>glibc</code> 里有一个函数 <code>daemon</code> 。调用此函数，就可使当前进程脱离终端变成一个守护进程，具体内容参见 <code>man daemon</code>。PHP中暂时没有此函数，当然也可以写一个PHP的扩展函数来实现。</p>
<h3 id="PHP命令行程序实现守护进程化的方法"><a href="#PHP命令行程序实现守护进程化的方法" class="headerlink" title="PHP命令行程序实现守护进程化的方法"></a>PHP命令行程序实现守护进程化的方法</h3><ol>
<li><p>使用nohup</p>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nohup php myprog.php &gt; log.txt &amp;  <span class="comment">#这里就实现了守护进程化。</span></span><br></pre></td></tr></table></figure>
<ul>
<li>单独执行 php myprog.php，当按下ctrl+c时就会中断程序执行，会kill当前进程以及子进程。</li>
<li><code>php myprog.php &amp;</code> 这样执行程序虽然也是转为后台运行，实际上是依赖终端的，当用户退出终端时进程就会被杀掉。</li>
</ul>
</li>
<li><p>使用PHP代码来实现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">daemonize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$pid</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">&quot;fork(1) failed!\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">elseif</span> (<span class="variable">$pid</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">//让由用户启动的进程退出</span></span><br><span class="line">		<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//建立一个有别于终端的新session以脱离终端</span></span><br><span class="line">	posix_setsid();</span><br><span class="line"></span><br><span class="line">	<span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$pid</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">&quot;fork(2) failed!\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">elseif</span> (<span class="variable">$pid</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">//父进程退出, 剩下子进程成为最终的独立进程</span></span><br><span class="line">		<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">daemonize();</span><br><span class="line">sleep(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p> 用上面代码即可实现守护进程化，当你的PHP程序需要转为后台运行时，只需要调用一次封装好的函数daemonize()即可。</p>
<p> 注：这里没有实现标准输入输出的重定向。</p>
</li>
</ol>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>安装wamp以及前置安装文件<br>[MSVBCRT](&#x2F;downloads&#x2F;MSVBCRT.AIO.2020.04.10.X86 X64.exe)<br><a href="/downloads/wampserver3.1.7_x64.exe">wamp</a></p>
<p>安装redis扩展<br><a href="/downloads/php_redis.dll">php_redis.dll</a></p>
<p>安装amqp以及rabbitmq扩展</p>
<ol>
<li>下载扩展包 <a href="/downloads/rabbitmq.4.dll">rabbitmq.4.dll</a> <a href="/downloads/php_amqp.dll">php_amqp.dll</a></li>
</ol>
<p>php.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[redis]</span></span><br><span class="line"><span class="attr">extension</span>=php_redis.dll</span><br><span class="line"></span><br><span class="line"><span class="section">[amqp]</span></span><br><span class="line"><span class="attr">extension</span>=php_amqp.dll</span><br></pre></td></tr></table></figure>

<p>httpd.conf</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">LoadFile</span> <span class="string">&quot;C:/wamp64/bin/php/php7.2.14/ext/rabbitmq.4.dll&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用PHP开发游戏需要掌握什么技能？"><a href="#使用PHP开发游戏需要掌握什么技能？" class="headerlink" title="使用PHP开发游戏需要掌握什么技能？"></a>使用PHP开发游戏需要掌握什么技能？</h2><p>开发游戏使用 PHP 需要掌握一些基本的编程技能，包括熟悉 PHP 语言的语法和特性，了解常用的数据结构和算法，熟悉 HTML、CSS 和 JavaScript 等 Web 开发技术，并对游戏开发流程有一定的了解。<br>此外，开发游戏还需要具备一定的创造力和想象力，能够设计出有趣而富有挑战性的游戏内容。</p>
<h2 id="PHP-游戏开发流程"><a href="#PHP-游戏开发流程" class="headerlink" title="PHP 游戏开发流程"></a>PHP 游戏开发流程</h2><p>使用 PHP 开发游戏的具体流程可能会有所不同，但一般流程如下：</p>
<ol>
<li>设计游戏：首先需要设计出游戏的基本构成，包括游戏的背景、角色、道具、游戏规则等内容，并将其记录在游戏设计文档中。</li>
<li>编写游戏逻辑代码：根据游戏设计文档，使用 PHP 编写游戏的逻辑代码，包括游戏规则、角色控制、道具使用、游戏结束条件等。</li>
<li>开发用户界面：利用 HTML、CSS 和 JavaScript 等 Web 开发技术，开发游戏的用户界面，使游戏的界面美观易用。</li>
<li>测试游戏：进行游戏测试，检查游戏的功能和性能，并对发现的问题进行修改和优化。</li>
<li>发布游戏：将游戏发布到相应的平台，供用户下载和玩耍。</li>
</ol>
<h2 id="unity可以使用PHP进行游戏开发吗"><a href="#unity可以使用PHP进行游戏开发吗" class="headerlink" title="unity可以使用PHP进行游戏开发吗"></a>unity可以使用PHP进行游戏开发吗</h2><p>可以，但是，PHP 本身不是一种面向对象的语言，并不适合用来编写游戏的前端逻辑和图形渲染部分。如果你想在 Unity 中使用 PHP 进行游戏开发，你可以结合其他语言进行使用，比如 C#、JavaScript 等。</p>
<h2 id="如何设定手游FPS游戏的游戏规则？"><a href="#如何设定手游FPS游戏的游戏规则？" class="headerlink" title="如何设定手游FPS游戏的游戏规则？"></a>如何设定手游FPS游戏的游戏规则？</h2><p>手游FPS游戏（即手机上的射击游戏）通常会有一套特定的游戏规则，以确保游戏的公平性和可玩性。为了设定游戏规则，您需要考虑以下几点：</p>
<p>确定游戏的目标：手游FPS游戏的目标通常是击败其他玩家，可能包括杀死敌人、占领某个地点或某个物品等。<br>设定游戏的规则：游戏的规则包括如何移动、如何射击、如何使用道具等。这些规则应该简单易懂，但也要足够复杂，让玩家有充分的挑战性。<br>制定胜负条件：手游FPS游戏通常有一定的时间限制，或者有一定的得分要求。您需要确定游戏的胜负条件，并在游戏中适当地提醒玩家。<br>设定游戏难度：手游FPS游戏的难度应该适中，既能让玩家有足够的挑战，又能让他们在游戏中获得乐趣。总之，设定一款游戏的规则需要综合考虑多个因素，以便设计出一款有趣且富有挑战性的游戏。</p>
<h2 id="php游戏代码"><a href="#php游戏代码" class="headerlink" title="php游戏代码"></a>php游戏代码</h2><h3 id="游戏初始化"><a href="#游戏初始化" class="headerlink" title="游戏初始化"></a>游戏初始化</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 读取游戏配置</span></span><br><span class="line"><span class="variable">$config</span> = parse_ini_file(<span class="string">&#x27;game.ini&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化游戏引擎</span></span><br><span class="line"><span class="variable">$engine</span> = <span class="keyword">new</span> GameEngine(<span class="variable">$config</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化游戏世界</span></span><br><span class="line"><span class="variable">$world</span> = <span class="keyword">new</span> GameWorld(<span class="variable">$config</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载游戏场景</span></span><br><span class="line"><span class="variable">$engine</span>-&gt;loadScene(<span class="variable">$world</span>-&gt;getScene());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化游戏玩家</span></span><br><span class="line"><span class="comment">// 创建新用户</span></span><br><span class="line"><span class="variable">$username</span> = <span class="string">&#x27;player1&#x27;</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> User(<span class="variable">$username</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化游戏玩家</span></span><br><span class="line"><span class="variable">$player</span> = <span class="keyword">new</span> Player(<span class="variable">$config</span>, <span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将玩家添加到游戏世界中</span></span><br><span class="line"><span class="variable">$world</span>-&gt;addPlayer(<span class="variable">$player</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始游戏</span></span><br><span class="line"><span class="variable">$engine</span>-&gt;run();</span><br></pre></td></tr></table></figure>

<ul>
<li>if优化，<ol>
<li>将大概率的条件放在最前面处理，</li>
<li>条件允许，可以将多个if转换成少量if加上switch语句，因为switch语句效率高</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu核心知识要点</title>
    <url>/blog/p/33b1610c/</url>
    <content><![CDATA[<p>个人使用CentOS比较多，Ubuntu作为拓展学习一下。</p>
<span id="more"></span>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>下载链接 <code>https://ubuntu.com/download/alternative-downloads</code></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li><p>没有root密码</p>
<ul>
<li>解决方案：<ol>
<li><code>sudo passwd</code></li>
<li>输入用户的密码</li>
<li>输入root的初始化密码</li>
<li>重复输入</li>
</ol>
</li>
</ul>
</li>
<li><p>刚安装好的系统 出现 <code>Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?</code></p>
<ul>
<li>解决方案：<ol>
<li><code>sudo vim /etc/resolv.conf</code></li>
<li>添加nameserver 223.5.5.5,8.8.8.8</li>
<li>执行 <code>sudo apt-get update</code></li>
</ol>
</li>
</ul>
</li>
<li><p>无法登录ROOT账号</p>
<ol>
<li><code>su root</code></li>
<li><code>sudo gedit /etc/lightdm/lightdm.conf</code></li>
<li>添加<ul>
<li><code>greeter-show-manual-login=true #手工输入登陆系统的用户名和密码</code></li>
<li><code>allow-guest=false #不允许guest登录</code></li>
</ul>
</li>
<li><code>reboot</code></li>
</ol>
</li>
</ol>
<p>systemd-resolve –status<br>systemd-resolved.service</p>
<h2 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Linux Virtual Server的简写，即Linux虚拟服务器，是一个虚拟的服务器集群系统</p>
<h3 id="使用的目的"><a href="#使用的目的" class="headerlink" title="使用的目的"></a>使用的目的</h3><p>通过LVS提供的负载均衡技术和Linux操作系统实现一个高性能、高可用的服务器集群，具有良好可靠性、可扩展性和可操作性</p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>虚拟服务器所有的方法</p>
<ol>
<li>基于DNS域名轮流解析的方法</li>
<li>基于客户端调度访问的方法</li>
<li>基于应用层系统负载的调用方法</li>
<li>基于IP地址的调度方法(LVS使用它)</li>
</ol>
<p>IP负载均衡技术是通过IPVS内核模块来实现的，IPVS是LVS集群的核心软件<br>安装在Director Server上，同时在Director Server上虚拟出一个IP(Virtual IP)地址</p>
<p>访问流程：域名访问 -&gt; 域名解析 解析到 IP -&gt; Director Server<br>访问的请求首先经过 Virtual IP 到达负载调度器<br>由负载调度器从 真实 服务器列表中选取一个服务器借点响应用户的请求</p>
<p>Real Server借点如何返回数据给用户：是IPVS实现的重点技术<br>IPVS实现负载均衡极致有三种方法</p>
<ol>
<li>NAT 地址转发</li>
<li>TUN IP ** 模式</li>
<li>DR 直接路由</li>
</ol>
<img src="/blog/p/33b1610c/LVS%E8%99%9A%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8_DR%E6%A8%A1%E5%BC%8F.png" class="" title="LVS虚拟服务器_DR模式">

<p>使用LVS优点：<br>开源免费<br>技术资源很丰富<br>###</p>
<p>1</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Php垃圾回收机制</title>
    <url>/blog/p/210d2447/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>


<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在5.2及更早版本的PHP中，没有专门的垃圾回收器GC（Garbage Collection），引擎在判断一个变量空间是否能够被释放的时候是依据这个变量的zval的refcount的值，如果refcount为0，那么变量的空间可以被释放，否则就不释放，这是一种非常简单的GC实现。然而在这种简单的GC实现方案中，出现了意想不到的变量内存泄漏情况（Bug:<a href="http://bugs.php.net/bug.php?id=33595" target="_blank" rel="noopener">http://bugs.php.net/bug.php?id=33595</a> ），引擎将无法回收这些内存，于是在PHP5.3中出现了新的GC，新的GC有专门的机制负责清理垃圾数据，防止内存泄漏。本文将详细的阐述PHP5.3中新的GC运行机制。</p>
<p>目前很少有详细的资料介绍新的GC，本文将是目前国内最为详细的从源码角度介绍PHP5.3中GC原理的文章。其中关于垃圾产生以及算法简介部分由笔者根据手册翻译而来，当然其中融入了本人的一些看法。手册中相关内容：Garbage Collection</p>
<p>在介绍这个新的GC之前，读者必须先了解PHP中变量的内部存储相关知识，请先阅读 变量的内部存储：引用和计数 </p>
<h2 id="什么算垃圾"><a href="#什么算垃圾" class="headerlink" title="什么算垃圾"></a>什么算垃圾</h2><p>首先我们需要定义一下“垃圾”的概念，新的GC负责清理的垃圾是指变量的容器zval还存在，但是又没有任何变量名指向此zval。因此GC判断是否为垃圾的一个重要标准是有没有变量名指向变量容器zval。</p>
<p>假设我们有一段PHP代码，使用了一个临时变量$tmp存储了一个字符串，在处理完字符串之后，就不需要这个$tmp变量了，$tmp变量对于我们来说可以算是一个“垃圾”了，但是对于GC来说，$tmp其实并不是一个垃圾，$tmp变量对我们没有意义，但是这个变量实际还存在，$tmp符号依然指向它所对应的zval，GC会认为PHP代码中可能还会使用到此变量，所以不会将其定义为垃圾。</p>
<p>那么如果我们在PHP代码中使用完$tmp后，调用unset删除这个变量，那么$tmp是不是就成为一个垃圾了呢。很可惜，GC仍然不认为$tmp是一个垃圾，因为$tmp在unset之后，refcount减少1变成了0(这里假设没有别的变量和$tmp指向相同的zval),这个时候GC会直接将$tmp对应的zval的内存空间释放，$tmp和其对应的zval就根本不存在了。此时的$tmp也不是新的GC所要对付的那种“垃圾”。那么新的GC究竟要对付什么样的垃圾呢，下面我们将生产一个这样的垃圾。  </p>
<h2 id="顽固垃圾的产生过程"><a href="#顽固垃圾的产生过程" class="headerlink" title="顽固垃圾的产生过程"></a>顽固垃圾的产生过程</h2><p>如果读者已经阅读了变量内部存储相关的内容，想必对refcount和isref这些变量内部的信息有了一定的了解。这里我们将结合手册中的一个例子来介绍垃圾的产生过程：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;new string&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这么简单的一个代码中，$a变量内部存储信息为</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">a: (refcount=1, is_ref=0)=&#x27;new string&#x27;</span><br></pre></td></tr></table></figure>
<p>当把$a赋值给另外一个变量的时候，$a对应的zval的refcount会加1</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;new string&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>此时$a和$b变量对应的内部存储信息为</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">a,b: (refcount=2, is_ref=0)=&#x27;new string&#x27;</span><br></pre></td></tr></table></figure>

<p>当我们用unset删除$b变量的时候，$b对应的zval的refcount会减少1</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$a = &quot;new string&quot;; //a: (refcount=1, is_ref=0)=&#x27;new string&#x27;</span><br><span class="line"></span><br><span class="line">$b = $a;                 //a,b: (refcount=2, is_ref=0)=&#x27;new string&#x27;</span><br><span class="line"></span><br><span class="line">unset($b);              //a: (refcount=1, is_ref=0)=&#x27;new string&#x27;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>对于普通的变量来说，这一切似乎很正常，但是在复合类型变量（数组和对象）中，会发生比较有意思的事情：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$a = array(&#x27;meaning&#x27; =&gt; &#x27;life&#x27;, &#x27;number&#x27; =&gt; 42);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>a的内部存储信息为:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">a: (refcount=1, is_ref=0)=array (</span><br><span class="line">   &#x27;meaning&#x27; =&gt; (refcount=1, is_ref=0)=&#x27;life&#x27;,</span><br><span class="line">   &#x27;number&#x27; =&gt; (refcount=1, is_ref=0)=42</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>数组变量本身($a)在引擎内部实际上是一个哈希表，这张表中有两个zval项 meaning和number，</p>
<p>所以实际上那一行代码中一共生成了3个zval,这3个zval都遵循变量的引用和计数原则，用图来表示:</p>
<p> 下面在$a中添加一个元素，并将现有的一个元素的值赋给新的元素:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$a = array(&#x27;meaning&#x27; =&gt; &#x27;life&#x27;, &#x27;number&#x27; =&gt; 42);</span><br><span class="line"></span><br><span class="line">$a[&#x27;life&#x27;] = $a[&#x27;meaning&#x27;];</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>那么$a的内部存储为:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">a: (refcount=1, is_ref=0)=array (</span><br><span class="line">   &#x27;meaning&#x27; =&gt; (refcount=2, is_ref=0)=&#x27;life&#x27;,</span><br><span class="line">   &#x27;number&#x27; =&gt; (refcount=1, is_ref=0)=42,</span><br><span class="line">   &#x27;life&#x27; =&gt; (refcount=2, is_ref=0)=&#x27;life&#x27;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>其中的meaning元素和life元素之指向同一个zval的：</p>
<p>现在，如果我们试一下，将数组的引用赋值给数组中的一个元素，有意思的事情就发生了：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$a = array(&#x27;one&#x27;);</span><br><span class="line"></span><br><span class="line">$a[] = &amp;$a;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>这样$a数组就有两个元素，一个索引为0，值为字符one,另外一个索引为1，为$a自身的引用，内部存储如下:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">a: (refcount=2, is_ref=1)=array (</span><br><span class="line">   0 =&gt; (refcount=1, is_ref=0)=&#x27;one&#x27;,</span><br><span class="line">   1 =&gt; (refcount=2, is_ref=1)=…</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>“…”表示1指向a自身，是一个环形引用：</p>
<p>这个时候我们对$a进行unset,那么$a会从符号表中删除，同时$a指向的zval的refcount减少1</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$a = array(&#x27;one&#x27;);</span><br><span class="line"></span><br><span class="line">$a[] = &amp;$a;</span><br><span class="line"></span><br><span class="line">unset($a);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>那么问题也就产生了，$a已经不在符号表中了，用户无法再访问此变量，但是$a之前指向的zval的refcount变为1而不是0，因此不能被回收，这样产生了内存泄露：</p>
<p>这样，这么一个zval就成为了一个真是意义的垃圾了，新的GC要做的工作就是清理这种垃圾。</p>
<h3 id="为解决这种垃圾，产生了新的GC"><a href="#为解决这种垃圾，产生了新的GC" class="headerlink" title="为解决这种垃圾，产生了新的GC"></a>为解决这种垃圾，产生了新的GC</h3><p>在PHP5.3版本中，使用了专门GC机制清理垃圾，在之前的版本中是没有专门的GC，那么垃圾产生的时候，没有办法清理，内存就白白浪费掉了。在PHP5.3源代码中多了以下文件:{PHPSRC}&#x2F;Zend&#x2F;zend_gc.h {PHPSRC}&#x2F;Zend&#x2F;zend_gc.c, 这里就是新的GC的实现，我们先简单的介绍一下算法思路，然后再从源码的角度详细介绍引擎中如何实现这个算法的。</p>
<h3 id="新的GC算法"><a href="#新的GC算法" class="headerlink" title="新的GC算法"></a>新的GC算法</h3><p>在较新的PHP手册中有简单的介绍新的GC使用的垃圾清理算法，这个算法名为 Concurrent Cycle Collection in Reference Counted Systems ， 这里不详细介绍此算法，根据手册中的内容来先简单的介绍一下思路：</p>
<p>首先我们有几个基本的准则：<br>1：如果一个zval的refcount增加，那么此zval还在使用，不属于垃圾<br>2：如果一个zval的refcount减少到0， 那么zval可以被释放掉，不属于垃圾<br>3：如果一个zval的refcount减少之后大于0，那么此zval还不能被释放，此zval可能成为一个垃圾</p>
<p>只有在准则3下，GC才会把zval收集起来，然后通过新的算法来判断此zval是否为垃圾。那么如何判断这么一个变量是否为真正的垃圾呢？</p>
<p>简单的说，就是对此zval中的每个元素进行一次refcount减1操作，操作完成之后，如果zval的refcount&#x3D;0，那么这个zval就是一个垃圾。这个原理咋看起来很简单，但是又不是那么容易理解，起初笔者也无法理解其含义，直到挖掘了源代码之后才算是了解。如果你现在不理解没有关系，后面会详细介绍，这里先把这算法的几个步骤描叙一下,首先引用手册中的一张图:</p>
<p>A：为了避免每次变量的refcount减少的时候都调用GC的算法进行垃圾判断，此算法会先把所有前面准则3情况下的zval节点放入一个节点(root)缓冲区(root buffer)，并且将这些zval节点标记成紫色，同时算法必须确保每一个zval节点在缓冲区中之出现一次。当缓冲区被节点塞满的时候，GC才开始开始对缓冲区中的zval节点进行垃圾判断。</p>
<p>B：当缓冲区满了之后，算法以深度优先对每一个节点所包含的zval进行减1操作，为了确保不会对同一个zval的refcount重复执行减1操作，一旦zval的refcount减1之后会将zval标记成灰色。需要强调的是，这个步骤中，起初节点zval本身不做减1操作，但是如果节点zval中包含的zval又指向了节点zval（环形引用），那么这个时候需要对节点zval进行减1操作。</p>
<p>C：算法再次以深度优先判断每一个节点包含的zval的值，如果zval的refcount等于0，那么将其标记成白色(代表垃圾)，如果zval的refcount大于0，那么将对此zval以及其包含的zval进行refcount加1操作，这个是对非垃圾的还原操作，同时将这些zval的颜色变成黑色（zval的默认颜色属性）</p>
<p>D：遍历zval节点，将C中标记成白色的节点zval释放掉。</p>
<p>这ABCD四个过程是手册中对这个算法的介绍，这还不是那么容易理解其中的原理，这个算法到底是个什么意思呢？我自己的理解是这样的：</p>
<p>比如还是前面那个变成垃圾的数组$a对应的zval,命名为zval_a,  如果没有执行unset， zval_a的refcount为2,分别由$a和$a中的索引1指向这个zval。  用算法对这个数组中的所有元素（索引0和索引1）的zval的refcount进行减1操作，由于索引1对应的就是zval_a，所以这个时候zval_a的refcount应该变成了1，这样zval_a就不是一个垃圾。如果执行了unset操作，zval_a的refcount就是1，由zval_a中的索引1指向zval_a,用算法对数组中的所有元素（索引0和索引1）的zval的refcount进行减1操作，这样zval_a的refcount就会变成0，于是就发现zval_a是一个垃圾了。 算法就这样发现了顽固的垃圾数据。</p>
<p>举了这个例子，读者大概应该能够知道其中的端倪：</p>
<p>对于一个包含环形引用的数组，对数组中包含的每个元素的zval进行减1操作，之后如果发现数组自身的zval的refcount变成了0，那么可以判断这个数组是一个垃圾。</p>
<p>这个道理其实很简单，假设数组a的refcount等于m, a中有n个元素又指向a,如果m等于n,那么算法的结果是m减n，m-n&#x3D;0，那么a就是垃圾，如果m&gt;n,那么算法的结果m-n&gt;0,所以a就不是垃圾了</p>
<p>m&#x3D;n代表什么？  代表a的refcount都来自数组a自身包含的zval元素,代表a之外没有任何变量指向它，代表用户代码空间中无法再访问到a所对应的zval，代表a是泄漏的内存，因此GC将a这个垃圾回收了。</p>
<p>PHP中运用新的GC的算法</p>
<p>在PHP中，GC默认是开启的，你可以通过ini文件中的 zend.enable_gc 项来开启或则关闭GC。当GC开启的时候，垃圾分析算法将在节点缓冲区(roots buffer)满了之后启动。缓冲区默认可以放10,000个节点，当然你也可以通过修改Zend&#x2F;zend_gc.c中的GC_ROOT_BUFFER_MAX_ENTRIES 来改变这个数值，需要重新编译链接PHP。当GC关闭的时候，垃圾分析算法就不会运行，但是相关节点还会被放入节点缓冲区，这个时候如果缓冲区节点已经放满，那么新的节点就不会被记录下来，这些没有被记录下来的节点就永远也不会被垃圾分析算法分析。如果这些节点中有循环引用，那么有可能产生内存泄漏。之所以在GC关闭的时候还要记录这些节点，是因为简单的记录这些节点比在每次产生节点的时候判断GC是否开启更快，另外GC是可以在脚本运行中开启的，所以记录下这些节点，在代码运行的某个时候如果又开启了GC，这些节点就能被分析算法分析。当然垃圾分析算法是一个比较耗时的操作。</p>
<p>在PHP代码中我们可以通过gc_enable()和gc_disable()函数来开启和关闭GC，也可以通过调用gc_collect_cycles()在节点缓冲区未满的情况下强制执行垃圾分析算法。这样用户就可以在程序的某些部分关闭或则开启GC，也可强制进行垃圾分析算法。 </p>
<p>新的GC算法的性能</p>
<p>1.防止泄漏节省内存</p>
<p>新的GC算法的目的就是为了防止循环引用的变量引起的内存泄漏问题，在PHP中GC算法，当节点缓冲区满了之后，垃圾分析算法会启动，并且会释放掉发现的垃圾，从而回收内存，在PHP手册上给了一段代码和内存使用状况图：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span> = <span class="string">&#x27;3.1415962654&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$baseMemory</span> = memory_get_usage();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt;= <span class="number">100000</span>; <span class="variable">$i</span>++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> Foo;</span><br><span class="line">    <span class="variable">$a</span>-&gt;self = <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$i</span> % <span class="number">500</span> === <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> sprintf( <span class="string">&#x27;%8d: &#x27;</span>, <span class="variable">$i</span> ), memory_get_usage() - <span class="variable">$baseMemory</span>, <span class="string">&quot;/n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这段代码的循环体中，新建了一个对象变量，并且用对象的一个成员指向了自己，这样就形成了一个循环引用，当进入下一次循环的时候，又一次给对象变量重新赋值，这样会导致之前的对象变量内存泄漏，在这个例子里面有两个变量泄漏了，一个是对象本身，另外一个是对象中的成员self，但是这两个变量只有对象会作为垃圾收集器的节点被放入缓冲区(因为重新赋值相当于对它进行了unset操作，满足前面的准则3)。在这里我们进行了100,000次循环，而GC在缓冲区中有10,000节点的时候会启动垃圾分析算法，所以这里一共会进行10次的垃圾分析算法。从图中可以清晰的看到，在5.3版本PHP中，每次GC的垃圾分析算法被触发后，内存会有一个明显的减少。而在5.2版本的PHP中，内存使用量会一直增加。</p>
<p>2：运行效率影响</p>
<p>启用了新的GC后，垃圾分析算法将是一个比较耗时的操作，手册中给了一段测试代码：</p>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span> = <span class="string">&#x27;3.1415962654&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt;= <span class="number">1000000</span>; <span class="variable">$i</span>++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> Foo;</span><br><span class="line">    <span class="variable">$a</span>-&gt;self = <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> memory_get_peak_usage(), <span class="string">&quot;/n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后分别在GC开启和关闭的情况下执行这段代码：</p>
<p>time php -dzend.enable_gc&#x3D;0 -dmemory_limit&#x3D;-1 -n example2.php</p>
<h1 id="and"><a href="#and" class="headerlink" title="and"></a>and</h1><p>time php -dzend.enable_gc&#x3D;1 -dmemory_limit&#x3D;-1 -n example2.php</p>
<p>最终在该机器上，第一次执行大概使用10.7秒，第二次执行大概使用11.4秒，性能大约降低7%,不过内存的使用量降低了98%,从931M降低到了10M。当然这并不是一个比较科学的测试方法，但是也能说明一定的问题。这种代码测试的是一种极端恶劣条件，实际代码中，特别是在WEB的应用中，很难出现大量循环引用，GC的分析算法的启动不会这么频繁，小规模的代码中甚至很少有机会启动GC分析算法。</p>
<p>总结：</p>
<p>当GC的垃圾分析算法执行的时候，PHP脚本的效率会受到一定的影响，但是小规模的代码一般不会有这个机会运行这个算法。如果一旦脚本中GC分析算法开始运行了，那么将花费少量的时间节省出来了大量的内存，是一件非常划算的事情。新的GC对一些长期运行的PHP脚本效果更好，比如PHP的DAEMON守护进程，或则PHP-GTK进程等等。</p>
<p>引擎内部GC的实现：前面已经介绍了新的GC的基本原理以及性能相关的内容，其中一些都是在手册中有简单介绍了，那么这里我们将从源代码的角度来分析一下PHP如何实现新的GC。</p>
<p>1.zval的变化</p>
<p>在文件Zend&#x2F;zend_gc.h中，重新定义了分配一个zval结构的宏:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span>  ALLOC_ZVAL  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALLOC_ZVAL(z)                                   /  </span></span><br><span class="line">    <span class="keyword">do</span> &#123;                                                /  </span><br><span class="line">        (z) = (zval*)emalloc(<span class="keyword">sizeof</span>(zval_gc_info));     /  </span><br><span class="line">        GC_ZVAL_INIT(z);                                /  </span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)  </span><br></pre></td></tr></table></figure>
<p>ALLOC_ZVAL的原始定义是在Zend&#x2F;zend_alloc.h中，原始的定义只是分配一个zval结构的内存空间，然后在新的GC使用后，分配一个zval空间实际上是分配了一个zval_gc_info结构的空间，下面看看zval_gc_info结构定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zval_gc_info</span> &#123;</span>  </span><br><span class="line">    zval z;  </span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span>  </span><br><span class="line">        gc_root_buffer       *buffered;  </span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">zval_gc_info</span> *<span class="title">next</span>;</span>  </span><br><span class="line">    &#125; u;  </span><br><span class="line">&#125; zval_gc_info;  </span><br></pre></td></tr></table></figure>
<p>zval_gc_info这个结构的第一个成员就是一个zval结构，第二个成员是一个联合体u，是一个指向gc_root_buffer的指针和一个指向_zval_gc_info的指针。  第一个成员为zval结构，这就保证了对zval_gc_info类型指针做类型转换后和zval等价。在ALLOC_ZVAL宏中，分配了一个zval_gc_info的空间后，是将空间的指针转换成了(zval *)。这样就相当于分配了一个zval的空间。然后GC_ZVAL_INIT宏会把zval_gc_info中的成员u的buffered字段设置成NULL:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_ZVAL_INIT(z) /  </span></span><br><span class="line"></span><br><span class="line">    ((zval_gc_info*)(z))-&gt;u.buffered = <span class="literal">NULL</span>  </span><br></pre></td></tr></table></figure>
<p>这个u.buffered指针就是用来表示这个zval对应的节点信息指针。</p>
<p>新的GC会为所有的zval分配一个空间存放节点信息指针，只有当zval被GC放入节点缓冲区的时候，节点信息指针才会被指向一个节点信息结构，否则节点信息指针一直是NULL。</p>
<p>具体方式是通过分配一个zval_gc_info结构来实现，这个结构包含了zval和节点信息指针buffered。</p>
<p>2.节点信息</p>
<p>  zval的节点信息指针buffered指向一个gc_root_buffer类型，这个类型的定义如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">gc_root_buffer</span> &#123;</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">gc_root_buffer</span>   *<span class="title">prev</span>;</span>     <span class="comment">/* double-linked list               */</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">gc_root_buffer</span>   *<span class="title">next</span>;</span>  </span><br><span class="line">    zend_object_handle        handle;   <span class="comment">/* must be 0 for zval               */</span>  </span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span>  </span><br><span class="line">        zval                 *pz;  </span><br><span class="line">        zend_object_handlers *handlers;  </span><br><span class="line">    &#125; u;  </span><br><span class="line">&#125; gc_root_buffer;  </span><br></pre></td></tr></table></figure>
<p>这是一个双链表的节点结构类型，prev和next用来指向前一个节点和后一个节点，handel是和对象相关的，对象类型的变量比较特殊，我们这里不讨论，u是一个联合体，u.pz用来指向这个节点所对应的zval结构。 这样每一个zval结构和zval对应的节点信息互相被关联在一起了:</p>
<p>通过一个zval指针pz找到节点指针: pr &#x3D; ((zval_gc_info *)pz)-&gt;u.buffered</p>
<p>通过一个节点指针pr找到zval指针: pz &#x3D; pr-&gt;u.pz</p>
<p>3.为zval设置节点信息以及节点颜色信息</p>
<p>这里GC应用了一些小技巧，先看看下面相关的宏:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_COLOR  0x03  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_BLACK  0x00  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_WHITE  0x01  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_GREY   0x02  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_PURPLE 0x03  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_ADDRESS(v) /  </span></span><br><span class="line">    ((gc_root_buffer*)(((<span class="type">zend_uintptr_t</span>)(v)) &amp; ~GC_COLOR))  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_SET_ADDRESS(v, a) /  </span></span><br><span class="line">    (v) = ((gc_root_buffer*)((((<span class="type">zend_uintptr_t</span>)(v)) &amp; GC_COLOR) | ((<span class="type">zend_uintptr_t</span>)(a))))  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_GET_COLOR(v) /  </span></span><br><span class="line">    (((<span class="type">zend_uintptr_t</span>)(v)) &amp; GC_COLOR)  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_SET_COLOR(v, c) /  </span></span><br><span class="line">    (v) = ((gc_root_buffer*)((((<span class="type">zend_uintptr_t</span>)(v)) &amp; ~GC_COLOR) | (c)))  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_SET_BLACK(v) /  </span></span><br><span class="line">    (v) = ((gc_root_buffer*)(((<span class="type">zend_uintptr_t</span>)(v)) &amp; ~GC_COLOR))  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_SET_PURPLE(v) /  </span></span><br><span class="line">    (v) = ((gc_root_buffer*)(((<span class="type">zend_uintptr_t</span>)(v)) | GC_PURPLE))  </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_ZVAL_INIT(z) /  </span></span><br><span class="line">    ((zval_gc_info*)(z))-&gt;u.buffered = <span class="literal">NULL</span>  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_ZVAL_ADDRESS(v) /  </span></span><br><span class="line">    GC_ADDRESS(((zval_gc_info*)(v))-&gt;u.buffered)  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_ZVAL_SET_ADDRESS(v, a) /  </span></span><br><span class="line">    GC_SET_ADDRESS(((zval_gc_info*)(v))-&gt;u.buffered, (a))  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_ZVAL_GET_COLOR(v) /  </span></span><br><span class="line">    GC_GET_COLOR(((zval_gc_info*)(v))-&gt;u.buffered)  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_ZVAL_SET_COLOR(v, c) /  </span></span><br><span class="line">    GC_SET_COLOR(((zval_gc_info*)(v))-&gt;u.buffered, (c))  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_ZVAL_SET_BLACK(v) /  </span></span><br><span class="line">    GC_SET_BLACK(((zval_gc_info*)(v))-&gt;u.buffered)  </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GC_ZVAL_SET_PURPLE(v) /  </span></span><br><span class="line">    GC_SET_PURPLE(((zval_gc_info*)(v))-&gt;u.buffered)  </span><br></pre></td></tr></table></figure>

<p>其中宏GC_ZVAL_SET_ADDRESS(v, a)是为v这个zval设置节点信息的指针a，这个宏先得到v中的节点信息指针字段u.buffered，然后调用GC_ADDRESS(v,a)宏，将u.buffered字段设置成指针a。</p>
<p>GC_ADDRESS(v, a)宏的功能是将地址a赋给v，但是它的实现很奇怪:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(v) = ((gc_root_buffer*)((((<span class="type">zend_uintptr_t</span>)(v)) &amp; GC_COLOR) | ((<span class="type">zend_uintptr_t</span>)(a))))</span><br></pre></td></tr></table></figure>
<p>为什么需要这么一个复杂的过程，而且设置指针值为何还要牵扯到GC_COLOR颜色这个宏？</p>
<p>这里就得先说说节点的颜色信息保存方式。</p>
<p>在前面GC的算法简介中，提到了需要为节点上色，而实际在我们节点结构gc_root_buffer中并没有哪一个字段用来标识节点的颜色，这里GC运用了一个小的技巧：利用节点指针的低两位来标识颜色属性。可能读者会有疑问，用指针中的位来保存颜色属性，那么设置颜色后，指针不就变化了吗，那么还能查找到指针对应的结构吗？ 这个还真能查到！ 为什么？ 这个和malloc分配的内存地址属性有一定的关系，glib的malloc分配的内存地址都会有一定的对齐，这个对齐值为2 * SIZE_SZ,在不同位的机器上这个值是不一样的，但是可以确保的是分配出来的指针的最低两位肯定是0，然后看看颜色相关的宏，GC_COLOR为0x03, 3只需要两个二进制位就能够保存，所以拿指针的最低两位来保存颜色值是没有任何问题的，但是在使用指针的时候一定要先把指针最低的两位还原成0，否则指针指向的值是错误的。</p>
<p>这样我们就能理解为什么GC_ADDRESS需要这么复杂了。因为v中的低2位保存了v的颜色信息，如果直接把a赋给v会覆盖掉颜色信息，通过((zend_uintptr_t)(v)) &amp; GC_COLOR可以保留低两位的颜色信息，同时其它的位都变成了0，将这个结果同a进行”|”操作，就能将a的赋给v,同时保留了v的颜色信息。</p>
<p>知道了颜色信息的存储方式，那么就应该很容易理解如何设置和获取颜色信息，这里就不多介绍了。</p>
<p>4.节点缓冲区</p>
<p>  GC会将收集到的节点存放到一个缓冲区中，缓冲区满的时候就开始进行垃圾分析算法。这个缓冲区实际上放在一个全局的结构中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_gc_globals</span> &#123;</span>  </span><br><span class="line">    zend_bool         gc_enabled;  </span><br><span class="line">    zend_bool         gc_active;  </span><br><span class="line"></span><br><span class="line">    gc_root_buffer   *buf;              <span class="comment">/* preallocated arrays of buffers   */</span>  </span><br><span class="line">    gc_root_buffer    roots;            <span class="comment">/* list of possible roots of cycles */</span>  </span><br><span class="line">    gc_root_buffer   *unused;           <span class="comment">/* list of unused buffers           */</span>  </span><br><span class="line">    gc_root_buffer   *first_unused;     <span class="comment">/* pointer to first unused buffer   */</span>  </span><br><span class="line">    gc_root_buffer   *last_unused;      <span class="comment">/* pointer to last unused buffer    */</span>  </span><br><span class="line">    zval_gc_info     *zval_to_free;     <span class="comment">/* temporaryt list of zvals to free */</span>  </span><br><span class="line">    zval_gc_info     *free_list;  </span><br><span class="line">    zval_gc_info     *next_to_free;  </span><br><span class="line">    zend_uint gc_runs;  </span><br><span class="line">    zend_uint collected;  </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> GC_BENCH  </span></span><br><span class="line">    zend_uint root_buf_length;  </span><br><span class="line">    zend_uint root_buf_peak;  </span><br><span class="line">    zend_uint zval_possible_root;  </span><br><span class="line">    zend_uint zobj_possible_root;  </span><br><span class="line">    zend_uint zval_buffered;  </span><br><span class="line">    zend_uint zobj_buffered;  </span><br><span class="line">    zend_uint zval_remove_from_buffer;  </span><br><span class="line">    zend_uint zobj_remove_from_buffer;  </span><br><span class="line">    zend_uint zval_marked_grey;  </span><br><span class="line">    zend_uint zobj_marked_grey;  </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  </span></span><br><span class="line">&#125; zend_gc_globals;  </span><br></pre></td></tr></table></figure>
<p>用宏GC_G(v)可以访问结构中的v字段。<br>简单的介绍这个结构中几个重要的字段的含义:<br>zend_bool  gc_enabled: 是否开启GC<br>zend_bool  gc_active: GC是否正在进行垃圾分析<br>gc_root_buffer   *buf：节点缓冲区指针，在GC初始化的时候，会分配10,000个gc_root_buffer结构的空间，buf为第1个节点的地址<br>gc_root_buffer    roots; GC每次开始垃圾分析算法的时候，都是从这个节点开始进行(注意不是直接在缓冲区中按顺序来分析节点，缓冲区值是存放节点信息内容，roots是分析的节点入口，是一个双链表的入口)</p>
<p>其他节点和垃圾分析过程中的一些临时数据有关，这里暂不介绍。</p>
<p>5.GC的初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line"></span><br><span class="line">ZEND_API <span class="type">void</span> <span class="title function_">gc_init</span><span class="params">(TSRMLS_D)</span>  </span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (GC_G(buf) == <span class="literal">NULL</span> &amp;&amp; GC_G(gc_enabled)) &#123;  </span><br><span class="line"></span><br><span class="line">        GC_G(buf) = (gc_root_buffer*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(gc_root_buffer) * GC_ROOT_BUFFER_MAX_ENTRIES);  </span><br><span class="line"></span><br><span class="line">        GC_G(last_unused) = &amp;GC_G(buf)[GC_ROOT_BUFFER_MAX_ENTRIES];  </span><br><span class="line"></span><br><span class="line">        gc_reset(TSRMLS_C);  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>首先在初始化之前会有一个全局变量</p>
<p>extern ZEND_API zend_gc_globals gc_globals;</p>
<p>在整个GC运行期间都依赖这个全局变量结构。</p>
<p>初始化是调用的gc_init函数，如果缓冲区指针字段为空并且GC开启，那么就分配缓冲区，然后调用gc_reset初始化全局结构gc_globals中的相关字段。</p>
<p>6.节点放入缓冲区的时机</p>
<p>那么现在就是一个比较关键的一步了，GC何时为zval设置节点信息，并将节点信息设置放入缓冲区等待分析处理。从前面介绍的GC算法的原理中，准则3：“如果一个zval的refcount减少之后大于0，那么此zval还不能被释放，此zval可能成为一个垃圾”。我们大概可以知道当一个zval的refcount减少的时候，GC有可能为zval分配节点并放入缓冲区。那么在什么情况下zval的refcount会减少。 在我们调用unset的时候，会从当前符号的哈希表中删除变量名对应的项，并对该项调用一个析构函数，所以这个refcount减少的操作发生在这个析构函数中。通过建立变量符号哈希表的代码段可以知道这个析构函数是什么。这个析构函数最终的实现在Zend&#x2F;zend_execute_API.c中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line"></span><br><span class="line">ZEND_API <span class="type">void</span> _zval_ptr_dtor(zval **zval_ptr ZEND_FILE_LINE_DC) <span class="comment">/* &#123;&#123;&#123; */</span>  </span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG_ZEND&gt;=2  </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reducing refcount for %x (%x): %d-&gt;%d/n&quot;</span>, *zval_ptr, zval_ptr, Z_REFCOUNT_PP(zval_ptr), Z_REFCOUNT_PP(zval_ptr) – <span class="number">1</span>);  </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  </span></span><br><span class="line">    Z_DELREF_PP(zval_ptr);  </span><br><span class="line">    <span class="keyword">if</span> (Z_REFCOUNT_PP(zval_ptr) == <span class="number">0</span>) &#123;  </span><br><span class="line">        TSRMLS_FETCH();  </span><br><span class="line">        <span class="keyword">if</span> (*zval_ptr != &amp;EG(uninitialized_zval)) &#123;  </span><br><span class="line">            GC_REMOVE_ZVAL_FROM_BUFFER(*zval_ptr);  </span><br><span class="line">            zval_dtor(*zval_ptr);  </span><br><span class="line">            efree_rel(*zval_ptr);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        TSRMLS_FETCH();  </span><br><span class="line">        <span class="keyword">if</span> (Z_REFCOUNT_PP(zval_ptr) == <span class="number">1</span>) &#123;  </span><br><span class="line">            Z_UNSET_ISREF_PP(zval_ptr);  </span><br><span class="line">        &#125;  </span><br><span class="line">        GC_ZVAL_CHECK_POSSIBLE_ROOT(*zval_ptr);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p> 这个函数中：</p>
<p>Z_DELREF_PP(zval_ptr) ：对zval的refcount减1，减1之后</p>
<p>1.如果zval的refcount等于0,根据前面的准则2，这个变量的空间可以直接被释放掉，在释放之前需要注意，有可能这个变量在之前已经被放入了节点缓冲区，所以需要调用GC_REMOVE_ZVAL_FROM_BUFFER(*zval_ptr)从节点缓冲区中删除相关节点信息，然后调用zval_dtor和efree_rel释放掉变量zval中变量占用的空间和zval结构自身的空间。</p>
<p>2.如果zval的refcount等于1,根据前面的准则3，这个变量有可能会成为一个垃圾，于是调用GC_ZVAL_CHECK_POSSIBLE_ROOT(*zval_ptr)为其设置节点信息并放入缓冲区</p>
<p>因此，最终是通过GC_ZVAL_CHECK_POSSIBLE_ROOT宏来产生节点并放入缓冲等待处理，相关的宏和函数代码为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line"></span><br><span class="line"><span class="comment">#define GC_ZVAL_CHECK_POSSIBLE_ROOT(z) /  </span></span><br><span class="line">    gc_zval_check_possible_root((z) TSRMLS_CC)  </span><br><span class="line"><span class="built_in">static</span> zend_always_inline <span class="keyword">void</span> gc_zval_check_possible_root(zval *z TSRMLS_DC)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span> (z-&gt;type == IS_ARRAY || z-&gt;type == IS_OBJECT) &#123;  </span><br><span class="line">        gc_zval_possible_root(z TSRMLS_CC);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">ZEND_API <span class="keyword">void</span> gc_zval_possible_root(zval *zv TSRMLS_DC)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span> (UNEXPECTED(GC_G(free_list) != <span class="literal">NULL</span> &amp;&amp;  </span><br><span class="line">                   GC_ZVAL_ADDRESS(zv) != <span class="literal">NULL</span> &amp;&amp;  </span><br><span class="line">                   GC_ZVAL_GET_COLOR(zv) == GC_BLACK) &amp;&amp;  </span><br><span class="line">                   (GC_ZVAL_ADDRESS(zv) &lt; GC_G(buf) ||  </span><br><span class="line">                    GC_ZVAL_ADDRESS(zv) &gt;= GC_G(last_unused))) &#123;  </span><br><span class="line">        <span class="comment">/* The given zval is a garbage that is going to be deleted by </span></span><br><span class="line"><span class="comment">         * currently running GC */</span>  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (zv-&gt;type == IS_OBJECT) &#123;  </span><br><span class="line">        GC_ZOBJ_CHECK_POSSIBLE_ROOT(zv);  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    GC_BENCH_INC(zval_possible_root);  </span><br><span class="line">    <span class="keyword">if</span> (GC_ZVAL_GET_COLOR(zv) != GC_PURPLE) &#123;  </span><br><span class="line">        GC_ZVAL_SET_PURPLE(zv);  </span><br><span class="line">        <span class="keyword">if</span> (!GC_ZVAL_ADDRESS(zv)) &#123;  </span><br><span class="line">            gc_root_buffer *newRoot = GC_G(unused);  </span><br><span class="line">            <span class="keyword">if</span> (newRoot) &#123;  </span><br><span class="line">                GC_G(unused) = newRoot-&gt;prev;  </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (GC_G(first_unused) != GC_G(last_unused)) &#123;  </span><br><span class="line">                newRoot = GC_G(first_unused);  </span><br><span class="line">                GC_G(first_unused)++;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span> (!GC_G(gc_enabled)) &#123;  </span><br><span class="line">                    GC_ZVAL_SET_BLACK(zv);  </span><br><span class="line">                    <span class="keyword">return</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">                zv-&gt;refcount__gc++;  </span><br><span class="line">                gc_collect_cycles(TSRMLS_C);  </span><br><span class="line">                zv-&gt;refcount__gc–;  </span><br><span class="line">                newRoot = GC_G(unused);  </span><br><span class="line">                <span class="keyword">if</span> (!newRoot) &#123;  </span><br><span class="line">                    <span class="keyword">return</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line"></span><br><span class="line">                GC_ZVAL_SET_PURPLE(zv);  </span><br><span class="line">                GC_G(unused) = newRoot-&gt;prev;  </span><br><span class="line">            &#125;  </span><br><span class="line">            newRoot-&gt;next = GC_G(roots).next;  </span><br><span class="line">            newRoot-&gt;prev = &amp;GC_G(roots);  </span><br><span class="line">            GC_G(roots).next-&gt;prev = newRoot;  </span><br><span class="line">            GC_G(roots).next = newRoot;  </span><br><span class="line"></span><br><span class="line">            GC_ZVAL_SET_ADDRESS(zv, newRoot);  </span><br><span class="line"></span><br><span class="line">            newRoot-&gt;handle = <span class="number">0</span>;  </span><br><span class="line">            newRoot-&gt;u.pz = zv;  </span><br><span class="line"></span><br><span class="line">            GC_BENCH_INC(zval_buffered);  </span><br><span class="line">            GC_BENCH_INC(root_buf_length);  </span><br><span class="line">            GC_BENCH_PEAK(root_buf_peak, root_buf_length);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>内联函数gc_zval_check_possible_root会先判断zval的类型，如果是数组或则对象类型才有可能给zval分配节点信息并放入缓冲区。只有这两种类型才可能产生环形引用。虽然GC直接处理对象是数组和对象类型，但是在这些数组和对象中包含的任何类型变量都在GC的职责范围之内，这个内联函数最终掉用的是gc_zval_possible_root函数，下面重点分析此函数中的主要流程：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>：</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (UNEXPECTED(GC_G(free_list) != <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">                GC_ZVAL_ADDRESS(zv) != <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">             GC_ZVAL_GET_COLOR(zv) == GC_BLACK) &amp;&amp;</span><br><span class="line">             (GC_ZVAL_ADDRESS(zv) &lt; GC_G(buf) ||</span><br><span class="line">              GC_ZVAL_ADDRESS(zv) &gt;= GC_G(last_unused))) &#123;</span><br><span class="line">  <span class="comment">/* The given zval is a garbage that is going to be deleted by</span></span><br><span class="line"><span class="comment">   * currently running GC */</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>首先检查zval节点信息是否已经放入到节点缓冲区，如果已经放入到节点缓冲区，则直接返回，这样保证节点缓冲区中的每个zval节点只出现一次。</p>
<p>2：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (zv-&gt;type == IS_OBJECT) &#123;</span><br><span class="line"> GC_ZOBJ_CHECK_POSSIBLE_ROOT(zv);</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果zval是对象类型，则走对象类型相关的流程，本文只以数组类型为例讲解，所以这个流程不阐述，读者可以举一反三。</p>
<p>3:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (GC_ZVAL_GET_COLOR(zv) != GC_PURPLE) &#123;</span><br><span class="line"> GC_ZVAL_SET_PURPLE(zv);</span><br><span class="line"></span><br><span class="line"> …</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果zval没有被标记为紫色，就将其标记为紫色，表示zval被放入到节点缓冲，否则不做后面的操作。</p>
<p>4:</p>
<p>如果zval的节点信息指针为空，则需要为zval分配一个gc_root_buffer节点信息。这之后会有一些判断机制，如果发现节点缓冲区已经满了说明需要启动垃圾分析流程了，垃圾分析流程在函数gc_collect_cycles(TSRMLS_C);  如果缓冲区没有满，则不会进入垃圾分析流程，为zval分配的节点信息会被加入到GC_G(roots)为入口的双链表中。</p>
<p>从这个函数我们发现了垃圾分析算法是当发现缓冲区满的时候就立即触发，垃圾分析跟代码执行流是同步过程，也就是只有垃圾分析结束之后，代码才会继续执行。所以在我们的PHP代码中，如果某个unset正好使GC的节点缓冲区满，触发了垃圾分析流程，那么这个unset耗费的时间将比一般的unset多很多。</p>
<p>gc_collect_cycles函数是真正的垃圾分析流程，这个函数定义为:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[cpp] view plain copy</span><br><span class="line"></span><br><span class="line">ZEND_API <span class="keyword">int</span> gc_collect_cycles(TSRMLS_D)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (GC_G(roots).next != &amp;GC_G(roots)) &#123;  </span><br><span class="line">        zval_gc_info *p, *q, *orig_free_list, *orig_next_to_free;  </span><br><span class="line">        <span class="keyword">if</span> (GC_G(gc_active)) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        GC_G(gc_runs)++;  </span><br><span class="line">        GC_G(zval_to_free) = FREE_LIST_END;  </span><br><span class="line">        GC_G(gc_active) = <span class="number">1</span>;  </span><br><span class="line">        gc_mark_roots(TSRMLS_C);  </span><br><span class="line">        gc_scan_roots(TSRMLS_C);  </span><br><span class="line">        gc_collect_roots(TSRMLS_C);  </span><br><span class="line">  </span><br><span class="line">        orig_free_list = GC_G(free_list);  </span><br><span class="line">        orig_next_to_free = GC_G(next_to_free);  </span><br><span class="line">        p = GC_G(free_list) = GC_G(zval_to_free);  </span><br><span class="line">        GC_G(zval_to_free) = <span class="literal">NULL</span>;  </span><br><span class="line">        GC_G(gc_active) = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* First call destructors */</span>  </span><br><span class="line">        <span class="keyword">while</span> (p != FREE_LIST_END) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (Z_TYPE(p-&gt;z) == IS_OBJECT) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (EG(objects_store).object_buckets &amp;&amp;  </span><br><span class="line">                    EG(objects_store).object_buckets[Z_OBJ_HANDLE(p-&gt;z)].valid &amp;&amp;  </span><br><span class="line">                    EG(objects_store).object_buckets[Z_OBJ_HANDLE(p-&gt;z)].bucket.obj.refcount &lt;= <span class="number">0</span> &amp;&amp;  </span><br><span class="line">                    EG(objects_store).object_buckets[Z_OBJ_HANDLE(p-&gt;z)].bucket.obj.dtor &amp;&amp;  </span><br><span class="line">                    !EG(objects_store).object_buckets[Z_OBJ_HANDLE(p-&gt;z)].destructor_called) &#123;  </span><br><span class="line">                    EG(objects_store).object_buckets[Z_OBJ_HANDLE(p-&gt;z)].destructor_called = <span class="number">1</span>;  </span><br><span class="line">                    EG(objects_store).object_buckets[Z_OBJ_HANDLE(p-&gt;z)].bucket.obj.refcount++;  </span><br><span class="line">                    EG(objects_store).object_buckets[Z_OBJ_HANDLE(p-&gt;z)].bucket.obj.dtor(EG(objects_store).object_buckets[Z_OBJ_HANDLE(p-&gt;z)].bucket.obj.<span class="keyword">object</span>, Z_OBJ_HANDLE(p-&gt;z) TSRMLS_CC);  </span><br><span class="line">                    EG(objects_store).object_buckets[Z_OBJ_HANDLE(p-&gt;z)].bucket.obj.refcount–;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            count++;  </span><br><span class="line">            p = p-&gt;u.next;  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Destroy zvals */</span>  </span><br><span class="line">        p = GC_G(free_list);  </span><br><span class="line">        <span class="keyword">while</span> (p != FREE_LIST_END) &#123;  </span><br><span class="line">            GC_G(next_to_free) = p-&gt;u.next;  </span><br><span class="line">            <span class="keyword">if</span> (Z_TYPE(p-&gt;z) == IS_OBJECT) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (EG(objects_store).object_buckets &amp;&amp;  </span><br><span class="line">                    EG(objects_store).object_buckets[Z_OBJ_HANDLE(p-&gt;z)].valid &amp;&amp;  </span><br><span class="line">                    EG(objects_store).object_buckets[Z_OBJ_HANDLE(p-&gt;z)].bucket.obj.refcount &lt;= <span class="number">0</span>) &#123;  </span><br><span class="line">                    EG(objects_store).object_buckets[Z_OBJ_HANDLE(p-&gt;z)].bucket.obj.refcount = <span class="number">1</span>;  </span><br><span class="line">                    Z_TYPE(p-&gt;z) = IS_NULL;  </span><br><span class="line">                    zend_objects_store_del_ref_by_handle_ex(Z_OBJ_HANDLE(p-&gt;z), Z_OBJ_HT(p-&gt;z) TSRMLS_CC);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z_TYPE(p-&gt;z) == IS_ARRAY) &#123;  </span><br><span class="line">                Z_TYPE(p-&gt;z) = IS_NULL;  </span><br><span class="line">                zend_hash_destroy(Z_ARRVAL(p-&gt;z));  </span><br><span class="line">                FREE_HASHTABLE(Z_ARRVAL(p-&gt;z));  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                zval_dtor(&amp;p-&gt;z);  </span><br><span class="line">                Z_TYPE(p-&gt;z) = IS_NULL;  </span><br><span class="line">            &#125;  </span><br><span class="line">            p = GC_G(next_to_free);  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Free zvals */</span>  </span><br><span class="line">        p = GC_G(free_list);  </span><br><span class="line">        <span class="keyword">while</span> (p != FREE_LIST_END) &#123;  </span><br><span class="line">            q = p-&gt;u.next;  </span><br><span class="line">            FREE_ZVAL_EX(&amp;p-&gt;z);  </span><br><span class="line">            p = q;  </span><br><span class="line">        &#125;  </span><br><span class="line">        GC_G(collected) += count;  </span><br><span class="line">        GC_G(free_list) = orig_free_list;  </span><br><span class="line">        GC_G(next_to_free) = orig_next_to_free;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>这里只简单的介绍其中关键的流程:</p>
<p>1.gc_mark_roots（）</p>
<p>   这个函数对节点信息的链表进行一次深度优先遍历，将其中的zval的refcount减1，为了避免对同一个zval重复减操作，在操作之后将zval标记成灰色。（对节点自身的zval可以重复减操作，这个是此算法的基础）</p>
<p>2.gc_scan_roots()</p>
<p>  这个函数对节点信息的链表再次进行深度优先遍历，如果发现zval的refcount大于等于1，则对该zval和其包含的zval的refcount加1操作，这个是对非垃圾的一个信息还原，然后将这些zval颜色属性去掉(设置成black)。如果发现zval的refcount等于0，则就标记成白色，这些是后面将要清理掉的垃圾。</p>
<p>3.gc_collect_roots()</p>
<p>   遍历节点信息链表,将前面一个步骤中标记为白色的节点信息放到GC_G(zval_to_free)为入口的链表中，这个链表用来存放将要释放的垃圾。 然后释放掉全部的节点信息，缓冲区被清空。分析结束后将重新收集节点信息。</p>
<p>4.释放步骤3中收集到垃圾数据。</p>
]]></content>
  </entry>
  <entry>
    <title>SSH</title>
    <url>/blog/p/782a8ece/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h2><ol>
<li>cd ~&#x2F;.ssh</li>
<li>ssh-keygen -t rsa -C “guoxinlee129@gmail”</li>
<li>接着按3个回车</li>
<li>在c&#x2F;Users&#x2F;Administrator&#x2F;.ssh生成了加密文件，复制id_rsa.pub</li>
<li>打开github 添加New SSH key</li>
<li>验证是否连接成功 ssh -T <a href="mailto:&#x67;&#x69;&#116;&#x40;&#103;&#105;&#116;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#x69;&#116;&#x40;&#103;&#105;&#116;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>(gitee site)</li>
</ol>
<h2 id="开启xftp-公钥登录"><a href="#开启xftp-公钥登录" class="headerlink" title="开启xftp 公钥登录"></a>开启xftp 公钥登录</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#生成一个.ssh文件</span><br><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line">/etc/ssh/sshd_config</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">systemctl start sshd.service</span><br><span class="line"></span><br><span class="line">adduser liguoxin</span><br><span class="line">passwd liguoxin</span><br><span class="line">abcABC123</span><br><span class="line">#将某个用户的公钥放进去</span><br><span class="line">vim /home/liguoxin/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-port=22/tcp --permanent</span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">#生成指定邮箱的ssh文件</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;1422476675@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line">cat /root/.ssh/id_rsa<span class="selector-class">.pub</span></span><br><span class="line"></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&quot;Administrator&quot;</span></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">&quot;1422476675@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line">git remote add origin git@<span class="number">120.78</span>.<span class="number">175.202</span>:enticementchina/web<span class="selector-class">.git</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Tp6框架要点</title>
    <url>/blog/p/953688bc/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="开启多应用模式"><a href="#开启多应用模式" class="headerlink" title="开启多应用模式"></a>开启多应用模式</h2><p>TP6默认的是单应用模式，开启多应用模式要有以下步骤：<br>1.安装多应用模式扩展think-multi-app：<br>在根目录下：composer require topthink&#x2F;think-multi-app<br>2.删除原有的controller文件 （必须删）<br>3.新建自己的应用目录<br>4.修改config&#x2F;app.php中的 开启多应用自动加载<br>auto_multi_app &#x3D;&gt; true; 如果没有的话不用更改</p>
<p>进入项目跟目录执行一下命令<br>php think service:discover<br>重新加载service，就能解决找不到控制器的问题</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>UE游戏开发</title>
    <url>/blog/p/614a8811/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<p>惠普提：<a href="https://www.alibabafonts.com/#/home" target="_blank" rel="noopener">https://www.alibabafonts.com/#/home</a></p>
<h2 id="UExz"><a href="#UExz" class="headerlink" title="UExz"></a>UExz</h2><p>教程开发版本 4.16.2</p>
<p>Marketplace下载<br>Animation Starter Pack</p>
<ul>
<li>reloading</li>
<li>射击</li>
<li>移动</li>
<li>动画</li>
</ul>
<p>创建项目</p>
<ul>
<li>First Person</li>
</ul>
<h3 id="调整摄像头的位置，将摄像头绑定到头部"><a href="#调整摄像头的位置，将摄像头绑定到头部" class="headerlink" title="调整摄像头的位置，将摄像头绑定到头部"></a>调整摄像头的位置，将摄像头绑定到头部</h3><p>Follow Camera -&gt; Socket -&gt; Head<br>将摄像头调整进入头前方</p>
<h3 id="增加-鼠标控制器旋转功能"><a href="#增加-鼠标控制器旋转功能" class="headerlink" title="增加 鼠标控制器旋转功能"></a>增加 鼠标控制器旋转功能</h3><p>Follow Camera： Setting -&gt; Use Controller Rotation Yaw<br>角色： Pawn -&gt; Use Controller Rotation Yaw</p>
<p>添加项目 FPS Tutorial</p>
<h3 id="添加血条和护甲"><a href="#添加血条和护甲" class="headerlink" title="添加血条和护甲"></a>添加血条和护甲</h3><p>添加血条和护甲 变量 float</p>
<h2 id="Unreal-Engine-5-tutorial"><a href="#Unreal-Engine-5-tutorial" class="headerlink" title="Unreal Engine 5 tutorial"></a>Unreal Engine 5 tutorial</h2><p>鼠标右键 按住，wsad 移动方向</p>
<p>鼠标左键 选择对象</p>
<h2 id="Lyra-Cross-platform-UI-framework"><a href="#Lyra-Cross-platform-UI-framework" class="headerlink" title="Lyra Cross-platform UI framework"></a>Lyra Cross-platform UI framework</h2><p>核心游戏驱动 Actors<br>Character&#x2F;Pawn 控制的游戏对象<br>Controller 控制游戏对象、客户端向服务器发送请求的通道<br>Player State 其他玩家需要知道的信息</p>
<ul>
<li>当前得分<br>Game State 游戏的综合信息</li>
<li>当前的游戏阶段</li>
<li>剩余时间</li>
</ul>
<p>模块化</p>
<p>Lura UI</p>
<p>游戏模式</p>
<ul>
<li>占点模式</li>
<li>爆破模式</li>
</ul>
<h3 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h3><p>和平精英手游 使用什么配置的电脑进行开发的 普通的mac可以开发吗？<br>我用的macbook pro 2020年 apple M1芯片 16GB内存 1TB硬盘 8核心GPU可以进行开发吗？<br>台式机需要什么配置才能进行开发？</p>
<p>知识点：</p>
<ol>
<li>快捷键 快速取消 链接  alt+左键</li>
</ol>
<p>Event BeginPlay<br>print String<br>hello world<br>10s</p>
<p>变量<br>isDead?<br>boolean<br>details &#x3D;&gt; default value<br>变量拖进 事件图标中，isDead?false红色<br>new branch</p>
<ul>
<li>print string 角色已死亡</li>
<li>print string 角色正常</li>
</ul>
<p><img src="/blog/p/614a8811/isDead.png" alt="isDead.png"></p>
<p>增加整型类型血量变量health</p>
<p><img src="/blog/p/614a8811/%E6%A0%B9%E6%8D%AER_key%E4%BF%9D%E5%AD%98%E7%94%A8%E6%88%B7%E5%BD%93%E5%89%8D%E5%9C%A8%E4%B8%96%E7%95%8C%E4%B8%AD%E7%9A%84%E5%90%91%E9%87%8F.png" alt="根据R_key保存用户当前在世界中的向量.png"></p>
<p>创建可以开关的门<br>要点：</p>
<ol>
<li>碰撞重叠，弹出按键</li>
</ol>
<p>blueprints -&gt; 01_door_bp -&gt; BP_door（蓝图 ）<br>门框door frame：static mesh</p>
<p>碰撞要点：</p>
<ul>
<li>Box 碰撞盒体</li>
<li>Graph<ul>
<li>Box组件右下角 事件中添加：On Component Begin Overlap 内容开始重叠 actor &#x3D;&gt; 下方 cast</li>
<li>Box组件右下角 事件中添加：On Component End Overlap 内容结束重叠 actor &#x3D;&gt; 下方 cast</li>
<li>Cast to …  (third person character) 转换为第三人称角色</li>
<li>f Get Player Controller<ul>
<li>Enable Input</li>
<li>Disable Input</li>
</ul>
</li>
<li>E key</li>
<li>Flip Flop</li>
<li>Set Relative Rotation 设置相对旋转 z 90°   x2</li>
<li>Door组件-&gt;根据Flip Flop的值设置相对旋转</li>
</ul>
</li>
</ul>
<p><img src="/blog/p/614a8811/%E9%97%A8%E5%A2%9E%E5%8A%A0%E5%BC%80%E5%85%B3.png" alt="门增加开关.png"></p>
<p>设置门无法穿越</p>
<ul>
<li>打开门的材质</li>
<li>Collision -&gt; add box simplified collision 简单碰撞<br><img src="/blog/p/614a8811/%E9%97%A8%E5%A2%9E%E5%8A%A0%E7%A2%B0%E6%92%9E.png" alt="门增加碰撞.png"></li>
</ul>
<p>将门打开地缓慢一些<br>要点：</p>
<ol>
<li>timeline<ol start="2">
<li>两个关键帧，且自动<br><img src="/blog/p/614a8811/%E4%B8%A4%E4%B8%AA%E5%85%B3%E9%94%AE%E5%B8%A7.png" alt="两个关键帧.png"></li>
</ol>
</li>
<li>make rotator 创建 自旋转<br><img src="/blog/p/614a8811/%E5%B0%86%E9%97%A8%E6%89%93%E5%BC%80%E5%9C%B0%E7%BC%93%E6%85%A2%E4%B8%80%E4%BA%9B.png" alt="将门打开地缓慢一些.png"></li>
</ol>
<p>相关介绍<br>选取父类：<br>Actor：基本的游戏对象，如灯光、摄像机、触发器、门、帽子等<br>Pawn：可以被控制的游戏对象，如玩家、敌人、车辆等<br>Character：Pawn的子类，可以移动、跳跃、攻击等<br>PlayerController：玩家控制器，如玩家输入、控制角色等<br>PlayerState：玩家状态，如玩家得分、玩家队伍等<br>PlayerCameraManager：玩家摄像机管理器，如玩家视角、镜头抖动等<br>GameModeBase：游戏模式，如占点模式、爆破模式等<br>GameInstance：游戏实例，如游戏设置、玩家信息等<br>GameSession：游戏会话，如玩家列表、游戏状态等<br>GameStateBase：游戏状态，如游戏阶段、剩余时间等</p>
<h3 id="拾取物品-模型带帽子"><a href="#拾取物品-模型带帽子" class="headerlink" title="拾取物品+模型带帽子"></a>拾取物品+模型带帽子</h3><p>导入包</p>
<p>BluePrints-&gt;02_HatPickup_BP-&gt;BP_HatPickup Actor</p>
<p>增加 静态网格HatMesh<br>增加 材质SM_Hat</p>
<ul>
<li>增加 碰撞球体 Sphere 放大：半径65<ul>
<li>事件图标中添加：On Component Begin Overlap</li>
<li>事件图标中添加：On Component End Overlap<br>增加 文字【E】拾取 躺着</li>
</ul>
</li>
<li>设置文字 Press [E] to Pickup 碰撞了 person 才显示</li>
</ul>
<p>Person</p>
<ul>
<li>增加 自定义事件 EquipHat 装备帽子</li>
<li>增加 静态网格 HatMesh，并且等待穿戴<ul>
<li>增加 事件 f set static Mesh<ul>
<li>new Mesh 从 事件 装备帽子中获取</li>
</ul>
</li>
<li>拖动 HatMesh 到 Target</li>
</ul>
</li>
<li>增加 事件 Attach Component to Component<ul>
<li>绑定父组件<ul>
<li>Mesh (CharacterMesh)</li>
</ul>
</li>
<li>绑定子组件<ul>
<li>HatMesh</li>
</ul>
</li>
<li>对齐到目标<ul>
<li>三个全部对齐到目标</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>角色-帽子 碰撞后 &amp; 按e键 触发 EquipHat</p>
<ul>
<li>E key</li>
<li>Flip Flop</li>
<li>Cast to BP 角色<ul>
<li>As 要 绑定Event， 也就是 EquipHat 装备帽子事件</li>
</ul>
</li>
<li>bind 区域的 begin overlap -&gt; other actor</li>
</ul>
<p>写好Event后测试</p>
<p>绑定帽子的位置<br>打开person的骨骼设置<br>person -&gt; 网格体 -&gt; 打开文件夹 -&gt; 打开网格体 -&gt; 打开骨骼<br>找到头部骨骼 search head</p>
<ul>
<li>创建 附加 插槽 Hat Socket 绑定帽子Event的socketName</li>
<li>预览帽子资源，调整位置</li>
</ul>
<p>装备帽子后删除帽子<br><img src="/blog/p/614a8811/BP_hat.png" alt="BP_hat.png"></p>
<p><img src="/blog/p/614a8811/BP_third_person.png" alt="BP_third_person.png"></p>
<p><img src="/blog/p/614a8811/%E7%BD%91%E6%A0%BC%E9%AA%A8%E9%AA%BC.png" alt="网格骨骼.png"></p>
<p>创建一个 扣减角色生命值的 Actor<br>03_damage_box -&gt; BP_damage_box -&gt; actor</p>
<p>玩家</p>
<ul>
<li>增加 Health float 属性</li>
<li>增加 Health 损耗 Event</li>
</ul>
<p>物体</p>
<ul>
<li>增加碰撞体</li>
<li>Set</li>
<li>Set Timer By Event</li>
<li>扣减玩家生命值 Event</li>
<li>Apply Damage</li>
</ul>
<p><img src="/blog/p/614a8811/%E6%89%A3%E5%87%8F%E8%A7%92%E8%89%B2%E7%94%9F%E5%91%BD%E5%80%BC01.png" alt="扣减角色生命值01.png"><br>要点：</p>
<ol>
<li>将 角色 提升为变量</li>
<li>Set Timer By Event &amp; sub</li>
<li>Event 执向自定义Event -&gt; ApplyDamage<ul>
<li>循环 lopping &#x3D; true</li>
</ul>
</li>
<li>角色 蓝图 -&gt; Event AnyDamage</li>
</ol>
<p>完整版：</p>
<ul>
<li>碰撞体蓝图：<br><img src="/blog/p/614a8811/%E6%89%A3%E5%87%8F%E8%A7%92%E8%89%B2%E7%94%9F%E5%91%BD%E5%80%BC%E5%AE%8C%E6%95%B4%E7%89%8801.png" alt="扣减角色生命值完整版01.png"></li>
<li>角色蓝图：<br><img src="/blog/p/614a8811/%E6%89%A3%E5%87%8F%E8%A7%92%E8%89%B2%E7%94%9F%E5%91%BD%E5%80%BC%E5%AE%8C%E6%95%B4%E7%89%8802.png" alt="扣减角色生命值完整版02.png"></li>
</ul>
<p>增加生命值UI<br>目录：03_damage_box</p>
<ul>
<li>用户页面 -&gt; 空间蓝图 -&gt; 用户控件<ul>
<li>Canvas Panel &amp; ProgressBar</li>
<li>name：WBP_health_bar<br>Canvas Panel</li>
</ul>
</li>
<li>ProgressBar<ul>
<li>Percent 进度条数值 可以进行bind<ul>
<li>要点：从其他蓝图中bind<ol>
<li>get player pawn 获取与此UI关联的角色</li>
<li>cast to third person character 将角色转换为第三人称角色</li>
<li>get health</li>
<li>*100 mul</li>
<li>bind<br><img src="/blog/p/614a8811/WBP_health_bar.png" alt="WBP_health_bar.png"></li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/blog/p/614a8811/ThirdPerson.png" alt="ThirdPerson.png"></p>
<p><img src="/blog/p/614a8811/ThirdPerson_CreateHealthBarEvent.png" alt="ThirdPerson_CreateHealthBarEvent.png"></p>
<p><img src="/blog/p/614a8811/WBP_health_bar_bind.png" alt="WBP_health_bar_bind.png"></p>
<p>添加 角色血条 到角色画布视图上 Event</p>
<ul>
<li>打开蓝图</li>
<li>添加Event CreateHealthBarEvent<ul>
<li>create widget -&gt; user interface -&gt; Create Widget<ul>
<li>绑定角色 Get Player Controller</li>
</ul>
</li>
<li>add to viewport</li>
</ul>
</li>
</ul>
<p>触发 角色血条 Event<br>当比赛开始时增加血条UI<br>Add Input Mapping的Event BeginPlay事件增加</p>
<ul>
<li>add sequence 在原有的基play础上，顺序执行<ul>
<li>CreateHealthBarEvent 触发上面创建的血条UI事件</li>
</ul>
</li>
</ul>
<p>玩家离开 则不扣血<br>要点：</p>
<ol>
<li>定时器不断触发，将计数器的返回值 存储为变量TimerReference 为定时器句柄</li>
<li>定时器句柄中 get后，方法：Clear and Invalidate Timer Handle 可以停止定时功能。<br>碰撞体 end overload</li>
</ol>
<p>增加特效：粒子系统<br>包：FX Variety Pack</p>
<p>导入特效包</p>
<p>扣血碰撞体 增加组件</p>
<ul>
<li>粒子发射器 cascade particle system component</li>
</ul>
<p>恢复血量碰撞体<br><img src="/blog/p/614a8811/BP_repair_box.png" alt="BP_repair_box.png"></p>
<h2 id="UE5-课程-第一人称-多人生存游戏"><a href="#UE5-课程-第一人称-多人生存游戏" class="headerlink" title="UE5 课程 第一人称 多人生存游戏"></a>UE5 课程 第一人称 多人生存游戏</h2><h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><p>Inventory：建筑物品(家具)清单，财产清单</p>
<p>主库存组件 or 主项目容器 蓝图容器</p>
<ul>
<li>库存相关的功能<ul>
<li>堆叠物品</li>
<li>增加</li>
<li>删除</li>
</ul>
</li>
</ul>
<p>玩家 快捷栏 组件播放器<br>玩家 物品栏组件<br>存储容器</p>
<ul>
<li>锻造工具台</li>
<li>死去的玩家</li>
<li>掉在地上的袋子</li>
</ul>
<img src="/blog/p/614a8811/%E7%BB%84%E4%BB%B6%E8%93%9D%E5%9B%BE%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" class="" title="组件蓝图继承关系">

<ul>
<li>install plugins Adventure Character</li>
<li>create 文件夹 man color red</li>
<li>create _main<ul>
<li>FirstPerson 文件夹 -&gt; 第一人称蓝图BP_FirstPersonCharacter 复制到 _main</li>
</ul>
</li>
<li>file -&gt; save all </li>
<li>文件夹 Content 属性 fix up Redirectors in folder<ul>
<li>修复文件中的重定向</li>
</ul>
</li>
<li>down project files:first person animas, all FBS<ul>
<li>create dir Man -&gt; Animations 并且导入 Animations.FBS<ul>
<li>MESH 骨骼 select -&gt; UE4_Mannequin_Skeleton</li>
</ul>
</li>
<li>create dir Man -&gt; Arms 导入Arms.FBS <ul>
<li>MESH 骨骼 select -&gt; UE4_Mannequin_Skeleton</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>man mesh full SK_Man_Full_01</p>
<p>动画混合空间</p>
<ul>
<li>create Animation -&gt; Blend Space 1D -&gt; UE4_Mannequin_Skeleton<br>混合多个动画之间的协调画面</li>
</ul>
<p>assets details 轴设置 -&gt; 水平轴 name：speed</p>
<p>最小值0<br>最大值800</p>
<p>步行速度<br>正常奔跑速度：600<br>快速奔跑速度：800 </p>
<p>创建 角色蓝图 骨骼 选择 UE4_Mannequin_Skeleton<br>FirstAnima_BP</p>
<p>new State Machine<br>增加状态机</p>
<ul>
<li>speed [混合空间，speed：0]</li>
</ul>
<h3 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h3><p>玩家统计数据</p>
<h3 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h3><p>玩家存储容器</p>
<h3 id="第-10-章"><a href="#第-10-章" class="headerlink" title="第 10 章"></a>第 10 章</h3><p>创建所有项目</p>
<h3 id="第11章"><a href="#第11章" class="headerlink" title="第11章"></a>第11章</h3><p>创建部落&#x2F;氏族系统</p>
<h3 id="第12章创建社会系统"><a href="#第12章创建社会系统" class="headerlink" title="第12章创建社会系统"></a>第12章创建社会系统</h3><h3 id="第-13-章创建开放世界地图"><a href="#第-13-章创建开放世界地图" class="headerlink" title="第 13 章创建开放世界地图"></a>第 13 章创建开放世界地图</h3><h3 id="第-14-章多生物群落-x2F-程序树叶"><a href="#第-14-章多生物群落-x2F-程序树叶" class="headerlink" title="第 14 章多生物群落&#x2F;程序树叶"></a>第 14 章多生物群落&#x2F;程序树叶</h3><h3 id="第15章人工智能系统"><a href="#第15章人工智能系统" class="headerlink" title="第15章人工智能系统"></a>第15章人工智能系统</h3><h3 id="第-16-章程序区"><a href="#第-16-章程序区" class="headerlink" title="第 16 章程序区"></a>第 16 章程序区</h3><h3 id="第-17-章玩家小地图"><a href="#第-17-章玩家小地图" class="headerlink" title="第 17 章玩家小地图"></a>第 17 章玩家小地图</h3><h3 id="第-18-章-保存-x2F-加载系统"><a href="#第-18-章-保存-x2F-加载系统" class="headerlink" title="第 18 章. 保存&#x2F;加载系统"></a>第 18 章. 保存&#x2F;加载系统</h3><h3 id="第-19-章-Steam-会话-x2F-前端小部件"><a href="#第-19-章-Steam-会话-x2F-前端小部件" class="headerlink" title="第 19 章 Steam 会话&#x2F;前端小部件"></a>第 19 章 Steam 会话&#x2F;前端小部件</h3><h3 id="第-20-章-专用服务器设置和托管"><a href="#第-20-章-专用服务器设置和托管" class="headerlink" title="第 20 章 专用服务器设置和托管"></a>第 20 章 专用服务器设置和托管</h3><h3 id="第21章"><a href="#第21章" class="headerlink" title="第21章"></a>第21章</h3><p>其他</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
  </entry>
  <entry>
    <title>Zookeeper</title>
    <url>/blog/p/b829b66a/</url>
    <content><![CDATA[<p>这玩意儿在研究Kafka和分布式的时候遇到了😤，Java应用中倒是挺常见的，我需要深入一下…</p>
<span id="more"></span>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p><a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">https://zookeeper.apache.org/</a><br>分布式应用程序的分布式协调服务<br>动物园中：各个节点比作各种小动物，那协调者，就是动物园管理员(<code>Zookeeper</code>)</p>
</blockquote>
<h2 id="分布式锁实现方案"><a href="#分布式锁实现方案" class="headerlink" title="分布式锁实现方案"></a>分布式锁实现方案</h2><ol>
<li>数据库 缺点：性能差</li>
<li>Redis 缺点：死锁</li>
<li>Zookeeper<ul>
<li>基于异常(零时节点)</li>
<li>基于相互监听，性能较高，占用资源，不常用(零时有序号的节点)</li>
</ul>
</li>
</ol>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><ol>
<li>零时节点</li>
<li>持久化节点</li>
</ol>
<img src="/blog/p/b829b66a/zkservice.jpg" class="" title="zkservice.jpg">

<p>zookeeper宏观结构</p>
<img src="/blog/p/b829b66a/zknamespace.jpg" class="" title="zknamespace.jpg">

<p>zookeeper微观结构</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p><a href="http://archive.apache.org/dist/zookeeper/zookeeper-3.6.1/" target="_blank" rel="noopener">http://archive.apache.org/dist/zookeeper/zookeeper-3.6.1/</a><br><a href="https://zookeeper.apache.org/doc/r3.6.1/index.html" target="_blank" rel="noopener">https://zookeeper.apache.org/doc/r3.6.1/index.html</a><br><a href="https://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">https://zookeeper.apache.org/releases.html</a><br><a href="https://github.com/apache/zookeeper" target="_blank" rel="noopener">https://github.com/apache/zookeeper</a><br><a href="https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip" target="_blank" rel="noopener">https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip</a> #图形界面管理工具</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#源码安装</span><br><span class="line">cd /usr/src/</span><br><span class="line">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.4.9/zookeeper-3.4.9.tar.gz</span><br><span class="line">tar -zxvf zookeeper-3.4.9.tar.gz</span><br><span class="line">cd zookeeper-3.4.9/src/c</span><br><span class="line">./configure --prefix=/usr/local/zookeeper</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">#下载包</span><br><span class="line">cd /usr/src/</span><br><span class="line">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.8/apache-zookeeper-3.5.8-bin.tar.gz</span><br><span class="line">tar -zxvf apache-zookeeper-3.5.8-bin.tar.gz</span><br><span class="line">mkdir /usr/local/zookeeper</span><br><span class="line">mv apache-zookeeper-3.5.8-bin/* /usr/local/zookeeper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cp /usr/local/zookeeper/conf/zoo_sample.cfg /usr/local/zookeeper/conf/zoo.cfg</span><br><span class="line">mkdir /tmp/zookeeper</span><br><span class="line"></span><br><span class="line">#创建分布式下某个服务的标识</span><br><span class="line">/usr/local/zookeeper/bin/zkServer-initialize.sh --force --myid=161</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-port=2181/tcp --permanent</span><br><span class="line">systemctl restart firewalld</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ls /节点</span><br><span class="line"></span><br><span class="line">create /nodex value</span><br><span class="line">set /nodex value</span><br><span class="line">get /nodex</span><br><span class="line">delete /nodex</span><br><span class="line">rmr /nodex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create /test test</span><br><span class="line">create /test/liguoxin 23age</span><br><span class="line"></span><br><span class="line">getAcl /test/liguoxin</span><br><span class="line">setAcl /test/liguoxin digest:liguoxin:W8pXCHxJCZgAJYLIxmlK4t4WqH0=:cdrwa</span><br><span class="line"></span><br><span class="line">addauth digest liguoxin:123</span><br><span class="line">getAcl /test/liguoxin</span><br><span class="line"></span><br><span class="line">#生成密码</span><br><span class="line">java -Djava.ext.dirs=/usr/local/zookeeper/lib -cp /usr/local/zookeeper/lib/zookeeper-3.5.8.jar org.apache.zookeeper.server.auth.DigestAuthenticationProvider liguoxin:123</span><br><span class="line">&gt;liguoxin:W8pXCHxJCZgAJYLIxmlK4t4WqH0=</span><br><span class="line"></span><br><span class="line">#事务日志可视化</span><br><span class="line">java -cp /usr/local/zookeeper/lib/zookeeper-3.5.8.jar:\</span><br><span class="line">/usr/local/zookeeper/lib/zookeeper-jute-3.5.8.jar:\</span><br><span class="line">/usr/local/zookeeper/lib/slf4j-api-1.7.25.jar:\</span><br><span class="line">/usr/local/zookeeper/lib/slf4j-log4j12-1.7.25.jar:\</span><br><span class="line">/usr/local/zookeeper/lib/log4j-1.2.17.jar \</span><br><span class="line">org.apache.zookeeper.server.LogFormatter \</span><br><span class="line">/tmp/zookeeper/version-2/log.1</span><br><span class="line"></span><br><span class="line">#数据快照可视化</span><br><span class="line">java -cp /usr/local/zookeeper/lib/zookeeper-3.5.8.jar:\</span><br><span class="line">/usr/local/zookeeper/lib/zookeeper-jute-3.5.8.jar:\</span><br><span class="line">/usr/local/zookeeper/lib/slf4j-api-1.7.25.jar:\</span><br><span class="line">/usr/local/zookeeper/lib/slf4j-log4j12-1.7.25.jar:\</span><br><span class="line">/usr/local/zookeeper/lib/log4j-1.2.17.jar \</span><br><span class="line">org.apache.zookeeper.server.SnapshotFormatter \</span><br><span class="line">/tmp/zookeeper/version-2/snapshot.0</span><br></pre></td></tr></table></figure>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="会话：客户端-gt-服务端-的TCP长连接"><a href="#会话：客户端-gt-服务端-的TCP长连接" class="headerlink" title="会话：客户端 -&gt; 服务端 的TCP长连接"></a>会话：客户端 -&gt; 服务端 的TCP长连接</h3><ul>
<li>正常访问 -&gt; 正常挂断</li>
<li>心跳检测是否异常</li>
</ul>
<h3 id="数据节点Node："><a href="#数据节点Node：" class="headerlink" title="数据节点Node："></a>数据节点Node：</h3><ul>
<li>文件系统、树形结构</li>
<li>每个节点有两种类型：持久性、临时性</li>
<li>每个节点都有值</li>
<li>节点有顺序</li>
</ul>
<h3 id="节点状态以及属性"><a href="#节点状态以及属性" class="headerlink" title="节点状态以及属性"></a>节点状态以及属性</h3><ul>
<li>xid 3</li>
<li>time 2</li>
<li>version 3</li>
<li>3</li>
</ul>
<h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><h3 id="watcher"><a href="#watcher" class="headerlink" title="watcher"></a>watcher</h3><h3 id="acl策略"><a href="#acl策略" class="headerlink" title="acl策略"></a>acl策略</h3><ul>
<li>scheme<ul>
<li>world</li>
<li>auth 明文</li>
<li>digest 密文</li>
</ul>
</li>
<li>Permission cdrwa</li>
<li>基本操作：<ul>
<li>setAcl digest:user:password:cdrwa 此处是密文</li>
<li>addauth digest user:password 此处是明文</li>
</ul>
</li>
</ul>
<h3 id="集群角色"><a href="#集群角色" class="headerlink" title="集群角色"></a>集群角色</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Zookeeper(<span class="string">&quot;host1,host2,host3,host4,host5&quot;</span>);</span><br><span class="line">zk客户端处理过程：解析-&gt;打散-&gt;行程环形地址列表队列</span><br></pre></td></tr></table></figure>
<h4 id="Leader集群工作机制中的核心"><a href="#Leader集群工作机制中的核心" class="headerlink" title="Leader集群工作机制中的核心"></a>Leader集群工作机制中的核心</h4><ol>
<li>事务请求的唯一调度和处理者，保证集群事务处理的顺序性</li>
<li>集群内部个服务器的调度者(管理follower，数据同步)</li>
</ol>
<h4 id="Follower-集群工作机制中的跟随者"><a href="#Follower-集群工作机制中的跟随者" class="headerlink" title="Follower 集群工作机制中的跟随者"></a>Follower 集群工作机制中的跟随者</h4><ol>
<li>处理非实物的请求，转发事务请求给 Leader</li>
<li>参与事务请求 proposal 投票</li>
<li>参与 Leader 选举投票</li>
</ol>
<h4 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h4><ol>
<li>和 Follower 功能相同，但不参与任何投票</li>
<li>处理非事务请求，转发事务请求给 Leader</li>
<li>提高集群非事务处理能力<br>配置<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">peerType=observer</span><br><span class="line">server.0=192.168.3.150:2181:2182（myid=ip:选举端口:通信端口）</span><br><span class="line">server.1=192.168.3.151:2181:2182</span><br><span class="line">server.2=192.168.3.152:2181:2182</span><br><span class="line">server.3=192.168.3.153:2181:2182</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h3><blockquote>
<p>处理</p>
</blockquote>
<h3 id="崩溃恢复"><a href="#崩溃恢复" class="headerlink" title="崩溃恢复"></a>崩溃恢复</h3><ol>
<li>同步数据：崩溃恢复后，将leader所有的数据同步进来</li>
<li>选举Leader：</li>
</ol>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h3><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><ul>
<li>什么时候用到分布式锁？</li>
</ul>
<ol>
<li>多任务环境</li>
<li>每个请求都需要对同一个共享资源进行操作</li>
<li>每个请求都是互斥的</li>
</ol>
<ul>
<li>实现方式</li>
</ul>
<ol>
<li>创建了临时节点(说明抢到了锁)</li>
<li>创建不了临时节点(说明抢不到锁)，但是一直监听</li>
<li>抢到锁后，正常关闭(临时节点自动删除)</li>
<li>心跳检测到，非正常关闭(临时节点自动删除)<br>会导致羊群效应</li>
</ol>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">create /test val</span><br><span class="line">create /test/liguoxin val</span><br><span class="line">getAcl /test/liguoxin</span><br><span class="line">setAcl /test/liguoxin digest:liguoxin:W8pXCHxJCZgAJYLIxmlK4t4WqH0=:crwa</span><br><span class="line">addauth digest liguoxin:123</span><br><span class="line">delete /temp/liguoxin</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="超级管理员-super"><a href="#超级管理员-super" class="headerlink" title="超级管理员 super"></a>超级管理员 super</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#生成密码</span><br><span class="line">java -Djava.ext.dirs=/usr/local/zookeeper/lib -cp /usr/local/zookeeper/lib/zookeeper-3.5.8.jar org.apache.zookeeper.server.auth.DigestAuthenticationProvider super:abcABC123</span><br><span class="line">&gt;super:abcABC123-&gt;super:gzcPPoCwA8ovzSNKzseFSxukz4M=</span><br><span class="line">vim /usr/local/zookeeper/bin/zkServer.sh</span><br><span class="line">#158行左右，加上一行</span><br><span class="line">&quot;-Dzookeeper.DigestAuthenticationProvider.superDigest=super:gzcPPoCwA8ovzSNKzseFSxukz4M=&quot; \</span><br><span class="line"></span><br><span class="line">#进入控制台</span><br><span class="line">addauth digest super:abcABC123</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/blog/p/b829b66a/%E5%A2%9E%E5%8A%A0%E8%B6%85%E7%BA%A7%E7%AE%A1%E7%90%86%E5%91%98.jpg" class="" title="增加超级管理员.jpg">

<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><img src="/blog/p/b829b66a/%E5%90%AF%E5%8A%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98.jpg" class="" title="启动时遇到的问题.jpg">

<h3 id="启动时，错误-找不到或无法加载主类-org-apache-zookeeper-server-quorum-QuorumPeerMain"><a href="#启动时，错误-找不到或无法加载主类-org-apache-zookeeper-server-quorum-QuorumPeerMain" class="headerlink" title="启动时，错误: 找不到或无法加载主类 org.apache.zookeeper.server.quorum.QuorumPeerMain"></a>启动时，错误: 找不到或无法加载主类 org.apache.zookeeper.server.quorum.QuorumPeerMain</h3><p>解决方案：</p>
<ol>
<li>(必须)选低一些版本的包</li>
<li>(必须)使用编译过的bin包(apache-zookeeper-3.6.1-bin.tar.gz )</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack</title>
    <url>/blog/p/764f33bc/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><h2 id="VueRoute"><a href="#VueRoute" class="headerlink" title="VueRoute"></a>VueRoute</h2><ul>
<li><p>问题一：导入route&#x2F;index.js时<br>使用import router from ‘.&#x2F;route’</p>
</li>
<li><p>问题二：new Router配置 mode:’history’时，手动输入url会404<br>npm i -g <a href="mailto:&#119;&#101;&#98;&#112;&#x61;&#x63;&#107;&#x40;&#x34;&#46;&#x33;&#x30;&#46;&#48;">&#119;&#101;&#98;&#112;&#x61;&#x63;&#107;&#x40;&#x34;&#46;&#x33;&#x30;&#46;&#48;</a> <a href="mailto:&#119;&#101;&#98;&#112;&#x61;&#99;&#107;&#45;&#99;&#x6c;&#x69;&#64;&#51;&#x2e;&#x33;&#x2e;&#x30;">&#119;&#101;&#98;&#112;&#x61;&#99;&#107;&#45;&#99;&#x6c;&#x69;&#64;&#51;&#x2e;&#x33;&#x2e;&#x30;</a> webpack-dev-server <a href="mailto:&#x68;&#116;&#x6d;&#x6c;&#45;&#x77;&#101;&#98;&#x70;&#x61;&#x63;&#x6b;&#x2d;&#x70;&#108;&#117;&#x67;&#x69;&#110;&#64;&#x33;&#46;&#x32;&#46;&#x30;">&#x68;&#116;&#x6d;&#x6c;&#45;&#x77;&#101;&#98;&#x70;&#x61;&#x63;&#x6b;&#x2d;&#x70;&#108;&#117;&#x67;&#x69;&#110;&#64;&#x33;&#46;&#x32;&#46;&#x30;</a><br>需要在webpack.config.js 中 devServer 添加&gt; historyApiFallback: true,</p>
</li>
</ul>
<h2 id="安装eslint，多人协作规范"><a href="#安装eslint，多人协作规范" class="headerlink" title="安装eslint，多人协作规范"></a>安装eslint，多人协作规范</h2><blockquote>
<p><a href="https://vue-loader.vuejs.org/zh/guide/linting.html" target="_blank" rel="noopener">https://vue-loader.vuejs.org/zh/guide/linting.html</a></p>
</blockquote>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装库</span></span><br><span class="line">npm <span class="keyword">install </span>-D eslint eslint-<span class="built_in">config</span>-standard eslint-plugin-standard eslint-plugin-node eslint-plugin-promise eslint-plugin-import eslint-plugin-html eslint-loader <span class="keyword">babel-eslint </span>eslint-plugin-vue</span><br><span class="line"></span><br><span class="line"><span class="comment">##创建配置文件</span></span><br><span class="line">.eslintrc&#123;</span><br><span class="line">	<span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">		<span class="string">&quot;plugin:vue/essential&quot;</span>,</span><br><span class="line">		<span class="string">&quot;standard&quot;</span></span><br><span class="line">	],</span><br><span class="line">	<span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">		<span class="string">&quot;vue&quot;</span></span><br><span class="line">	],</span><br><span class="line">	<span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;parser&quot;</span>: <span class="string">&quot;babel-eslint&quot;</span>,</span><br><span class="line">		<span class="string">&quot;ecmaVersion&quot;</span>: <span class="number">2017</span>,</span><br><span class="line">		<span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">##package.json</span></span><br><span class="line"><span class="keyword">scripts&#123;</span></span><br><span class="line"><span class="keyword"></span>	<span class="string">&quot;lint&quot;</span>: <span class="string">&quot;eslint --ext js,jsx,vue client/&quot;</span>,</span><br><span class="line">	<span class="string">&quot;lint-fix&quot;</span>: <span class="string">&quot;eslint --fix --ext js,jsx,vue client/&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="git-commit时检测并阻止错误代码"><a href="#git-commit时检测并阻止错误代码" class="headerlink" title="git commit时检测并阻止错误代码"></a>git commit时检测并阻止错误代码</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装库</span></span><br><span class="line"><span class="built_in">npm</span> i -D husky</span><br><span class="line"></span><br><span class="line"><span class="comment">#package.json</span></span><br><span class="line">scripts&#123;</span><br><span class="line">    <span class="string">&quot;precommit&quot;</span>: <span class="string">&quot;npm run lint&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="正式环境打包优化"><a href="#正式环境打包优化" class="headerlink" title="正式环境打包优化"></a>正式环境打包优化</h2><h3 id="将css内容单独分离出来-mini-css-extract-plugin"><a href="#将css内容单独分离出来-mini-css-extract-plugin" class="headerlink" title="将css内容单独分离出来 mini-css-extract-plugin"></a>将css内容单独分离出来 mini-css-extract-plugin</h3><blockquote>
<p><a href="https://www.npmjs.com/package/mini-css-extract-plugin" target="_blank" rel="noopener">https://www.npmjs.com/package/mini-css-extract-plugin</a></p>
</blockquote>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#安装库</span><br><span class="line">npm i -D mini-css-extract-plugin</span><br><span class="line"></span><br><span class="line">#webpack.config.js</span><br><span class="line">##(<span class="number">1</span>)</span><br><span class="line">const MiniCssExtractPlugin = require(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line">##(<span class="number">2</span>)</span><br><span class="line">plugins: [</span><br><span class="line">	new MiniCssExtractPlugin(&#123;</span><br><span class="line">	  <span class="comment">// Options similar to the same options in webpackOptions.output</span></span><br><span class="line">	  <span class="comment">// both options are optional</span></span><br><span class="line">	  filename: <span class="string">&#x27;[name].css&#x27;</span>,</span><br><span class="line">	  chunkFilename: <span class="string">&#x27;[id].css&#x27;</span></span><br><span class="line">	&#125;)</span><br><span class="line">]</span><br><span class="line">##(<span class="number">3</span>)</span><br><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">	test: /\.css$/,</span><br><span class="line">	use: [</span><br><span class="line">	  &#123;</span><br><span class="line">		loader: MiniCssExtractPlugin.loader,</span><br><span class="line">		options: &#123;</span><br><span class="line">		  <span class="comment">// you can specify a publicPath here</span></span><br><span class="line">		  <span class="comment">// by default it use publicPath in webpackOptions.output</span></span><br><span class="line">		  publicPath: <span class="string">&#x27;../&#x27;</span></span><br><span class="line">		&#125;</span><br><span class="line">	  &#125;,</span><br><span class="line">	  <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">	]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="build之前删除之前生成的所有build过的文件-clean-webpack-plugin"><a href="#build之前删除之前生成的所有build过的文件-clean-webpack-plugin" class="headerlink" title="build之前删除之前生成的所有build过的文件 clean-webpack-plugin"></a>build之前删除之前生成的所有build过的文件 clean-webpack-plugin</h3><blockquote>
<p><a href="https://www.npmjs.com/package/clean-webpack-plugin" target="_blank" rel="noopener">https://www.npmjs.com/package/clean-webpack-plugin</a></p>
</blockquote>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装库</span></span><br><span class="line"><span class="built_in">npm</span> i -D clean-webpack-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment">#webpack.config.js</span></span><br><span class="line"><span class="comment">##(1)</span></span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">##(2)</span></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(&#123;</span><br><span class="line">        dry: <span class="literal">true</span>,</span><br><span class="line">        verbose: <span class="literal">true</span>,</span><br><span class="line">        cleanOnceBeforeBuildPatterns: [<span class="string">&#x27;!build/*&#x27;</span>]<span class="regexp">//排除该文件夹</span></span><br><span class="line"><span class="regexp">    &#125;),</span></span><br><span class="line"><span class="regexp">]</span></span><br></pre></td></tr></table></figure>

<h3 id="将图片文件转换为base64编码并载入浏览器能够减少http请求数，但是增大了js或html文件的体积-url-loader"><a href="#将图片文件转换为base64编码并载入浏览器能够减少http请求数，但是增大了js或html文件的体积-url-loader" class="headerlink" title="将图片文件转换为base64编码并载入浏览器能够减少http请求数，但是增大了js或html文件的体积 url-loader"></a>将图片文件转换为base64编码并载入浏览器能够减少http请求数，但是增大了js或html文件的体积 url-loader</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装库</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">url-loader</span> <span class="string">--save-dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入文件</span></span><br><span class="line"><span class="string">import</span> <span class="string">img</span> <span class="string">from</span> <span class="string">&#x27;./image.png&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#webpack.config.js</span></span><br><span class="line"><span class="attr">rules:</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test:</span> <span class="string">/\.(gif|png|svg|jpg|jpeg)$/</span>,</span><br><span class="line">    <span class="attr">use:</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">loader:</span> <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options:</span> &#123;</span><br><span class="line">          <span class="attr">limit:</span> <span class="number">1024</span>,</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;[name].[ext]&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="给不同浏览器的样式加上前缀，如-webkit-postcss-loader"><a href="#给不同浏览器的样式加上前缀，如-webkit-postcss-loader" class="headerlink" title="给不同浏览器的样式加上前缀，如-webkit- postcss-loader"></a>给不同浏览器的样式加上前缀，如-webkit- postcss-loader</h3><blockquote>
<p><a href="https://www.npmjs.com/package/postcss-loader" target="_blank" rel="noopener">https://www.npmjs.com/package/postcss-loader</a></p>
</blockquote>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装库</span></span><br><span class="line"><span class="built_in">npm</span> install postcss-loader --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置文件.postcssrc.js</span></span><br><span class="line"><span class="keyword">let</span> postcssConfig = &#123;&#125;;</span><br><span class="line">postcssConfig.autoprefixer = &#123;</span><br><span class="line">    browsers: [<span class="string">&#x27;&gt; 1%&#x27;</span>, <span class="string">&#x27;ff 3&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.<span class="built_in">exports</span> = &#123;</span><br><span class="line">    plugins: postcssConfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#webpack.config.js</span></span><br><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    use: [ <span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;postcss-loader&#x27;</span> ]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="单独打包类库文件"><a href="#单独打包类库文件" class="headerlink" title="单独打包类库文件"></a>单独打包类库文件</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#webpack</span><span class="selector-class">.config</span><span class="selector-class">.js</span></span><br><span class="line">entry:&#123;</span><br><span class="line">    app: <span class="string">&#x27;入口文件&#x27;</span>,</span><br><span class="line">    vendor:<span class="selector-attr">[<span class="string">&#x27;vue&#x27;</span>,<span class="string">&#x27;vue-route&#x27;</span>]</span></span><br><span class="line">&#125;</span><br><span class="line">plugin:&#123;</span><br><span class="line">    new webpack<span class="selector-class">.optimize</span><span class="selector-class">.CommonsChunkPlugin</span>(&#123;</span><br><span class="line">        name: <span class="string">&#x27;vendor&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h2><ol>
<li>设置 input textarea 行高 :rows&#x3D;”行数”</li>
<li>el-dropdown-item下使用@click 失效<br> 正确使用方法：@click.native&#x3D;”” 失效</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7中开启或关闭mysql数据库远程登录连接访问权限</title>
    <url>/blog/p/b80c9de7/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="添加权限"><a href="#添加权限" class="headerlink" title="添加权限"></a>添加权限</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mysql -uroot -<span class="selector-tag">p</span>密码</span><br></pre></td></tr></table></figure>

<h3 id="切换到-mysql-DB"><a href="#切换到-mysql-DB" class="headerlink" title="切换到 mysql DB"></a>切换到 mysql DB</h3><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">use mysql<span class="comment">; </span></span><br></pre></td></tr></table></figure>

<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><h4 id="只允许固定ip才能访问"><a href="#只允许固定ip才能访问" class="headerlink" title="只允许固定ip才能访问"></a>只允许固定ip才能访问</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span><span class="string">&#x27;myuser&#x27;</span>@<span class="string">&#x27;准备赋予权限的ip&#x27;</span>IDENTIFIED <span class="keyword">BY</span><span class="string">&#x27;这是密码&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure>
<h4 id="允许所有用户拥有访问此数据库的权限-不安全-不建议"><a href="#允许所有用户拥有访问此数据库的权限-不安全-不建议" class="headerlink" title="允许所有用户拥有访问此数据库的权限(不安全,不建议)"></a>允许所有用户拥有访问此数据库的权限(不安全,不建议)</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;myuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;这是密码&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure>
<h3 id="推入内存或重启mysql使其生效"><a href="#推入内存或重启mysql使其生效" class="headerlink" title="推入内存或重启mysql使其生效"></a>推入内存或重启mysql使其生效</h3><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d/mysqld start</span><br></pre></td></tr></table></figure>
<h2 id="删除权限"><a href="#删除权限" class="headerlink" title="删除权限"></a>删除权限</h2><h3 id="连接数据库-1"><a href="#连接数据库-1" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mysql -uroot -<span class="selector-tag">p</span>密码</span><br></pre></td></tr></table></figure>

<h3 id="切换到-mysql-DB-1"><a href="#切换到-mysql-DB-1" class="headerlink" title="切换到 mysql DB"></a>切换到 mysql DB</h3><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">use mysql<span class="comment">; </span></span><br></pre></td></tr></table></figure>

<h3 id="更改mysql安装目录的属主属组"><a href="#更改mysql安装目录的属主属组" class="headerlink" title="更改mysql安装目录的属主属组"></a>更改mysql安装目录的属主属组</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> host = <span class="string">&#x27;这是被删除权限用户的ip&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="推入内存或重启mysql使其生效-1"><a href="#推入内存或重启mysql使其生效-1" class="headerlink" title="推入内存或重启mysql使其生效"></a>推入内存或重启mysql使其生效</h3><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d/mysqld start</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac使用指南</title>
    <url>/blog/p/614a2564/</url>
    <content><![CDATA[<p>介绍使用Mac以来相关的使用技巧和黑科技🫢。</p>
<span id="more"></span>

<h2 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h2><blockquote>
<p><a href="https://brew.sh/" target="_blank" rel="noopener">https://brew.sh/</a></p>
</blockquote>
<p>brew 相关指令</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索一个包</span></span><br><span class="line"><span class="keyword">brew </span>search * </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装一个包</span></span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>* </span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载一个包</span></span><br><span class="line"><span class="keyword">brew </span>uninstall * </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看包的相关信息（可以从中查看安装路径等）</span></span><br><span class="line"><span class="keyword">brew </span>info *</span><br></pre></td></tr></table></figure>

<h2 id="Centos-安装"><a href="#Centos-安装" class="headerlink" title="Centos 安装"></a>Centos 安装</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> brew 无法在root用户上安装</span><br><span class="line">sudo adduser liguoxin</span><br><span class="line">sudo passwd liguoxin   <span class="regexp">//</span> jH9gxicnew</span><br><span class="line">sudo usermod -aG wheel liguoxin <span class="regexp">//</span> Centos中给权限</span><br><span class="line">su - liguoxin  <span class="regexp">//</span> 进入到该用户</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用清华大学开元软件镜像站安装 brew   <a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从本镜像下载安装脚本并安装 Homebrew / Linuxbrew</span></span><br><span class="line">git clone --depth=<span class="number">1</span> https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/git/</span>homebrew/install.git brew-install</span><br><span class="line"><span class="regexp">/bin/</span>bash brew-install/install.sh</span><br><span class="line">rm -rf brew-install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可从 GitHub 获取官方安装脚本安装 Homebrew / Linuxbrew</span></span><br><span class="line"><span class="regexp">/bin/</span>bash -c <span class="string">&quot;$(curl -fsSL https://github.com/Homebrew/install/raw/master/install.sh)&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将brew添加到环境变量中</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">HOMEBREW_API_DOMAIN</span>=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">HOMEBREW_BOTTLE_DOMAIN</span>=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">HOMEBREW_BREW_GIT_REMOTE</span>=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">HOMEBREW_CORE_GIT_REMOTE</span>=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">HOMEBREW_PIP_INDEX_URL</span>=<span class="string">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span></span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<blockquote>
<p>添加brew到环境变量</p>
</blockquote>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"># 以下针对基于 Apple Silicon CPU 设备上的 macOS 系统（命令行运行 uname -m 应输出 arm64）上的 Homebrew：</span><br><span class="line"><span class="keyword">test </span>-r ~/.bash_profile &amp;&amp; echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="keyword">test </span>-r ~/.zprofile &amp;&amp; echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27; &gt;&gt; ~/.zprofile</span><br><span class="line"></span><br><span class="line"># linux</span><br><span class="line"><span class="keyword">test </span>-d ~/.linuxbrew &amp;&amp; eval &quot;$(~/.linuxbrew/bin/brew shellenv)&quot;</span><br><span class="line"><span class="keyword">test </span>-d /home/linuxbrew/.linuxbrew &amp;&amp; eval &quot;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)&quot;</span><br><span class="line"><span class="keyword">test </span>-r ~/.bash_profile &amp;&amp; echo &quot;eval \&quot;\$($(brew --prefix)/bin/brew shellenv)\&quot;&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="keyword">test </span>-r ~/.profile &amp;&amp; echo &quot;eval \&quot;\$($(brew --prefix)/bin/brew shellenv)\&quot;&quot; &gt;&gt; ~/.profile</span><br><span class="line"><span class="keyword">test </span>-r ~/.zprofile &amp;&amp; echo &quot;eval \&quot;\$($(brew --prefix)/bin/brew shellenv)\&quot;&quot; &gt;&gt; ~/.zprofile</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将后续每个软件添加到环境变量</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/linuxbrew/.linuxbrew/opt/python@3.8/libexec/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="Linux-安装-NVIDIA-驱动"><a href="#Linux-安装-NVIDIA-驱动" class="headerlink" title="Linux 安装 NVIDIA 驱动"></a>Linux 安装 NVIDIA 驱动</h2><h3 id="Centos8"><a href="#Centos8" class="headerlink" title="Centos8"></a>Centos8</h3><p><img src="/blog/p/614a2564/Centos8%E9%85%8D%E7%BD%AE.png" alt="Centos8配置.png"></p>
<ol>
<li>先安装NVIDIA驱动<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重装系统时，不要后台安装，手动安装</span></span><br><span class="line"><span class="regexp">//</span> 先查看nvidia-smi</span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>
Data Center Driver For Linux X64</li>
</ol>
<p>版本:	515.105.01<br>发布日期:	2023.3.30<br>操作系统:	Linux 64-bit<br>CUDA Toolkit:	11.7<br>语言:	Chinese (Simplified)<br>文件大小:	346.89 MB</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>cn.download.nvidia.com<span class="regexp">/tesla/</span><span class="number">535.129</span>.<span class="number">03</span>/NVIDIA-Linux-x86_64-<span class="number">515.105</span>.<span class="number">01</span>.run</span><br><span class="line"></span><br><span class="line">sudo chmod +x NVIDIA-Linux-x86_64-<span class="number">515.105</span>.<span class="number">01</span>.run</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 切换到多用户目标模式，这会关闭图形界面</span><br><span class="line">sudo systemctl isolate multi-user.target </span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 安装新的驱动程序</span><br><span class="line">sudo bash NVIDIA-Linux-x86_64-<span class="number">515.105</span>.<span class="number">01</span>.run</span><br><span class="line"></span><br><span class="line">sudo yum install vulkan</span><br></pre></td></tr></table></figure>
<blockquote>
<p>卸载 NVIDIA</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/usr/</span>bin/nvidia-uninstall</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line">sudo bash NVIDIA-Linux-x86_64-<span class="number">515.105</span>.<span class="number">01</span>.run --uninstall</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 重新生成内核模块</span><br><span class="line">sudo dracut --force</span><br><span class="line"></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>安装CUDA</li>
</ol>
<blockquote>
<p><a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=CentOS&amp;target_version=7&amp;target_type=rpm_network" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=CentOS&amp;target_version=7&amp;target_type=rpm_network</a></p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里选择 runufile 本地安装</span></span><br><span class="line"><span class="attribute">sudo</span> yum install pkg-config xorg-x11-server-devel</span><br><span class="line"></span><br><span class="line"><span class="attribute">wget</span> https://developer.download.nvidia.com/compute/cuda/<span class="number">12</span>.<span class="number">3</span>.<span class="number">0</span>/local_installers/cuda_12.<span class="number">3</span>.<span class="number">0</span>_545.<span class="number">23</span>.<span class="number">06</span>_linux.run</span><br><span class="line"><span class="attribute">sudo</span> sh cuda_12.<span class="number">3</span>.<span class="number">0</span>_545.<span class="number">23</span>.<span class="number">06</span>_linux.run</span><br><span class="line"><span class="attribute">jH9gxicnew111</span></span><br></pre></td></tr></table></figure>

<h2 id="pip太慢"><a href="#pip太慢" class="headerlink" title="pip太慢"></a>pip太慢</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 更改pip源</span><br><span class="line">pip install -i https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple 安装的文件</span><br><span class="line">pip install -i https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple modelscope</span><br><span class="line">pip install -i https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2023-11-08 19:59:25 本次未成功测试，环境没配好，要固定nvidia cuda cudnn版本，否则会报错<br>相关链接：<br><a href="https://pytorch.org/get-started/locally/#supported-linux-distributions" target="_blank" rel="noopener">https://pytorch.org/get-started/locally/#supported-linux-distributions</a><br><a href="https://pytorch.org/get-started/previous-versions/" target="_blank" rel="noopener">https://pytorch.org/get-started/previous-versions/</a><br>NVIDIA-Linux-x86_64-460.106.00.run<br>cuda_11.2.2_460.32.03_linux.run</p>
<h2 id="安装web相关环境"><a href="#安装web相关环境" class="headerlink" title="安装web相关环境"></a>安装web相关环境</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Nginx</span></span><br><span class="line">brew install nginx</span><br><span class="line">brew info nginx <span class="regexp">//</span>查看相关信息，拿到安装路径</span><br><span class="line"><span class="regexp">//</span> ps:<span class="variable">$cd</span> <span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/</span>nginx/<span class="number">1.19</span>.<span class="number">8</span></span><br><span class="line">cp homebrew.mxcl.nginx.plist ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.nginx.plist</span><br><span class="line"><span class="comment">## 开机自启</span></span><br><span class="line">launchctl load -w ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.nginx.plist</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mysql</span></span><br><span class="line">brew install mysql</span><br><span class="line">brew info mysql <span class="regexp">//</span>查看mysql相关信息，拿到安装路径</span><br><span class="line"><span class="regexp">//</span> ps:<span class="variable">$cd</span> <span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/my</span>sql/<span class="number">8.0</span>.<span class="number">23</span>_1</span><br><span class="line">cp homebrew.mxcl.mysql.plist ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.mysql.plist</span><br><span class="line"><span class="comment">## 开机自启</span></span><br><span class="line">launchctl load -w ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.mysql.plist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">brew install php@<span class="number">7.4</span></span><br><span class="line">brew info php@<span class="number">7.4</span> <span class="regexp">//</span>查看mysql相关信息，拿到安装路径</span><br><span class="line"><span class="regexp">//</span> ps:<span class="variable">$cd</span> <span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/</span>php@<span class="number">7.4</span>/<span class="number">7.4</span>.<span class="number">16</span></span><br><span class="line">cp homebrew.mxcl.php@<span class="number">7.4</span>.plist ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.php@<span class="number">7.4</span>.plist</span><br><span class="line"><span class="comment">## 开机自启</span></span><br><span class="line">launchctl load -w ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.php@<span class="number">7.4</span>.plist</span><br><span class="line"></span><br><span class="line">pecl install swoole <span class="comment"># 这里需要注意 swoole扩展开启部分功能需要这么写</span></span><br><span class="line">&gt; ln -s <span class="regexp">/opt/</span>homebrew<span class="regexp">/Cellar/</span>pcre2<span class="regexp">/10.36/i</span>nclude<span class="regexp">/pcre2.h /</span>opt<span class="regexp">/homebrew/</span>Cellar<span class="regexp">/php@7.4/</span><span class="number">7.4</span>.<span class="number">18</span><span class="regexp">/include/</span>php<span class="regexp">/ext/</span>pcre/pcre2.h</span><br><span class="line">&gt; pecl install swoole</span><br><span class="line">&gt; yes</span><br><span class="line">&gt; yes --with-openssl-dir=<span class="regexp">/opt/</span>homebrew<span class="regexp">/opt/</span>openssl@<span class="number">1.1</span>/</span><br><span class="line">&gt; yes</span><br><span class="line">&gt; yes</span><br><span class="line">&gt; yes</span><br><span class="line"></span><br><span class="line">pecl install xdebug</span><br><span class="line">pecl install redis</span><br></pre></td></tr></table></figure>

<h2 id="安装-部分扩展-shivammathur-x2F-php"><a href="#安装-部分扩展-shivammathur-x2F-php" class="headerlink" title="安装 部分扩展 shivammathur&#x2F;php"></a>安装 部分扩展 shivammathur&#x2F;php</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">## 教程 <span class="selector-tag">https</span>:<span class="comment">//github.com/shivammathur/homebrew-extensions</span></span><br><span class="line"></span><br><span class="line">## 如果报错：<span class="selector-tag">you</span> <span class="selector-tag">must</span> <span class="selector-tag">configure</span> <span class="selector-tag">with</span> `<span class="selector-tag">--enable-openssl</span>` <span class="selector-tag">to</span> <span class="selector-tag">support</span> <span class="selector-tag">ssl</span> <span class="selector-tag">connection</span> <span class="keyword">when</span> compiling Swoole</span><br><span class="line">### 更新一下swoole就行</span><br><span class="line">brew remove swoole<span class="variable">@7</span>.<span class="number">4</span></span><br><span class="line">brew install shivammathur/extensions/swoole<span class="variable">@7</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>yes --with-openssl-dir&#x3D;&#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;openssl@3<br>yes –with-pcre2-dir&#x3D;&#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;pcre2&#x2F;</p>
<p>ln -s &#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;pcre2&#x2F;include&#x2F;pcre2.h &#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;<a href="mailto:&#x70;&#x68;&#x70;&#x40;&#56;&#x2e;&#x31;">&#x70;&#x68;&#x70;&#x40;&#56;&#x2e;&#x31;</a>&#x2F;include&#x2F;php&#x2F;ext&#x2F;pcre&#x2F;pcre2.h<br>yes</p>
<h2 id="使用alias添加一个快捷键"><a href="#使用alias添加一个快捷键" class="headerlink" title="使用alias添加一个快捷键"></a>使用alias添加一个快捷键</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 经常会使用到的比如cd一个经常进入的path</span></span><br><span class="line"><span class="built_in">alias</span> cdphpbin=<span class="string">&quot;cd /opt/homebrew/etc/php/7.4/&quot;</span></span><br><span class="line"><span class="built_in">alias</span> cdnginxbin=<span class="string">&quot;cd /opt/homebrew/etc/nginx/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述的快捷键在重启电脑后会失效，所以要编辑 ~/.zshr</span></span><br><span class="line">vim ~/.zshr</span><br><span class="line">添加相应的指令</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h2 id="给shell安装一个主题"><a href="#给shell安装一个主题" class="headerlink" title="给shell安装一个主题"></a>给shell安装一个主题</h2><blockquote>
<p>ohmyz <a href="https://ohmyz.sh/#install" target="_blank" rel="noopener">https://ohmyz.sh/#install</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">安装后根据提示设置 ~/.zshrc</span></span><br></pre></td></tr></table></figure>

<img src="/blog/p/614a2564/ohmyz.png" class="" title="ohmyz主题">

<h2 id="给shell安装自动补全"><a href="#给shell安装自动补全" class="headerlink" title="给shell安装自动补全"></a>给shell安装自动补全</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>zsh zsh-completions</span><br></pre></td></tr></table></figure>

<img src="/blog/p/614a2564/shell%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8.png" class="" title="shell自动补全">

<h2 id="安装cask"><a href="#安装cask" class="headerlink" title="安装cask"></a>安装cask</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>zsh cask</span><br></pre></td></tr></table></figure>

<h2 id="安装v2ray"><a href="#安装v2ray" class="headerlink" title="安装v2ray"></a>安装v2ray</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>v2ray</span><br><span class="line"><span class="comment"># 设置config.json即可</span></span><br></pre></td></tr></table></figure>

<h2 id="安装启动命令"><a href="#安装启动命令" class="headerlink" title="安装启动命令"></a>安装启动命令</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>zsh cask</span><br></pre></td></tr></table></figure>

<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>已损坏，无法打开，您应该将它移到废纸篓<br><code>sudo xattr -d com.apple.quarantine /Applications/xxx.app</code></p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>杂谈：中国财富的九个层级</title>
    <url>/blog/p/80f3ea77/</url>
    <content><![CDATA[<p>不断刷新自己的认知，让自己脱胎换骨，但是说实话挺痛苦的。。</p>
<span id="more"></span>

<h2 id="第一层：神秘层"><a href="#第一层：神秘层" class="headerlink" title="第一层：神秘层"></a>第一层：神秘层</h2><p>处于中国财富最顶端的，一般都神龙见首不见尾，不出事你根本可能连听都没听过。再比如北京某企业市值超过上千亿，但作为发起人的股东居然是一群婴儿和儿童。这些人往往站在很多大公司后面，面目模糊，但却掌握着真正的财富。这个层级我们称为神秘层。</p>
<img src="/blog/p/80f3ea77/%E7%A5%9E%E7%A7%98%E5%B1%82.jpg" class="" title="神秘层.jpg">

<h2 id="第二层：趋势层"><a href="#第二层：趋势层" class="headerlink" title="第二层：趋势层"></a>第二层：趋势层</h2><p>第二个层级的人，是一些行业的风云领袖，比如阿里的马云、腾讯的马化腾、华为的任正非，长江实业的李嘉诚等等。他们强大到已经可以决定一个行业的兴衰，大到已经不能倒闭的程度。这个层级人的财富已经不仅仅来自于国内，他们早就开始规划世界的版图，他们的财富触角随时可以抵达政策允许的地方。相比于那些天天想着跟趋势共舞的企业家来说，他们就是造趋势的人。这个层级我们叫趋势层。</p>
<img src="/blog/p/80f3ea77/%E9%A9%AC%E4%BA%91.jpg" class="" title="马云.jpg">

<h2 id="第三层：爆发层"><a href="#第三层：爆发层" class="headerlink" title="第三层：爆发层"></a>第三层：爆发层</h2><p>第三个层级的人，是一些创业成功的企业家，他们跟第二个层级的区别在于，他们并没有造趋势的能力，他们仅仅是在某个领域取得了建树。比如很多上市公司的董事长们大部分是在这个层级。他们通过上市的运作，已经实现了财富的倍增。在外人眼中他们已经是富豪的身份，但如果趋势没了，也可能迅速败落。这个层级我们叫爆发层。</p>
<img src="/blog/p/80f3ea77/%E4%BC%81%E4%B8%9A%E5%AE%B6.jpg" class="" title="企业家.jpg">

<h2 id="第四层：资源层"><a href="#第四层：资源层" class="headerlink" title="第四层：资源层"></a>第四层：资源层</h2><p>第四个层级的人，是一些明星名人。他们一般跟上面三个层级有着千丝万缕的联系，在这个时代，明星有帮富豪们撑场面的作用，而明星帮他们撑场面的代价，就必须要分享利益。“不经意间”的一些信息，就会让明星们赚得盆满钵满。这个层级的人往往是要靠资源来获得财富，所以我们叫资源层。</p>
<img src="/blog/p/80f3ea77/%E6%98%8E%E6%98%9F.jpg" class="" title="明星.jpg">

<h2 id="第五层：资本层"><a href="#第五层：资本层" class="headerlink" title="第五层：资本层"></a>第五层：资本层</h2><p>第五个层级的人，是投资人，私募基金负责人，基金经理，保险团队负责人等等。这部分是通过资本在市场上的运作，来获得增值。他们不做实业，实业在他们眼中就是资本运作的对象罢了。这部分人看起来挺风光，其实压力巨大无比，因为这个层级竞争压力非常剧烈。我们称他们为资本层。</p>
<img src="/blog/p/80f3ea77/%E6%8A%95%E8%B5%84%E4%BA%BA.jpg" class="" title="投资人.jpg">

<h2 id="第六层：溢价层"><a href="#第六层：溢价层" class="headerlink" title="第六层：溢价层"></a>第六层：溢价层</h2><p>第六个层级的人，是大企业职业经理人，知名律师，有名的医生，稀缺的自由职业者等等。这部分人往往是靠能力赢得财富，能力越强，名气越大，财富越多。这个层级的人跟下面的层级比，往往具有溢价财富，名声往往会带给他们超出能力的财富。我们成为溢价层。</p>
<img src="/blog/p/80f3ea77/%E7%BB%8F%E7%90%86%E4%BA%BA.jpg" class="" title="经理人.jpg">

<h2 id="第七层：中产层"><a href="#第七层：中产层" class="headerlink" title="第七层：中产层"></a>第七层：中产层</h2><p>第七个层级的人，是我们通常说的中产阶级。这部分人有着前六个层级的梦想，本质上却生活在社会的底层，因为一有点风吹草动，比如父母生个病，他们半生的积累就功亏一篑。好在他们在城市里基本已经扎下根来，往往他们已经贷款买了房子，买了车，买了点理财产品，他们小心翼翼地呵护着自己的财富。他们既非常警惕的上面的人来掠夺自己，又非常刻意地拉开与下面的距离，我们称他们为中产层。</p>
<img src="/blog/p/80f3ea77/%E4%B8%AD%E4%BA%A7.jpg" class="" title="中产.jpg">

<h2 id="第八层：韭菜层"><a href="#第八层：韭菜层" class="headerlink" title="第八层：韭菜层"></a>第八层：韭菜层</h2><p>第八个层级的人，是普通打工一族。他们起早贪黑地在城市里奔波，只要功劳不被人抢走，年底能发个双薪就感恩戴德了。他们在城市里没有依靠感，虽然有着可能不错的薪水，但因为种种原因错过了财富增长的机会，比如没有在前几年买房，所以他们经常发出要逃离北上广的哀叹。这个群体缴纳财富的智商税是最多的，他们需要经常被收割，否则就会变成中产阶级，所以我们称他们为韭菜层。</p>
<img src="/blog/p/80f3ea77/%E9%9F%AD%E8%8F%9C.jpg" class="" title="韭菜.jpg">

<h2 id="第九层：草根层"><a href="#第九层：草根层" class="headerlink" title="第九层：草根层"></a>第九层：草根层</h2><p>第九个层级的人，是没有稳定收入的人，比如他们在享受低保，或者在高危行业，他们往往只能靠出卖体力来获得报酬。哪怕他们生活在城市里，他们也不属于城市，比如孩子教育，比如医疗社保，跟他们都没什么关系。这个层级的人我们称为草根层。</p>
<img src="/blog/p/80f3ea77/%E7%A9%B7%E4%BA%BA.jpg" class="" title="穷人.jpg">

<h2 id="如何升级？"><a href="#如何升级？" class="headerlink" title="如何升级？"></a>如何升级？</h2><p>一个人身处某一个层级，跟能力有很大关系，跟人脉很有关系，但最重要的是思维。所谓穷人思维就是不管给你多少财富，你都可能挥霍一空，因为你根本不知道如何腾挪转移去获得增值。我们在看清层级的同时，也应该看懂每个层级人的思维模式，这样你才可能当机会到来的时候，一撮而就。</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
  </entry>
  <entry>
    <title>二次元</title>
    <url>/blog/p/9422d617/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<blockquote>
<p><a href="https://www.japanesewithanime.com/2017/11/gakusei-meaning.html#danshikousei-meaning" target="_blank" rel="noopener">https://www.japanesewithanime.com/2017/11/gakusei-meaning.html#danshikousei-meaning</a></p>
</blockquote>
<p>JD 这个词的意思是joshi  daigakusei  女子大学生，日语中的“大学女生”。<br>JK 这个词的意思是joshi  koukousei   女子高中生<br>DK 这个词的意思是danshi koukousei   男子高中生<br>JC 这个词的意思是joshi  chuugakusei 女子中学生，日语中的“中学女孩”。<br>JS 这个词的意思是joshi  shougakusei 女子小学生，日语中的“小学女生”。<br>如果在JS，JC，JK，JD之后添加一个数字。这个数字代表学年。<br>JS1 小学1年级生</p>
<p>JK制服<br>    款式<br>        水手服<br>            领子分类(从北到南)<br>                札幌襟(北海道附近)：领子是开得最短的，领型有弧度但不及肩宽，没有护胸布。<br>                关东襟(东京附近)：领子开得比札幌襟长，一般是和口袋齐平的，领子是直线型，没有弧度，宽度不及肩宽，护胸布可有可无。<br>                关西襟(大阪、京都、神户附近)：领子开得比关东襟长，但长度不及名古屋襟，一般开到口袋的中间。领子是直线型且没有弧度，其宽度与肩同宽。<br>                        而且关西襟的护胸布（日语：胸当て）很大，不可拆卸。（也有可以拆卸的，但是拆掉之后穿就会露出胸部）。<br>                名古屋襟(名古屋就是关西)：领子开得超长，一般到口袋一下也就是差不多到腰那里，领子是直线型没弧度，宽度与肩同宽。护胸布不可拆卸。<br>            襟线<br>                亲子襟线、变形襟等<br>                一本线领子上只有一条襟线,二本线平行的两条襟线,以此类推.襟线没什么特殊含义,只是从颜色和襟线的数量上区分学校<br>        西装服<br>    时令<br>        夏服<br>        中间服<br>        冬服<br>    配件<br>        背心裙<br>        衬衫<br>        开衫<br>        毛衣<br>        领结<br>            领结 一般是蝴蝶结，金鱼结等，有直接卖的三角巾或者打好的领结<br>            领绳 一般就是各种颜色的绳子系在胸前。颜色款式可以自己搭配。<br>        马甲<br>        裙褶皱</p>
<p>正统<br>    制服裙<br>        纯色裙(纯色基础款)<br>        格子裙(有格子图案)<br>    a字裙<br>    百褶裙<br>    工字褶裙<br>    上衣<br>        颜色<br>        襟线(肩上的横杠)<br>            无本一本二本三本、蛇腹、母子</p>
<p>山正(山寨和正品)<br>    版型正统，不是抄袭就是正<br>    正品襟线 不反光<br>    正统JK制服水手服上衣是又宽又短的，裙子也是膝盖左右，襟线不反光，上身非常好看，显得整个人都青春活泼起来，没有风尘感</p>
<p>裙长在膝盖及膝盖以上 &#x3D; 普通裙(优等)<br>超过膝盖 &#x3D; 不良裙</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
  </entry>
  <entry>
    <title>产品设计总结</title>
    <url>/blog/p/2252453f/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="用户账户-账号-体系"><a href="#用户账户-账号-体系" class="headerlink" title="用户账户(账号)体系"></a>用户账户(账号)体系</h2><h3 id="账号体系的类别"><a href="#账号体系的类别" class="headerlink" title="账号体系的类别"></a>账号体系的类别</h3><p>自定义账号<br>    账号+密码<br>邮箱账号<br>    邮箱+密码<br>手机账号<br>    手机+密码(验证码)<br>第三方平台<br>    用户在第三方平台上将部分的信息授权至我方账号体系当中<br>    微信、QQ、微博<br>        包含的信息：昵称&#x2F;头像&#x2F;地址&#x2F;省市区</p>
<h3 id="设计账号体系"><a href="#设计账号体系" class="headerlink" title="设计账号体系"></a>设计账号体系</h3><p>相关字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># user</span><br><span class="line">id create_at</span><br><span class="line"></span><br><span class="line"># auth</span><br><span class="line">phone email username</span><br><span class="line"></span><br><span class="line"># user_base_info</span><br><span class="line">nickname //第一次创建账号时，使用自定义或者第三方授权过来的昵称</span><br><span class="line"></span><br><span class="line"># 第三方平台</span><br><span class="line">type 微信 微博 QQ</span><br><span class="line">unionid</span><br><span class="line">openid </span><br></pre></td></tr></table></figure>

<h3 id="账号体系的核心流程"><a href="#账号体系的核心流程" class="headerlink" title="账号体系的核心流程"></a>账号体系的核心流程</h3><h4 id="注册-和-登陆流程"><a href="#注册-和-登陆流程" class="headerlink" title="注册 和 登陆流程"></a>注册 和 登陆流程</h4><p>一切都是以手机号为准，无论哪个平台注册都需要手机号验证。<br>第三方注册登陆流程<br>    通过第三方授权成功，返回信息至我方登陆API，如果没有账户存在，则要求绑定手机号</p>
<h4 id="找回密码流程"><a href="#找回密码流程" class="headerlink" title="找回密码流程"></a>找回密码流程</h4><p>首先通过手机号查找，但是由于手机号会发生更换，并且当手机卡停机一段时间后手机运营商会重新投递到市场中，导致其他人能够使用到这个手机号，最后篡改信息<br>所以核心需要用户绑定更为深层次的信息，</p>
<h4 id="风控流程"><a href="#风控流程" class="headerlink" title="风控流程"></a>风控流程</h4><h2 id="提升用户体验的设计"><a href="#提升用户体验的设计" class="headerlink" title="提升用户体验的设计"></a>提升用户体验的设计</h2><h3 id="手机号输入框，自动采用3-4-4的方式留出空格，方便用户随时进行校验"><a href="#手机号输入框，自动采用3-4-4的方式留出空格，方便用户随时进行校验" class="headerlink" title="手机号输入框，自动采用3-4-4的方式留出空格，方便用户随时进行校验"></a>手机号输入框，自动采用3-4-4的方式留出空格，方便用户随时进行校验</h3><h3 id="精准的错误提示"><a href="#精准的错误提示" class="headerlink" title="精准的错误提示"></a>精准的错误提示</h3><p>例如：</p>
<ol>
<li>参数错误</li>
<li>用户名已存在</li>
</ol>
<p>选择更精准的错误提示，提高用户体验</p>
<h3 id="输入数字的时候，自动打开数字键盘"><a href="#输入数字的时候，自动打开数字键盘" class="headerlink" title="输入数字的时候，自动打开数字键盘"></a>输入数字的时候，自动打开数字键盘</h3><h3 id="有前置条件的按钮可置灰，输入信息后恢复可点击状态"><a href="#有前置条件的按钮可置灰，输入信息后恢复可点击状态" class="headerlink" title="有前置条件的按钮可置灰，输入信息后恢复可点击状态"></a>有前置条件的按钮可置灰，输入信息后恢复可点击状态</h3><p>例如用户正在输入账号密码进行登陆，当输入结果符合要求的时候，按钮恢复可点击的状态<br>可以减少不必要的点击</p>
<h3 id="密码提供显示-x2F-隐藏按钮"><a href="#密码提供显示-x2F-隐藏按钮" class="headerlink" title="密码提供显示&#x2F;隐藏按钮"></a>密码提供显示&#x2F;隐藏按钮</h3>]]></content>
  </entry>
  <entry>
    <title>其他</title>
    <url>/blog/p/6e23c48/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="多OS互传软件"><a href="#多OS互传软件" class="headerlink" title="多OS互传软件"></a>多OS互传软件</h2><p><a href="https://landrop.app/#downloads" target="_blank" rel="noopener">https://landrop.app/#downloads</a></p>
<table>
<thead>
<tr>
<th>Platform</th>
<th>Version</th>
</tr>
</thead>
<tbody><tr>
<td>iOS</td>
<td>0.1.5</td>
</tr>
<tr>
<td>Android</td>
<td>0.1.5</td>
</tr>
<tr>
<td>macOS</td>
<td>0.4.0</td>
</tr>
<tr>
<td>Windows</td>
<td>0.4.0</td>
</tr>
<tr>
<td>Linux</td>
<td>0.4.0</td>
</tr>
</tbody></table>
<h2 id="Google-浏览器无法翻译"><a href="#Google-浏览器无法翻译" class="headerlink" title="Google 浏览器无法翻译"></a>Google 浏览器无法翻译</h2><blockquote>
<p>Google搜索快捷URL <a href="https://www.google.com/search?q=%E6%9C%80%E6%96%B0+ip+google%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BF%BB%E8%AF%91%E6%97%A0%E6%B3%95%E7%BF%BB%E8%AF%91&amp;sxsrf=AJOqlzV4U5Ocu0Te4Hb9jd5UfRkizevn7g:1675319918786&amp;source=lnt&amp;tbs=qdr:m&amp;sa=X&amp;ved=2ahUKEwjow5OFnfb8AhVDRzABHUTCCQcQpwV6BAgBEB4&amp;biw=1680&amp;bih=844&amp;dpr=2" target="_blank" rel="noopener">https://www.google.com/search?q=%E6%9C%80%E6%96%B0+ip+google%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BF%BB%E8%AF%91%E6%97%A0%E6%B3%95%E7%BF%BB%E8%AF%91&amp;sxsrf=AJOqlzV4U5Ocu0Te4Hb9jd5UfRkizevn7g:1675319918786&amp;source=lnt&amp;tbs=qdr:m&amp;sa=X&amp;ved=2ahUKEwjow5OFnfb8AhVDRzABHUTCCQcQpwV6BAgBEB4&amp;biw=1680&amp;bih=844&amp;dpr=2</a><br>最新 <a href="https://www.maxiaobang.com/15434.html" target="_blank" rel="noopener">https://www.maxiaobang.com/15434.html</a></p>
</blockquote>
<p>编辑 host</p>
<ul>
<li>Mac：<code>sudo vim /etc/hosts</code><ul>
<li>刷新 <code>dscacheutil -flushcache</code><ul>
<li>Mac OS X 10.7 – 10.8：sudo killall -HUP mDNSResponder</li>
<li>Mac OS X 10.5 – 10.6：dscacheutil -flushcache</li>
<li>Mac OS X 10.4：lookupd -flushcache</li>
</ul>
</li>
</ul>
</li>
<li>Windows<ul>
<li>刷新 <code>ipconfig /flushdns</code></li>
</ul>
</li>
</ul>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"># Google翻译</span><br><span class="line"><span class="number">180.163.150.34</span> translate.googleapis.com</span><br><span class="line"><span class="number">180.163.150.34</span> translate.google.com</span><br></pre></td></tr></table></figure>

<p>Done！</p>
<h2 id="Mac-命令行开启代理"><a href="#Mac-命令行开启代理" class="headerlink" title="Mac 命令行开启代理"></a>Mac 命令行开启代理</h2><p>编辑文件：<code>open -e ~/.zshrc</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># proxy</span><br><span class="line">function proxyOff()&#123;</span><br><span class="line">    unset http_proxy</span><br><span class="line">    unset https_proxy</span><br><span class="line">    echo -e &quot;已关闭代理&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function proxyOn() &#123;</span><br><span class="line">    # 端口号在代理软件中查看Sock监听端口</span><br><span class="line">    export http_proxy=&quot;socks5://127.0.0.1:10809&quot;</span><br><span class="line">    export https_proxy=$http_proxy</span><br><span class="line">    echo -e &quot;已开启代理&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重载配置文件：<code>source ~/.zshrc</code><br>开启代理 <code>proxyOn</code><br>关闭代理 <code>proxyOff</code></p>
<h2 id="Mac-显示所有隐藏文件"><a href="#Mac-显示所有隐藏文件" class="headerlink" title="Mac 显示所有隐藏文件"></a>Mac 显示所有隐藏文件</h2><p>方式1：</p>
<ul>
<li><code>defaults write com.apple.finder AppleShowAllFiles -bool true</code></li>
<li><code>defaults write com.apple.finder AppleShowAllFiles -bool false</code><br>方式2：</li>
<li>显示和隐藏：三个按键一起按下<code>Command + Shift + .</code></li>
</ul>
<h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><h3 id="在Hyperf中使用-cs-fixer-格式化代码"><a href="#在Hyperf中使用-cs-fixer-格式化代码" class="headerlink" title="在Hyperf中使用 cs-fixer 格式化代码"></a>在Hyperf中使用 cs-fixer 格式化代码</h3><ol>
<li>创建文件：<code>.php_cs.php</code><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$header</span> = &lt;&lt;&lt;<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">EOF;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $header = &lt;&lt;&lt;&#x27;EOF&#x27;</span></span><br><span class="line"><span class="comment">// @author liguoxin</span></span><br><span class="line"><span class="comment">// @email guoxinlee129@gmail.com</span></span><br><span class="line"><span class="comment">// EOF;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">new</span> PhpCsFixer\Config())</span><br><span class="line">    -&gt;setRiskyAllowed(<span class="literal">true</span>)</span><br><span class="line">    -&gt;setRules([</span><br><span class="line">        <span class="string">&#x27;@PSR12&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;@Symfony&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;@DoctrineAnnotation&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;@PhpCsFixer&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;header_comment&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;comment_type&#x27;</span> =&gt; <span class="string">&#x27;PHPDoc&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;header&#x27;</span> =&gt; <span class="variable">$header</span>,</span><br><span class="line">            <span class="string">&#x27;separate&#x27;</span> =&gt; <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;after_declare_strict&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;array_syntax&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;syntax&#x27;</span> =&gt; <span class="string">&#x27;short&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;list_syntax&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;syntax&#x27;</span> =&gt; <span class="string">&#x27;short&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;concat_space&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;spacing&#x27;</span> =&gt; <span class="string">&#x27;one&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;blank_line_before_statement&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;statements&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;declare&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;general_phpdoc_annotation_remove&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;annotations&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;author&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;ordered_imports&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;imports_order&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;function&#x27;</span>, <span class="string">&#x27;const&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&#x27;sort_algorithm&#x27;</span> =&gt; <span class="string">&#x27;alpha&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;single_line_comment_style&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;comment_types&#x27;</span> =&gt; [</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;yoda_style&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;always_move_variable&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&#x27;equal&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&#x27;identical&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;phpdoc_align&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;align&#x27;</span> =&gt; <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;multiline_whitespace_before_semicolons&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;strategy&#x27;</span> =&gt; <span class="string">&#x27;no_multi_line&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;constant_case&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;case&#x27;</span> =&gt; <span class="string">&#x27;lower&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;class_attributes_separation&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;combine_consecutive_unsets&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;declare_strict_types&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;linebreak_after_opening_tag&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;lowercase_static_reference&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_useless_else&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;no_unused_imports&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;not_operator_with_successor_space&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;not_operator_with_space&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&#x27;ordered_class_elements&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;php_unit_strict&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&#x27;phpdoc_separation&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&#x27;single_quote&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;standardize_not_equals&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;multiline_comment_opening_closing&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">    ])</span><br><span class="line">    -&gt;setFinder(</span><br><span class="line">        PhpCsFixer\Finder::create()</span><br><span class="line">            -&gt;exclude(<span class="string">&#x27;public&#x27;</span>)</span><br><span class="line">            -&gt;exclude(<span class="string">&#x27;runtime&#x27;</span>)</span><br><span class="line">            -&gt;exclude(<span class="string">&#x27;vendor&#x27;</span>)</span><br><span class="line">            -&gt;in(<span class="keyword">__DIR__</span>)</span><br><span class="line">    )</span><br><span class="line">    -&gt;setUsingCache(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li>
<li>Composer安装包：<code>composer require friendsofphp/php-cs-fixer</code></li>
<li>在Composer中增加：<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cs-fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;php-cs-fixer --config=./.php_cs.php fix $1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>执行：<code>composer cs-fix</code></li>
<li>vscode配置文件(给idea配置格式化，save时格式化):<code>settings.json</code><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;intelephense.environment.phpVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7.4&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;intelephense.format.enable&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;[php]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;junstyle.php-cs-fixer&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;php-cs-fixer.onsave&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;php-cs-fixer.config&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.php_cs.php&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;php-cs-fixer.executablePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;extensionPath&#125;/php-cs-fixer.phar&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Vscode中复制变量无法复制-符号"><a href="#Vscode中复制变量无法复制-符号" class="headerlink" title="Vscode中复制变量无法复制$符号"></a>Vscode中复制变量无法复制$符号</h3><p>VsCode -&gt; setting -&gt; search “word separators” -&gt; 去掉”$”</p>
<h3 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h3><p>安装指定版本：<code>composer require overtrue/flysystem-qiniu:&quot;v版本&quot;</code><br>安装指定范围版本：<code>composer require overtrue/flysystem-qiniu:&quot;&gt;=v版本&quot;</code></p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><h3 id="广州高铁"><a href="#广州高铁" class="headerlink" title="广州高铁"></a>广州高铁</h3><p>顺地铁口：序依次 F H(最接近检票口)<br>FH方向，检票口从大到小 21-1(AB)</p>
<h3 id="出门"><a href="#出门" class="headerlink" title="出门"></a>出门</h3><p>公共：</p>
<ul>
<li>牙膏牙刷</li>
<li>吹风机</li>
<li>面霜</li>
</ul>
<h4 id="进行"><a href="#进行" class="headerlink" title="进行"></a>进行</h4><p>2套衣服</p>
<h4 id="远行"><a href="#远行" class="headerlink" title="远行"></a>远行</h4><p>n套衣服</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
  </entry>
  <entry>
    <title>分布式锁</title>
    <url>/blog/p/f3599f9f/</url>
    <content><![CDATA[<p>分布式锁，即分布式系统中的锁，目的是为了解决 分布式系统中控制共享资源访问 的问题。<br><br>以下是我的个人理解…</p>
<span id="more"></span>

<h2 id="分布式锁应该具备哪些条件："><a href="#分布式锁应该具备哪些条件：" class="headerlink" title="分布式锁应该具备哪些条件："></a>分布式锁应该具备哪些条件：</h2><ul>
<li>分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行</li>
<li>高可用的获取锁与释放锁</li>
<li>高性能的获取锁与释放锁</li>
<li>具备可重入特性（可理解为重新进入，由多于一个任务并发使用，而不必担心数据错误）</li>
<li>具备锁失效机制，即自动解锁，防止死锁</li>
<li>具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败</li>
</ul>
<h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="基于数据库"><a href="#基于数据库" class="headerlink" title="基于数据库"></a>基于数据库</h3><p>核心是 <code>数据库表的唯一索引</code>，唯一索引具有排他性。</p>
<p>缺点：</p>
<ul>
<li>性能有瓶颈。</li>
</ul>
<h3 id="基于缓存-redis-x2F-memcached-x2F-tair"><a href="#基于缓存-redis-x2F-memcached-x2F-tair" class="headerlink" title="基于缓存(redis&#x2F;memcached&#x2F;tair)"></a>基于缓存(redis&#x2F;memcached&#x2F;tair)</h3><p>核心是 <code>setnx</code> ，理论上讲使用缓存的方案效率最高。</p>
<h3 id="基于zookeeper"><a href="#基于zookeeper" class="headerlink" title="基于zookeeper"></a>基于zookeeper</h3><p>核心是创建瞬时节点，节点不能重复创建 保证排他性。一般用于配置中心</p>
<p>缺点：</p>
<ul>
<li>磁盘IO效率低下</li>
</ul>
<h2 id="下方是待处理的内容"><a href="#下方是待处理的内容" class="headerlink" title="下方是待处理的内容"></a>下方是待处理的内容</h2><h3 id="Redis实现"><a href="#Redis实现" class="headerlink" title="Redis实现"></a>Redis实现</h3><h4 id="Redis类"><a href="#Redis类" class="headerlink" title="Redis类"></a>Redis类</h4><h3 id="第二个版本-Mysql悲观锁实现-for-update"><a href="#第二个版本-Mysql悲观锁实现-for-update" class="headerlink" title="第二个版本 Mysql悲观锁实现 for update"></a>第二个版本 Mysql悲观锁实现 for update</h3><p>解决超发问题</p>
<p>注意，在 SQL 中加入的 for update 语句，意味着将持有对数据库记录的行更新锁（因为这里使用主键查询，所以只会对行加锁。如果使用的是非主键查询，要考虑是否对全表加锁的问题，加锁后可能引发其他查询的阻塞），那就意味着在高并发的场景下，当一条事务持有了这个更新锁才能往下操作，其他的线程如果要更新这条记录，都需要等待，这样就不会出现超发现象引发的数据一致性问题了。</p>
<p>有性能瓶颈，因为悲观锁的实现方式就是抢锁，当请求过多时，会堵塞进程，造成延迟甚至 bad request</p>
<h3 id="第三个版本-Mysql乐观锁-以及-CAS机制-实现-version"><a href="#第三个版本-Mysql乐观锁-以及-CAS机制-实现-version" class="headerlink" title="第三个版本 Mysql乐观锁 以及 CAS机制 实现(version)"></a>第三个版本 Mysql乐观锁 以及 CAS机制 实现(version)</h3><p>会有ABA的问题</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/ABA_problem" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/ABA_problem</a></p>
</blockquote>
<h3 id="第四个版本-重入机制"><a href="#第四个版本-重入机制" class="headerlink" title="第四个版本 重入机制"></a>第四个版本 重入机制</h3><p>有性能问题</p>
<h3 id="最终版本-Redis实现"><a href="#最终版本-Redis实现" class="headerlink" title="最终版本 Redis实现"></a>最终版本 Redis实现</h3><p>解决的问题：超发(原子性)、性能问题(内存操作，非阻塞Io多路复用机制)、</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>Mysql</tag>
        <tag>Redis</tag>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>electronjs</title>
    <url>/blog/p/801262bc/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="下载-fiddle"><a href="#下载-fiddle" class="headerlink" title="下载 fiddle"></a>下载 fiddle</h2><blockquote>
<p><a href="https://www.electronjs.org/fiddle" target="_blank" rel="noopener">https://www.electronjs.org/fiddle</a></p>
</blockquote>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">vim ~/.npmrc</span><br><span class="line"></span><br><span class="line">增加</span><br><span class="line">ELECTRON_MIRROR=<span class="string">&quot;https://cdn.npm.taobao.org/dist/electron/&quot;</span></span><br><span class="line"></span><br><span class="line">~ sudo ELECTRON_MIRROR=<span class="string">&quot;https://cdn.npm.taobao.org/dist/electron/&quot;</span> npm install -g electron --unsafe-perm=<span class="keyword">true</span> --allow-root</span><br><span class="line"></span><br><span class="line">cmd运行程序</span><br><span class="line">~ sudo <span class="regexp">/Applications/</span>Electron\ Fiddle.app<span class="regexp">/Contents/M</span>acOS/electron-fiddle</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>加密算法</title>
    <url>/blog/p/79dcde6c/</url>
    <content><![CDATA[<p>介绍经常用到的加密算法，不同场景对加密算法的选择。</p>
<span id="more"></span>


<h2 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h2><p><code>https://zhuanlan.zhihu.com/p/347114235</code></p>
<p>加密算法分 <code>对称加密</code> 和 <code>非对称加密</code>，其中<br><code>对称加密算法</code> 的加密与解密 密钥相同<br><code>非对称加密算法</code> 的加密密钥与解密 密钥不同，<br>此外，还有一类 不需要密钥 的 散列算法。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">常见的 对称加密 算法主要有 DES、<span class="number">3</span>DES、AES 等</span><br><span class="line">常见的 非对称算法 主要有 RSA、DSA 等</span><br><span class="line">散列算法 主要有 <span class="keyword">SHA-1、MD5 </span>等</span><br></pre></td></tr></table></figure>

<h3 id="对称加密-私钥-早期加密算法"><a href="#对称加密-私钥-早期加密算法" class="headerlink" title="对称加密(私钥)(早期加密算法)"></a>对称加密(私钥)(早期加密算法)</h3><p>发送放和接收方 使用相同的私钥<br>例子：</p>
<ul>
<li>寄快递 收快递 快递上了保险盒，两人都有相同的钥匙。<img src="/blog/p/79dcde6c/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png" class="" title="对称加密.png"></li>
</ul>
<h3 id="非对称加密-公开密钥加密算法"><a href="#非对称加密-公开密钥加密算法" class="headerlink" title="非对称加密(公开密钥加密算法)"></a>非对称加密(公开密钥加密算法)</h3><p><code>加密</code> 和 <code>解密</code> 使用不同的密钥(一公一私)</p>
<img src="/blog/p/79dcde6c/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png" class="" title="非对称加密.png">

<h3 id="常见的签名加密算法"><a href="#常见的签名加密算法" class="headerlink" title="常见的签名加密算法"></a>常见的签名加密算法</h3><h4 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h4><p>MD5 用的是 哈希函数，它的典型应用是对一段信息产生 信息摘要，以 防止被篡改。<br>严格来说，MD5 不是一种 加密算法 而是 摘要算法。<br>无论是多长的输入，MD5 都会输出长度为 128bits 的一个串 (通常用 16 进制 表示为 32 个字符)。</p>
<h4 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h4><p>SHA1 是和 MD5 一样流行的 消息摘要算法，然而 SHA1 比 MD5 的 安全性更强。<br>对于长度小于 2 ^ 64 位的消息，SHA1 会产生一个 160 位的 消息摘要。<br>基于 MD5、SHA1 的信息摘要特性以及 不可逆 (一般而言)，可以被应用在检查 文件完整性 以及 数字签名 等场景。</p>
<h4 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h4><p>HMAC 是密钥相关的 哈希运算消息认证码（Hash-based Message Authentication Code），HMAC 运算利用 哈希算法 (MD5、SHA1 等)，以 一个密钥 和 一个消息 为输入，生成一个 消息摘要 作为 输出。<br>HMAC 发送方 和 接收方 都有的 key 进行计算，而没有这把 key 的第三方，则是 无法计算 出正确的 散列值的，这样就可以 防止数据被篡改。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">测试结论：HMAC 算法实例在 多线程环境 下是 不安全的。但是需要在 多线程访问 时，进行同步的辅助类，使用 ThreadLocal 为 每个线程缓存 一个实例可以避免进行锁操作。</span><br></pre></td></tr></table></figure>

<h4 id="AES-x2F-DES-x2F-3DES算法"><a href="#AES-x2F-DES-x2F-3DES算法" class="headerlink" title="AES&#x2F;DES&#x2F;3DES算法"></a>AES&#x2F;DES&#x2F;3DES算法</h4><p>AES、DES、3DES 都是 对称 的 块加密算法，加解密 的过程是 可逆的。<br>常用的有 AES128、AES192、AES256 (默认安装的 JDK 尚不支持 AES256，需要安装对应的 jce 补丁进行升级 jce1.7，jce1.8)。</p>
<h4 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h4><p>RSA 加密算法是目前最有影响力的 公钥加密算法，并且被普遍认为是目前 最优秀的公钥方案 之一。<br>RSA 是第一个能同时用于 加密 和 数字签名 的算法，它能够 抵抗 到目前为止已知的 所有密码攻击，已被 ISO 推荐为公钥数据加密标准。</p>
]]></content>
      <tags>
        <tag>加密算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/blog/p/f8e09374/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>


<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>ECMAScript：javascript的国际规范(规格、标准)<br>ECMA：国际标准化组织<br>ECMAScript和JavaScript的关系是，前者是后者的规格（标准），后者是前者的一种实现<br>Vue支持所有兼容ECMAScript5的浏览器，不支持IE8 及以下版本，因为IE8 及以下版本 不支持ECMAScript</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">https://github.com/vuejs/vue</a><br>浏览器开发工具 Vue DevTool<br>开发版本 vue.js   包含完整的警告和调试模式<br>    || 区别是做了压缩(min)<br>生产版本 vue.min.js   优化了文件大小和速度，删除了警告，33.30KB min+gzip</p>
<p>1.min的意思是做了压缩<br>2.runtime的意思是只包含运行时版<br>3.完整版 &#x3D; 运行时版 + 编译器<br>4.打包工具打包好的文件是不需要编译器的，可选择运行时版<br>配合老的打包工具   基于构建工具使用         直接用于浏览器<br>    commonjs             vue.esm.js          vue.esm.browser.js</p>
<p>对于开发或学习 可以使用最新版本<br>    <script src="https://cdn.jsdelivr.net/npm/vue"></script><br>对于生产环境，推荐链接到一个明确的版本号和构建文件，防止新版本造成的不可预期的破坏<br>    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"></script><br>对于原生ES Modules<br>    <script type="module"><br>      import Vue from '<a href="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.esm.browser.js&#39;" target="_blank" rel="noopener">https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.esm.browser.js&#39;</a><br>    </script></p>
<p>babel javascript编译器<br>vue-cli</p>
<p>Class与Style绑定<br>    :class 支持 字符串 数组 对象<br>        字符串时，直接显示<br>        数组时，全部显示<br>        对象时，值需要有布尔值，且控制是否显示<br>        数组中可以嵌套对象语法<br>    :style 支持 字符串 数组 对象   特征：十分直观——看着非常像 CSS<br>        自动添加浏览器引擎前缀：例如：-webkit-  -moz-</p>
<p>v-bind:id &#x3D;&#x3D; :id<br>v-click:function &#x3D; @function<br>v-model 轻松实现表单输入和应用状态之间的双向绑定</p>
<p>父组件向子组件传递<br>    prop<br>子组件向父组件传递<br>    子组件：$emit(‘方法’)  触发自定义事件<br>    父组件  @方法名<br>插槽</p>
<p>vue-router<br>    路由</p>
<p>vuex<br>    state mutation action<br>    mapState<br>    mapActions<br>    1.template中使用<br>        $store.state.数据名<br>        $store.state.module.数据名<br>    2.methods：三种方式<br>        1.methods:mapActions([])<br>        2.methods:mapActions({})<br>        3.methods:{<br>            &#x2F;&#x2F;对象展开符，目的是为了和其他方法、计算属性公用<br>            …mapActions([]),<br>            …mapActions({}),<br>        }</p>
<p>v-自定义指令 场景：没有复杂到需要用组件处理，但又不是一个表达式能解决的情况</p>
<p>data的值如果是一个对象时，他会在这个组件的所有实例之间共享<br>我们希望每个组件实例都管理自己的数据，所以data必须返回对象</p>
<p>项目生产注意的问题<br>    1.选择vue构建版本 运行时版本<br>    2.CSP( Google Chrome Apps，会强制应用内容安全策略 (CSP)，不能使用 new Function() 对表达式求值)</p>
]]></content>
      <tags>
        <tag>Webpack</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>国钦的彤彤酱</title>
    <url>/blog/p/edb7fe0f/</url>
    <content><![CDATA[<p>内容不放出来啦</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
  </entry>
  <entry>
    <title>安卓反编译</title>
    <url>/blog/p/5001f0a0/</url>
    <content><![CDATA[<p>有时候想通过研究大厂的APP内部Mysql字段是如何设计的，但是大厂开发人员将信息传递的方式放入了TCP更深层的地方，尝试使用反编译的方式获取其数据信息，方便研究。</p>
<span id="more"></span>
<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>安卓 <code>Android app</code> 的包后缀是apk</p>
<p>工具：<code>apktool</code>：资源文件获取，可以提取出图片文件和布局文件进行使用查看<br>工具：<code>dex2jar</code>将apk反编译成Java源码（classes.dex转化成jar文件）<br>工具：<code>jd-gui</code>查看APK中classes.dex转化成出的jar文件，即源码文件</p>
<h2 id="资源文件获取-Apktool"><a href="#资源文件获取-Apktool" class="headerlink" title="资源文件获取 Apktool"></a>资源文件获取 Apktool</h2><p><code>apktool</code> 可以进行反编译，52pojie中有很多工具，全部都是集成了apktool工具进行操作的。<br>所以这里只介绍 <code>apktool</code> 的工具使用说明</p>
<p>官网 <code>https://ibotpeaches.github.io/Apktool/build/</code><br>github <code>https://github.com/iBotPeaches/Apktool</code></p>
<p><code>apktool</code> 源代码编译后的文件就是 <code>released</code>版本</p>
<h3 id="Mac切换不同版本的apktool"><a href="#Mac切换不同版本的apktool" class="headerlink" title="Mac切换不同版本的apktool"></a>Mac切换不同版本的apktool</h3><p>1.下载多个版本到根目录的apktool list文件夹中<br>2.<code>sudo cp apktool\ list/apktool_2.7.0.jar /usr/local/bin/apktool.jar</code><br>3.<code>chmod +x /usr/local/bin/apktool.jar</code></p>
<h3 id="Mac如何build"><a href="#Mac如何build" class="headerlink" title="Mac如何build"></a>Mac如何build</h3><p><code>https://ibotpeaches.github.io/Apktool/build/</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./gradlew build dist</span><br><span class="line"><span class="comment"># 以及</span></span><br><span class="line">sudo ./gradlew build <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h3 id="Mac如何反编译"><a href="#Mac如何反编译" class="headerlink" title="Mac如何反编译"></a>Mac如何反编译</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除之前编译的文件夹</span></span><br><span class="line">rm <span class="operator">-</span>rf app<span class="operator">-</span><span class="built_in">prod</span><span class="operator">-</span>release_encrypted_guanwang_16_align</span><br><span class="line"><span class="comment"># 反编译</span></span><br><span class="line">sudo apktool d app<span class="operator">-</span><span class="built_in">prod</span><span class="operator">-</span>release_encrypted_guanwang_16_align.apk</span><br></pre></td></tr></table></figure>

<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p><code>uki apk</code> 安全方面可能利用了apktool的bug，解码不使用<code>v2.0.0-RC2</code><br>会报</p>
<img src="/blog/p/5001f0a0/Could%20not%20decode%20arsc%20file.png" class="" title="Could not decode arsc file.png">

<p>但是使用了rc2版本之后依然会遇到下面的问题</p>
<ul>
<li>要使用java7 如何安装<a href="/blog/p/c8447915/" title="Java">Java</a></li>
<li>maven不再支持http的方式，尝试解决了一下，<br>在每个<code>repositories</code> 下面都修改了代码<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">repositories</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 这里需要注销这行 mavenCentral()</span></span><br><span class="line">    <span class="title class_">maven</span> <span class="punctuation">&#123;</span></span><br><span class="line">        url <span class="string">&quot;https://repo1.maven.org/maven2&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">maven</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">name</span> <span class="operator">=</span> <span class="string">&quot;forge&quot;</span></span><br><span class="line">        <span class="attr">url</span> <span class="operator">=</span> <span class="string">&quot;http://files.minecraftforge.net/maven&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="title class_">maven</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">name</span> <span class="operator">=</span> <span class="string">&quot;sonatype&quot;</span></span><br><span class="line">        <span class="attr">url</span> <span class="operator">=</span> <span class="string">&quot;https://oss.sonatype.org/content/repositories/snapshots/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
但是依然遇到了一些问题，就此放弃<img src="/blog/p/5001f0a0/problem2.png" class="" title="problem2.png"></li>
</ul>
<p>经测试</p>
<ul>
<li>酷狗apk，反编译通过，但是安全方面使用了混淆，所以源代码较难理解</li>
<li>微信apk，反编译通过，使用了混淆</li>
<li>Keep apk，反编译通过，</li>
<li>Soul apk，反编译通过，</li>
<li>积木 apk，未尝试</li>
<li>uki apk，反编译不通过</li>
</ul>
<h2 id="dex2jar-将apk反编译成Java源码（classes-dex转化成jar文件）"><a href="#dex2jar-将apk反编译成Java源码（classes-dex转化成jar文件）" class="headerlink" title="dex2jar 将apk反编译成Java源码（classes.dex转化成jar文件）"></a>dex2jar 将apk反编译成Java源码（classes.dex转化成jar文件）</h2><ol>
<li>解压apk</li>
<li>获取所有classes.dex(每一个dex都有相关代码)</li>
<li>执行<code>./d2j-dex2jar.sh ../keep_keep_homepage___default_7.39.0_73326892的副本/classes.dex</code></li>
</ol>
<h2 id="jd-gui-查看jar里面的文件"><a href="#jd-gui-查看jar里面的文件" class="headerlink" title="jd-gui 查看jar里面的文件"></a><code>jd-gui</code> 查看jar里面的文件</h2><h2 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h2><p>dex2jar <code>https://github.com/pxb1988/dex2jar</code></p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>实战：微信抢红包算法</title>
    <url>/blog/p/ff69a4f5/</url>
    <content><![CDATA[<p>红包是我做过最有成就感的一个功能🤗，上线之后也优化了一些bug，整体满意度90%，下面介绍一下详情：</p>
<span id="more"></span>

<p>S：公司产品是一款<code>社交性APP</code>，功能中包含用户间、用户与群组间的聊天，用户群体大部分是年轻人(18-30岁为主)。所以诞生了优先级很高的一个产品需求：<code>红包功能</code>，可以提高用户的活跃度。</p>
<p>T：团队开会立项，与前端<code>Android</code>和<code>IOS</code>同事确认事实方案后，完成产品开发以及测试。</p>
<p>A：由于该功能是基于腾讯IM的，所以我阅读了腾讯云相关的功能介绍，并与同事进行了沟通，明确了<code>各自分工</code>、<code>共同制定通话场景的业务文档(红包正常以及错误码标识)</code>、<code>工作优先级</code>、<code>日期规划</code>(完成、提测、正式上线日期)等。</p>
<p>R：</p>
<h3 id="个人难点"><a href="#个人难点" class="headerlink" title="个人难点"></a>个人难点</h3><ul>
<li><p><strong>红包采用哪种分配方式？</strong><br>经过不同部门共同探讨决定使用<code>均匀金额</code>的方式，基本原则也就是是：红包分配的钱数满足截尾正态随机数分布。</p>
<ul>
<li>其好处是减少抽取红包大小分布的方差，让更多的人抽取的红包在均值附近，同时仍给一小部分人抽取大红包的机会，总体来说增加了红包抽取人的积极性和游戏的公平性。</li>
<li>每个红包里面的金额是：<code>随机，额度在0.01和(剩余平均值*2)之间，并且保证每个用户最低能拿到1分钱</code>。</li>
<li>先抢后抢拿到红包的大小的期望是大致相等的</li>
<li>后抢的人<code>方差</code>大（依赖前面人抢的多少），波动较大，有较大几率拿到”手气最佳”，例如10个红包，前面的人都抢到了1分钱，最后一个人独揽99元。</li>
</ul>
</li>
<li><p><strong>红包里的金额什么时候算？</strong><br> 我们决策的依据是<code>数据的准确性&gt;性能</code>，所以我们选择了发红包的时候就算出每个红包内的金额，纳入追溯日志当中。</p>
</li>
<li><p><strong>红包发出去是否能够撤回？</strong><br> PM考虑到不同的主体(发红包用户、抢红包用户、未抢到红包用户、平台)之间的权衡，决定不能撤回。 说白了就是宁愿 发送红包的人发错一个人承担 也不要得罪 更多的人。</p>
</li>
<li><p><strong>红包如何设计？</strong></p>
<ul>
<li>发红包时拆分每个红包金额，将每个红包存储到Redis的list中，记录追溯日志</li>
<li>抢红包时，pop按照顺序逐个取出，记录追溯日志</li>
<li>当抢到最后一个红包时，完成后续处理(红包状态，手气最佳，结束该红包的追溯日志)</li>
</ul>
</li>
<li><p><strong>会不会出现多个手气最佳？</strong></p>
<ul>
<li>金额会出现一样的，但是手气最佳只有一个，先抢到就算</li>
</ul>
</li>
<li><p><strong>计算出错怎么办？</strong><br>  有回滚操作</p>
</li>
<li><p><strong>注意事项</strong><br>  红包总金额：<code>100元</code>，总抢的人数：<code>5个</code>，极小概率出现两个极限</p>
<ol>
<li>每个人抢到的都是0.01，那么最后一个人独揽</li>
<li>每个人抢到的都是<code>最大金额</code>，⚠️BUG⚠️！！！下方是详情介绍<table>
<thead>
<tr>
<th>抢红包的顺序</th>
<th>抢红包之前还剩</th>
<th>抢红包之前能拿到金额的范围</th>
<th>抢完之后总红包剩余</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>100</td>
<td>最低0.01 - 最高(100&#x2F;5)*2&#x3D;40</td>
<td>60</td>
</tr>
<tr>
<td>2</td>
<td>60</td>
<td>最低0.01 - 最高(60&#x2F;4)*2&#x3D;30</td>
<td>30</td>
</tr>
<tr>
<td>3</td>
<td>30</td>
<td>最低0.01 - 最高(30&#x2F;3)*2&#x3D;20</td>
<td>10</td>
</tr>
<tr>
<td>4</td>
<td>10</td>
<td>最低0.01 - 最高(10&#x2F;2)*2&#x3D;10</td>
<td>0</td>
</tr>
<tr>
<td>5</td>
<td>0</td>
<td>最低0.01 - 最高(0&#x2F;1)*2&#x3D;10</td>
<td>完蛋，最后一个人没得抢了🥵</td>
</tr>
</tbody></table>
</li>
</ol>
<p>  这种特殊情况最后一个人是拿不到金额的，所以算法中要保证剩余用户能拿到最少1分钱。</p>
<ul>
<li>解决方案：<code>拆红包金额算法</code> 增加 <code>重试功能</code>，最后一人没有金额则尝试重新计算。</li>
<li>如果总金额是5分钱，总数是5个人，那么算法直接取<code>平均值</code>1分钱，不走核心逻辑，提高效率。</li>
</ul>
</li>
</ul>
<h2 id="红包的类型"><a href="#红包的类型" class="headerlink" title="红包的类型"></a>红包的类型</h2><ol>
<li>拼手气红包：<code>总金额(用户填写)</code> &#x3D; <code>单个红包的金额(缺省)</code> * <code>红包个数(用户填写)</code></li>
<li>普通红包：<code>总金额(缺省)</code> &#x3D; <code>单个红包的金额(用户填写)</code> * <code>红包个数(用户填写)</code></li>
</ol>
<h3 id="拼手气红包，只能在群组中发送"><a href="#拼手气红包，只能在群组中发送" class="headerlink" title="拼手气红包，只能在群组中发送"></a>拼手气红包，只能在群组中发送</h3><p>用户输入的参数：总金额、红包个数<br>系统算出的参数：单个红包的金额(随机的，有大有小)</p>
<div style="width:50%;margin:0 auto;">
<img src="/blog/p/ff69a4f5/%E6%8B%BC%E6%89%8B%E6%B0%94%E7%BA%A2%E5%8C%85.png" class="" title="拼手气红包.png">
</div>

<h3 id="普通红包"><a href="#普通红包" class="headerlink" title="普通红包"></a>普通红包</h3><p>用户输入的参数：单个红包的金额、红包个数<br>系统算出的参数：总金额</p>
<div style="width:50%;margin:0 auto;">
<img src="/blog/p/ff69a4f5/%E6%99%AE%E9%80%9A%E7%BA%A2%E5%8C%85.png" class="" title="普通红包.png">
</div>


<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过测试小仙女们的无情测试，提出了一些特殊场景：</p>
<ul>
<li>如上方的两个极限情况</li>
<li>日志追溯功能</li>
</ul>
<p>上线后用户们的活跃度还是有大幅度提升的，我也真正体会到了算法的力量！成就感满满，谢谢大家阅读~</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="https://www.cnblogs.com/dreign/p/4610766.html" target="_blank" rel="noopener">https://www.cnblogs.com/dreign/p/4610766.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>实战</tag>
      </tags>
  </entry>
  <entry>
    <title>实战：在线售票功能</title>
    <url>/blog/p/fc5b94cd/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<ul>
<li>展示图<ul>
<li><img src="/blog/p/fc5b94cd/1.png" class="" title="展示图1"></li>
<li><img src="/blog/p/fc5b94cd/2.png" class="" title="展示图2"></li>
<li><img src="/blog/p/fc5b94cd/3.png" class="" title="展示图3"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>实战</tag>
      </tags>
  </entry>
  <entry>
    <title>有资源网(uziyuan.vip)总结</title>
    <url>/blog/p/5a4ef2d2/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><blockquote>
<p>基于vue全家桶(vue、vue-router、vuex)以及Element UI组件库开发</p>
</blockquote>
<ol>
<li>CDN：BootCDN</li>
<li>Referer防盗链</li>
<li>Js懒加载</li>
<li>减少Http连接数(合并优化)</li>
<li>减少Http请求次数(懒加载)</li>
<li>Base64编码</li>
<li>Ob页面静态化</li>
<li>开启浏览器缓存和文件压缩</li>
</ol>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><blockquote>
<p>基于Thinkphp5.1轻量级PHP框架开发</p>
</blockquote>
<h3 id="代码上的优化"><a href="#代码上的优化" class="headerlink" title="代码上的优化"></a>代码上的优化</h3><ol>
<li>Mysql双主热备</li>
<li>Redis双主热备</li>
<li>代码：策略模式</li>
<li>将TP5框架的文件改写成文件内存形式</li>
</ol>
<h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><ol>
<li>使用 <code>FaceBook</code> 的 <code>webdriver</code> 接口库，实现浏览器自动化</li>
<li>使用 <code>php-html-parser</code> 类库文件，将爬到的页面信息解析成对象</li>
<li><code>selenium webdriver</code></li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
  </entry>
  <entry>
    <title>小提琴</title>
    <url>/blog/p/1ckaiojcz/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>


<p>琴身<br>琴头<br>琴弓<br>面板<br>侧板<br>噻托  </p>
<p>调旋</p>
<h2 id="持琴"><a href="#持琴" class="headerlink" title="持琴"></a>持琴</h2><p>下巴靠紧，其他放松，左手不要托盘</p>
<p>右手臂：<br>大拇指中指相对应，弯曲不要僵硬<br>手臂略低，不能太高也不能太低<br>琴弓和琴要直<br>整体正方形</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序</title>
    <url>/blog/p/4618cb0a/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h1 id="微信小程序开发文档"><a href="#微信小程序开发文档" class="headerlink" title="微信小程序开发文档"></a>微信小程序开发文档</h1><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">input 组件</span><br><span class="line"><span class="built_in">style</span>属性可以设置输入的内容样式</span><br><span class="line">placeholder-<span class="built_in">style</span>属性可以设置显示的placeholder样式</span><br><span class="line"></span><br><span class="line"><span class="built_in">style</span>属性中的<span class="built_in">min</span>-<span class="built_in">width</span>可以设置输入的内容宽度</span><br><span class="line"></span><br><span class="line">#获取手机屏幕高度</span><br><span class="line">wx.getSystemInfoSync().windowHeight</span><br><span class="line">#获取手机屏幕宽度</span><br><span class="line">wx.getSystemInfoSync().windowWidth</span><br><span class="line"></span><br><span class="line">#设置div中的<span class="built_in">border</span>不占div的宽度</span><br><span class="line"><span class="built_in">box</span>-sizing: <span class="built_in">border</span>-<span class="built_in">box</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.dansheng</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="comment">/* 多余文字用省略号代替 */</span></span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="comment">/* 规定段落中的文本不进行换行 */</span></span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">duosheng&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">72px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;<span class="comment">/* 定义子元素在主轴上面的对齐方式 */</span></span><br><span class="line">    <span class="attribute">align-items</span>:center;<span class="comment">/* 定义子元素在侧轴上对齐的方式 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.between</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.around</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.end</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 横向 */</span></span><br><span class="line"><span class="comment">/* flex-start 主轴起点对齐(默认值)</span></span><br><span class="line"><span class="comment">flex-end 主轴结束点对齐</span></span><br><span class="line"><span class="comment">center 在主轴中居中对齐</span></span><br><span class="line"><span class="comment">space-between 两端对齐，除了两端的子元素分别靠向两端的容器之外，其他子元素之间的间隔都相等</span></span><br><span class="line"><span class="comment">space-around 每个子元素之间的距离相等，两端的子元素距离容器的距离也和其它子元素之间的距离相同。 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 纵向 */</span></span><br><span class="line"><span class="comment">/* stretch 填充整个容器(默认值)</span></span><br><span class="line"><span class="comment">flex-start 侧轴的起点对齐</span></span><br><span class="line"><span class="comment">flex-end 侧轴的终点对齐</span></span><br><span class="line"><span class="comment">center 在侧轴中居中对齐</span></span><br><span class="line"><span class="comment">baseline 以子元素的第一行文字对齐 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shuxian</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30</span>rpx;</span><br><span class="line">    <span class="comment">/* border-left:10rpx; */</span></span><br><span class="line">    <span class="comment">/* padding-right:10rpx; */</span></span><br><span class="line">    <span class="comment">/* border:6rpx solid #F59D1F; */</span></span><br><span class="line">    <span class="attribute">border</span>:<span class="number">6</span>rpx solid <span class="number">#F59D1F</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="comment">/* background-color: #333; */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30</span>rpx;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.f_left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.f_right</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page_block</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="comment">/* width: 100%; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page_block_title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1</span>rpx solid <span class="built_in">rgb</span>(<span class="number">231</span>,<span class="number">231</span>,<span class="number">231</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10</span>rpx <span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page_block_content</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">11pt</span>;</span><br><span class="line">    <span class="comment">/* width: 100%; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fenge_block</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>挖矿</title>
    <url>/blog/p/c9a57581/</url>
    <content><![CDATA[<p>家里有台无用的高配台式电脑，刚看到新闻比特币已经涨到6w&#x2F;个，好奇驱动，让我把这台windows利用起来，纯粹兴趣</p>
<span id="more"></span>
<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>虚拟币<br>    比特币 BTH<br>    以太坊 ETH</p>
<p>电子钱包</p>
<p>挖矿软件<br>    HIVE OS<br>    轻松矿工，抽水严重<br>    选用开源的挖矿软件 lolMiner</p>
<p>挖矿算力来源：GPU(显卡)<br>    首选RTX3060Ti 或3070<br>    次选3080&#x2F;3090，<br>矿池选择大的</p>
<p>挖矿计算器<br>    <a href="https://www.whattomine.com/" target="_blank" rel="noopener">https://www.whattomine.com</a></p>
<p>BTC <code>https://btc.com/</code><br>F2pool <code>https://www.f2pool.com/user/worker </code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#URL</span>:https:<span class="comment">//www.bminer.me/zh/</span></span><br><span class="line">wget https:<span class="comment">//www.bminercontent.com/releases/bminer-v16.4.5-53c7f21-amd64.tar.xz</span></span><br><span class="line">tar -zxvf bminer-v16.<span class="number">4.5</span>-<span class="number">53</span>c7f21-amd64<span class="selector-class">.tar</span><span class="selector-class">.xz</span></span><br><span class="line">cd bminer-v16.<span class="number">4.5</span>-<span class="number">53</span>c7f21</span><br><span class="line">vim mine_grin29<span class="selector-class">.sh</span></span><br><span class="line">./bminer -uri ethstratum:<span class="comment">//lee129.001:x@btc.f2pool.com:1314 -api 127.0.0.1:1880 </span></span><br><span class="line">bash mine_grin29.sh</span><br></pre></td></tr></table></figure>

<h2 id="比特币-点对点电子现金系统"><a href="#比特币-点对点电子现金系统" class="headerlink" title="比特币-点对点电子现金系统"></a>比特币-点对点电子现金系统</h2><p>白皮书 <code>https://wenku.baidu.com/view/c2070d7d657d27284b73f242336c1eb91a3733b0.html?rec_flag=default</code></p>
<p>传统交易系统：支付者-&gt;金融机构-&gt;接收者|基于信用｜第三方机构随时能够介入并处理|增加交易成本，限制交易规模(小额交易等)<br>新型交易系统：支付者-&gt;接收者|基于密码学｜点对点，属于不可逆支付|会有双重支付的问题</p>
<p>问题：双重交易<br>解决方案：网络通过随机散列对所有的交易都加上时间戳，作为一个在不断延伸的链条当中的一个块(交易记录)<br>区块中的交易信息如果被证工作量证明，则该区块下的所有交易无法被更改，除非发生系统攻击(完成相同的工作量证明)，下文会介绍相关内容</p>
<p>基本概念：</p>
<p>火币是交易所，但是只是平台方，买方卖方均是个人</p>
<p>区块链底层技术 <a href="https://www.chainnode.com/doc/5068" target="_blank" rel="noopener">https://www.chainnode.com/doc/5068</a><br>    出块时长<br>        采用HPoS共识机制，具有交易成本低、交易延时低、交易并发高等特点； 支持最大的验证人节点数量是 21个。<br>    共识机制<br>    智能合约<br>    密码技术<br>    多链融合<br>        可通过资产跨链桥，将ETH、BTC、稳定币等资产映射到Heco，实现方式为在源链上锁定一定数量的资产后在Heco生成对应数量的Token。 Heco鼓励社区开发者提供更多去中心化的跨链解决方案。</p>
<p>电子货币：数字签名<br>    当前所有者对<br>        前一次交易<br>        下一位拥有者的公钥<br>        上两个参数加起来 签署一个随机散列的数字签名，添加到电子货币的末尾<br>    发送给下一位拥有者<br>    下一位拥有者<br>        比对签名</p>
<p>货币交易的方案：<br>    所有交易必须被公开宣布<br>    整个系统中所有的参与者，都有唯一公认的历史交易序列(之前有权威性的交易历史，可供查询)<br>    收款人需要确保在交易期间绝大多数的节点都认为该交易是首次出现的</p>
<p>时间戳服务器</p>
<pre><code>              加上时间戳           加上时间戳          加上时间戳
</code></pre>
<p>正常交易的链条：交易1————-&gt;交易2————-&gt;交易3————-&gt;交易n(越往后，工作量证明)<br>恶意攻击，则必须重新从头计算到尾，但是如果正常链条一直在无限传播，并且CPU计算能力相同，恶意攻击的计算出来链条无法超过正常的链条，那就绝对安全<br><code>只要诚实的节点所控制的计算能力的总和，大于有合作关系的(cooperating)攻击者的计算能力的总和，该系统就是安全的。</code></p>
<p>规定：<br>    每一枚电子货币，都将自己的数字签名放在电子货币的末尾<br>    数字签名：每一位所有者上一次的交易 和 下一位拥有者的公钥 签署一个随机散列的数字签名</p>
<p>每个人都有公钥</p>
<p>A的公钥<br>上一个交易<br>B的公钥</p>
<p>比特币系统由单向列表组成的区块组成<br>    第一个区块叫创世纪块(genesis block)<br>    区块与区块之间由哈希链表关联(哈希指针hash pointers)<br>    每一个区块大小上限1MB，2000-3000笔交易<br>    每一个区块包含区块头和区块体<br>        区块头：<br>            自己区块的hash值<br>            上一个区块的hash值<br>            区块产生的时间戳<br>            难度(防止飞快发展的计算机算力提高减少区块生成的时间，这是个动态配置参数，来保证无论何种情况下比特币系统区块的生成时间始终保持在10分钟一个)<br>            …<br>            默克尔根(所有交易的最终hash值，目的就是为了证明)<br>        区块体：<br>            最下层是交易<br>            上层及以上都是hash值，层层的hash值，最上面是最终hash值</p>
<p>在比特币区块链网络中有很多节点，包括计算机、手机、矿机、服务器等等。在所有节点中分为：全节点和轻节点。<br>全节点（full node）：保存了区块的所有内容，区块头和区块体。<br>轻节点（light node）：只保存了区块头，比如手机中的比特币钱包。</p>
<p>由于轻节点中没有存交易具体信息，那有这样一个场景该怎么办呢：<br>zarten1用户转账给zarten2轻节点用户，zarten2如何知道此交易写入区块链了？或者说zarten1如何向zarten2证明交易已经写入区块链了？<br>为了解决上面问题，轻节点向全节点请求这个交易（上图中黄色标记的交易），全节点只需提供这个交易相关的哈希值（上图中红色标记的哈希值）即可。轻节点在本地根据这个交易的merkle proof计算出最后的根哈希值，然后对比本地区块头中的根哈希值是否一样，若一样，则证明此交易写入了区块链中。</p>
<p>若要证明某个交易不在区块链中，怎么办呢？<br>虽然比特币区块链中没有这个需求，但我们可以思考下如何实现这样需求。<br>第一种方案：全节点将整个区块所有交易信息发给轻节点，这样可以证明某个交易不在区块中，但这是非常不高效的方法且比较笨的方法。<br>第二种方案：思路还是根据merkle proof计算根哈希值，轻节点向全节点对这个交易发出请求，全节点为了证明此交易不在区块链中。</p>
<p>全节点只需以下这样做即可：<br>对区块中所有交易的哈希值进行排序，然后计算要证明的交易的哈希值，根据二分查找法来确定这个交易哈希值的位置，再将此位置相邻的2个交易merkle proof发送给轻节点。<br>轻节点只需以下这样做即可：<br>轻节点收到merkle proof后，根据merkle proof计算得到最后的根哈希值（root hash），若计算得到的根哈希值跟本地的区块头中的根哈希值比较一样，则证明此交易一定不在区块链中，因为如果在的话，最后计算出来的根哈希值比较必然是不一样的。</p>
<p>比特币：去中心化(说白了就是没有银行，支付方和接收方，也就是点对点的交易)，多人共同维护的点对点数字现金系统，比特币总量固定2100w个，特点是抗通货膨胀<br>法币：能够看到实物的货币<br>稳定币：具有稳定价值的加密货币，用来当作数字货币世界连接法币世界的媒介，USDT就是其中最出名的 <code>https://baike.baidu.com/item/%E6%B3%B0%E8%BE%BE%E5%B8%81</code><br>公链：就是公有链，而公有链是指全世界任何人都可读取、发送交易且交易能获得有效确认的、也可以参与其中共识过程的区块链。<br>区块链：由多个区块以单链结构组成的链条<br>区块：区块链中的区块<br>正常的交易链条：运行在各大厂商系统中的核心链条，也是最长的链条，基于随机数列的工作量证明<br>攻击者攻击方式：重新计算所有链条中各个区块的工作量，并且超过正常交易链条，需要强大算力<br>pool：cpu计算能力最大的链条<br>nodes：提供计算的节点，一般指所有矿工<br>可以随时离开或加入网络<br>并且将最长的工作量证明链条作为在该节点离线期间发生的交易的证明<br>系统是否安全的评判：诚实的节点所控制的计算机算力的总和 &gt; 攻击者所控制的计算机算力的总和，系统就是安全的<br>注意事项：<br>有关比特币相关的交易，在交易所例如火币平台上提交交易申请成功后，交易所会将该交易发至比特币交易系统，比特币交易不是实时的，每发生一笔比特币交易，在比特币系统当中会将这一笔交易存入分布式系统内存池，连同池内的其他交易等待算力证明，证明完成后交易会被打包进一个区块中，成为区块链当中的一个链节点，同时也更新了该链的长度，成为最新的数据链，最后公开该交易</p>
<p>职业矿工的入坑逻辑</p>
<ol>
<li>大批量购卡</li>
<li>组建矿机</li>
<li>假定挖矿过程中，币在交易所中只增不减，然后持续n个月的不停断工作<br> 退出<br> 处理币<br> 处理显卡<br> 超频<br> 设备调频的目的是为了收益最大化，也就是通过调整设备的能效比来优化矿机的收益<br>     以现有的设备整体情况，结合行情得出的设备整体净收益<br>         币池 产出比<br>         币价<br>         电价<br>         设备算力<br> 超频方式：下载官方固件安装，不然风险， 病毒 劫持矿机算力 抽水 设备损坏</li>
</ol>
<p>风险<br>    显卡坏</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>介绍比特币——点对点交易系统</li>
<li>介绍挖矿完整步骤(不深入)</li>
</ol>
<div class="tip">
虚拟币交易所无论是否受到监管，风险依旧，投机者建议提前查阅相关资料自行判断
</div>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>架构</title>
    <url>/blog/p/8f889db4/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><blockquote>
<p>请求的次数超过服务器的负载时</p>
</blockquote>
<ul>
<li>通常采取的方案是提高服务器的配置</li>
<li>第二种方案是增加服务器的台数(集群+负载均衡)</li>
<li>分布式架构(多台机器共同存储数据)</li>
</ul>
<p>架构演变<br>MVC -&gt; RPC -&gt; SOA -&gt; 微服务</p>
<h2 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h2><p>docker<br>负载均衡</p>
<p>|集群，高可用(每台机器的数据都相同)|分布式架构(多台机器共同存储数据)|RPC-服务(垂直)拆分<br>-|-|-|-<br>Nginx|无|无|<br>Mysql|双主热备|待填写|<br>Redis|主从(哨兵)|槽位算法|<br>RabbitMQ|主从|HA Proxy|<br>Zookeeper|主从|分布式|</p>
<h2 id="架构思路"><a href="#架构思路" class="headerlink" title="架构思路"></a>架构思路</h2><ol>
<li>阶段1，单击部署 Nginx php mysql redis memcached </li>
<li>阶段2，集群保证高可用</li>
<li>阶段3，分布式架构</li>
<li>阶段4，微服务</li>
<li>阶段5，</li>
</ol>
<h2 id="实战项目"><a href="#实战项目" class="headerlink" title="实战项目"></a>实战项目</h2><h3 id="高并发下全局session共享"><a href="#高并发下全局session共享" class="headerlink" title="高并发下全局session共享"></a>高并发下全局session共享</h3><p>问题描述：<code>负载均衡</code>后，<code>不同服务器session不一致</code>，导致需要重新登录(服务器需要共享session存储)<br>解决方案：</p>
<ol>
<li>Session 会话保持</li>
<li>Session 会话复制</li>
<li>Session 会话共享</li>
</ol>
<h4 id="Session-会话保持的含义是按照算法，让同一个用户始终被分配到某一台服务器，并存储数据，例如nginx的ip-hash"><a href="#Session-会话保持的含义是按照算法，让同一个用户始终被分配到某一台服务器，并存储数据，例如nginx的ip-hash" class="headerlink" title="Session 会话保持的含义是按照算法，让同一个用户始终被分配到某一台服务器，并存储数据，例如nginx的ip_hash"></a>Session 会话保持的含义是按照算法，让同一个用户始终被分配到某一台服务器，并存储数据，例如nginx的ip_hash</h4><p>导致的问题：</p>
<ol>
<li>负载不均衡</li>
<li>单台服务器数据丢失，该用户需要重新登录</li>
</ol>
<h4 id="Session-会话复制的含义是存储一份session数据后，将数据复制到集群的其他节点当中"><a href="#Session-会话复制的含义是存储一份session数据后，将数据复制到集群的其他节点当中" class="headerlink" title="Session 会话复制的含义是存储一份session数据后，将数据复制到集群的其他节点当中"></a>Session 会话复制的含义是存储一份session数据后，将数据复制到集群的其他节点当中</h4><p>全局会话复制：利用Delta Manager复制会话中的变更信息到集群中的所有其他节点。<br>非全局复制：使用Backup Manager进行复制，它会把Session复制给一个指定的备份节点。<br>导致的问题：</p>
<ol>
<li>集群、分布式规模很大的时候，非常低效</li>
</ol>
<h4 id="Session-会话共享的含义是将数据存储到统一的地方。"><a href="#Session-会话共享的含义是将数据存储到统一的地方。" class="headerlink" title="Session 会话共享的含义是将数据存储到统一的地方。"></a>Session 会话共享的含义是将数据存储到统一的地方。</h4><p>实现方式：</p>
<ol>
<li>php.ini 开启或者php框架中开启 session.auto_start(); </li>
<li>配置 session_set_save_handler($回调类，true);</li>
<li>在类中写清楚需要以redis方式存储即可</li>
</ol>
<p>redis key:<code>(string)sid:XXXXXX  value是user_id 有ttl</code></p>
<h3 id="高并发下秒杀商品"><a href="#高并发下秒杀商品" class="headerlink" title="高并发下秒杀商品"></a>高并发下秒杀商品</h3><blockquote>
<p><a href="https://juejin.im/post/5d407cb7f265da03d1552d5f" target="_blank" rel="noopener">https://juejin.im/post/5d407cb7f265da03d1552d5f</a></p>
</blockquote>
<p>问题描述：<br>实现方式：</p>
<ol>
<li>秒杀并发量非常高，必须使用kv内存数据库实现</li>
<li>在核心代码前(入口层)限制每秒请求次数</li>
<li>判断用户是否请求多次(5秒20次)，封禁</li>
<li>在程序入口处，一个账号只允许接受1个请求，其他请求过滤。</li>
<li>带宽&#x2F;机器配置要跟得上</li>
</ol>
<h3 id="高并发下商品超卖"><a href="#高并发下商品超卖" class="headerlink" title="高并发下商品超卖"></a>高并发下商品超卖</h3><p>问题描述：解决锁的问题</p>
<h3 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h3><p>问题描述：</p>
<h3 id="支付防抖动"><a href="#支付防抖动" class="headerlink" title="支付防抖动"></a>支付防抖动</h3><h2 id="架构方案2"><a href="#架构方案2" class="headerlink" title="架构方案2"></a>架构方案2</h2><p>代码部署</p>
<p>gitlab-runner-ci 代码管理+审查<br>k8s 容器快速部署<br>TracingAnalysis 链路追踪<br>    产品页面：<a href="https://www.aliyun.com/product/xtrace" target="_blank" rel="noopener">https://www.aliyun.com/product/xtrace</a><br>    控制台：<a href="https://tracing.console.aliyun.com/?xshare=1" target="_blank" rel="noopener">https://tracing.console.aliyun.com/?xshare=1</a><br>Prometheus 监控服务<br>    数据库监控<br>        Mysql<br>        MongoDB<br>    中间件监控<br>        nginx<br>        redis<br>        rabbitmq<br>    其他监控<br>        php<br>        k8s<br>        阿里云服务监控</p>
<p>微服务架构<br>    网站首页<br>        x.com<br>    商城<br>        api.store.x.com<br>        store.x.com</p>
<pre><code>用户表
下单 付款
</code></pre>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
  </entry>
  <entry>
    <title>实战：腾讯实时语音视频通话</title>
    <url>/blog/p/bcbac40b/</url>
    <content><![CDATA[<p>介绍基于腾讯IM的语音、视频通话实现步骤。</p>
<span id="more"></span>

<h2 id="功能背景"><a href="#功能背景" class="headerlink" title="功能背景"></a>功能背景</h2><p>公司产品是一款<code>社交性APP</code>，用户群体大部分是年轻人(18-30岁为主)。</p>
<p>所以诞生了优先级很高的一个产品需求：<code>语音、视频通话功能</code>，整体上讲，也能提高产品整体营收。</p>
<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>与前端<code>Android</code>和<code>IOS</code>同事确认事实方案后，完成产品开发以及测试。</p>
<h2 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h2><p>由于该功能是基于腾讯IM的，所以我阅读了腾讯云相关的功能介绍，并与同事进行了沟通，明确了<code>各自分工</code>、<code>共同制定通话场景的业务文档(心跳、开始和结束通话)</code>、<code>工作优先级</code>、<code>日期规划</code>(完成、提测、正式上线日期)等</p>
<p>个人难点：</p>
<ol>
<li>通话功能中嵌套了计费功能</li>
<li>语音通话、视频通话存在相同的特殊场景(网络异常的含义是指心跳无法按照原约定定时请求服务器)，如下</li>
</ol>
<h3 id="特殊异常场景"><a href="#特殊异常场景" class="headerlink" title="特殊异常场景"></a>特殊异常场景</h3><p>影响因素：</p>
<ul>
<li>多用户</li>
<li>断网情况(网络异常、进程异常)</li>
</ul>
<h4 id="正常通话以及挂断场景"><a href="#正常通话以及挂断场景" class="headerlink" title="正常通话以及挂断场景"></a>正常通话以及挂断场景</h4><p>用户<code>A</code> 与 用户<code>B</code>、用户<code>C</code> 的各种场景</p>
<ol>
<li><code>A</code> 请求与 <code>B</code> 通话(正常场景)</li>
<li><code>B</code> 未接通前 <code>A</code> 挂断(正常场景)</li>
<li><code>B</code> 未接通前 <code>B</code> 挂断(正常场景)</li>
<li><code>B</code> 接收后 <code>A</code> 挂断(正常场景)</li>
<li><code>B</code> 接收后 <code>B</code> 挂断(正常场景)</li>
</ol>
<h4 id="进程异常场景-例如：在手机中将-app-shuwdown"><a href="#进程异常场景-例如：在手机中将-app-shuwdown" class="headerlink" title="进程异常场景(例如：在手机中将 app shuwdown)"></a>进程异常场景(例如：在手机中将 app shuwdown)</h4><ol>
<li><code>A</code> 请求与 <code>B</code> 通话(正常场景)</li>
<li><code>B</code> 未接通前 <code>A</code> 杀死进程(非正常场景)</li>
<li><code>B</code> 未接通前 <code>B</code> 杀死进程(非正常场景)</li>
<li><code>B</code> 未接通前 <code>A</code>、<code>B</code> 同时杀死进程(非正常场景)</li>
<li><code>B</code> 接收后 <code>A</code> 杀死进程(非正常场景)</li>
<li><code>B</code> 接收后 <code>B</code> 杀死进程(非正常场景)</li>
<li><code>B</code> 接收后 <code>A</code>、<code>B</code>同时杀死进程(非正常场景)</li>
</ol>
<h4 id="网络异常场景"><a href="#网络异常场景" class="headerlink" title="网络异常场景"></a>网络异常场景</h4><ol>
<li><code>A</code> 请求与 <code>B</code> 通话(正常场景)</li>
<li><code>B</code> 未接通前 <code>A</code> 网络异常(非正常场景)</li>
<li><code>B</code> 未接通前 <code>B</code> 网络异常(非正常场景)</li>
<li><code>B</code> 未接通前 <code>A</code>、<code>B</code> 同时网络异常(非正常场景)</li>
<li><code>B</code> 接收后 <code>A</code> 网络异常(非正常场景)</li>
<li><code>B</code> 接收后 <code>B</code> 网络异常(非正常场景)</li>
<li><code>B</code> 接收后 <code>A</code>、<code>B</code>同时网络异常(非正常场景)</li>
</ol>
<h4 id="网络异常场景-重新恢复"><a href="#网络异常场景-重新恢复" class="headerlink" title="网络异常场景-重新恢复"></a>网络异常场景-重新恢复</h4><ol>
<li><code>A</code> 请求与 <code>B</code> 通话(正常场景)</li>
<li><code>B</code> 未接通前 <code>A</code> 网络异常，一段时间后恢复网络，继续通话(非正常场景)</li>
<li><code>B</code> 未接通前 <code>B</code> 网络异常，一段时间后恢复网络，继续通话(非正常场景)</li>
<li><code>B</code> 未接通前 <code>A</code>、<code>B</code> 同时网络异常，一段时间后恢复网络，继续通话(非正常场景)</li>
<li><code>B</code> 接收后 <code>A</code> 网络异常，一段时间后恢复网络，继续通话(非正常场景)</li>
<li><code>B</code> 接收后 <code>B</code> 网络异常，一段时间后恢复网络，继续通话(非正常场景)</li>
<li><code>B</code> 接收后 <code>A</code>、<code>B</code>同时网络异常，一段时间后恢复网络，继续通话(非正常场景)</li>
</ol>
<h2 id="代码实施"><a href="#代码实施" class="headerlink" title="代码实施"></a>代码实施</h2><h3 id="服务端API讲解（此API是客户端请求的，非腾讯服务器请求）"><a href="#服务端API讲解（此API是客户端请求的，非腾讯服务器请求）" class="headerlink" title="服务端API讲解（此API是客户端请求的，非腾讯服务器请求）"></a>服务端API讲解（此API是客户端请求的，非腾讯服务器请求）</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第一个API：通话接通前的验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startVoice</span>或<span class="title">startVideo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment"># 这里是不同的验证操作</span></span><br><span class="line">    <span class="comment">## 是否是允许的用户</span></span><br><span class="line">    <span class="comment">## 是否有足够的金币</span></span><br><span class="line">    <span class="comment">## 其他验证</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个API，通话接通后的持续心跳(作用是检验双方的通话状态)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heartbeat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment"># 存储心跳的相关信息，如果心跳没有及时更新，则执行挂断操作</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#第三个API，通话挂断操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">endVoice</span>或<span class="title">endVideo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">#这里处理音视频的正常挂断操作 以及 心跳检测到异常时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="重点补充"><a href="#重点补充" class="headerlink" title="重点补充"></a>重点补充</h3><ul>
<li>每个通话都有一个唯一Key和房间号，字段设计的方案为 <code>产品名+通话类型+IM房间号+唯一key+用户A(u_ID)+用户B(u_ID)</code>。</li>
<li>通话时长、用户所剩时长由后端<code>redis key</code>进行统计，因为需求中有：用户所剩时长还剩xx秒的时候要提示。</li>
<li>每个通话有多条心跳Log，进行统计和分析。</li>
<li>定时脚本处理 <code>脱机的语音通话</code>: 使用<code>Redis scan</code>处理异常的通话房间，并且上报，为了追溯且定位原因。<br>  <code>定时脚本：trtc分支的TrtcController.php</code></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>考虑到并发的问题，所以使用<code>redis+lua脚本</code>的方案解决<code>货币计算</code>等问题，思路和实现都OK。</li>
<li>和同事沟通成本最大的地方在<code>梳理通话时的不同场景</code>，很多种异常情况都要考虑。</li>
<li>完成这个功能之后，对自己的成长收益特别高，同时通话也是自己最满意的一个功能之一。</li>
<li>完成语音及视频通话功能且上线稳定后，月统计出<code>平均日收益提升至23个百分点</code>，老大还给了奖金，开心！</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>实战</tag>
      </tags>
  </entry>
  <entry>
    <title>水军的自我修养</title>
    <url>/blog/p/8845490c/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>职业买房人：house多，现金少，省现金，短期拆借，用卡过桥，等待基本盘足够大，钱就会自己滚起来。</p>
<blockquote>
<p>每年通货膨胀12%</p>
</blockquote>
<p>|深圳|太原|<br>-|-|-<br>十年前|5000|5000<br>现在|50000|20000</p>
<p>大仓去一线，余钱去二三线城市打游击</p>
<p>航母需要小舰护航<br>地方(便宜、有空地)就一定能起来<br>&lt; 8%,有多少拿多少，因为8%会被通货膨胀稀释</p>
<p>房价 &lt;- 会被政策打压，短期回调</p>
<h2 id="可以购买"><a href="#可以购买" class="headerlink" title="可以购买"></a>可以购买</h2><h2 id="拒绝购买："><a href="#拒绝购买：" class="headerlink" title="拒绝购买："></a>拒绝购买：</h2><ul>
<li>华人中介推销的澳洲项目</li>
<li>小面积贵，从来不是普世真理，永远买入选便宜的</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>生意经</title>
    <url>/blog/p/4f959226/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="如何发家"><a href="#如何发家" class="headerlink" title="如何发家"></a>如何发家</h2><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><ol>
<li>创造资源</li>
<li>对接资源(衍生出平台的概念)</li>
</ol>
<p>单纯卖货不行了，必须要“卖货+服务”</p>
<h3 id="流量"><a href="#流量" class="headerlink" title="流量"></a>流量</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 手下人多了，坏消息也就会逐渐增加</span></span><br><span class="line"><span class="bullet">1.</span> 要会分辨，有一些坏消息是底下人误导你</span><br><span class="line"><span class="bullet">2.</span> 要会拍板，比如有个地方坏账了，现在止损是10W，如果不及时处理，可能打官司后影响更差、损失更多</span><br><span class="line"><span class="bullet">3.</span> 要会预判，</span><br><span class="line"><span class="bullet">4.</span> 要会统筹，人财多，各环节都要争夺资源，如何安排以实现盈利目标</span><br><span class="line"><span class="bullet">5.</span> 分配，赚到钱拿多少分配给底下？</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
  </entry>
  <entry>
    <title>爆品战略</title>
    <url>/blog/p/a17632f98/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h1 id="爆品战略"><a href="#爆品战略" class="headerlink" title="爆品战略"></a>爆品战略</h1><p>传统行业</p>
<ol>
<li>有自己的主打产品</li>
<li>找到最适合开店的区域，比如小区门口，找到优质流量来源</li>
<li>优化产品组合，提升装潢和店员水平(提高转化率)</li>
<li>无限复制（资源倾斜，全力扩大该优质来源）</li>
</ol>
<p>前言</p>
<ol>
<li>用户在改变，有新的需求、痛点都在增加，给我们创造了不少的机会</li>
</ol>
<p>方法<br>2. 找到风口，顺势而为 &amp;&amp; 特立独行且正确 “除了要万分努力，方向要正确”</p>
<p>关键词</p>
<ol>
<li>SKU(库存量单位)</li>
</ol>
<p>开始做之前：</p>
<ol>
<li>做一件事之前把所有事情都想清楚</li>
</ol>
<p>做什么样的产品<br>风口略大的产品，因为风口大的难寻，且人多</p>
<pre><code>品牌
产品
用户
</code></pre>
<p>怎么做<br>    团队<br>        1.团队很重要(一切因素都是因为工资)尊重人性，工资要高，给期权、给股份<br>        2.团队&gt;产品&gt;营销<br>    核心<br>        多考虑如何服务好用户，做好规模，使公司快速向前发展，积累更多忠实用户(前期隐姓埋名做产品)，前提是有外部资本支持的情况下</p>
<pre><code>品牌(个人、团队)

产品
    1.产品1，粉丝0
        如果产品做得好，营销推广才会起到事半功倍的效果
        如果不好，则会放大产品的缺点，引起更多客户投诉，并且加快死亡
    2.做爆品
        为何做
            极致的产品点必死对手
        如何做
            聚焦
                1.把事情做少，做到极致，就是爆品的核心
                2.聚焦于单个产品，打爆某个功能，进行单点切入，主点放大(不要把鸡蛋放在鸡蛋篮子里)
                3.围绕单品快速迭代

            性价比
                性价比才是决定性的因素
                克制贪婪，少赚一点
            用户画像

            理论

            设计
                1.要使用户可感知
    3.做内容
        1.通过优质、有价值的内容或资讯(兼职  靠谱  兼职技巧 防坑) 吸引用户
        2.论坛，与用户交流
        3.微博、朋友圈广告、other

    用户(层级)
        目标用户
            核心用户
                种子用户
        1.精准用户画像
            要有大量数据可以分析，没有就创建
        2.100铁杆粉丝战略
            1.铁杆粉丝能够带来 无限能量
            2.1000个铁杆粉丝理论：创作者、艺术家、摄影师、演员，就是任何创作做原创、传递正能量和价值的，只需要拥有1000个铁杆粉丝 就能够生存无忧
            铁杆粉丝的特征：参与度 有时间 有精力
            3.找种子用户 可以先找 重度的意见领袖的用户(重度使用产品的人) 深度挖掘，把用户当朋友 信任他 帮他解决问题
            4.做好粉丝裂变
                核心粉丝 引爆 铁杆粉丝 引爆大众粉丝
        3.提高用户参与感
            方法
                参与式研发
                    (让用户一起参与研发产品)
                参与式营销
                    (让用户一起参与做产品营销)
        4.收集用户反馈，及时处理
            设计程序时，多加数据收集功能，以供数据分析
        5.用户思维(信仰)：
            用户最喜欢的功能特点之一：不要让我思考太多
            每个细节都做到极致，达到体验最佳的状态
    营销
</code></pre>
<p>重要</p>
<p>关键词<br>    4.用户痛点<br>        痛点：用户最关注的需求，并且愿意花钱去购买，而且是做爆品的核心基础</p>
<pre><code>    生死痛点(产业级痛点)：
        要找到 很多人 都需要的一个“产业级痛点”

    有没有人花钱买  
        有需要 但是不会去买  就是伪痛点

5.伪痛点
    不能使用自我模式，使用闭门造车

    不能使用专家模式，从用户出发，用户思维

    “丈母娘”法则.

6.100铁杆粉丝 版本2
    提高粉丝忠诚度 变成铁粉
        产品1，粉丝0
            如果产品做得好，营销推广才会起到事半功倍的效果
            如果不好，则会放大产品的缺点，引起更多客户投诉，并且加快死亡

            产品好到，闭着眼睛买 都不担心品质问题 靠谱
        让用户当明星
        克制贪婪，少赚一点

7.精准用户画像
    一定要了解 关键用户或核心用户的 画像  一定要知道自己的种子用户是谁

    找变态用户 就是种子用户，使用多，反馈多的人

    要有关键的大量数据可以分析
    创建或搜集关键的可用数据

    数据挖掘

8.100铁杆粉丝 版本3




9.没有用户思维必死
    用户思维(信仰)：
        用户最喜欢的功能特点之一：不要让我思考太多

        每个细节都做到极致，达到体验最佳的状态
    相信用户，放大用户的力量


2.2做爆品需要避免的三个坑
    1.品类市场需要足够大：不做小众市场，做风口市场、足够大的市场
    2.做加法(又大又全)是个坑，做减法
        要做单品，不做品类
        单点切入，做聚焦，继而主点放大
        围绕单点做快速迭代

        例如：小米手环(防水、价格做到极致)
        不要把鸡蛋放在鸡蛋篮子里
    3.要有好的产品态度：(产品本身要好，赢得人心)如果是基本款，就提升性能，如果是时尚款，就做好升级
        不能60分万岁，要做到100分

2.3
    要靠极致的产品点逼死对手
    如何做到一个极致的产品
        打动用户的内心
        变态的性能和品质
    把自己逼疯
        超预期

2.4
    小米之道(可复制)
        以用户为中心，相信真善美(真心对用户)
        只做感动人心，价格厚道的产品(控制毛利率)
        要么不干 要么就干到极致
        克制贪婪(少赚一点)，用户才能产生强信任(闭着眼睛买)

2.5为何先做忠诚度在做美誉度
    先激发用户的强信任
        1.产品要极致
        2.不要用商人思维，要用朋友思维对待客户
        3.好市多(闭着眼睛买)

2.6什么才是好设计
    好的设计就是一剑封喉

    颜值即正义，没有颜值必死
        消费升级
            中产1代 价格&gt;性能
            中产2代 颜值&gt;性能&gt;
            天翻地覆的改变，因为消费者升级
                最大的变化就是颜值的变化

    要有一个合适的厮逼对象

    设计颜值一定要可感知
        要用户感受得到
            双摄像头 三摄像头 可感知
2.7大幅度下跌后在绝地反击的策略
    闭着眼睛买
        核心：用户对产品 对公司有极强的新人
    品类关键词
    厚道
        品质精美
        获得了用户的新人
        同行很难抄袭，因为是要砍一刀的

2.8性价比武器的狠招
    要有一个可以撕逼的对象
    厮逼对象要选对
    要在核心性能上 最强
    一定要找到领先精品的痛点

2.9如何找到产品痛点
    产品可以被炫耀的存在
    工艺材质
    明星设计

3.1金山-小米最大的转变
    单点切入，做聚焦，继而主点放大
        粉丝
            用户参与式营销
            过去是明星为王，现在是粉丝为王
            过去是广告为王，现在是口碑为王
            口碑：
                运营
                产品
            员工是粉丝营销的发动机
        产品

3.2营销上最重视、最死磕的一个数据
    粉丝的参与(信用)指数
        产品的很多环节可以让用户一起参与进来
    用户复购率

3.3经常上头条的方法
    抢首发，做第一

    怎么做

    做市场，段子成不了头条

    缺乏脱颖而出
        团队最重要 产品1 营销0
    一次爆品级营销带动全部

3.4如何开好一场发布会
    管理好嘉宾
    人满为患
    PPT 和 产品 都需要给力     因为PPT是产品的表现形式，所以两者都需要给力
    要能够制造话题
        分裂成多派 制造话题

3.5如何让口碑在社会化媒体上快速引爆
    产品 社交化媒体 用户关系

    搞定发烧友 和意见领袖

    制造流行文化 制造亚文化 小众文化

3.6 小米的危机公关必修课
    要学会放松姿态
        允许不同的声音 7层好
        该出击就出击
            用产品、用行动出击
3.7小米社会化营销的3个内部关键词
    社交货币

    不是做广告 而是做自媒体

    说人话

    想办法让用户疯传
5.1雷军经历过的三个大坑
    产品之坑
        旗舰产品定生死
        旗舰产品很重要
    渠道之坑
        线上线下
    供应链之坑
5.2商业模式第一关 风口
    风口品类
        如何找到风口的猪
        1.利润高、市场大
        2.高频 经常使用 || 高级品质 或者 逼格(不确定)
    顺势而为 顺用户的需求
        3.用户的转移点
5.3小米是如何通过新模式打爆电商的
    流量产品 获取核心用户
        客户的决策成本，决策时间，决策效率非常高昂
        从流量产品 过渡到(转化) 核心产品(贵的商品) 体验很棒
    渠道爆品
        米粉节  618  双11
    开好发布会
        引爆点 线下线上整合
5.4小米模式的本质，就在一张表里
    大巨头 打击创业公司  7招
        1.邀请创业公司产品团队进行交流或者访问
        2.以相同的定位 复制并推出产品
        3.用渠道优势大势推广，占领市场
        4.高薪挖人 破坏团队稳定性
        5.挖角合作伙伴，破坏生态链
        6.破坏创业公司商业模式
        7.打击创业公司员工、投资者、行业信心
    没有成为大公司之前，少宣传，多做事

    流量 用户
        做互联网路口级的流量
            闭着眼睛买
        组合低频流量

    产品：
        感动人心
        性价比
            品质
            性能
            价格

    以用户为中心 增加流量
        克制贪婪，让用户产生强信任，让用户闭着眼睛买
        爆品
            能够带来流量
            能够带来复购率
            能够带来高效率
            就是一整套的商业模式



5.5如何打爆线下门店——小米之家
    1.选址-跟着用户来
        地址能够跟用户高度重合
    2.在店现场能够和用户产生 联系 - 化学反应
        在线下做 强悍的产品介绍 爆炸图、对比图、海报
    3.用活动引爆线下

    线下提升客户满意度
5.6小米的新零售有1个超级武器
    新零售 -&gt; 线下
    1.爆品能够带来流量
          能够带来复购率
          线上的流量提高后 可以跟线下进行导流 形成闭环
    2.高平方效率 = 高效率 + 高SKU设计

5.7什么是小米跟苹果正面斯的真正底气
    品牌主次于技术

    互联网入口流量
        云服务 金融 米UI
    组合的低频流量
        手机

    苹果 英雄式设计
    小米 民众式设计

    不可以采取对手的最强的方式颠覆对手 弯道超车

5.8移动时代商业模式的最大敌人
    爆品就是一个商业模式  一整套的商业模式
    爆品自带流量
    爆品自带高效率


------------------------------------------------------------------
答疑课：
    问题需要够聚焦、够清晰。
    找到一个强大的对手，跟他对斯一下


    营销(酷)：
        流量、数据分析
        用户留存
        用户复购率
            口碑
</code></pre>
<p>记录完毕之后 合并所有知识点 背</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
  </entry>
  <entry>
    <title>算法与数据结构</title>
    <url>/blog/p/4b0178e0/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>


<blockquote>
<p>O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n²) &lt; O(n³) &lt; O(n!) &lt; O(nn)</p>
</blockquote>
<p>时间复杂度<br>去掉了许多东西，只剩下了一个最高阶项。<br>当要处理的样本量足够大时，低阶项就不那么重要了。这就是时间复杂度的意义，它是衡量算法流程的复杂程度的一种指标，该指标只与数据量有关，与过程之外的优化无关。</p>
<p>对数器<br>二分法<br>异或</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>美食本本</title>
    <url>/blog/p/659383c1/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="甜点s"><a href="#甜点s" class="headerlink" title="甜点s"></a>甜点s</h2><h2 id="菜品"><a href="#菜品" class="headerlink" title="菜品"></a>菜品</h2><h3 id="家常菜"><a href="#家常菜" class="headerlink" title="家常菜"></a>家常菜</h3><h4 id="青椒炒蛋"><a href="#青椒炒蛋" class="headerlink" title="青椒炒蛋"></a>青椒炒蛋</h4><p>食材准备</p>
<ol>
<li>鸡蛋打入后，添加 <code>盐</code>、<code>胡椒粉</code>、<code>白醋(提鲜)</code> ,一个方向搅拌2分钟，使空气充分进入蛋液中，不容易煎糊</li>
<li>青椒切碎，这样易熟</li>
<li><code>蒜</code>、<code>姜</code>、<code>葱</code></li>
</ol>
<p>开始制作：</p>
<ol>
<li>油滑锅，但是油不能太热</li>
<li>炒鸡蛋，25-40s，捞出</li>
<li>青椒、葱姜蒜下锅 50s，大火</li>
<li>倒鸡蛋</li>
<li><code>食用盐</code>、<code>白糖</code>、<code>生抽酱油</code>、<code>胡椒粉</code></li>
</ol>
<h4 id="花菜"><a href="#花菜" class="headerlink" title="花菜"></a>花菜</h4><p>葱姜蒜+老干妈+花菜，注意：花菜要切小个</p>
<ol>
<li>中火，倒油</li>
<li>倒入葱姜蒜+老干妈</li>
<li>倒入花菜，1分钟后，放生抽、醋、盐</li>
<li>放一点水，盖上盖子焖一下，不然不熟</li>
<li>放盐、胡椒粉调味</li>
<li>出锅</li>
</ol>
<h4 id="炒土豆"><a href="#炒土豆" class="headerlink" title="炒土豆"></a>炒土豆</h4><p>葱姜蒜+土豆</p>
<ol>
<li>中火，倒油</li>
<li>倒入土豆，1分钟后，放生抽、醋、料酒(提鲜)</li>
<li>放盐、胡椒粉调味</li>
<li>出锅</li>
</ol>
<h3 id="鸡蛋饼"><a href="#鸡蛋饼" class="headerlink" title="鸡蛋饼"></a>鸡蛋饼</h3><p>鸡蛋 + 面粉 + 盐 + 小葱或大葱，快速搅拌防止有大面泡</p>
<ol>
<li>中火，倒油</li>
<li>每个饼翻四次</li>
<li>出锅</li>
</ol>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
  </entry>
  <entry>
    <title>解耦之道</title>
    <url>/blog/p/ec99c691/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="什么是耦合"><a href="#什么是耦合" class="headerlink" title="什么是耦合"></a>什么是耦合</h2><p>指在程序中，模块与模块之间信息与参数依赖的程度</p>
<h2 id="耦合度的计算方法"><a href="#耦合度的计算方法" class="headerlink" title="耦合度的计算方法"></a>耦合度的计算方法</h2><p>待补充…</p>
<h2 id="为什么要解耦"><a href="#为什么要解耦" class="headerlink" title="为什么要解耦"></a>为什么要解耦</h2><p>解耦合是为了更好地应对需求变更</p>
<h2 id="如何解耦"><a href="#如何解耦" class="headerlink" title="如何解耦"></a>如何解耦</h2><h3 id="单一原则"><a href="#单一原则" class="headerlink" title="单一原则"></a>单一原则</h3><ul>
<li>一个类只负责一项职责</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 教书(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 讲课(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 听课(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 写作业(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改变为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 教书(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 讲课(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 听课(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 写作业(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="依赖倒置原则-面向接口编程"><a href="#依赖倒置原则-面向接口编程" class="headerlink" title="依赖倒置原则(面向接口编程)"></a>依赖倒置原则(面向接口编程)</h3><ul>
<li>高层模块不应该依赖于低层模块，二者都应该依赖其抽象</li>
<li>抽象不依赖细节，细节依赖抽象</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$english</span> = <span class="keyword">new</span> English();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$english</span>-&gt;teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">English</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;教英语&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改变为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params">CourseInterface <span class="variable">$course</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$course</span>-&gt;teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程抽象接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CourseInterface</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">English</span> <span class="keyword">implements</span> <span class="title">CourseInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;教英语&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$teacher</span> = <span class="keyword">new</span> Teacher();</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$teacher</span>-&gt;teach(<span class="keyword">new</span> English());</span><br></pre></td></tr></table></figure>
<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><ul>
<li>实现不应该依赖它不需要的接口，一个类对另一个类的依赖应该建立在最小的接口上</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">implements</span> <span class="title">Teach</span>,<span class="title">Study</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 教书(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 讲课(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 听课(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 写作业(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改变为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Teach</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 教书(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 讲课(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Study</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 听课(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 写作业(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><h3 id="最少原则（迪米特法则）"><a href="#最少原则（迪米特法则）" class="headerlink" title="最少原则（迪米特法则）"></a>最少原则（迪米特法则）</h3><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><ul>
<li>指对象内部有不同的行为，应用在不同的场景中，并且有不同的实现算法</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$course</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">CourseInterface <span class="variable">$course</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;<span class="variable">$course</span> = <span class="variable">$course</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;course-&gt;teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程抽象接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CourseInterface</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">English</span> <span class="keyword">implements</span> <span class="title">CourseInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;教英语&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$teacher</span> = <span class="keyword">new</span> Teacher(<span class="keyword">new</span> English());</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$teacher</span>-&gt;teach();</span><br></pre></td></tr></table></figure>

<h3 id="IOC与DI"><a href="#IOC与DI" class="headerlink" title="IOC与DI"></a>IOC与DI</h3><ul>
<li>IOC：控制反转，把对象的调用权交给容器，通过容器实现对象的装配和管理</li>
<li>DI：依赖注入，对象之间的依赖关系有容器在运行期决定，由容器动态的将依赖关系注入到对象中</li>
<li>DI是对IOC更完善的描述</li>
</ul>
<p>IOC容器控制对象，将依赖关系(外部对象)注入进对象<br>反转：获取对象的依赖关系(外部对象)的方式，之前是通过手动引入(耦合度高)，现在是通过容器注入</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
  </entry>
  <entry>
    <title>Unity</title>
    <url>/blog/p/c8a4b253/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><blockquote>
<p><a href="https://learn.microsoft.com/zh-cn/visualstudio/gamedev/unity/unity-scripting-upgrade" target="_blank" rel="noopener">https://learn.microsoft.com/zh-cn/visualstudio/gamedev/unity/unity-scripting-upgrade</a></p>
</blockquote>
<p>编辑 项目设置 Player Configuration </p>
<ul>
<li>Scripting Backend</li>
<li>C++<ul>
<li>(首选).NET Standard 2.1。 此 配置文件与 .NET Foundation 发布的 .NET Standard 2.1 配置文件 匹配。 Unity 建议对新项目使用 .NET Standard 2.1。 它比 .NET 4.x 小，有利于尺寸受限的平台。 此外，Unity 承诺在 Unity 支持的所有平台上支持此配置文件。</li>
<li>.NET Framework。 此配置文件提供对最新 .NET 4 API 的访问权限。 它包括.NET Framework类库中提供的所有代码，并支持 .NET Standard 2.1 配置文件。 如果 .NET Standard 2.0 配置文件中未包含项目所需的部分 API，请使用 .NET 4.x 配置文件。 但此 API 的某些部分并非在所有 Unity 平台上均受支持。</li>
</ul>
</li>
</ul>
<h3 id="Unity-Scene-缩放"><a href="#Unity-Scene-缩放" class="headerlink" title="Unity Scene 缩放"></a>Unity Scene 缩放</h3><p>Mac 两手指滑动</p>
<h3 id="输出信息到控制台上"><a href="#输出信息到控制台上" class="headerlink" title="输出信息到控制台上"></a>输出信息到控制台上</h3><ul>
<li>输出函数 Print()</li>
<li>输出函数 Debug.log()</li>
</ul>
<p>相同点：</p>
<ul>
<li>都能将 <code>字符串信息</code> 打印到 Unity编辑器的 <code>Console控制台</code> 上</li>
<li>都来自 <code>UnityEngine</code> 命名空间，使用前必须 <code>using UnityEngine;</code></li>
</ul>
<p>不同点：</p>
<ul>
<li>Print 方法 来自于 <code>MonoBehaviour</code>,使用前必须继承<code>MonoBehaviour</code></li>
<li>Debug.log 不需要继承 就可以使用</li>
</ul>
<h2 id="Inspector"><a href="#Inspector" class="headerlink" title="Inspector"></a>Inspector</h2><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="Sprite-Renderer-图片精灵渲染"><a href="#Sprite-Renderer-图片精灵渲染" class="headerlink" title="Sprite Renderer 图片精灵渲染"></a>Sprite Renderer 图片精灵渲染</h4><blockquote>
<p>用于渲染__精灵__并控制其在 2D 和 3D 项目场景中的可视化效果。</p>
</blockquote>
<h4 id="Rigidbody-2D-增加重力"><a href="#Rigidbody-2D-增加重力" class="headerlink" title="Rigidbody 2D 增加重力"></a>Rigidbody 2D 增加重力</h4><h4 id="CircleCollider-2D-圆形碰撞器，可以设置偏移量"><a href="#CircleCollider-2D-圆形碰撞器，可以设置偏移量" class="headerlink" title="CircleCollider 2D 圆形碰撞器，可以设置偏移量"></a>CircleCollider 2D 圆形碰撞器，可以设置偏移量</h4><blockquote>
<p><a href="https://docs.unity3d.com/cn/current/Manual/class-CircleCollider2D.html" target="_blank" rel="noopener">https://docs.unity3d.com/cn/current/Manual/class-CircleCollider2D.html</a></p>
</blockquote>
<h4 id="Script-行为剧本"><a href="#Script-行为剧本" class="headerlink" title="Script 行为剧本"></a>Script 行为剧本</h4><p>创建Test脚本</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用程序集，引入并功能</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 和组件建立通信，使用插槽</span></span><br><span class="line">    <span class="keyword">public</span> Rigidbody2D myRigidbody;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="comment">// 在第一帧更新之前调用Start</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// gameObject.name = &#x27;角色名&#x27;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="comment">// 每帧调用一次更新</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>gameObject</strong></p>
<ul>
<li>gameObject 对应 Inspector对象</li>
<li>gameObject.name 对应 Inspector的 name</li>
<li>gameObject.tag 对应 Inspector的 tag</li>
</ul>
<p><strong>Script插槽</strong><br><code>Script</code>只能和 <code>ganmeObject</code> 交互，和其他组件之间要引用建立通信，使用<code>插槽</code></p>
<p><strong>transform</strong><br>位置组件，有两个属性</p>
<ul>
<li>position:游戏对象中心点在世界空间的位置</li>
<li>localPosition:游戏对象中心点在父类空间的位置</li>
</ul>
<p>世界空间就是Unity最大的空间，可以创建一个无任何父节点的空对象<br>position 0<br>rotation 0<br>scale 1</p>
<p><strong>Time</strong></p>
<blockquote>
<p><a href="https://docs.unity3d.com/cn/current/Manual/TimeFrameManagement.html" target="_blank" rel="noopener">https://docs.unity3d.com/cn/current/Manual/TimeFrameManagement.html</a></p>
</blockquote>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 返回自上一帧完成以来所经过的时间(以秒为单位)。该值取决于游戏或应用程序运行的每秒帧数(FPS)</span><br><span class="line">Time.deltaTime </span><br><span class="line"></span><br><span class="line">## 保证无论帧率多少，运算都会计算出相同的值</span><br><span class="line">速度 = 运算 * Time.deltaTime</span><br></pre></td></tr></table></figure>

<p>预制，就像一个游戏对象的蓝图<br>管道生成器<br>每秒生成管道</p>
<p><strong>变量</strong><br>脚本绑定UI对象的方式</p>
<ul>
<li>GameObject.Find()<ul>
<li>查找目标的路径是从Assert的相对路径来查找的，不用将脚本挂载到要查找的对象也可以实现查找</li>
<li>返回的是对象的Inspector的完整属性，如果对象下面挂载了其他对象，也一并包含(子对象)</li>
</ul>
</li>
<li>GetComponent<ComponentType>();<ul>
<li>必须挂载在对象下面的脚本</li>
<li>获取对象的一部分属性，其他对象的脚本是无法访问当前对象的属性的</li>
</ul>
</li>
</ul>
<p><strong>Instantiate</strong><br>克隆对象 被克隆的对象 位置 四元素旋转</p>
<p><strong>Destory</strong><br>Destory(object,销毁延时float); 销毁对象</p>
<p><strong>For</strong></p>
<ul>
<li>生成随机的树<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> GameObject objectToSpawn;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start is called before the first frame update</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 生成树的数量</span></span><br><span class="line">    <span class="built_in">int</span> numberOfTreesToSpawn = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numberOfTreesToSpawn; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 任意位置 <span class="doctag">TODO:</span>这里第三个参数需要补充 应该是和i有关系的</span></span><br><span class="line">        Vector3 randomPosition = <span class="keyword">new</span> Vector3(Random.Range(<span class="number">11</span>, <span class="number">-11</span>), Random.Range(<span class="number">4</span>, <span class="number">-7</span>));</span><br><span class="line">        <span class="comment">// 克隆对象</span></span><br><span class="line">        Instantiate(objectToSpawn, randomPosition, Quaternion.identity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>if else</strong></p>
<ul>
<li>根据玩家不同性别选择不同角色对象<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> GameObject female; <span class="comment">// 女性角色</span></span><br><span class="line"><span class="keyword">public</span> GameObject male; <span class="comment">// 男性角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> isFemale;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start is called before the first frame update</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 读取玩家信息...</span></span><br><span class="line">    <span class="comment">// 匹配玩家的性别分配不同角色</span></span><br><span class="line">    <span class="keyword">if</span> (isFemale)</span><br><span class="line">    &#123;</span><br><span class="line">        Instantiate(female, Vector3.zero, Quaternion.identity);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Instantiate(male, Vector3.zero, Quaternion.identity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>用户输入</strong><br>有两种方式</p>
<ol>
<li>Input 原始<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> speed = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start is called before the first frame update</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 根据用户案件输入改变位置</span></span><br><span class="line">    Vector3 playerInput = <span class="keyword">new</span> Vector3(Input.GetAxisRaw(<span class="string">&quot;Horizontal&quot;</span>), Input.GetAxisRaw(<span class="string">&quot;Vertical&quot;</span>), <span class="number">0</span>);</span><br><span class="line">    transform.position = transform.position + playerInput.normalized * speed * Time.deltaTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Input Manager</li>
</ol>
<p><strong>Vector2.MoveTowards</strong><br>Vector2.MoveTowards(起始位置，目标位置，速度);</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> GameObject target; <span class="comment">// 目标对象的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> speed; <span class="comment">// 行走时的速度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Update is called once per frame</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 跟踪玩家，例如：怪物追踪玩家</span></span><br><span class="line">    transform.position = Vector2.MoveTowards(transform.position, transform.transform.position, speed * Time.deltaTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>OnTriggerEnter2D</strong><br>当对象碰撞或接触另一个对象时执行</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> GameObject target; <span class="comment">// 目标对象的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> speed; <span class="comment">// 行走时的速度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter2D</span>(<span class="params">Collider2D other</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 碰撞的对象信息 other</span></span><br><span class="line">    <span class="comment">// 碰撞后的行为：被攻击(粒子特效)、加减分数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="安全游戏系统"><a href="#安全游戏系统" class="headerlink" title="安全游戏系统"></a>安全游戏系统</h3><p>二进制格式，保存所有想要的数据。<br>三个重要组件</p>
<ul>
<li>Gameplay Data</li>
<li>Save Game Container</li>
<li>Serialization System To write the Binary File 序列化系统读写二进制文件</li>
</ul>
<p>Assets</p>
<ul>
<li>Scripts<ul>
<li>Serialization<ul>
<li>SerializationManager</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>TODU：待补充…</p>
<h3 id="帧同步"><a href="#帧同步" class="headerlink" title="帧同步"></a>帧同步</h3><h2 id="Unity-多人游戏框架"><a href="#Unity-多人游戏框架" class="headerlink" title="Unity 多人游戏框架"></a>Unity 多人游戏框架</h2><blockquote>
<p><code>Netcode for GameObjects</code> <a href="https://www.bilibili.com/video/av898075461/?vd_source=dbdc982d62ac5b2bb1058ae9896d20df" target="_blank" rel="noopener">https://www.bilibili.com/video/av898075461/?vd_source=dbdc982d62ac5b2bb1058ae9896d20df</a></p>
</blockquote>
<p>主要特点：</p>
<ul>
<li>服务器客户端都跑 Unity，运行同一套代码，但是可能跑不同逻辑分支</li>
<li>状态同步(区别于lock-step帧同步)</li>
</ul>
<p>安装: <code>Package Manager</code></p>
<p>其他介绍：<br>自定义服务器  or 云服务提供商<br>实时服务、云架构<br>云技术和游戏服务器托管</p>
<p>同步不同游戏循环的解决方案： <code>Netcode for GameObjects</code> 和连接工具 Relay(转播、中继节点)、Lobby(大厅)、Multiplay和Matchmaker<br>网络变量、远程过程调用，同步世界之间的关键信息<br>运行载体：桌面、手机、控制台<br>不同阶段：开发阶段、预发布阶段、生产阶段</p>
<p>游戏的阶段：<br>客户端启动：</p>
<ol>
<li>玩家进行匿名认证</li>
<li>Host在Lobby服务中创建一个Lobby，向其他玩家宣告上线</li>
<li>Relay服务的后台创建新位置</li>
<li>使用数据位置调用Netcode的start，并将网络场景切换到角色选择场景(包含网络列表的网络对象)</li>
<li>客户端，大厅列表，后台向Lobby服务请求该主机的Relay信息，请求Relay服务并且加入它，启动一个Netcode连接</li>
<li>主机端Netcode会批准连接，在 <code>自定义会话管理器</code> 中创建一个 新的玩家条目，即使断开连接，也不会丢失进程</li>
</ol>
<p>GameObject上需要有一个网络转换(Network transform),让他们的位置自动复制，从主机到所有客户端<br>游戏中的所有状态都使用网络变量：</p>
<ul>
<li>动画和特效</li>
<li>法师的火弩箭</li>
<li>坦克的近战攻击</li>
<li>门开的状态</li>
<li>弓箭手的箭</li>
<li>机器人被破坏的状态</li>
<li>角色的生命值</li>
</ul>
<p>网络条表示状态<br>支持晚加入，这样就不必维护自己的点RPC列表，以便在新玩家连接时发送</p>
<p>门状态使用 <code>netbars</code> 作为它的状态，点击按钮时，它们会更新状态主机站点，并且复制到所有客户端，并且使用网络动画器触发动画。<br>箭头正在使用 <code>fork对象池</code> ，使用自定义生成处理程序来管理客户端对象的生命周期</p>
<p>缓解延迟和抖动：</p>
<ul>
<li>角色选择的权威客户端</li>
<li>动作预测(在点击时运行一个小的跳跃动画来怼输入做出相应)</li>
<li>缓冲插值(Buffer interpolation)</li>
<li>网络变换</li>
</ul>
<p>Relay：连接玩家进行端到端体验的枢纽，将A的数据包传送到B<br>Relay Server<br>特点：</p>
<ul>
<li>安全性，加密方式</li>
<li>低延迟</li>
</ul>
<p>Lobby：</p>
<ul>
<li>创建和浏览公共游戏的方法<ul>
<li>邀请朋友参加私人游戏(人类可读+机器唯一ID)</li>
<li>Quick Join的轻量级玩家匹配功能(公开游戏)</li>
</ul>
</li>
<li>提供玩家设备提供一个手机和共享安全信息的场所</li>
<li>灵活的状态存储，具有不同级别</li>
</ul>
<p>语音系统<br>社交游戏、竞技游戏、</p>
<p>Multiplay：创建和上传游戏服务器fleet和游戏服务器容器，将它们分配到世界各地的混合数据中心，为游戏发布做好准备。</p>
<p>Matchmaker：玩家匹配系统</p>
<p>很多开发工作，迭代、处理自己的队列、自己的构建，Alpha&amp;Beta，公开测试，最坏的情况：停机部署和规则修复<br>结论就是需要一个支持实验的系统，支持A&#x2F;B测试、调优、尤其复杂情况时</p>
<p>Unity面板中：</p>
<ul>
<li>Environments系统：为生产、开发、QA执行不同的隔离</li>
</ul>
<p>新增两种隔离类型队列(Queue)和池(Pool)</p>
<h2 id="帧同步-1"><a href="#帧同步-1" class="headerlink" title="帧同步"></a>帧同步</h2><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="王者荣耀-商业级手游"><a href="#王者荣耀-商业级手游" class="headerlink" title="王者荣耀 商业级手游"></a>王者荣耀 商业级手游</h3><h3 id="战斗地形的创建-地形、植物、箭塔"><a href="#战斗地形的创建-地形、植物、箭塔" class="headerlink" title="战斗地形的创建 地形、植物、箭塔"></a>战斗地形的创建 地形、植物、箭塔</h3><p>导入地形<br>增加植物<br>增加箭塔<br>  Assets-&gt;Model，选中箭塔，放到合适的位置<br>箭塔增加材质<br>  Assets-&gt;Model，选中材质拖动到箭塔中<br>增加英雄</p>
<h3 id="玩家控制"><a href="#玩家控制" class="headerlink" title="玩家控制"></a>玩家控制</h3><h4 id="手游"><a href="#手游" class="headerlink" title="手游"></a>手游</h4><blockquote>
<p>虚拟摇杆插件(EasyTouch)</p>
</blockquote>
<p>创建空元素</p>
<ul>
<li>EasyTouch 且添加组件 Assets-&gt;EasyTouch-&gt;Plugins-&gt;EasyTouch</li>
<li>EasyJoystick 且添加组件 Assets-&gt;EasyTouch-&gt;Plugins-&gt;EasyJoystick</li>
</ul>
<p>添加完之后 Hierarchy 会出现 MoveController</p>
<p>如何使用</p>
<ol>
<li>在英雄上添加 <code>MoveController</code> 组件，在Assets里面找</li>
</ol>
<h4 id="端游"><a href="#端游" class="headerlink" title="端游"></a>端游</h4><blockquote>
<p>新版输入系统 <code>input system</code></p>
</blockquote>
<p>创建用户 player 胶囊capsule tag&#x3D;&gt; player<br>创建 Assets &#x3D;&gt; prefabs，将player纳入</p>
<img src="/blog/p/c8a4b253/createUser01.png" class="" title="createUser01.png">

<p>安装</p>
<ul>
<li>windows &#x3D;&gt;</li>
<li>package Mamager &#x3D;&gt;</li>
<li>unity registry &#x3D;&gt;</li>
<li>input system(输入控制器 键盘等等) &#x3D;&gt;</li>
<li>统统 yes yes</li>
</ul>
<p>OnFoot</p>
<ul>
<li>Movement wsad value Vector2</li>
<li>Jump space</li>
<li>Look Delta 鼠标滑动</li>
<li>Crouch 下蹲</li>
<li>Spring 加速</li>
</ul>
<img src="/blog/p/c8a4b253/InputManager01.png" class="" title="InputManager01.png">

<p>三、方向键<br>新创建InputManger、PlayerMotor 增加到player 组件当中<br>InputManger获取到方向改变(void FixedUpdate 读取玩家的当前状态 固定帧处理) &#x3D;&gt;<br>执行玩家引擎(ProcessMove(Vector2的x和y)) &#x3D;&gt;<br>CharActerController.move(transform.TransformDirection(moveDirection)  速度  每帧产生的时间)</p>
<p>四、重力<br>Velocity速度<br>gravity重力<br>isGrounded 已接地<br>重力值 -9.8f<br>核心：让用户自然下坠(重力*deltaTime)，下坠到某个值就停下(地板)<br>用户y坐标降低</p>
<p>五、跳跃<br>y &#x3D; 跳跃的高度<em>重力</em>变数(可以减(*0.5))</p>
<p>六、加速<br>是否加速 sprinting<br>按了shift键就把速度提升到8，是否加速ing</p>
<p>七、蹲<br>是否下蹲 bool crouching<br>下蹲差 bool lerpCrouch &#x3D; false;<br>下蹲时间 float crouchTimer &#x3D; 0;</p>
<p>八、视角</p>
<ol>
<li>Look &#x3D;&gt; Vector2 bind Delta 鼠标</li>
<li>PlayerLook.cs  ProcessLook<br>InputManger 引入  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">private PlayerLook playerLook<span class="comment">;</span></span><br><span class="line"><span class="attribute">playerLook</span> <span class="operator">=</span> GetComponent&lt;PlayerLook&gt;()<span class="comment">;</span></span><br><span class="line">void LateUpdate()</span><br><span class="line">&#123;</span><br><span class="line">  playerLook.ProcessLook(onFoot.Look.ReadValue&lt;Vector2&gt;())<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Player&#x3D;&gt;摄像机 绑定到 player组件的cam上</li>
</ol>
<h4 id="摄像机玩家跟随"><a href="#摄像机玩家跟随" class="headerlink" title="摄像机玩家跟随"></a>摄像机玩家跟随</h4><p>移动时改变玩家视角</p>
<ol>
<li><code>Main Camera</code> 增加组件 <code>CameraFollow</code> script</li>
<li>编写 <code>CameraFollow</code><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">System</span>.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> C : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    private <span class="keyword">Transform</span> player;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> cameraX;</span><br><span class="line">    <span class="type">float</span> cameraZ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">float</span> y = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">public</span> <span class="type">float</span> z = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    // <span class="keyword">Start</span> <span class="keyword">is</span> <span class="keyword">called</span> <span class="keyword">before</span> the first frame <span class="keyword">update</span></span><br><span class="line">    <span class="type">void</span> <span class="keyword">Start</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // <span class="keyword">Update</span> <span class="keyword">is</span> <span class="keyword">called</span> once per frame</span><br><span class="line">    <span class="type">void</span> <span class="keyword">Update</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(player)&#123;</span><br><span class="line">            cameraX = player.position.x;</span><br><span class="line">            cameraZ = player.position.z;</span><br><span class="line">            this.<span class="keyword">transform</span>.position = <span class="built_in">new</span> Vector3(cameraX, y, cameraZ + z)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3.</span> `CameraFollow` script 中将玩家Player 添加到 类成员Player</span><br></pre></td></tr></table></figure>
第二个方案：标准资源包中 Standard Assets -&gt; Scripts -&gt; Camera Scripts -&gt; SmoothFollow</li>
<li><code>Main Camera</code> 增加组件 <code>SmoothFollow</code> script</li>
<li><code>SmoothFollow</code> script 中将玩家 添加到 Target</li>
</ol>
<h4 id="攻击特效"><a href="#攻击特效" class="headerlink" title="攻击特效"></a>攻击特效</h4><p>触发：攻击按钮<br>画布{<br>    攻击按钮1<br>    攻击按钮2<br>    攻击按钮3 大招<br>    闪现<br>    治疗<br>}<br>执行：动画事件<br>创建玩家攻击脚本Assets&#x2F;Scripts&#x2F;PlayerAttack.cs</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerAttack</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">private</span> ParticleSystem fire1;</span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">private</span> GameObject fire2;</span><br><span class="line">    <span class="keyword">private</span> Animator ani; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ani = GetComponent&lt;Animator&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Atk1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ani.SetInteger(<span class="string">&#x27;state&#x27;</span>, AnimState.ATTACK1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Atk1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ani.SetInteger(<span class="string">&#x27;state&#x27;</span>, AnimState.ATTACK2)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Atk1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ani.SetInteger(<span class="string">&#x27;state&#x27;</span>, AnimState.ATTACK3)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 播放 粒子效果，点击攻击后时间线走一部分</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EffectPlayer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        fire1.play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将状态设置回来，在时间线的尾部</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ResetIdle</span>()</span>&#123;</span><br><span class="line">        ani.SetInteger(<span class="string">&#x27;state&#x27;</span>, AnimState.IDLE)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Animator面板中，Entry-&gt;idle1-&gt;n个动画中(1技能、2技能、3技能)增加事件Events，不同时间线不同事件<br>给画布中的按钮 指定 事件，onclick-&gt;playerAttack-&gt;指定技能</p>
<img src="/blog/p/c8a4b253/PlayerAttack.png" class="" title="PlayerAttack.png">

<h3 id="游戏打包-APK"><a href="#游戏打包-APK" class="headerlink" title="游戏打包 APK"></a>游戏打包 APK</h3><ol>
<li>Unity-&gt;file-&gt;Build Setting</li>
<li>选择平台，需要提前下载好打包软件</li>
<li>点击player settings，设置相关信息，基本信息+包信息</li>
<li>配置安卓环境 Unity Preferences-&gt;External Tools-&gt;安卓相关信息</li>
<li>build-&gt;目录名称</li>
</ol>
<h2 id="ISO-x2F-OSI-参考模型"><a href="#ISO-x2F-OSI-参考模型" class="headerlink" title="ISO&#x2F;OSI 参考模型"></a>ISO&#x2F;OSI 参考模型</h2><a href="/blog/p/cf930505/" title="Mian">Mian</a>
<p>SocketModel</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SocketModel</span>&#123;</span><br><span class="line">    <span class="comment">// 一级协议，区分 所属模块</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span> type = &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="comment">// 二级协议，区分 模块下所属子模块</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> area = &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="comment">// 三级协议，区分 当前处理逻辑功能</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> command = &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="comment">// 消息体 当前需要处理的主体数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> message = &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketModel</span>()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketModel</span>(<span class="params"><span class="built_in">byte</span> t, <span class="built_in">int</span> a,iunt c,<span class="built_in">object</span> o</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = t;</span><br><span class="line">        <span class="keyword">this</span>.area = a;</span><br><span class="line">        <span class="keyword">this</span>.command = c;</span><br><span class="line">        <span class="keyword">this</span>.message = o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetMessage</span>&lt;<span class="title">T</span>&gt;()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="temp"><a href="#temp" class="headerlink" title="temp"></a>temp</h3><p>动画状态机</p>
<h3 id="游戏模式构建"><a href="#游戏模式构建" class="headerlink" title="游戏模式构建"></a>游戏模式构建</h3><h3 id="地形创建"><a href="#地形创建" class="headerlink" title="地形创建"></a>地形创建</h3><h4 id="NGUI插件"><a href="#NGUI插件" class="headerlink" title="NGUI插件"></a>NGUI插件</h4><h4 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h4><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><p>核心游戏场景逻辑<br>地图生成<br>地形系统<br>英雄生成<br>消息接收<br>加载英雄模型<br>设置英雄模型<br>死亡处理</p>
<h4 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h4><h4 id="玩家匹配"><a href="#玩家匹配" class="headerlink" title="玩家匹配"></a>玩家匹配</h4><p>房间</p>
<ul>
<li>私有房间</li>
<li>公开房间</li>
<li>自定义</li>
</ul>
<h4 id="技能模块"><a href="#技能模块" class="headerlink" title="技能模块"></a>技能模块</h4><p>技能程序框架</p>
<ul>
<li>攻击</li>
</ul>
<h4 id="战队功能"><a href="#战队功能" class="headerlink" title="战队功能"></a>战队功能</h4><h3 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h3><p>寻路<br>移动</p>
<p>画面</p>
<ul>
<li>血条(CRUD)</li>
</ul>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>内存<br>渲染</p>
<p>资源管理</p>
<p>Shader<br>AI<br>图形学<br>引擎架构</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="游戏开发流程"><a href="#游戏开发流程" class="headerlink" title="游戏开发流程"></a>游戏开发流程</h3><ol>
<li>将项目代码添加到git当中</li>
<li>unity项目结构<br>脚本Script<br>艺术Art<br>预制文件夹<br>资产包文件夹</li>
<li>部署和集成自动化系统</li>
<li>沙盒项目(用于清理Assets Store资产包和试验品)</li>
<li>提出一个合理的计划 trello 团队管理工具 (清单、进度)</li>
<li>分享进度 WebGl 或 Steam</li>
<li>建立游戏的垂直部分，不要构建整个事务、整个故事、整个other<br>建立游戏中最好玩的地方&amp;可玩版本(告诉自己其他玩家为什么会玩)<br>建立核心，再在基础之上往上堆栈</li>
<li>下一步是什么</li>
</ol>
<h3 id="搭建示例舞台"><a href="#搭建示例舞台" class="headerlink" title="搭建示例舞台"></a>搭建示例舞台</h3><h4 id="FPS"><a href="#FPS" class="headerlink" title="FPS"></a>FPS</h4><p>一、新建舞台 create cube<br>地板 floor</p>
<img src="/blog/p/c8a4b253/floor.png" class="" title="floor.png">

<p>方块xN</p>
<img src="/blog/p/c8a4b253/%E6%96%B9%E5%9D%97xN01.png" class="" title="方块xN01.png">
<img src="/blog/p/c8a4b253/%E6%96%B9%E5%9D%97xN02.png" class="" title="方块xN02.png">

<p>灯光调暗 Directional_light_intensity 0.7</p>
<img src="/blog/p/c8a4b253/Directional_light_intensity.png" class="" title="Directional_light_intensity.png">



<h2 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="3D数学"><a href="#3D数学" class="headerlink" title="3D数学"></a>3D数学</h3><h4 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h4><p><strong>笛卡尔坐标系</strong></p>
<blockquote>
<p><code>直角坐标系</code> 和 <code>斜坐标系</code> 统称为 <code>笛卡尔坐标系</code></p>
</blockquote>
<ul>
<li>相交于原点的两条数轴，构成了平面仿射坐标系</li>
<li>两条数轴上的度量单位相等，则称此仿射坐标系为笛卡尔坐标系</li>
<li>两条数轴互相垂直的笛卡尔坐标系，称为笛卡尔直角坐标系，否则称为笛卡尔斜角坐标系</li>
</ul>
<p>2D笛卡儿坐标系中，可用(x，y)来表示一个点，被称为坐标。</p>
<p>2D笛卡儿坐标系的基础上，增加一条垂直于2D平面的轴就构成了3D笛卡儿坐标系。<br>3D笛卡儿坐标系中，(x，y，z)用来表示一个点。</p>
<p><strong>左手坐标系 与 右手坐标系</strong><br>在3D笛卡儿坐标系中，有两种方式可以确定Z轴的方向，即左手坐标系与右手坐标系。</p>
<ul>
<li>左手坐标系：伸开左手，大拇指指向X轴正方向，食指指向Y轴正方向，其他3个手指指向Z轴正方向。</li>
<li>右手坐标系：伸开右手，大拇指指向X轴正方向，食指指向Y轴正方向，其他3个手指指向Z轴正方向。<img src="/blog/p/c8a4b253/%E5%B7%A6%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB%E5%92%8C%E5%8F%B3%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB.png" class="" title="左手坐标系和右手坐标系">
两种坐标系的旋转正方向不同，左手坐标系是顺时针方向旋转，右手坐标系是逆时针方向旋转。<img src="/blog/p/c8a4b253/%E5%B7%A6%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB%E5%92%8C%E5%8F%B3%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB%E7%9A%84%E6%97%8B%E8%BD%AC%E6%96%B9%E5%90%91.png" class="" title="左手坐标系和右手坐标系的旋转方向"></li>
<li>常见左手坐标系<ul>
<li>Unity 3D(世界坐标系)</li>
<li>Direct 3D</li>
</ul>
</li>
<li>常见右手坐标系<ul>
<li>3D笛卡尔坐标系</li>
<li>OpenGL</li>
</ul>
</li>
</ul>
<h4 id="世界坐标系"><a href="#世界坐标系" class="headerlink" title="世界坐标系"></a>世界坐标系</h4><blockquote>
<p>全局坐标系</p>
</blockquote>
<ul>
<li>唯一切固定不变</li>
<li>建立了描述其他坐标系所需的参考和框架，即可以用世界坐标系描述其他坐标系，但是不能用更大的坐标系描述世界坐标系。</li>
<li>描述场景内所有物体的<code>位置和方向</code>的基准，可以使用<code>transform.position</code>获取<code>游戏对象的世界坐标</code>。</li>
</ul>
<p>因为Unity使用左手坐标系，so：</p>
<img src="/blog/p/c8a4b253/Unity%E4%BD%BF%E7%94%A8%E5%B7%A6%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB.png" class="" title="Unity使用左手坐标系">

<p>在游戏对象的Transform组件中，reset后，此时位置就位于世界坐标系的原点。</p>
<h4 id="本地坐标系"><a href="#本地坐标系" class="headerlink" title="本地坐标系"></a>本地坐标系</h4><h5 id="本地坐标系-1"><a href="#本地坐标系-1" class="headerlink" title="本地坐标系"></a>本地坐标系</h5><blockquote>
<p>局部坐标系(模型或物体坐标系)，它是与特定物体相关联的坐标系，每个物体都有，当物体发生平移或旋转时，其本地坐标系也会随之发生平移或旋转。</p>
</blockquote>
<p>模型Mesh保存的顶点坐标均为本地坐标系下的坐标；每个模型的本地坐标系的位置和朝向由建模师在建模软件中设定，在<code>引擎中无法修改</code>。</p>
<p>选中了某个物体后，显示的坐标系就是本地坐标系</p>
<h5 id="父坐标系"><a href="#父坐标系" class="headerlink" title="父坐标系"></a>父坐标系</h5><p>用于描述物体间相对位置关系。指的是物体父对象的本地坐标系。</p>
<p>子物体将父物体的坐标点作为自身的坐标原点</p>
<ul>
<li>使用<code>transform.localPosition</code>可以获得物体在父物体的本地坐标系中的位置。<ul>
<li>该物体有父物体，获得其在<code>父物体的本地坐标系中的坐标</code>。</li>
<li>该物体没有父物体，获得的是<code>该物体在世界坐标系中的坐标</code>。</li>
</ul>
</li>
<li>在Inspector视图中显示的数值为localPosition的值。</li>
</ul>
<h5 id="惯性坐标系"><a href="#惯性坐标系" class="headerlink" title="惯性坐标系"></a>惯性坐标系</h5><p>惯性坐标系是为了简化从世界坐标系到本地坐标系的转换而引入的一种新坐标系。<br>惯性坐标系的原点和本地坐标系的原点重合，但惯性坐标系的坐标轴平行于世界坐标系的坐标轴。</p>
<img src="/blog/p/c8a4b253/Unity%E6%83%AF%E6%80%A7%E5%9D%90%E6%A0%87%E7%B3%BB.png" class="" title="Unity惯性坐标系">

<h4 id="屏幕坐标系"><a href="#屏幕坐标系" class="headerlink" title="屏幕坐标系"></a>屏幕坐标系</h4><blockquote>
<p>建立在屏幕上的二维坐标系。</p>
</blockquote>
<p>Unity的屏幕坐标系以屏幕左下角对应坐标系的原点，屏幕水平方向对应坐标系的X轴，屏幕垂直方向对应坐标系的Y轴。</p>
<p>坐标以像素来定义：</p>
<ul>
<li>屏幕的左下角坐标为(0，0)</li>
<li>右上角坐标为(Screen.width，Screen.height)</li>
<li>Z轴的坐标是摄像机的世界坐标系中的Z轴坐标的负值。<img src="/blog/p/c8a4b253/Unity%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E7%B3%BB.png" class="" title="Unity屏幕坐标系"></li>
</ul>
<p><code>鼠标位置坐标</code>属于屏幕坐标，通过<code>Input.MousePosition</code>可以获得该位置的坐标。<br><code>手指触摸屏幕</code>属于屏幕坐标，通过<code>Input.GetTouch(0).position</code>可以获得单个手指触摸屏幕时手指的坐标。</p>
<h4 id="视口坐标系"><a href="#视口坐标系" class="headerlink" title="视口坐标系"></a>视口坐标系</h4><blockquote>
<p>视口坐标系主要用在摄像机显示中，可以在摄像机的属性窗口中看到。</p>
</blockquote>
<p>视口坐标系是将Game视图的屏幕坐标系单位化，即标准化之后的屏幕坐标。视口坐标与屏幕坐标的属性相同。其范围是左下角为起点(0，0)，右上角为终点(1，1)，其余与屏幕坐标同理。</p>
<p>利用比例可以控制点在屏幕内的位置，而不用关注屏幕实际大小的变化，常用于自适应。例如</p>
<ul>
<li>Camera的世界坐标是(0，0，-10)，屏幕大小为800像素×600像素，则屏幕的中间点的视口坐标为(0.5，0.5，10)。</li>
</ul>
<p>视口坐标系对于场景的显示非常重要，当使用多个摄像机在同一个场景中显示多个视口时，需要使用视口坐标系。一个摄像机对应一个视口，视口预览展示了摄像机看到的所有物体，其默认大小是Width&#x3D;1、Height&#x3D;1，位置也是从0到1，即左下角为(0，0)，右上角为(1，1)。</p>
<p>摄像机前面的长方形框为视口。视口坐标与屏幕坐标一致，指向为Z轴正方向，Z轴的坐标是摄像机的世界坐标系中的Z轴坐标的负值。</p>
<img src="/blog/p/c8a4b253/Unity%E8%A7%86%E5%8F%A3%E5%9D%90%E6%A0%87%E7%B3%BB.png" class="" title="Unity视口坐标系">

<h4 id="坐标系的转换"><a href="#坐标系的转换" class="headerlink" title="坐标系的转换"></a>坐标系的转换</h4><p><code>世界坐标系</code>和<code>本地坐标系</code>的相互转换函数如下。</p>
<ul>
<li>Transform.TransformPoint(Vector3 position)：将一个坐标点从本地坐标系转换到世界坐标系。</li>
<li>Transform.InverseTransformPoint(Vector3 position)：将一个坐标点从世界坐标系转换到本地坐标系。</li>
<li>Transform.TransformDirection(Vector3 direction)：将一个方向从本地坐标系转换到世界坐标系。</li>
<li>Transform.InverseTransformDirection(Vector3 direction)：将一个方向从世界坐标系转换到本地坐标系。</li>
<li>Transform.TransformVector(Vector3 vector)：将一个向量从本地坐标系转换到世界坐标系。</li>
<li>Transform.InverseTransformVector(Vector3 vector)：将一个向量从世界坐标系转换到本地坐标系。</li>
</ul>
<p>其他常用的一些函数，如Transform.forward()、Transform.right()、Transform.up()，则表示当前物体的本地坐标系的Z轴、X轴、Y轴在世界坐标系中的指向。</p>
<p><code>屏幕坐标系</code>与<code>世界坐标系</code>的相互转换函数如下。</p>
<ul>
<li>Camera.ScreenToWorldPoint(Vector3 position)：将屏幕坐标系转换为世界坐标系。</li>
<li>Camera.WorldToScreenPoint(Vector3position)：将世界坐标系转换为屏幕坐标系。</li>
</ul>
<p><code>屏幕坐标系</code>与<code>视口坐标系</code>的相互转换函数如下。</p>
<ul>
<li>Camera.ScreenToViewportPoint(Vector3 position)：将屏幕坐标系转换为视口坐标系。</li>
<li>Camera.ViewportToScreenPoint(Vector3 position)：将视口坐标系转换为屏幕坐标系。</li>
</ul>
<p><code>世界坐标系</code>与<code>视口坐标系</code>的相互转换函数如下。</p>
<ul>
<li>Camera.WorldToViewportPoint(Vector3 position)：将世界坐标系转换为视口坐标系。</li>
<li>Camera.ViewportToWorldPoint(Vector3 position)：将视口坐标系转换为世界坐标系。</li>
</ul>
<h4 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>在空间中，向量用一段有方向的线段来表示，可以用于描述具有大小和方向的物理量</p>
<ul>
<li>物体运动的速度</li>
<li>加速度</li>
<li>摄像机观察方向</li>
<li>刚体受到的力等</li>
</ul>
<p>向量是物理、动画、三维图形的基础。</p>
<p>在数学中，向量(Vector3)也被称为矢量，是指具有大小和方向的量。</p>
<ul>
<li>向量的长度，也被称为“模”，也是向量的大小。</li>
<li>向量的方向描述了空间中向量的指向。</li>
</ul>
<p>在Unity中，点和向量都是以(x，y，z)的形式表示的。向量有两种类型</p>
<ul>
<li>Vector2(2D)</li>
<li>Vector3(3D)</li>
</ul>
<p>实际应用：</p>
<ul>
<li>设置某个物体的位置，使用 <code>Vector类型</code></li>
<li>物体沿着某个方向以某个速度移动，使用 <code>Vector类型</code> 表示速度的向量值，即速度的大小和方向</li>
<li>计算两个物体之间的距离，可以计算两个物体之间为起始和终点的向量的长度<br>TODO 待补充实际代码</li>
</ul>
<p><code>transform.position</code> 表示一个点，即物体在世界坐标系中的点。<br><code>transform.forward</code> 表示一个向量，即当前物体的本地坐标系的z轴在世界坐标系中的指向。</p>
<h5 id="向量运算"><a href="#向量运算" class="headerlink" title="向量运算"></a>向量运算</h5><p>向量的头是线的初始位置<br>向量的尾是线的结束为止(箭头)</p>
<p><strong>加法</strong></p>
<blockquote>
<p>从几何学的角度可以被理解成平移向量</p>
</blockquote>
<img src="/blog/p/c8a4b253/Unity%E5%90%91%E9%87%8F%E5%8A%A0%E6%B3%95.png" class="" title="Unity向量加法">
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向量加法</span></span><br><span class="line">Vector3 v1 = <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">Vector3 v2 = <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">Vector3 v3 = v1 + v2; <span class="comment">// TODO 答案待验证 v3(2,0,0)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果v1和v2都表示一个点，v3就是<code>从原点指向v3</code>的一个带有箭头的射线，此时v3就是一个向量；</li>
<li>如果v1和v2都表示一个向量，v3是一个<code>从v1的尾部指向v2的头部</code>的一个向量。</li>
</ul>
<p>用法：</p>
<ul>
<li>计算物体移动位置</li>
</ul>
<p><strong>减法</strong></p>
<blockquote>
<p>从几何学的角度可以被理解成平移负向量。不满足交换律，即a-b !&#x3D; (b-a)</p>
</blockquote>
<img src="/blog/p/c8a4b253/Unity%E5%90%91%E9%87%8F%E5%87%8F%E6%B3%95.png" class="" title="Unity向量减法">
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向量减法</span></span><br><span class="line">Vector3 v1 = <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Vector3 v2 = <span class="keyword">new</span> Vector3(<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">Vector3 v3 = v2 - v1; <span class="comment">// TODO 答案待验证 v3(3,0,-2.0)</span></span><br></pre></td></tr></table></figure>


<ul>
<li>如果v1和v2都表示一个点，v3就是<code>从v1开始指向v2</code>的一个带有箭头的射线，此时v3就是一个向量；</li>
<li>如果v1和v2都表示一个向量，v3是一个<code>从v1头部指向v2头部</code>的一个向量。</li>
</ul>
<p><strong>数乘(实数与向量相乘)</strong></p>
<blockquote>
<p>从几何学的角度可以被理解为沿着原始向量的方向或原始向量的反方向放大或缩小。</p>
</blockquote>
<p>数乘可以对向量的长度进行缩放，</p>
<ul>
<li>如果实数<code>大于0</code>，则数乘后的向量的方向与原始向量的方向一致，</li>
<li>如当实数<code>大于1</code>，向量数乘如图(a)所示；</li>
<li>如果实数<code>小于0</code>，则数乘后的向量的方向和原始向量的方向相反，</li>
<li>如当实数<code>小于-1</code>，向量数乘如图(b)所示。<img src="/blog/p/c8a4b253/Unity%E5%90%91%E9%87%8F%E6%95%B0%E4%B9%98.png" class="" title="Unity向量数乘"></li>
</ul>
<p><strong>点乘</strong></p>
<blockquote>
<p>又被称为点积、数量积、内积<br>从几何学的角度可以被理解为一条边向另一条边的投影乘以另一条边的长度。向量的点乘的结果描述了两个向量的“相似”程度，点乘的结果越大，两个向量越相近。<br>运算符 <code>·</code></p>
</blockquote>
<p>两个向量的点乘是对应分量乘积的和，其结果是一个标量，数值等于两个向量长度相乘再乘以两者夹角的余弦值。向量的点乘满足交换律，即a·b&#x3D;b·a</p>
<img src="/blog/p/c8a4b253/Unity%E5%90%91%E9%87%8F%E7%82%B9%E4%B9%98.png" class="" title="Unity向量点乘">

<p>用法：</p>
<ul>
<li>计算机图形学中，点乘常用来进行<code>方向性判断</code><ul>
<li>如果两个矢量的点乘<ul>
<li>&gt;0，他们的方向相近</li>
<li>&lt;0，他们的方向相反</li>
</ul>
</li>
</ul>
</li>
<li>Unity中，点乘用来判断角度<ul>
<li><code>计算物体的前进方向</code></li>
<li><code>计算物体到目标方向的夹角</code><ul>
<li>利用点乘判断一个多边形是面向摄像机还是背向摄像机</li>
<li>在计算聚光灯的效果时，根据点乘得到光照效果<ul>
<li>点乘越大说明夹角越小，则物体离光照的轴线越近，光照越强</li>
<li>反之，光照越弱</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>叉乘</strong></p>
<blockquote>
<p>从几何学的角度可以被理解为两个向量叉乘得到一个新的向量，新向量垂直于原来的两个向量。<br>运算符 <code>*</code><br>仅用于3D向量</p>
</blockquote>
<p>如果两个向量a和b在同一个平面中，则向量a×b垂直于a和b，指向符合左手定则，其模是以两个向量为边的平行四边形的面积。<br>  <img src="/blog/p/c8a4b253/Unity%E5%90%91%E9%87%8F%E5%8F%89%E4%B9%98.png" class="" title="Unity向量叉乘"></p>
<p>axb叉乘 类似于 左手坐标系的z轴，仅用于3D向量</p>
<p>用法：(通常用于<code>判断方向</code>)</p>
<ul>
<li>判断角色是顺时针转动还是逆时针转动 才能更快的转向敌人。 <ul>
<li>当一个敌人在你身后时，利用叉乘可以判断是往左转还是往右转才能更快的转向敌人，点乘得到当前面朝向的方向和你到敌人的方向所成角度的大小</li>
</ul>
</li>
</ul>
<h5 id="Vector3"><a href="#Vector3" class="headerlink" title="Vector3"></a>Vector3</h5><blockquote>
<p>三维向量表示3D向量和点，既包含位置、方向(朝向)、欧拉角等信息，也包含普通向量运算的函数。</p>
</blockquote>
<p>Vector3三维向量可以表示位置、方向，3D向量的长度&#x3D;向量的大小&#x3D;向量的模&#x3D;向量各分量平方和的平方根。</p>
<p>在三维坐标系中，分别取与X轴、Y轴、Z轴方向相同的3个单位向量i、j、k作为一组基底。若a为该坐标系内的任意向量，以坐标原点O为起点向P点作向量OP&#x3D;a。a&#x3D;向量OP&#x3D;xi+yj+zk，把实数对(x，y，z)被称为向量a的坐标，记作a&#x3D;(x，y，z)，这就是向量a的坐标的表示。其中，(x，y，z)是点P的坐标，向量OP被称为点P的位置向量。</p>
<p>在Unity中，Vector3的常用属性如下。</p>
<ul>
<li>Vector3.zero：表示3D零向量，是Vector3(0，0，0)的简码。</li>
<li>forward：表示3D向量的前方，是Vector3(0，0，1)的简码，即面向Z轴。</li>
<li>right：表示3D向量的右方，是Vector3(1，0，0)的简码，即面向X轴。</li>
<li>up：表示3D向量的上方，是Vector3(0，1，0)的简码，即面向Y轴。</li>
<li>one：是Vector3(1，1，1)的简码。</li>
</ul>
<p>Vector3还有很多常用函数和方法，如</p>
<ul>
<li>Lerp()(两个向量之间的线性插值)、</li>
<li>Slerp()(两个向量之间的球形插值)、</li>
<li>MoveTowards()(由当前地点移向目标)、</li>
<li>RotateTowards()(将当前的向量转向目标)、</li>
<li>SmoothDamp()(随着时间的推移，逐渐改变一个向量朝向预期的目标)、</li>
<li>Distance()(返回a和b之间的距离)等。</li>
</ul>
<p>另外，在Unity中，有时会用到Vector2和Vector4</p>
<ul>
<li>Vector2表示二维向量，用于表示2D的位置和向量，如网格中的纹理坐标或材质中的纹理偏移等。<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对应坐标系 上下左右</span></span><br><span class="line">Vector2.down = Vector2(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">Vector2.up = Vector2(<span class="number">0</span>, <span class="number">1</span>) </span><br><span class="line">Vector2.left = Vector2(<span class="number">-1</span>, <span class="number">0</span>)</span><br><span class="line">Vector2.right = Vector2(<span class="number">1</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li>
<li>Vector4表示四维向量，如网格切线、着色器的参数等。</li>
</ul>
<p>这两种向量的操作与Vector3基本类似.</p>
<!-- 补充： -->


<h4 id="欧拉角和四元数"><a href="#欧拉角和四元数" class="headerlink" title="欧拉角和四元数"></a>欧拉角和四元数</h4><p>在特定的坐标系中，描述物体的方位一般需要说明物体的位置和朝向。</p>
<ul>
<li>描述物体的位置实际上就是描述物体相对于给定参考点(通常是坐标系原点)的位移</li>
<li>描述物体的朝向就是描述相对于已知朝向(通常为“单位”朝向)的旋转，旋转的量被称为角位移。</li>
</ul>
<p>在图形学中，<strong>描述物体方位</strong>的常见方法有<code>矩阵</code>、<code>欧拉角</code>和<code>四元数</code>，这3种方法各有各的优点和不足，可以在不同的场合使用不同的方法。</p>
<h5 id="欧拉角"><a href="#欧拉角" class="headerlink" title="欧拉角"></a>欧拉角</h5><p>欧拉角的基本思想是 将角位移分解为绕3个互相垂直轴的3个旋转组成的序列，即按照一定的坐标轴顺序(一般为先Z轴，再X轴，最后Y轴)绕每个轴旋转一定的角度来变换坐标或向量，实际上是一系列绕坐标轴旋转的组合。</p>
<p>欧拉角在表现形式上是一个三维向量，每个分量的值分别表示<code>物体绕坐标系对应轴的旋转角度</code>。</p>
<p>Unity中，所有物体都会绑定Transform组件，Rotation属性对应的就是该游戏对象方位的欧拉角表示。描述了 <code>该游戏对象相对于副坐标系的方位</code>。<br>Transform组件：</p>
<ul>
<li>Position 本地坐标系(位置)</li>
<li>Potation 欧拉角表示(方位)</li>
</ul>
<img src="/blog/p/c8a4b253/Unity%E6%AC%A7%E6%8B%89%E8%A7%92x.png" class="" title="Unity欧拉角x">

<p>Unity中规定了一组欧拉旋转是按照Z→X→Y的顺序进行的。</p>
<ul>
<li>一次旋转 和 多次旋转的结果是不同的。因为在一组欧拉旋转中，相对的轴向不会发生变化。  <figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一次旋转</span></span><br><span class="line">transform.Rotate(<span class="number">90</span>, <span class="number">60</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多次旋转，每次旋转后，相对的轴向都发生了变化</span></span><br><span class="line">transform.Rotate(<span class="number">0</span>, <span class="number">0</span>, <span class="number">30</span>);</span><br><span class="line">transform.Rotate(<span class="number">90</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">transform.Rotate(<span class="number">0</span>, <span class="number">60</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h5><p>通过四个数字来表示方位：<code>一个3维向量</code>表示<code>转轴</code>和 <code>一个角度分量</code>表示<code>绕次转轴的旋转角度</code>，所以叫四元数。</p>
<p>在Unity中：<br><strong>基本的旋转</strong>可以通过 <code>transform.Rotate</code> 实现。但是当需要对旋转角度进行计算时，只使用一个四元数就可以执行<code>绕任意过原点的向量</code>的旋转。</p>
<p>transform组件有个名为 <code>rotation</code> 的变量，其类型是四元数。<br>不能通过取 rotation的x、y、z对应transform面板中Rotation的各个分量。<br>四元素的x、y、z与 <code>rotation</code> 的三个值并不直接对应，但是可以通过表达式进行转换。</p>
<p>一个四元数p：</p>
<ul>
<li>可以表示为p&#x3D;(xi+yj+zk+w)&#x3D;((x，y，z)，w)&#x3D;(v，w)</li>
<li>也可以表示为p&#x3D;i(x<em>sin(θ&#x2F;2))+j(y</em>sin(θ&#x2F;2))+k(z*sin(θ&#x2F;2))+cos(θ&#x2F;2)&#x3D;((x，y，z)sinθ&#x2F;2，cosθ&#x2F;2)。<br>其中，v是向量，w是实数，θ为旋转角度。具体来说，它表示空间点P绕着单位向量轴u&#x3D;(x，y，z)表示的旋转轴旋转的角度为θ。</li>
</ul>
<p>如使点m&#x3D;Vector3(x，y，z)绕X轴(1，0，0)按顺时针旋转90°，只要有角度，即可给出四元数的4个分量值，则对应的Quaternion数值为如下形式：</p>
<img src="/blog/p/c8a4b253/Unity%E5%9B%9B%E5%85%83%E6%95%B0Quaternion.png" class="" title="Unity四元数Quaternion">

<p>欧拉角与四元数在易读性、易运算性、表示的唯一性等方面各有优点和缺点。</p>
<p><code>四元数q</code>转换为<code>欧拉角v</code>的转换方法：<code>Vector3 v = q.eulerAngles;</code><br><code>欧拉角v</code>转换为<code>四元数q</code>的转换方法：<code>Quaternion q = Quaternion.Euler(v);</code></p>
<p><strong>四元数操作</strong></p>
<blockquote>
<p>四元数是基于复数</p>
</blockquote>
<p>大多数情况下：</p>
<ul>
<li>只需要获取和使用现有的旋转，如来自<code>Transform</code>组件</li>
<li>使用四元数来构造新的旋转，如在两次旋转之间平滑的插值。</li>
</ul>
<p>构造器Quaternion();<br>构建方式：</p>
<ul>
<li>Quaternion(x,y,z,w); &#x2F;&#x2F; 从四个float类型的参数构建一个新的四元数。</li>
<li>Quaternion(Vector3, Single); &#x2F;&#x2F; 从指定向量和旋转部分创建四元数。</li>
</ul>
<p>参数要求：</p>
<ul>
<li>xyzw的取值范围(-1,1)</li>
</ul>
<p>物体旋转两周才可以使所有数值回归初始值。<br>例如：<br>如果四元数的初始值为(0,0,0,1)，则分别沿着X轴和Y轴旋转不同的角度后，四元数的变化如下<br>沿着X轴旋转：</p>
<ul>
<li>180°(-1，0，0，0)，</li>
<li>360°(0，0，0，-1)，</li>
<li>540°(1，0，0，0)，</li>
<li>720°(0，0，0，1)。</li>
</ul>
<p>沿着Y轴旋转：</p>
<ul>
<li>180°(0，1，0，0)，</li>
<li>360°(0，0，0，-1)，</li>
<li>540°(0，-1，0，0)，</li>
<li>720°(0，0，0，1)。</li>
</ul>
<p>运算符<br>四元素的运算符主要有三个</p>
<ul>
<li>!&#x3D; 判断两个四元数是否不相等</li>
<li>&#x3D;&#x3D; 判断两个四元数是否相等</li>
<li>* 和平两个旋转</li>
</ul>
<p>四元数与 <code>方向向量</code> 相乘，必须是四元数右乘方向向量，即将四元数至于方向向量的前面</p>
<p>在Unity中，Quaternion的乘法操作 <code>*</code> 有以下两种：<br>(1)Quaternion<em>Quaternion，如q&#x3D;t</em>p，表示先将一个点进行t操作旋转，然后进行p操作旋转。其中，p、q、t均为四元数。<br>(2)Quaternion<em>Vector3，如q&#x3D;t</em>p，表示将点p进行t操作旋转。其中，q、t为四元数，p为方向向量。</p>
<p>如下代码用于计算结果向量的值：</p>
<img src="/blog/p/c8a4b253/Unity%E5%9B%9B%E5%85%83%E6%95%B0%E4%B9%98%E6%B3%95%E8%AE%A1%E7%AE%97.png" class="" title="Unity四元数乘法计算">

<p>在上面的代码中，向量forward包含的初始值为(0，0，1)，如绕Y轴旋转90°，即向量按照顺时针方向旋转90°。</p>
<p>因此，resultA的值为(1，0，0)，resultB的值为(0，0，-1)，resultC的值同样为(0，0，-1)。需要注意的是，四元数是可以叠加运算的。</p>
<p>静态方法<br>Quaternion类中的静态方法主要有</p>
<ul>
<li>Angle()方法、</li>
<li>AngleAxis()方法、</li>
<li>Dot()方法、</li>
<li>Euler()方法、</li>
<li>LookRotation()方法、</li>
<li>FromToRotation()方法、</li>
<li>Inverse()方法、</li>
<li>Lerp()方法、</li>
<li>RotateToWards()方法</li>
<li>Slerp()方法。</li>
</ul>
<p>静态方法可以直接通过类名调用，如Quaternion.Angle(q1，q2)。下面对常用的静态方法进行分析。</p>
<ol>
<li>Angle()方法声明形式如下：<br><code>public static float Angle(Quaternion a, Quaternion b);</code><br>功能：计算两个旋转之间的夹角，与Vector3.Angle()的作用相同。</li>
<li>AngleAxis()方法声明形式如下：<br><code>public static Quaternion AngleAxis(float angle, Vector3 axis);</code><br>功能：构建一个四元数，表示沿着一个轴旋转固定的角度，即绕axis轴旋转angle，创建一个旋转。其参数是旋转的角速度和轴方向(向量)。</li>
<li>Euler()方法声明形式如下：<br><code>public static Quaternion Euler(float x, float y, float z);</code><br>或者<br><code>public static Quaternion Euler(Vector3 euler);</code><br>功能：返回一个旋转角度，绕Z轴旋转z°，绕X轴旋转x°，绕Y轴旋转y°(默认顺序为Z轴→X轴→Y轴)，即返回一个四元数，该四元数表示欧拉旋转后的朝向。</li>
<li>LookRotation()方法声明形式如下：<br><code>public static Quaternion LookRotation(Vector3 forward, [DefaultValue(&quot;Vector3.up&quot;)] Vector3 upwards);</code><br>功能：返回一个四元数，使用前方和上方矢量确定朝向，即创建一个有具体的forward方向和upward方向的旋转。这个功能很实用，传入的两个参数分别代表前方盯着的方向及自己的上方。如在以下代码中，可以使一个GameObject转动时盯着另一个物体，即当前的object一直盯着target，默认up朝向是Vector3.up，也可以自定义up朝向：<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Transform target;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Vector3 relativePos = target.position - transform.position;</span><br><span class="line">    Quaternion rotation = Quaternion.LookRotation(relativePos);</span><br><span class="line">    transform.rotation = rotation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>FromToRotation()方法声明形式如下：<br><code>public static Quaternion FromToRotation(Vector3 fromDirection, Vector3 toDirection);</code><br>功能：返回从一个方向到另一个方向的旋转，即转一个方向。</li>
<li>Lerp()方法声明形式如下：<br><code>public static Quaternion Lerp(Quaternion a, Quaternion b, float t);</code><br>功能：返回一个四元数，表示从四元数a到b的线性插值，即线性地从一个角度旋转到另一个角度。插值也就是中间旋转量，a作为起点，此时对应的t为0；b作为终点，此时对应的t为1。当t取0和1之间的小数时，代表中间的插值结果。</li>
<li>Slerp()方法声明形式如下：<br><code>public static Quaternion Slerp(Quaternion a, Quaternion b, float t);</code><br>功能：通过t值在from和to之间插值，即沿球面线性地从一个角度旋转到另一个角度，其中，旋转匀速增加t。<br>Ler()p方法与Slerp()方法的功能基本相同，Lerp()方法的计算速度快，但是精度较低，如果相对旋转变化量很小，则效果不理想。Slerp()方法的计算精度高，但是运算速度相对较慢。</li>
</ol>
<p>思考与练习</p>
<ol>
<li>简述笛卡儿坐标系的特点及常用的种类。</li>
<li>简述Unity中常用的坐标系及其特点。</li>
<li>简述Unity中常用的向量运算及其特点。</li>
<li>简述Vector3类型变量的特点及常用的方法。</li>
<li>简述欧拉角的特点。</li>
<li>简述四元数的特点及常用的静态方法。</li>
<li>简述欧拉角与四元数的优点和缺点。</li>
</ol>
<h3 id="Unity基本内容"><a href="#Unity基本内容" class="headerlink" title="Unity基本内容"></a>Unity基本内容</h3><h4 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h4><p>推荐使用Unity Hub安装，需要注册Unity账号</p>
<blockquote>
<p><a href="https://unity.cn/releases" target="_blank" rel="noopener">https://unity.cn/releases</a></p>
</blockquote>
<p>保存Scene场景：File-&gt;save as… -&gt; 输入文件名 保存即可。</p>
<h4 id="Unity窗口视图"><a href="#Unity窗口视图" class="headerlink" title="Unity窗口视图"></a>Unity窗口视图</h4><p><code>对象</code> 是由 <code>组件</code> 构成的，<code>对象</code> 可以理解为是 <code>组件</code> 的<code>容器</code>。</p>
<p>所有视图：</p>
<img src="/blog/p/c8a4b253/Unity%E5%9B%9B%E5%A4%A7%E9%9D%A2%E6%9D%BF.png" class="" title="Unity四大面板">
<ul>
<li><strong>Hierarchy</strong> 层级视图，显示当前场景中所有游戏对象的<code>层级结构</code></li>
<li><strong>Inspector</strong> 检视视图，显示当前选择游戏对象的<code>相关属性</code>和<code>信息</code><ul>
<li>Transform 对象的位置、大小、旋转信息</li>
<li>Scripts 对象脚本，类似剧本</li>
<li>Camera 对象相机</li>
</ul>
</li>
<li><strong>Scene</strong> 场景视图，用于设置场景以及方式游戏对象，是构建游戏场景的地方<ul>
<li>Game 游戏视图 游戏开始后，摄像机拍到的景象</li>
<li>关卡</li>
</ul>
</li>
<li><strong>Project</strong> 工程视图(Packages和Assets)，包含整个工程中所有可用的资源<ul>
<li>包</li>
<li>脚本</li>
<li>字体</li>
<li>声音</li>
<li>地图</li>
</ul>
</li>
</ul>
<p>所有菜单项</p>
<ul>
<li>File：Scene和Project的创建、保存以及输出等</li>
<li>Edit：编辑功能，设置关联环境，控制输入的设置等</li>
<li>Assets：创建、导入、导出资源，提取预制体，导入C#项目等</li>
<li>GameObject：创建场景对象和UI，以及调整摄像机视野等</li>
<li>Component：为对象添加系统提供的组件</li>
<li>Window：打开各个视图窗口和面板</li>
<li>Help</li>
</ul>
<h4 id="常用工作视图"><a href="#常用工作视图" class="headerlink" title="常用工作视图"></a>常用工作视图</h4><img src="/blog/p/c8a4b253/Unity%E5%B8%B8%E7%94%A8%E5%B7%A5%E4%BD%9C%E8%A7%86%E5%9B%BEScene%E8%A7%86%E5%9B%BE.png" class="" title="Unity常用工作视图Scene视图">
<p><strong>Scene视图</strong></p>
<ul>
<li>模型(对象)</li>
<li>摄像机</li>
<li>光源</li>
<li>Scene Gizmos工具</li>
<li><img src="/blog/p/c8a4b253/Unity%E5%B8%B8%E7%94%A8%E5%B7%A5%E4%BD%9C%E8%A7%86%E5%9B%BEScene%E8%A7%86%E5%9B%BE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95.png" class="" title="Unity常用工作视图Scene视图常用操作方法"></li>
<li><img src="/blog/p/c8a4b253/Unity%E5%B8%B8%E7%94%A8%E5%B7%A5%E4%BD%9C%E8%A7%86%E5%9B%BEScene%E8%A7%86%E5%9B%BE%E5%9C%BA%E6%99%AF%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E6%A0%8F.png" class="" title="Unity常用工作视图Scene视图场景视图控制栏"></li>
</ul>
<p><strong>Game游戏视图</strong></p>
<ul>
<li>顶部是Game View Control Bar(游戏视图控制条)<ul>
<li><img src="/blog/p/c8a4b253/UnityGame%E8%AF%95%E5%9B%BE%E9%A1%B6%E9%83%A8.png" class="" title="UnityGame试图顶部"></li>
<li><img src="/blog/p/c8a4b253/UnityGame%E8%A7%86%E5%9B%BE%E9%A1%B6%E9%83%A8%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D1.png" class="" title="UnityGame视图顶部功能介绍1"></li>
<li><img src="/blog/p/c8a4b253/UnityGame%E8%A7%86%E5%9B%BE%E9%A1%B6%E9%83%A8%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D2.png" class="" title="UnityGame视图顶部功能介绍2"></li>
</ul>
</li>
</ul>
<p><strong>Hierarchy层级视图</strong><br>先创建的游戏对象会被后创建的游戏对象遮挡住，从场景中看到的是最后创建的游戏对象<br>Scene视图中的游戏对象会随着Hierarchy视图中游戏对象的添加和删除而不断更新。<br>主要操作功能：</p>
<ul>
<li>添加游戏对象</li>
<li>删除游戏对象</li>
<li>建立父子关系<ul>
<li>一个父对象可以有多个子对象</li>
<li>子对象只能有一个父对象</li>
<li>对父对象的操作会影响子对象</li>
<li>对子对象的操作不会影响父对象</li>
</ul>
</li>
</ul>
<p><strong>Project视图</strong></p>
<blockquote>
<p>组织管理文件的模式 与 资源管理模式相同：对各种资源采用分类管理</p>
</blockquote>
<p>如果需要移动或重新组织项目资源，则在Project视图的项目资源内进行，否者会损坏或删除与该资源相关的原数据和链接，甚至破坏项目</p>
<p><strong>Inspector视图</strong></p>
<blockquote>
<p>显示和设置游戏对象的属性、添加代码或组件等</p>
</blockquote>
<p>组件以及部分属性：</p>
<img src="/blog/p/c8a4b253/UnityInspector%E8%A7%86%E5%9B%BE%E9%83%A8%E5%88%86%E7%BB%84%E4%BB%B6%E5%92%8C%E5%B1%9E%E6%80%A7.png" class="" title="UnityInspector视图部分组件和属性">
<ul>
<li>Transform<ul>
<li>Position：本地坐标系</li>
<li>Rotation：方位信息(欧拉角)</li>
<li>Scale：缩放</li>
</ul>
</li>
<li>Mesh Filter：网格过滤器<ul>
<li>从资源中获取Mesh(网格)，并将其传递给网格渲染器(Mesh Renderer)，以便在屏幕上渲染。</li>
</ul>
</li>
<li>Mesh Collider：Mesh碰撞体，为了防止物体被穿透，需要为对象添加碰撞体。</li>
<li>Mesh Renderer组件：网格渲染器，从网格过滤器获得几何形状，并且根据游戏对象的Transform组件定义的位置进行渲染。<ul>
<li>Materials属性：设置游戏对象的颜色、贴图等信息。</li>
</ul>
</li>
</ul>
<p><strong>Console面板</strong></p>
<blockquote>
<p>调试工具，显示程序运行时产生的调试信息</p>
</blockquote>
<img src="/blog/p/c8a4b253/UnityConsole%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.png" class="" title="UnityConsole调试工具">

<p>每条信息前面的图标可以显示信息的种类：</p>
<ul>
<li><p>白色叹号是正常信息；</p>
</li>
<li><p>黄色三角形是警告信息，不影响运行；</p>
</li>
<li><p>红色叹号是错误报警信息，出现此类信息后，程序<code>无法运行</code>，调试后不再出现此类信息程序才可以运行。</p>
<p>所以，根据出现的信息种类可以判断信息的处理方式，<code>双击错误信息</code>会<code>直接跳转到脚本代码中出现问题的位置</code>，可以快捷地调试程序。</p>
</li>
</ul>
<h4 id="Unity资源商店-AssetStore"><a href="#Unity资源商店-AssetStore" class="headerlink" title="Unity资源商店 AssetStore"></a>Unity资源商店 AssetStore</h4><blockquote>
<p>Windows -&gt; Asset Store 命令直接访问 或者”Ctrl+9”组合键访问</p>
</blockquote>
<p>汇集了丰富的<code>插件资源</code>和<code>游戏素材资源</code>，在创建游戏时，通过资源商店获取资源如：</p>
<ul>
<li>任务模型</li>
<li>动画</li>
<li>粒子特效</li>
<li>纹理</li>
<li>音频特效</li>
<li>各类扩展插件</li>
</ul>
<p>同时开发者可以在资源商店出售或免费提供自己的资源。</p>
<p>资源安装流程：</p>
<ol>
<li>选择对应的资源</li>
<li>点击下载</li>
<li>导入(Import Unity Package)</li>
</ol>
<h3 id="Unity脚本开发技术"><a href="#Unity脚本开发技术" class="headerlink" title="Unity脚本开发技术"></a>Unity脚本开发技术</h3><h4 id="脚本简介"><a href="#脚本简介" class="headerlink" title="脚本简介"></a>脚本简介</h4><blockquote>
<p>脚本可以被理解为 <code>附加在游戏对象上</code>的<code>用于定义游戏对象的行为</code>的<code>指令代码</code>，必须绑定在游戏对象上才能开始它的生命周期。</p>
</blockquote>
<p>游戏吸引人的地方在于它的<code>可交互性</code>，Unity的<code>游戏交互</code>通过<code>脚本编程</code>来实现。</p>
<p>通过脚本，开发者可以控制每个游戏对象的创建、销毁，以及游戏对象在各种情况下的行为，进而实现预期的交互效果。</p>
<p>Unity集成了开源的脚本编辑器<code>MonoDevelop</code>，它具有使用简便、跨平台等特性，是Unity默认的脚本开发工具。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestScript</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1. 最先加载，首先执行，且只执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 第一次enable后执行start，随后不再执行start</span></span><br><span class="line">    <span class="comment">//    同时可以根据程序的逻辑多次调用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 脚本被禁用时调用，当前脚本被禁用后，脚本不在执行任何更新操作</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDisable</span>()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 尽在enable后执行一次，及时后面多次enable，start也不执行</span></span><br><span class="line">    <span class="comment">//    在第一帧更新之前调用Start</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 只要start完成，且当前enable，每帧都执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上图是Unity生命周期调试代码，此脚本被挂载到游戏对象上之后能在控制台上显示调试信息，以此了解事件执行的先后顺序。</p>
<h5 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h5><p>Unity的脚本语言运行于Mono之上。Mono是一个致力于.NET开源的软件平台，严格来讲是.NET的第三方跨平台实现。Mono旨在使开发人员能够轻松地创建.NET基础的跨平台应用程序。运行于Mono之上的应用可以使用.NET库。</p>
<p>Unity支持三种脚本语言：</p>
<ul>
<li>UnityScript(菜单上显示为JavaScript，是两种不同的语言)</li>
<li>C#(推荐使用)</li>
<li>Boo(.net平台的第三方语言，使用群体较小)<br>在一个游戏开发中人员可以使用一种或两种语言来实现脚本的控制。</li>
</ul>
<p>Unity 5.x及以上版本，Unity推荐使用C#作为开发语言，并一直延续至今。</p>
<h5 id="C-简介"><a href="#C-简介" class="headerlink" title="C#简介"></a>C#简介</h5><blockquote>
<p>一种面向对象的计算机语言</p>
</blockquote>
<p>C#本身有很强大的语言特性，语法简单，易学易用，高度面向对象，类型体系完善且安全，能胜任从桌面应用到Web开发等诸多场景。大多数Unity第三方插件都是使用C#编写的，许多商业游戏项目也是使用C#开发的。</p>
<h5 id="脚本与类、组件、游戏对象之间的关系"><a href="#脚本与类、组件、游戏对象之间的关系" class="headerlink" title="脚本与类、组件、游戏对象之间的关系"></a>脚本与类、组件、游戏对象之间的关系</h5><p>一个Unity脚本对应一个.cs文件扩展名的脚本文件，该文件对应一个C#类。在不考虑创建组件的前提下，C#支持在一个.cs文件中定义多个类或声明一个命名空间。</p>
<p>一般来讲，一个脚本文件对应一个C#类，但不是所有的C#类都能<code>作为组件挂载到游戏对象上</code>。只有直接或间接<code>继承MonoBehaviour类</code>的脚本，才能被称为<code>组件</code>。所以，Unity组件一定是脚本，但脚本不一定是Unity组件。在一般情况下，组件可以自由调用普通的C#类提供的静态方法。</p>
<p>Unity组件可以分为<code>系统组件</code>和<code>用户自定义组件</code>。两者均可以直接挂载到游戏对象上。</p>
<ul>
<li>系统组件集成于Unity开发环境中，一些常用的组件被整合至Unity标准Asset资源包中</li>
<li>自定义组件则是用户在开发环境下自行编写的C#脚本。</li>
</ul>
<p>Unity组件依附于游戏对象，用于模拟游戏对象的行为。从本质上来说，游戏对象是GameObject类在场景内的实例化，用于充当组件的载体。将一些具有特定功能的代码封装成一个类(组件)，当这个类挂载到某个游戏对象上时，就相当于对此类进行了实例化，挂载了此实例的游戏对象将获得该实例提供的所有功能。<code>挂载组件</code>相当于<code>创建功能实体</code>，<code>添加游戏对象行为</code>。</p>
<p><code>继承自MonoBehaviour的组件``只能挂载(Add Component)到游戏对象上</code>，其实例化由Unity引擎自动完成。开发人员<code>不能通过new关键字</code>来创建一个组件的实例，虽然这样做可以编译成功，但是执行时会有错误提示。在场景运行状态下，组件的生命周期受限于加载它的游戏对象的生命周期。游戏对象被销毁之后，其挂载的组件的生命周期也随之结束。</p>
<h4 id="脚本的相关操作"><a href="#脚本的相关操作" class="headerlink" title="脚本的相关操作"></a>脚本的相关操作</h4><p><strong>创建脚本</strong></p>
<ul>
<li>菜单命令法 菜单栏中选择 Assets -&gt; Create -&gt; C# Script</li>
<li>快捷菜单法 Project视图上房单击Create按钮，或者在视图区右击，选择Create-&gt;C# Script</li>
<li>游戏对象中添加组件 点击New Script创建</li>
</ul>
<p><strong>挂载脚本</strong></p>
<blockquote>
<p>仅继承MonoBehaviour类的脚本，即组件</p>
</blockquote>
<ol>
<li>添加组件法<br>  创建脚本后，在Add Component中搜索组件脚本进行挂载</li>
<li>文件拖动法<br>  创建脚本后，从Project视图中的脚本拖到空白处</li>
<li>添加脚本代码法<br>  在脚本代码中，通过AddComponent<T>()方法动态添加组件  <figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 为当前脚本所依附的游戏对象添加Player组件</span></span><br><span class="line">    AddComponent&lt;Player&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>注意：</p>
<ul>
<li>一般将所有的C#脚本存放在一个单独的文件夹中，如Scripts。</li>
<li>直接将脚本拖到游戏对象上，运行时脚本就会自动关联该游戏对象。</li>
<li>脚本在Project视图中显示的名称不包括.cs文件扩展名。类名需要与.cs脚本的名称一致，否则会出现编译错误。所有类继承自MonoBehaviour类。</li>
<li>挂载的脚本可以通过脚本编辑器随时进行修改、保存，并在Unity编辑器中每隔几秒自动检测更新。如果脚本中存在严重的语法错误，在未更正前错误提示会一直出现在控制台区，并导致该脚本无法挂载到游戏对象上，程序也无法正常启动。</li>
<li>在Unity场景编辑状态下以拖动方式挂载的脚本会一直保留在Inspector视图中</li>
<li>在调试状态下挂载的脚本会在调试结束后自动卸载。</li>
</ul>
<p><strong>卸载脚本</strong></p>
<ul>
<li>Inspector视图 -&gt; 脚本 -&gt; Remove Component</li>
<li>通过代码卸载<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 销毁组件</span></span><br><span class="line">Destroy(gameObject.GetComponent&lt;Player&gt;());</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>脚本编译顺序</strong><br>遵循特定的规则，与脚本所在的文件夹位置有关。</p>
<p>C＃以Assembly(汇编集)为基本单位来组织脚本代码，脚本被编译成的库文件(dll)将在运行时被实时编译执行。库文件之间有加载顺序。后编译的脚本能够引用先编译的脚本，先编译的脚本无法引用后编译的脚本。</p>
<p>C＃脚本的编译顺序如下。</p>
<ol>
<li>所有在Standard Assets、Pro Standard Assets或Plugins中的脚本最先编译。</li>
<li>所有在Standard Assets&#x2F;Editor、Pro Standard Assets&#x2F;Editor、Plugins&#x2F;Editor中的脚本相继被编译。</li>
<li>所有在Assets&#x2F;Editor外面的，并且不在(1)、(2)中的脚本相继被编译。</li>
<li>Assets&#x2F;Editor中的脚本最后被编译。</li>
</ol>
<p><strong>脚本执行顺序</strong><br>Unity脚本的执行顺序有一套默认的规则，在特殊情况下也可以根据需要手动定制脚本的执行顺序。注意：这里所说的脚本的执行顺序是指多个脚本之间执行的先后顺序，不单指脚本内部代码的执行顺序(脚本内方法的执行顺序遵循MonoBehaviour类的生命周期规则，方法间的调用顺序并没有改变)。</p>
<p>默认规则</p>
<ol>
<li>单个游戏对象脚本方法的执行顺序按照挂载到该游戏对象的时间先后顺序倒序执行(后挂载的先执行)，而不是按照Inspector视图上显示的上下顺序。当脚本方法执行时，所有脚本初始化阶段的Awake()执行完毕后再执行所有脚本的OnEnable()，然后依次执行Start()、Update()、LateUpdate()，程序运行期间任何脚本被禁用，该脚本的更新将停止。</li>
<li>当场景中有多个游戏对象时，按照脚本创建在游戏对象上的时间先后顺序(不是上下顺序)倒序初始化(后创建的先初始化)，脚本执行顺序遵循规则(1)，与脚本挂载到哪个游戏对象上无关。未被激活的游戏对象在场景中将不可见，挂载在其上的脚本也不会运行。</li>
<li>如果游戏对象有子对象，则同样遵循规则(2)。</li>
<li>单个脚本内部方法的执行顺序如图所示。脚本主要内部方法的执行顺序如下：<ol>
<li>唤醒(Awake()，仅执行一次)</li>
<li>→激活(OnEnable())</li>
<li>→重置(Reset())</li>
<li>→开始(Start()，仅执行一次)</li>
<li>→固定更新(FixedUpdate())</li>
<li>→模拟物理(Physics)</li>
<li>→触发器(Trigger)的进入、离开等</li>
<li>→碰撞器(Collision)的进入、离开等</li>
<li>→刚体(Rigidbody)的位置和旋转的处理</li>
<li>→鼠标按下、抬起等事件(OnMouse())</li>
<li>→更新(Update())</li>
<li>→最后更新(LateUpdate())</li>
<li>→渲染(Rendering())</li>
<li>→禁用(OnDisable())</li>
<li>→销毁(OnDestroy())。  <img src="/blog/p/c8a4b253/Unity%E8%84%9A%E6%9C%AC%E7%BC%96%E8%AF%91%E9%A1%BA%E5%BA%8F-%E9%BB%98%E8%AE%A4%E9%A1%BA%E5%BA%8F.jpeg" class="" title="Unity脚本编译顺序-默认顺序"></li>
</ol>
</li>
</ol>
<p>手动设置<br>  Unity也提供了用来设置脚本的执行顺序的方法，在菜单栏中选择“Edit→Project Settings→Script Execution Order”命令，即可在Inspector视图中看到Script Execution Order面板。单击右下角的“+”按钮将弹出下拉列表，包括游戏中的所有脚本。单击所需脚本即可把脚本添加至Script Execution Order面板中，如图所示。<br>  <img src="/blog/p/c8a4b253/Unity%E8%84%9A%E6%9C%AC%E7%BC%96%E8%AF%91%E9%A1%BA%E5%BA%8F-%E6%89%8B%E5%8A%A8%E8%AE%BE%E7%BD%AE.jpeg" class="" title="Unity脚本编译顺序-手动设置"></p>
<p>  脚本添加完毕之后，可以使用鼠标拖动脚本为脚本排序，脚本的位置越靠上，脚本名称后面的数字越小，执行越靠前(这种调整方式仅仅影响不同脚本名称之间的优先级，同名脚本的执行顺序遵循后挂载先执行的堆栈原则)。其中，Default Time表示没有设置执行顺序的那些脚本的执行顺序。</p>
<h4 id="脚本编辑器"><a href="#脚本编辑器" class="headerlink" title="脚本编辑器"></a>脚本编辑器</h4><p>Unity支持多种外部脚本编辑器</p>
<ul>
<li>MonoDevelop编辑器(默认)</li>
<li>Visual Studio(Mono的替代方案)</li>
<li>Visual Studio Code(个人推荐)</li>
<li>Other…</li>
</ul>
<h5 id="设置默认编辑器"><a href="#设置默认编辑器" class="headerlink" title="设置默认编辑器"></a>设置默认编辑器</h5><p>Unity 首选项<br>External Tools<br>External Script Editor 选择编辑器</p>
<h5 id="VSCode编辑器-代码不提示"><a href="#VSCode编辑器-代码不提示" class="headerlink" title="VSCode编辑器 代码不提示"></a>VSCode编辑器 代码不提示</h5><p>Unity版本 2022.2.1f1c1</p>
<p><strong>安装.net</strong></p>
<blockquote>
<p><a href="https://dotnet.microsoft.com/zh-cn/download" target="_blank" rel="noopener">https://dotnet.microsoft.com/zh-cn/download</a> arm64(m1)</p>
</blockquote>
<p>选择最新版 M1芯片arm64安装即可，看安装文档是否需要重启。</p>
<p><strong>安装momo</strong></p>
<blockquote>
<p><a href="https://www.mono-project.com/download/stable/" target="_blank" rel="noopener">https://www.mono-project.com/download/stable/</a></p>
</blockquote>
<p>选择最新版Visual Studio channel版本，并且重启。</p>
<p><strong>安装C#扩展</strong></p>
<blockquote>
<p>从指定文件安装 <a href="https://github.com/OmniSharp/omnisharp-vscode/releases/tag/v1.23.11" target="_blank" rel="noopener">https://github.com/OmniSharp/omnisharp-vscode/releases/tag/v1.23.11</a></p>
</blockquote>
<p>如果出现</p>
<img src="/blog/p/c8a4b253/OmniShart_requires.png" class="" title="OmniShart_requires">
<p>说明当前版本的C#是还未修复的最新版本，需要安装23.11</p>
<p><strong>设置VSCode</strong><br>user-&gt;settings.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;omnisharp.useGlobalMono&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;omnisharp.useModernNet&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;omnisharp.monoPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Library/Frameworks/Mono.framework/Versions/Current&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>monoPath通过命令<code>which mono</code>查看，但是只能按照上面的Path写，不然第一个VSCode实例是可以运行的，但是第二个实例会报错<br><code>[ERROR] Error: Unable to find Mono. Update the &quot;omnisharp.monoPath&quot; setting to point to the folder containing Mono&#39;s &#39;/bin&#39; folder.</code></p>
<p><strong>最后</strong><br>删除项目中的 <code>Assembly-CSharp.csproj</code> 和 <code>study_FlappyBird.sln</code> 文件，Unity首选项也可以进行生成。</p>
<p>彻底退出VSCode、Unity、Unity HUB。</p>
<p>重新打开即可</p>
<h4 id="常用命名空间"><a href="#常用命名空间" class="headerlink" title="常用命名空间"></a>常用命名空间</h4><p>TODO…</p>
<h4 id="MonoBehaviour类"><a href="#MonoBehaviour类" class="headerlink" title="MonoBehaviour类"></a>MonoBehaviour类</h4><h4 id="游戏对象和组件"><a href="#游戏对象和组件" class="headerlink" title="游戏对象和组件"></a>游戏对象和组件</h4><h4 id="常用脚本API"><a href="#常用脚本API" class="headerlink" title="常用脚本API"></a>常用脚本API</h4><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><h3 id="创建基本的3D场景"><a href="#创建基本的3D场景" class="headerlink" title="创建基本的3D场景"></a>创建基本的3D场景</h3><p>游戏对象 和 组件</p>
<p>预制体</p>
<p>Runball案例<br>地形</p>
<h3 id="物理系统"><a href="#物理系统" class="headerlink" title="物理系统"></a>物理系统</h3><p>Rigidbody组件<br>Collider组件<br>Constant Force组件</p>
<p>Runball案例2<br>Joint组件<br>Cloth组件<br>Character Controller组件</p>
<h3 id="图形用户界面UGUI"><a href="#图形用户界面UGUI" class="headerlink" title="图形用户界面UGUI"></a>图形用户界面UGUI</h3><p>简介<br>常用组件</p>
<p>Rect Transform组件<br>UGUI布局组件<br>Runball案例3</p>
<h3 id="Mecanim动画系统"><a href="#Mecanim动画系统" class="headerlink" title="Mecanim动画系统"></a>Mecanim动画系统</h3><p>介绍</p>
<p>人性角色动画</p>
<p>Animator Controller<br>动画混合树<br>Sprite动画剪辑</p>
<h3 id="导航网格寻路"><a href="#导航网格寻路" class="headerlink" title="导航网格寻路"></a>导航网格寻路</h3><p>介绍</p>
<ul>
<li>常见寻路技术概述</li>
</ul>
<p>实现导航网格寻路</p>
<p>导航常用属性概述</p>
<h3 id="音效系统"><a href="#音效系统" class="headerlink" title="音效系统"></a>音效系统</h3><p>介绍</p>
<p>音频文件格式<br>Audio Source组件<br>Audio Listener组件<br>空间音效环绕效果案例分析</p>
<h3 id="全局光照和粒子系统"><a href="#全局光照和粒子系统" class="headerlink" title="全局光照和粒子系统"></a>全局光照和粒子系统</h3><p>全局光照介绍<br>Light光照</p>
<p>粒子系统</p>
<h3 id="游戏资源打包与跨平台发布"><a href="#游戏资源打包与跨平台发布" class="headerlink" title="游戏资源打包与跨平台发布"></a>游戏资源打包与跨平台发布</h3><p>AssetBundle概述</p>
<p>平台发布设置<br>发布到PC<br>发布到Android<br>发布到WebGL</p>
<h3 id="UGUI综合案例"><a href="#UGUI综合案例" class="headerlink" title="UGUI综合案例"></a>UGUI综合案例</h3><p>介绍与环境搭建</p>
<p>游戏的开始面板</p>
<p>游戏的主面板</p>
<p>游戏的角色面板</p>
<p>游戏的背包面板</p>
<p>游戏的关卡选择面板</p>
<p>游戏的设置面板</p>
<p>游戏的登录面板</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>网络教程：<br>游戏网络同步 <a href="https://www.bilibili.com/video/BV15P4y1U79G/?p=4&amp;vd_source=508e069b09636e2f68f3ef05a2868539" target="_blank" rel="noopener">https://www.bilibili.com/video/BV15P4y1U79G/?p=4&amp;vd_source=508e069b09636e2f68f3ef05a2868539</a><br>《王者荣耀》2亿用户量的背后：产品定位、技术架构、网络方案等 <a href="http://www.52im.net/thread-1595-1-1.html" target="_blank" rel="noopener">http://www.52im.net/thread-1595-1-1.html</a><br>从《王者荣耀》来聊聊游戏的帧同步 <a href="https://gwb.tencent.com/community/detail/115398" target="_blank" rel="noopener">https://gwb.tencent.com/community/detail/115398</a></p>
<p>课程：<br>《FPS射击游戏》训练营 <a href="https://ke.qq.com/course/4000336#term_id=105639476" target="_blank" rel="noopener">https://ke.qq.com/course/4000336#term_id=105639476</a><br>Unity3D(U3D)从零打造王者荣耀 - 钻石班 <a href="https://ke.qq.com/course/260595#term_id=100574690" target="_blank" rel="noopener">https://ke.qq.com/course/260595#term_id=100574690</a><br>Unity3D(U3D)从零打造王者荣耀 - 王者班 <a href="https://ke.qq.com/course/260601#term_id=100573021" target="_blank" rel="noopener">https://ke.qq.com/course/260601#term_id=100573021</a><br>P2【商业级MMORPG大型网游】Unity全栈开发 <a href="https://ke.qq.com/course/329046#term_id=100390455" target="_blank" rel="noopener">https://ke.qq.com/course/329046#term_id=100390455</a></p>
<p>Unity Asset Store Packages：<br>Easy Touch Controls 摇杆 <a href="https://assetstore.unity.com/packages/tools/input-management/easy-touch-controls-28118#content" target="_blank" rel="noopener">https://assetstore.unity.com/packages/tools/input-management/easy-touch-controls-28118#content</a><br>其他 <a href="https://assetstore.unity.com/?on_sale=true&amp;q=FPS&amp;orderBy=1" target="_blank" rel="noopener">https://assetstore.unity.com/?on_sale=true&amp;q=FPS&amp;orderBy=1</a></p>
<p>Blender(uv editing 角色、枪械、地图) <a href="http://www.baidu.com/link?url=CYr_XnWcJw26dpGc_1Lgqm5nDCwJxJYnchlpZOA-7UXQXqttk--wSzzujQt7lCL0QfOuFEr6YmZBubtWk51g6K" target="_blank" rel="noopener">http://www.baidu.com/link?url=CYr_XnWcJw26dpGc_1Lgqm5nDCwJxJYnchlpZOA-7UXQXqttk--wSzzujQt7lCL0QfOuFEr6YmZBubtWk51g6K</a></p>
<p>游戏设计(色彩、音乐)<br><a href="https://www.youtube.com/watch?v=gTZT8GE5928" target="_blank" rel="noopener">https://www.youtube.com/watch?v=gTZT8GE5928</a><br><a href="https://github.com/FlowingSPDG/CS-GO-Observer-Unity-HUD" target="_blank" rel="noopener">https://github.com/FlowingSPDG/CS-GO-Observer-Unity-HUD</a></p>
<p>音效 <a href="https://www.imphenzia.com/files/file-list-game-ready-blasters.pdf" target="_blank" rel="noopener">https://www.imphenzia.com/files/file-list-game-ready-blasters.pdf</a></p>
<p>网络：<br><a href="https://blog.theknightsofunity.com/steamworks-and-unity-p2p-multiplayer/" target="_blank" rel="noopener">https://blog.theknightsofunity.com/steamworks-and-unity-p2p-multiplayer/</a><br><a href="https://steamworks.github.io/installation/" target="_blank" rel="noopener">https://steamworks.github.io/installation/</a></p>
<p>7小时 fps：<br><a href="https://www.youtube.com/watch?v=WxqsIGeCxg0" target="_blank" rel="noopener">https://www.youtube.com/watch?v=WxqsIGeCxg0</a><br><a href="https://www.youtube.com/watch?v=WxqsIGeCxg0&amp;t=54s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=WxqsIGeCxg0&amp;t=54s</a></p>
<h3 id="多人FPS-15年"><a href="#多人FPS-15年" class="headerlink" title="多人FPS 15年"></a>多人FPS 15年</h3><blockquote>
<p><a href="https://www.youtube.com/watch?v=-m28axeuRNs&amp;list=PLPV2KyIb3jR5PhGqsO7G4PsbEC_Al-kPZ&amp;index=3" target="_blank" rel="noopener">https://www.youtube.com/watch?v=-m28axeuRNs&amp;list=PLPV2KyIb3jR5PhGqsO7G4PsbEC_Al-kPZ&amp;index=3</a></p>
</blockquote>
<p>了解如何在 Unity 中制作多人第一人称射击游戏。本系列讲授非常酷的 Unity Networking 系统 (uNet)。所有代码完全用 C# 编写。</p>
<ul>
<li>初始场景</li>
<li>网络介绍</li>
<li>同步运动</li>
<li>Flying</li>
<li>射击</li>
<li>重复创建Respawn</li>
<li>玩家模型</li>
<li>十字准线</li>
<li>Gun GFX</li>
<li>Rapid Fire</li>
<li>错误修复</li>
<li>加入连接</li>
<li>断开连接</li>
<li>用户账户</li>
<li>获取数据</li>
<li>发送数据</li>
<li>光标锁定</li>
<li>记分牌</li>
</ul>
<h3 id="生成地形程序-17年"><a href="#生成地形程序-17年" class="headerlink" title="生成地形程序 17年"></a>生成地形程序 17年</h3><blockquote>
<p><a href="https://www.youtube.com/playlist?list=PLFt_AvWsXl0eBW2EiBtl_sxmDtSgZBxB3" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLFt_AvWsXl0eBW2EiBtl_sxmDtSgZBxB3</a></p>
</blockquote>
<p>章节：</p>
<ul>
<li>八度</li>
<li>颜色</li>
<li>网格</li>
<li>LOD</li>
<li>无尽地形</li>
<li>现成</li>
<li>LOD切换</li>
<li>接缝</li>
<li>衰减贴图</li>
<li>法线</li>
<li>碰撞</li>
<li>平面着色</li>
<li>数据存储</li>
<li>颜色着色器</li>
<li>纹理着色器</li>
<li>修复和优化</li>
<li>重构</li>
<li>修复间隙</li>
</ul>
<h3 id="2D平台游戏-15年"><a href="#2D平台游戏-15年" class="headerlink" title="2D平台游戏 15年"></a>2D平台游戏 15年</h3><blockquote>
<p><a href="https://www.youtube.com/playlist?list=PLPV2KyIb3jR42oVBU6K2DIL6Y22Ry9J1c" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLPV2KyIb3jR42oVBU6K2DIL6Y22Ry9J1c</a></p>
</blockquote>
<p>章节：</p>
<ul>
<li>视差滚动</li>
<li>平铺</li>
<li>Character</li>
<li>动画</li>
<li>摄像</li>
<li>Bullet Trail</li>
<li>Muzzle Flash</li>
<li>玩家生命</li>
<li>ReSpawning</li>
<li>重生效果</li>
<li>敌人AI</li>
<li>敌人</li>
<li>拍摄GFX</li>
<li>Camera Shake</li>
<li>敌人枪</li>
<li>Enemy Attack攻击</li>
<li>GUI</li>
<li>游戏结束</li>
<li>MENU</li>
<li>音效管理</li>
<li>升级-&gt;4.0</li>
</ul>
<h3 id="在线多人游戏01-2022"><a href="#在线多人游戏01-2022" class="headerlink" title="在线多人游戏01 2022"></a>在线多人游戏01 2022</h3><blockquote>
<p><a href="https://www.youtube.com/watch?v=stJ4SESQwJQ" target="_blank" rel="noopener">https://www.youtube.com/watch?v=stJ4SESQwJQ</a></p>
</blockquote>
<p>章节：</p>
<ul>
<li>0:00介绍</li>
<li>0:20安装</li>
<li>1:00并行同步</li>
<li>1:26网络管理员</li>
<li>1:45统一传输层</li>
<li>2:18播放器预制件&#x2F;网络对象</li>
<li>4:09什么是主机、服务器和客户端？</li>
<li>6:15只控制你的本地对象</li>
<li>7:40使用 ClientNetworkTransform 同步数据</li>
<li>8:30使用 NetworkVariable 手动序列化</li>
<li>11:25使用 INetworkSerializable 自定义网络序列化</li>
<li>14:10插值网络运动（乡巴佬风格）</li>
<li>14:33减少网络流量</li>
<li>15:30使用 ServerRPC 调用服务器代码</li>
<li>17:00服务器与客户端权限</li>
<li>19:45添加模拟延迟</li>
<li>20:45让服务器权限感觉良好的技巧</li>
<li>21:35订阅网络变化</li>
</ul>
<h2 id="good-project-构思"><a href="#good-project-构思" class="headerlink" title="good project 构思"></a>good project 构思</h2><p>前提：</p>
<ul>
<li>可以与抖音有趣的梗结合<ul>
<li>跑酷 意外从高处掉下，带着摄像机拍下了过程 神评：”带我死的你还是第一个”</li>
</ul>
</li>
</ul>
<h3 id="1-双人情侣类"><a href="#1-双人情侣类" class="headerlink" title="1.双人情侣类"></a>1.双人情侣类</h3><blockquote>
<p>需要提前解剖双人成行游戏</p>
</blockquote>
<p>剖析：<br>叙事<br>互动叙事类游戏<br>家庭关系<br>夫妻关系<br>爱情与亲情<br>父母与孩子<br>NPC哈金博士：它主张“爱治愈一切”，并且回应了小女孩的期待，帮助修复父母之间的关系。<br>游戏弱化了小梅和科迪的争吵与分歧，利用一些矛盾点作为开端，引出一系列有趣的交互行为，在有意无意间转移了玩家的关注点，开始专心钻研合作事宜。<br>可以作妖<br>故地重游，做一些能够挽救这段感情的互动<br>合理的分配故事情节，比如故事剧情整体较为平缓，一共两个有起伏转折点：一个是游戏途中小梅和科迪破坏小象玩具，另一个是接近尾声时女儿做出的离家决定。这两个设定都正好出现在一系列的闯关内容之后，彼时玩家正好从需要花精力的配合中脱离出来，想要享受片刻安宁：比如终于到达了小象的城堡里，比如终于破解了咒语返回现实。</p>
<p>丛林中手持 喷射油和火药，与松鼠战斗。</p>
<p>融入</p>
<p>双人互动 最大化游戏乐趣<br>走心<br>配合解密，分工差异</p>
<ul>
<li><p>远战和近战</p>
</li>
<li><p>情侣 懵懂</p>
</li>
<li><p>情侣 相处</p>
</li>
<li><p>结婚</p>
</li>
<li><p>情侣 孩子</p>
</li>
<li><p>1</p>
</li>
</ul>
<h2 id="Game-Jam-极限开发"><a href="#Game-Jam-极限开发" class="headerlink" title="Game Jam 极限开发"></a>Game Jam 极限开发</h2><blockquote>
<p>重在学习、练习、实验、挑战自我、与新伙伴合作、尝试新点子，而不全是为了奖品和荣誉。<br>迅速开发，能跑就行，后期优化</p>
</blockquote>
<h3 id="游戏类型："><a href="#游戏类型：" class="headerlink" title="游戏类型："></a>游戏类型：</h3><blockquote>
<p><a href="https://baike.baidu.com/item/%E6%B8%B8%E6%88%8F%E5%88%86%E7%B1%BB/7690482" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%B8%B8%E6%88%8F%E5%88%86%E7%B1%BB/7690482</a></p>
</blockquote>
<ul>
<li>RPG：角色扮演游戏，由玩家扮演游戏中的一个或数个角色，有完整的故事情节的游戏，RPG更强调的是剧情发展和个人体验<ol>
<li>最终幻想</li>
<li>仙剑奇侠穿</li>
<li>暗黑破坏神</li>
</ol>
</li>
<li>ACT：动作游戏，玩家控制游戏人物用各种武器消灭敌人以过关的游戏，不追求故事情节<ul>
<li>魂斗罗</li>
<li>三国志</li>
<li>鬼泣</li>
</ul>
</li>
<li>AVG：冒险游戏，由玩家控制游戏人物进行虚拟冒险的游戏。与RPG不同的是，AVG的特色是故事情节往往是以完成一个任务或解开某些谜题的形式出现的，而且在游戏过程中刻意强调谜题的重要性。<ul>
<li>动作类，包含(AAG：动作冒险游戏)<ul>
<li>生化危机</li>
<li>古墓丽影</li>
<li>恐龙危机</li>
</ul>
</li>
<li>解密类<ul>
<li>神秘岛</li>
</ul>
</li>
</ul>
</li>
<li>SLG：策略游戏<ul>
<li>RTS：即时战略游戏</li>
<li>MOBA：多人在线战术竞技游戏<ol>
<li>英雄联盟</li>
<li>dota</li>
<li>D10</li>
</ol>
</li>
</ul>
</li>
<li>SRPG：模拟类角色扮演游戏</li>
<li>FTG：格斗游戏</li>
<li>STG：射击类游戏</li>
<li>FPS：第一人称视角射击游戏</li>
<li>TPS：第三人称视角射击游戏</li>
<li>PZL：益智类游戏</li>
<li>SPG：体育竞技类游戏</li>
<li>RCG（RAC）：竞速游戏</li>
<li>CAG：卡片游戏</li>
<li>TAB：桌面游戏</li>
<li>MSC:音乐游戏<ol>
<li>节奏大师</li>
</ol>
</li>
<li>塔防建造游戏</li>
</ul>
<p>开发游戏设计原则：</p>
<ul>
<li>多一些恍然大悟的「觉悟时刻」</li>
<li>游戏上手简易，不能带来太大的负面体验</li>
</ul>
<ul>
<li>创意廉价，宝贵的是实现创意，尤其是创意落地过程中实现程度、细节推敲和权衡<ul>
<li>客观地舍弃自己非常喜爱但性价比低的设计</li>
<li>全局视角权衡，夹缝中找到最优解，长远而不是舒服的决策。<br>难点：</li>
</ul>
</li>
</ul>
<ul>
<li>设计上：同步PVP体验 提高角色的技能设计</li>
<li>技术上：实时PVP，模拟物理，物理同步(大问题)，部分地方使用UI、色彩等解决方案。<br>如何学习：</li>
<li>找到一个靠谱的团队和项目</li>
</ul>
<ul>
<li>找到一个愿意带自己的人很重要</li>
<li>积极主动，争取机会</li>
<li>实践为主，多动手自己做</li>
</ul>
<p>备考设计功能：</p>
<ul>
<li>关卡<ul>
<li>可以跳过关卡，不以固定顺序游玩</li>
<li>关卡过渡动画</li>
</ul>
</li>
<li>通过建立一个多行为的脚本，用面板可控的方式，替换掉需要频繁修改多处位置的方式</li>
<li>Event，例如btn的event中，按钮被按下<ul>
<li>可以使用<code>onButtonPressed?.Invoke();</code></li>
<li>然后属性面板中OnButtonPressed()中可以选择，运行Object上附带的函数</li>
</ul>
</li>
<li>通过用户输入*，控制行为</li>
<li>通过防御进行击杀</li>
<li>消消乐 例如：游戏Fish</li>
<li>UI<ul>
<li>背景图<ul>
<li>与主题相关的元素</li>
<li>按键说明</li>
</ul>
</li>
<li>动画场景<ul>
<li>被攻击动画<ul>
<li>Player对象 闪烁 3S</li>
</ul>
</li>
<li>过关动画<ul>
<li>居中 从大到小 抖动 效果</li>
<li>过关处<ul>
<li>某个动画</li>
</ul>
</li>
</ul>
</li>
<li>升级动画<ul>
<li>居中 从大到小 抖动 效果</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>无法后退的游戏(例如2D游戏)</li>
<li>2D</li>
</ul>
<blockquote>
<p><a href="https://www.youtube.com/watch?v=3sWTzMsmdx8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=3sWTzMsmdx8</a><br><a href="https://github.com/Matthew-J-Spencer/Ultimate-2D-Controller" target="_blank" rel="noopener">https://github.com/Matthew-J-Spencer/Ultimate-2D-Controller</a></p>
</blockquote>
<p>可变跳跃高度(尽早释放跳跃让玩家控制跳跃的高度)</p>
<blockquote>
<p>当玩家在你跳跃的顶点释放，跳跃顶点修改器时，通过向角色添加额外的向下力来完成</p>
</blockquote>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fallSpeed = _endedJumpEarly &amp;&amp; _currentVerticalSpeed &gt; <span class="number">0</span> ? _fallSpeed * _jumpEndEarlyGravityModifier : _fallSpeed;</span><br><span class="line">_currentVerticalSpeed -= fallSpeed * Time.deltaTime;</span><br></pre></td></tr></table></figure>

<p>Apex Modifiers(顶点修改器)</p>
<blockquote>
<p>得到一个反作用力的改变以及轻微的速度提升，轻松地降落在想要的地方，这是一个带有夸大值的例子</p>
</blockquote>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span> _apexPoint = Mathf.InverseLerp(_jumpApexThreshold, <span class="number">0</span>, Mathf.Abs(Velocity.y));</span><br><span class="line"><span class="keyword">var</span> apexBonus = Mathf.Sign(Input.x) * _apexBonus * _apexPoint;</span><br><span class="line">_currentHorizontalSpeed += apexBonus * Time.deltaTime;</span><br><span class="line">_fallSpeed = Mathf.Lerp(_minFallSpeed, _maxFallSpeed, _apexPoint);</span><br></pre></td></tr></table></figure>

<p>Jump Buffering(跳跃缓冲)</p>
<blockquote>
<p>带有夸大值，在实际落地之前排队下一次跳跃，这可能是一个好的控制器最重要的隐藏部分<br>如果玩家按下跳跃，角色只是坐在那里</p>
</blockquote>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(_colDown &amp;&amp; _lastJumpPressed + _jumpBuffer &gt; Time.time)&#123;</span><br><span class="line">    <span class="comment">// 跳跃</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Coyote time</p>
<blockquote>
<p>离开平台几号秒后执行，离开地面后并检查是否在Coyote阈值内按下跳跃</p>
</blockquote>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Input.JumpDown &amp;&amp; !_colDown &amp;&amp; _timeLeftGrounded + _coyoteTimeThreshold &gt; Time.time)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do more jumpies</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Clamped fall speed</p>
<blockquote>
<p>在下降的时候控制，用于轻松躲避或降落在平台</p>
</blockquote>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (_currentVerticalSpeed &lt; _fallClamp)</span><br><span class="line">&#123;</span><br><span class="line">    _currentVerticalSpeed = _fallClamp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Edge detection(边缘检测)</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (_currentVerticalSpeed &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    _currentVerticalSpeed = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dir = transform.position - hit.transform.position;</span><br><span class="line">transform.position += dir.normalized * move.magnitude;</span><br></pre></td></tr></table></figure>

<p>备考功能：</p>
<ul>
<li>控制窗口大小</li>
<li>攻击<ul>
<li>攻击<ul>
<li>单体攻击</li>
<li>多体攻击(穿透攻击)</li>
</ul>
</li>
<li>攻击类型<ul>
<li>范围攻击</li>
<li>连击</li>
</ul>
</li>
<li>其他<ul>
<li>子弹追踪</li>
</ul>
</li>
</ul>
</li>
<li>分数</li>
<li>血条</li>
</ul>
<p>备考实例：</p>
<ol>
<li>决定游戏类型</li>
<li>提前准备固定模板<ol>
<li>菜单</li>
<li>屏幕HUD界面</li>
<li>保存和读取数据<ol>
<li>同步选项</li>
<li>追踪进展</li>
</ol>
</li>
<li>支持各种不同的控制器类型<ul>
<li>不同类型<ol>
<li>2D</li>
<li>3D</li>
<li>双人</li>
</ol>
</li>
<li>不同设备<ol start="4">
<li>键盘+鼠标</li>
<li>滑动控制</li>
</ol>
</li>
</ul>
</li>
<li>制作组名单<ol>
<li>Game Design 游戏设计</li>
<li>Programming 程序</li>
<li>Music&#x2F;SFX 音乐&#x2F;特效</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="Game-Jam正式步骤："><a href="#Game-Jam正式步骤：" class="headerlink" title="Game Jam正式步骤："></a>Game Jam正式步骤：</h3><ol>
<li>决定游戏类型<br>拿到题目，脑子最清醒，有很多想法<br>在非常短的时间内，不要想的很清楚，有个雏形就行，——小会议进行思维碰撞。<br>关卡设计<br>素材+故事<br>设计关卡<br>放出惊喜DEMO</li>
</ol>
<p>实战：<br>过场管理器(控制关卡)</p>
<ul>
<li>关卡控制<ul>
<li>擦除现有关卡</li>
<li>跳转新的关卡<br>音乐管理器</li>
</ul>
</li>
<li>BGM控制<ul>
<li>随着关卡载入，进行淡入淡出<br>HUD窗口管理器</li>
</ul>
</li>
<li>负责在屏幕上绘制信息<ul>
<li>教程提示</li>
<li>根据情况出现按键提示图标</li>
<li>分数</li>
<li>开始&#x2F;暂停</li>
<li>选项菜单<ul>
<li>设置<ul>
<li>show particles</li>
<li>show trails</li>
<li>screen shake</li>
<li>low sensitivity aiming</li>
<li>toggle aim mode on&#x2F;off</li>
<li>always show arrow when holding magnet</li>
</ul>
</li>
<li>音乐</li>
<li>手柄</li>
<li>键盘<ul>
<li>上下左右</li>
<li>跳</li>
</ul>
</li>
<li>艺术</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>配置管理器</p>
<ol>
<li>设置管理器，对设置进行读取，操控硬盘上的文本读取</li>
<li>销毁管理器GameObject对象，替换成关卡</li>
<li>每次开始关卡之前都读取数据</li>
</ol>
<h3 id="优质游戏："><a href="#优质游戏：" class="headerlink" title="优质游戏："></a>优质游戏：</h3><h4 id="Vintage-Flashlight"><a href="#Vintage-Flashlight" class="headerlink" title="Vintage Flashlight"></a>Vintage Flashlight</h4><h4 id="Roll-Of-The-Dice-2022GameJam"><a href="#Roll-Of-The-Dice-2022GameJam" class="headerlink" title="Roll Of The Dice 2022GameJam"></a>Roll Of The Dice 2022GameJam</h4><blockquote>
<p><a href="https://escapadegames.itch.io/roll-of-the-dice" target="_blank" rel="noopener">https://escapadegames.itch.io/roll-of-the-dice</a></p>
</blockquote>
<img src="/blog/p/c8a4b253/RollOfTheDice.png" class="" title="RollOfTheDice">

<h4 id="Randomancer"><a href="#Randomancer" class="headerlink" title="Randomancer"></a>Randomancer</h4><blockquote>
<p><a href="https://riuku.itch.io/randomancer" target="_blank" rel="noopener">https://riuku.itch.io/randomancer</a></p>
</blockquote>
<p>类似于植物大战僵尸</p>
<img src="/blog/p/c8a4b253/Randomancer.gif" class="" title="Randomancer">
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title>运丰SOP</title>
    <url>/blog/p/45994366/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>

<h2 id="邮寄快递"><a href="#邮寄快递" class="headerlink" title="邮寄快递"></a>邮寄快递</h2><h3 id="邮寄前确认一下信息："><a href="#邮寄前确认一下信息：" class="headerlink" title="邮寄前确认一下信息："></a>邮寄前确认一下信息：</h3><ul>
<li>邮寄地址</li>
<li>邮寄内容</li>
</ul>
<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><h4 id="方式1-电脑邮寄"><a href="#方式1-电脑邮寄" class="headerlink" title="方式1(电脑邮寄)"></a>方式1(电脑邮寄)</h4><ol>
<li>将文件内容准备齐全</li>
<li>在 <b>纸质运单</b> 上备注 <b>客户名称</b> 以及 <b>寄件日期</b> (上下两份都要)，下面部分粘贴到快件底部《运单区》 <div style="width:50%;margin:0 auto;">
    <img src="/blog/p/45994366/%E7%BA%B8%E8%B4%A8%E8%BF%90%E5%8D%95.jpg" class="" title="纸质运单.jpg">

 </div></li>
<li>第一次邮寄需要进行授权，授权后忽略</li>
<li>打开邮寄网址 <a href="https://v.sf-express.com/web/portal/SendOwf" target="_blank" rel="noopener">https://v.sf-express.com/web/portal/SendOwf</a></li>
<li>填写信息</li>
<li>预约小哥上门取件(如果不预约要电话叫他过来取件)</li>
</ol>
<h4 id="方式2-微信邮寄，扫二维码"><a href="#方式2-微信邮寄，扫二维码" class="headerlink" title="方式2(微信邮寄，扫二维码)"></a>方式2(微信邮寄，扫二维码)</h4><ol>
<li>将文件内容准备齐全</li>
<li>在纸质运单上备注客户名称以及寄件日期(上下两份都要)，下面部分粘贴到快件底部《运单区》</li>
<li>第一次邮寄需要进行授权，授权后忽略</li>
<li>使用微信扫描纸质运单</li>
<li>填写信息</li>
<li>预约小哥上门取件(如果不预约要电话叫他过来取件)</li>
</ol>
<h2 id="开票"><a href="#开票" class="headerlink" title="开票"></a>开票</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>将x月份账单整理好，核对一下有无除运费外其他的费用(超期费等)</li>
<li>发给客户财务或群，等待确认账单</li>
<li>确认账单后，索要开票信息(索要前先在开票文件中寻找有没有已经备注的开票信息)<br> 着重确认点：专用发票的 名称&#x2F;单位&#x2F;数量&#x2F;金额&#x2F;备注信息</li>
<li>开发票<br> (1). 插入金税盘<br> (2). 登录账号<br> (3). 用户管理-&gt;查看是否存在对应的开票信息，没有则新建<br> (4). 发票-&gt;专用发票，注意：先将废纸放入打印机测试，以免有剩余未打印的工作内容<br> (5). 将发票放入打印机<br> (6). 输入开票信息<br> (7). 将开票截图给客户核对<br> (8). 确认开票后，进行开票<br> (9). 使用发票专用章 盖 发票的每一联(一定要先擦干净章周围的污渍，在测试纸张上测试几遍)<br> (10). 盖完章后，按照客户的邮寄地址连同账单(部分客户有特殊要求)一并邮寄</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>高并发</title>
    <url>/blog/p/dc16d8cd/</url>
    <content><![CDATA[<p>从业5年相关高并发的经验总结，与分布式内容有交错，慢慢补充…</p>
<span id="more"></span>
<h2 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ul>
<li>同一时间内有数量极多的请求 访问服务器</li>
<li>一个系统的日PV在千万以上，可能是一个高并发的系统</li>
</ul>
<h3 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h3><ul>
<li>每秒钟请求或查询系统的次数 HTTP请求</li>
<li>峰值算法：(总PV数<em>80%) &#x2F; 6小时秒数</em>20%</li>
</ul>
<h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><ul>
<li>单位时间内处理的请求数量(通常是由QPS与并发数决定)</li>
</ul>
<h3 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h3><ul>
<li>从请求发出到收到相应花费的时间</li>
</ul>
<h3 id="PV"><a href="#PV" class="headerlink" title="PV"></a>PV</h3><ul>
<li>综合浏览量</li>
<li>页面浏览量或者点击量，一个访客在24小时内访问的页面数量</li>
<li>同一个用户访问网站同一个页面，只记做一次PV</li>
</ul>
<h3 id="UV"><a href="#UV" class="headerlink" title="UV"></a>UV</h3><ul>
<li>独立访客量</li>
<li>统计1天内访问某站点的用户数(以cookie为依据)</li>
<li>访问网站的一台电脑客户端为一个访客。</li>
</ul>
<h2 id="高并发的问题，我们具体应该关心什么？"><a href="#高并发的问题，我们具体应该关心什么？" class="headerlink" title="高并发的问题，我们具体应该关心什么？"></a>高并发的问题，我们具体应该关心什么？</h2><ul>
<li>UV：独立访客(Unique Visitor)(类似IP)</li>
<li>一定时间范围内相同访客多次访问网站，只计算为一个独立访客</li>
</ul>
<h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><ul>
<li>日网站带宽 &#x3D; PV&#x2F; 统计时间(换算到秒)* 平均页面大小(单位KB) * 8</li>
<li>峰值一半是平均值的倍数，根据实际情况来定</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>QPS不等于并发连接数</li>
<li>QPS是每秒的HTTP请求数量，并发连接数是系统同时处理的请求数量</li>
</ul>
<h3 id="QPS计算"><a href="#QPS计算" class="headerlink" title="QPS计算"></a>QPS计算</h3><ul>
<li>(总PV数 * 80%) &#x2F; (6小时秒数 * 20%) &#x3D; 峰值每秒请求数(QPS)</li>
<li>表示： 80%的访问量集中在20%的时间，6小时是估计(中午、下午、晚上各两个小时)</li>
</ul>
<p>日QPS是200<br>单机QPS是50<br>则至少需要四台服务器</p>
<h3 id="压力测试-了解单台服务器最大承受的QPS值、最大并发"><a href="#压力测试-了解单台服务器最大承受的QPS值、最大并发" class="headerlink" title="压力测试(了解单台服务器最大承受的QPS值、最大并发)"></a>压力测试(了解单台服务器最大承受的QPS值、最大并发)</h3><ul>
<li>ab<br>  指令：ab -c 100 -n 5000</li>
<li>wrk</li>
<li>web bench</li>
</ul>
<h3 id="ab使用方法"><a href="#ab使用方法" class="headerlink" title="ab使用方法"></a>ab使用方法</h3><blockquote>
<p>ab全称是apache benchmark，是apache官方推出的工具，创建多个并发访问线程模拟多个访问者同时对某一URL地址进行访问。它的测试目标是基于URL的<br>可以测试：apache、nginx、lighthttp、tomacat、IIS等其他web服务器的压力</p>
</blockquote>
<p>apache里面自带<br>如果没有则，安装 yum -y install http-tools</p>
<ul>
<li>模拟并发请求100次，总共请求5000次。</li>
<li>ab -c (并发数) -n (总请求数量) 待测试网站url</li>
<li>注意事项：测试机器要与被测试机器分开(数据会不准确)</li>
<li>不要对线上服务做压力测试</li>
<li>观察测试工具ab所在的及其，以及被测试的前端机的CPU、内存、网络等都不超过最高限度的75%</li>
</ul>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt;ab -c <span class="number">100</span> -n <span class="number">1000</span> url</span><br><span class="line"></span><br><span class="line">#返回的内容</span><br><span class="line">Complete requests： 总共请求的次数</span><br><span class="line">Failed requests： 请求失败的次数</span><br><span class="line">Requests per second: 是QPS值</span><br></pre></td></tr></table></figure>
<h3 id="QPS过低解决方案"><a href="#QPS过低解决方案" class="headerlink" title="QPS过低解决方案"></a>QPS过低解决方案</h3><ol>
<li>开启apache的 <code>httpd.mpm.conf</code> 模块并设置<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;IfModule mpm_winnt_module&gt;</span></span><br><span class="line">    <span class="attribute">ThreadsPerChild</span>        <span class="number">3000</span></span><br><span class="line">    <span class="attribute">MaxConnectionsPerChild</span>   <span class="number">0</span></span><br><span class="line"><span class="section">&lt;/IfModule&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>增加FastCGI进程(fpm)</li>
<li>opcache</li>
<li>tmpfs，基于内存的文件系统</li>
</ol>
<h3 id="QPS达到极限"><a href="#QPS达到极限" class="headerlink" title="QPS达到极限"></a>QPS达到极限</h3><p>优化方案：硬件条件、网络带宽</p>
<p>QPS：每秒的次数</p>
<p>QPS达到50，小型网站，一半服务器可以应付<br>QPS达到100:</p>
<ul>
<li>假设关系型数据库的每次请求在0.01秒完成</li>
<li>假设单页面只有一个SQL查询，那么100QPS意味着1秒钟完成100次请求，但是不能保证数据库查询能完成100次</li>
<li>方案：数据库缓存，负载均衡</li>
</ul>
<p>QPS达到800：</p>
<ul>
<li>假设服务器是百兆宽带，那么网站出口的实际带宽是8M左右</li>
<li>假设每个页面只有10K，那么百兆已经不够用了</li>
<li>方案：CDN加速，负载均衡</li>
</ul>
<p>QPS达到1000：</p>
<ul>
<li>假设使用Memcache缓存数据库查询数据，每个页面对Memcache的请求大于直接对DB的请求</li>
<li>Memcache的悲观并发数在2W左右，那么带宽则可能不够用，出现不稳定的情况</li>
<li>方案：静态HTML缓存</li>
</ul>
<p>QPS达到2000：</p>
<ul>
<li>文件访问锁都成了灾难</li>
<li>方案：业务分离，分布式存储</li>
</ul>
<h2 id="优化步骤"><a href="#优化步骤" class="headerlink" title="优化步骤"></a>优化步骤</h2><h3 id="流量优化"><a href="#流量优化" class="headerlink" title="流量优化"></a>流量优化</h3><h4 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h4><ul>
<li><p>概念：他人在他网站页面上展示一些我们服务器的资源(图片、音乐、视频、软件等)，减轻他网站服务器的负担。</p>
</li>
<li><p>实现方法</p>
<ul>
<li>通过referer 或者 签名 判断是否能够合法访问</li>
<li>Nginx模块 ngx_http_referer_module用于阻挡来源非法的域名请求</li>
<li>Nginx指令 valid_referers，全局变量 $invalid_referer</li>
</ul>
  <figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">valid_referers 参数</span><br><span class="line"><span class="literal">none</span>：“<span class="keyword">referer</span>”来源头部为空的情况</span><br><span class="line">blocked：“<span class="keyword">Referer</span>”来源头部不为空，但是里面的值被代理或者防火墙删除了，这些值都不以 <span class="string">`http://`</span>  或 <span class="string">`https://`</span> 开头</span><br><span class="line">server_names：“<span class="keyword">Referer</span>”来源头部包含当前的server_names</span><br></pre></td></tr></table></figure>
  <img src="/blog/p/dc16d8cd/%E9%98%B2%E7%9B%97%E9%93%BE%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95_nginx.png" class="" title="防盗链的实现方法_nginx.png">


<p>  传统防盗链 可以 通过伪造Referer破解<br>  待整理…</p>
</li>
</ul>
<h3 id="前端优化："><a href="#前端优化：" class="headerlink" title="前端优化："></a>前端优化：</h3><h4 id="添加异步请求-需要的时候再访问"><a href="#添加异步请求-需要的时候再访问" class="headerlink" title="添加异步请求 需要的时候再访问"></a>添加异步请求 需要的时候再访问</h4><h4 id="减少HTTP请求"><a href="#减少HTTP请求" class="headerlink" title="减少HTTP请求"></a>减少HTTP请求</h4><blockquote>
<p>用户响应时间大部分花在加载HTML文档所引用的组件(image、js、css、flash)上<br>http连接的逻辑：域名解析&#x2F;TCP连接&#x2F;发送请求&#x2F;等待&#x2F;下载资源&#x2F;解析时间</p>
</blockquote>
<p>解决方案：</p>
<ol>
<li><p>减少组件的数量、合并css、js、图片文件</p>
<ul>
<li>webpack中有uglifyjs打包css、js文件，并且可以按需加载js</li>
<li>图片使用Base64编码减少页面请求数，将编码写入img标签的src</li>
</ul>
</li>
<li><p>图片地图</p>
<ul>
<li><p>方式1</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">usemap</span>=<span class="string">&quot;#map1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">&quot;map1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;矩形&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;位置A&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;矩形&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;位置B&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;矩形&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;位置C&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/blog/p/dc16d8cd/img_usemap.png" class="" title="img_usemap.png">
</li>
<li><p>方式2 CSS精灵(首选)</p>
</li>
</ul>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>-images: ();</span><br><span class="line"><span class="attribute">background-position</span>: x y;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="启用浏览器缓存和文件压缩"><a href="#启用浏览器缓存和文件压缩" class="headerlink" title="启用浏览器缓存和文件压缩"></a>启用浏览器缓存和文件压缩</h4><blockquote>
<p>HTTP缓存机制.</p>
</blockquote>
<p>待补充。。。</p>
<h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><p>CDN系统会将用户的请求重新导向离用户最近的服务节点，保证不同网络的用户都得到良好的访问质量<br>适合有大量图片和静态文件<br>    - 将数据缓存到cdn节点<br>    - 使用lvs实现四层负载均衡<br>    - BAT和七牛云提供</p>
<h4 id="建立图片服务器-建立图片服务器-更换成非计算型服务器"><a href="#建立图片服务器-建立图片服务器-更换成非计算型服务器" class="headerlink" title="建立图片服务器 建立图片服务器 更换成非计算型服务器"></a>建立图片服务器 建立图片服务器 更换成非计算型服务器</h4><ul>
<li><p>分摊Web服务器的I&#x2F;O负载-将耗费资源的图片服务分离出来，提高服务器的性能和稳定性</p>
</li>
<li><p>能够专门为图片服务器进行优化-为图片服务设置有针对性的缓存方案，减少带宽成本，提高访问速度<br>提高网站的可扩展性-通过增加图片服务器，提高图片吞吐能力</p>
</li>
<li><p>采用独立域名</p>
<ul>
<li>因为同一域名下浏览器的并发连接数有限制(2-6个)</li>
</ul>
</li>
<li><p>如何进行图片上传和图片同步</p>
<ul>
<li>NFS共享方式</li>
<li>利用FTP同步</li>
</ul>
</li>
</ul>
<h3 id="服务端优化"><a href="#服务端优化" class="headerlink" title="服务端优化"></a>服务端优化</h3><h4 id="页面静态化-ob"><a href="#页面静态化-ob" class="headerlink" title="页面静态化 ob"></a>页面静态化 ob</h4><p>将现有PHP等动态语言的逻辑代码生成为静态HTML文件用户访问动态脚本重定向到静态HTML文件的过程</p>
<p>使用模板引擎<br>Smarty缓存机制生成静态HTML</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Smarty</span></span><br><span class="line"><span class="comment">#(1)</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;cache_dir = <span class="variable">$ROOT</span>.<span class="string">&quot;/cache&quot;</span> <span class="comment">#缓存目录</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;cacheing = <span class="literal">true</span>; <span class="comment">#开启缓存</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;cache_lifttime = <span class="string">&#x27;3600&#x27;</span>; <span class="comment">#缓存时间</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;display(<span class="variable">$template</span>,[<span class="variable">$cache_id</span>,<span class="variable">$compile_id</span>]); <span class="comment">#生成模版文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(2)</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;clear_all_cache(); <span class="comment">#清除所有缓存</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;clear_cache(<span class="string">&quot;file.html&quot;</span>); <span class="comment">#清除指定缓存</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;clear_cache(<span class="string">&quot;file.html&quot;</span>,<span class="variable">$art_id</span>); <span class="comment">#清除同一个模板下的指定缓存号的缓存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#OB</span></span><br><span class="line">ob_start(); <span class="comment">#打开输出控制缓冲</span></span><br><span class="line">ob_get_contents(); <span class="comment">#返回输出缓冲区内容</span></span><br><span class="line">ob_clean(); <span class="comment">#清空输出缓冲区</span></span><br><span class="line">ob_end_flush(); <span class="comment">#冲刷出(送出)输出缓冲区内容并关闭缓冲</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#具体方法</span></span><br><span class="line">ob_start();</span><br><span class="line">输出到页面的html代码</span><br><span class="line"></span><br><span class="line">ob_get_contents();</span><br><span class="line">ob_end_flush();</span><br><span class="line">fopen(); <span class="comment">#写入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断文件的inode修改时间，判断是否过期使用filectime函数</span></span><br></pre></td></tr></table></figure>
<h4 id="并发处理"><a href="#并发处理" class="headerlink" title="并发处理"></a>并发处理</h4><h5 id="PHP的Swoole扩展"><a href="#PHP的Swoole扩展" class="headerlink" title="PHP的Swoole扩展"></a>PHP的Swoole扩展</h5><img src="/blog/p/dc16d8cd/PHP%E7%9A%84Swoole%E6%89%A9%E5%B1%95.png" class="" title="PHP的Swoole扩展.png">
<img src="/blog/p/dc16d8cd/PHP%E7%9A%84Swoole%E6%89%A9%E5%B1%952.png" class="" title="PHP的Swoole扩展2.png">
<img src="/blog/p/dc16d8cd/Swoole%E7%9A%84%E5%BC%82%E6%AD%A5Mysql%E5%AE%9E%E7%8E%B0.png" class="" title="Swoole的异步Mysql实现.png">

<ol>
<li>串行，每个任务依次执行，执行完成，返回</li>
<li>并行，所有任务都完成后，返回</li>
<li>消息队列方式，通过异步操作(邮件、短信)</li>
</ol>
<h4 id="服务库优化-缓存-内置查询缓存"><a href="#服务库优化-缓存-内置查询缓存" class="headerlink" title="服务库优化 缓存 (内置查询缓存)"></a>服务库优化 缓存 (内置查询缓存)</h4><p>Redis与Memcache的区别<br>M不支持持久化，通常做缓存，提升性能<br>M在并发场景下，用cas保持一致性，redis事务支持比较弱，只能保证事务中的每个操作连续执行<br>Redis支持多种类的数据类型<br>Redis用于数据量较小的高性能操作和运算上<br>M用于在动态系统中减少数据库负载，提升性能；适合做缓存，提高性能</p>
<h4 id="分库分表、分区操作、负载均衡、读写分离"><a href="#分库分表、分区操作、负载均衡、读写分离" class="headerlink" title="分库分表、分区操作、负载均衡、读写分离"></a>分库分表、分区操作、负载均衡、读写分离</h4><h3 id="web服务器优化"><a href="#web服务器优化" class="headerlink" title="web服务器优化"></a>web服务器优化</h3><h4 id="负载均衡-4层LVS-7层LVS"><a href="#负载均衡-4层LVS-7层LVS" class="headerlink" title="负载均衡 4层LVS 7层LVS"></a>负载均衡 4层LVS 7层LVS</h4><hr>
<h1 id="下面的随时可删"><a href="#下面的随时可删" class="headerlink" title="下面的随时可删"></a>下面的随时可删</h1><hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网站架构的整个演变主要围绕 <code>大数据</code> 和 <code>高并发</code> 而展开。解决的方案主要是 <code>使用缓存</code> 和 <code>多资源</code> 两种类型。</p>
<ul>
<li>多资源：多存储，多CPU，多网络。</li>
</ul>
<h2 id="网站架构-优化"><a href="#网站架构-优化" class="headerlink" title="网站架构(优化)"></a>网站架构(优化)</h2><h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><ol>
<li>使用缓存: 使用程序直接保存到内存中。主要使用Map，尤其ConcurrentHashMap。</li>
<li>使用缓存框架。常用的框架：Ehcache，Memcache，Redis等。</li>
</ol>
<ul>
<li>最关键的问题是：什么时候创建缓存，以及其失效机制。</li>
<li>对于空数据的缓冲：最好用一个特定的类型值来保存，以区别空数据和未缓存的两种状态。</li>
</ul>
<ol start="3">
<li>数据库优化：<ul>
<li>表结构优化。</li>
<li>SQL语句优化，语法优化和处理逻辑优化。可记录各语句执行时间，有针对性的分析。</li>
<li>分区</li>
<li>分表</li>
<li>索引优化</li>
<li>使用存储过程代替直接操作</li>
</ul>
</li>
<li>分离活跃数据<ul>
<li>例如用户，可以分为活跃用户和不活跃用户。</li>
</ul>
</li>
<li>批量读取和延迟修改<ul>
<li>高并发情况可以将多个查询请求合并到一个。</li>
<li>高并发且频繁修改的可以暂存缓存中。</li>
</ul>
</li>
<li>读写分离<ul>
<li>上图，数据库服务器配置多个，配置主从数据库。写用主数据库，读用从数据库。</li>
</ul>
</li>
<li>分布式数据库<ul>
<li>将不同的表存放到不同的数据库中，然后再放到不同的服务器中。有些复杂问题，如：事务处理，多表查询。</li>
</ul>
</li>
<li>NoSql和Hadoop<ul>
<li>NoSql，not only SQL。没有关系型数据库那么多限制，比较灵活高效。</li>
<li>Hadoop，将一个表中的数据分层多块，保存到多个节点（分布式）。每一块数据都有多个节点保存（集群）。集群可以并行处理相同的数据，还可以保证数据的完整性。</li>
</ul>
</li>
</ol>
<h3 id="高并发-1"><a href="#高并发-1" class="headerlink" title="高并发"></a>高并发</h3><ol>
<li>应用和静态资源分离。<ul>
<li>将静态资源（js，css，图片等）放到专门的服务器中。</li>
</ul>
</li>
<li>页面缓存<ul>
<li>将应用生成的页面缓存起来可以节省大量cpu资源。</li>
<li>对于部分页面经常变换数据的，可以使用ajax来处理。</li>
</ul>
</li>
<li>集群和分布式<ul>
<li>集群，多台服务器具有相同的功能，主要起分流的作用。</li>
<li>分布式，将不同的业务放到不同的服务器中，处理一个请求可能需要多台服务器，进而提高一个请求的处理速度。</li>
<li>又分为静态资源集群和应用程序集群。后者较复杂，经常要考虑session同步等问题。</li>
</ul>
</li>
<li>反向代理<ul>
<li>客户端直接访问的服务器并不是直接提供服务的服务器，它从别的服务器获取资源，然后将结果返回给用户。</li>
<li>代理服务器和反向代理服务器：<ul>
<li>代理服务器是代我们访获取资源，然后将结果返回。例如，访问外网的代理服务器。反向代理服务器是我们正常访问一台服务器的时候，服务器自己调用了别的服务器。</li>
<li>代理服务器我们主动使用，是为我们服务的，不需要有自己的域名；反向代理是服务器自己使用的，我们并不知道，有自己的域名。</li>
</ul>
</li>
</ul>
</li>
<li>CDN<ul>
<li>CDN是一种特殊的集群页面缓冲服务器，和普通的集群的多台页面缓冲服务器相比主要区别是：其存放位置和分配请求方式不同。</li>
<li>CDN的服务器分布在全国各地，接收到请求后会将请求分配到最合适的CDN服务器节点来获取数据。其每一个CDN节点就是一个页面缓存服务器。</li>
<li>分配方式：并不是普通的负载均衡，而是专门的CDN域名解析服务器在解析域名的时候就分配好的，一般的做饭是：ISP那里使用CNAME将域名解析到一个特定的域名，然后再将解析到的那个域名用专门的CD服务器解析（返回给浏览器，再访问）到相应的CDN节点。每个节点可能也集群了多台服务器。</li>
</ul>
</li>
</ol>
<h2 id="总体业务逻辑"><a href="#总体业务逻辑" class="headerlink" title="总体业务逻辑"></a>总体业务逻辑</h2><ul>
<li>前端:异步请求+资源静态化+cdn</li>
<li>后端:请求队列+轮询分发+负载均衡+共享缓存</li>
<li>数据层:redis缓存+数据分表+写队列</li>
<li>存储:raid阵列+热备</li>
<li>网络:dns轮询+DDOS攻击防护</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Mysql</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/blog/p/6fbb57c0/</url>
    <content><![CDATA[<p>最开始是在refactoringguru学的，对它又爱又恨，网上介绍有价值的使用场景非常少，不过通过自己字字甄别后慢慢入了坑，从此设计模式大法就是我的心法！</p>
<span id="more"></span>


<h2 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h2><p>设计模式是在软件工程中使用 <code>面向对象设计</code> 开发时反复出现的问题的 <code>解决方案</code></p>
<blockquote>
<p>补充：算法不是设计模式，因为算法致力于解决问题而非设计问题</p>
</blockquote>
<h2 id="SOLID-面向对象设计"><a href="#SOLID-面向对象设计" class="headerlink" title="SOLID (面向对象设计)"></a>SOLID (面向对象设计)</h2><p>在程序设计领域，SOLID（单一功能、开闭原则、里氏替换、接口隔离以及依赖反转）</p>
<h2 id="设计模式的常用7大原则"><a href="#设计模式的常用7大原则" class="headerlink" title="设计模式的常用7大原则"></a>设计模式的常用7大原则</h2><p>提高软件设计的质量和效率。</p>
<h3 id="单一职责原则-Single-Responsibility-Principle"><a href="#单一职责原则-Single-Responsibility-Principle" class="headerlink" title="单一职责原则(Single Responsibility Principle)"></a>单一职责原则(Single Responsibility Principle)</h3><p>一个类或模块应该只负责一个单独的任务或职责。因为一个类或模块如果具有多个职责，会造成耦合，不利于维护性和扩展性。</p>
<p>例子：订单类</p>
<ol>
<li>在平时的代码中 订单具有一下职责 查询商品 计算价格 计算优惠价格 修改订单状态等职责，<ul>
<li>像这样将所有职责的细节代码写在同一个订单类当中，会造成类职责过多，耦合在一起，不利于扩展。</li>
</ul>
</li>
<li>在策略模式中，每个策略算法负责完成一项单独的任务。例如，一个策略可能负责计算销售税，另一个策略可能负责计算商品折扣。</li>
<li>在观察者模式中，主题对象负责维护观察者列表，并在状态改变时通知观察者。观察者则负责更新状态，但不负责维护观察者列表。</li>
<li>在工厂方法模式中，抽象工厂负责定义创建对象的接口，具体工厂则负责实际创建对象。这样就可以将对象的创建和使用分开，提高了灵活性和可扩展性。</li>
</ol>
<h3 id="开闭原则-Open-Closed-Principle"><a href="#开闭原则-Open-Closed-Principle" class="headerlink" title="开闭原则(Open Closed Principle)"></a>开闭原则(Open Closed Principle)</h3><p>基本原则。它指的是软件实体（类，模块，函数等）应该对扩展开放，对修改关闭。因为直接修改代码会造成系统稳定性降低，出现bug。</p>
<p>例子：</p>
<ol>
<li>通知功能<ul>
<li>通知方式有许多种，sms、微信服务号通知、系统自带的消息。</li>
<li>现在需要增加一个sms通知，只需要继承<code>interface Notice</code>，扩展一个短信通知类即可。</li>
</ul>
</li>
<li>符合开闭原则最典型的设计模式是装饰者模式，它可以动态地将责任附加到对象上，而不用去修改类的代码。</li>
<li>在 PHP 中，我们可以使用接口（interface）和抽象类（abstract class）来实现开闭原则。</li>
</ol>
<h3 id="里氏替换原则-Liskov-Substitution-Principle"><a href="#里氏替换原则-Liskov-Substitution-Principle" class="headerlink" title="里氏替换原则(Liskov Substitution Principle)"></a>里氏替换原则(Liskov Substitution Principle)</h3><p><code>子类需要能够当成父类来使用，并且需要比父类更特殊</code></p>
<p>如果不满足这个原则，那么各个子类的行为上就会有很大差异，增加继承体系的复杂度。</p>
<h3 id="接口隔离原则-Interface-Segregation-Principle"><a href="#接口隔离原则-Interface-Segregation-Principle" class="headerlink" title="接口隔离原则(Interface Segregation Principle)"></a>接口隔离原则(Interface Segregation Principle)</h3><blockquote>
<p><a href="https://www.jianshu.com/p/c9d0f89ab238" target="_blank" rel="noopener">https://www.jianshu.com/p/c9d0f89ab238</a></p>
</blockquote>
<p><code>使用多个隔离的接口，少使用单个接口</code></p>
<p>降低耦合度，方便程序拓展(程序升级和维护)，高内聚、低耦合(低依赖)。</p>
<h3 id="依赖倒转原则-Dependency-Inversion-Principle"><a href="#依赖倒转原则-Dependency-Inversion-Principle" class="headerlink" title="依赖倒转原则(Dependency Inversion Principle)"></a>依赖倒转原则(Dependency Inversion Principle)</h3><p><code>高层模块不应该依赖于低层模块，二者都应该依赖于抽象</code> and <code>抽象不应该依赖于细节，细节应该依赖于抽象。</code> 等同于面向接口编程</p>
<p>高层模块包含应用程序中重要的策略选择和业务模块，如果高层模块依赖于低层模块，那么低层模块的改动就会直接影响到高层模块，从而迫使高层模块也需要改动。</p>
<h3 id="迪米特法则-The-Law-of-Demeter"><a href="#迪米特法则-The-Law-of-Demeter" class="headerlink" title="迪米特法则(The Law of Demeter)"></a>迪米特法则(The Law of Demeter)</h3><p><code>一个实体应当尽量少地与其他实体之间发生相互作用，不这么做的话，就难以使得系统功能模块相对独立</code></p>
<h3 id="合成复用原则-The-Composite-Reuse-Principle"><a href="#合成复用原则-The-Composite-Reuse-Principle" class="headerlink" title="合成复用原则(The Composite Reuse Principle)"></a>合成复用原则(The Composite Reuse Principle)</h3><blockquote>
<p>详解：<a href="https://www.jianshu.com/p/971174896481" target="_blank" rel="noopener">https://www.jianshu.com/p/971174896481</a></p>
</blockquote>
<p><code>为了复用尽量使用对象组合，而不是通过继承来达到目的。</code></p>
<h2 id="设计模式有哪些？"><a href="#设计模式有哪些？" class="headerlink" title="设计模式有哪些？"></a>设计模式有哪些？</h2><p>创建型模式（Creational Patterns）</p>
<ul>
<li>单例模式（Singleton Pattern）</li>
<li>工厂模式（Factory Pattern）</li>
<li>抽象工厂模式（Abstract Factory Pattern）</li>
<li>原型模式（Prototype Pattern）</li>
<li>建造者模式（Builder Pattern）</li>
</ul>
<p>结构型模式（Structural Patterns） 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p>
<ul>
<li>适配器模式（Adapter Pattern）</li>
<li>桥接模式（Bridge Pattern）：将抽象部分与它的实现部分分离，使他们都可以独立地变化。</li>
<li>组合模式（Composite Pattern）：将对象组合成树形结构以表示“部分-整体”的层次结构。Composite 使得客户对单个对象和复合对象的使用具有一致性。</li>
<li>装饰模式（Decorator Pattern）：动态地给一个对象添加一些额外的职责。就扩展功能而言，Decorator模式比生成子类的方式更为灵活。</li>
<li>外观模式（Facade Pattern）：为子系统中的一组接口提供一个一致的接口。Façade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li>
<li>代理模式（Proxy Pattern）:为其他对象提供一个代理以控制对这个对象的访问。</li>
<li>享元模式（Flyweight Pattern）：运用共享技术有效地支持大量细粒度的对象。</li>
</ul>
<p>行为型模式（Behavioral Patterns） 这些设计模式特别关注对象之间的通信。</p>
<ul>
<li>命令模式（Command Pattern）：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可取消的操作。</li>
<li>状态模式（State Pattern）:允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。</li>
<li>策略模式（Strategy Pattern）:定义一系列的算法，把它们一个个封装起来，并且使他们可相互替换。本模式使得算法的变化可以独立于使用它的客户。</li>
<li>观察者模式（Observer Pattern）：定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新。</li>
<li>迭代器模式（Iterator Pattern）：提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。</li>
<li>解释器模式（Interpreter Pattern）：定义一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</li>
<li>中介者模式（Mediator Pattern）：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li>
<li>访问者模式（Visitor Pattern）:表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素类别的前提下定义作用于这些元素的新操作。</li>
<li>备忘录模式（Memento Pattern）：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保持该状态，这样以后就可以将该对象恢复到保存的状态。</li>
<li>责任链模式（Chain of Responsibility Pattern）：为解除请求的发送者和接收者之间的耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它。</li>
<li>模版方法模式（Template Pattern）:定义一个操作中的算法的骨架，而将一些步骤延迟到子类。TemplateMethod 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li>
</ul>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><blockquote>
<p><a href="https://juejin.im/post/5cb534386fb9a0685727e1eb" target="_blank" rel="noopener">https://juejin.im/post/5cb534386fb9a0685727e1eb</a></p>
</blockquote>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>简述：指一个类只有一个实例，且该类能自行创建这个实例<br>作用：避免产生资源浪费<br>使用场景：数据库连接、全局配置中心、Windows系统的回收站</p>
<hr>
<blockquote>
<p>Singleton.php文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">core</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">core</span>\<span class="title">lib</span>\<span class="title">Db</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">self</span>::<span class="variable">$obj</span> = <span class="keyword">new</span> Db();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getObj</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">self</span>::<span class="variable">$obj</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$obj</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>index.php文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;core/Loader.php&quot;</span>;</span><br><span class="line">spl_autoload_register(<span class="string">&quot;\\core\\Loader::autoload&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#传统写法</span></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> \core\lib\Db();</span><br><span class="line">var_dump(memory_get_usage());<span class="comment">#通过内存占用率比较单例模式</span></span><br><span class="line"><span class="variable">$db1</span> = <span class="keyword">new</span> \core\lib\Db();</span><br><span class="line">var_dump(memory_get_usage());</span><br><span class="line"><span class="variable">$db2</span> = <span class="keyword">new</span> \core\lib\Db();</span><br><span class="line">var_dump(memory_get_usage());</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果：每创建一次，内存会增加</span></span><br><span class="line"><span class="keyword">int</span>(<span class="number">397192</span>)</span><br><span class="line"><span class="keyword">int</span>(<span class="number">397264</span>)</span><br><span class="line"><span class="keyword">int</span>(<span class="number">397304</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#单例模式</span></span><br><span class="line"><span class="variable">$db</span> = \core\Singleton::getObj();</span><br><span class="line">var_dump(memory_get_usage());<span class="comment">#通过内存占用率比较传统模式</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$db1</span> = \core\Singleton::getObj();</span><br><span class="line">var_dump(memory_get_usage());</span><br><span class="line"></span><br><span class="line"><span class="variable">$db2</span> = \core\Singleton::getObj();</span><br><span class="line">var_dump(memory_get_usage());</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果：第一次创建时内存增加，n&gt;1次获取对象时则不重复创建</span></span><br><span class="line"><span class="keyword">int</span>(<span class="number">399704</span>)</span><br><span class="line"><span class="keyword">int</span>(<span class="number">399736</span>)</span><br><span class="line"><span class="keyword">int</span>(<span class="number">399736</span>)</span><br></pre></td></tr></table></figure>

<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><ul>
<li><strong>简述</strong>：将传统的实例方式更改成 通过工厂模式的方法生成对象</li>
<li><strong>作用</strong>：便于统一管理和调用</li>
<li><strong>使用场景</strong>：解决当多处被调用的类名或者参数发生改变时，多个调用处需要修改代码的问题</li>
</ul>
<hr>
<blockquote>
<p>Factory.php文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">core</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">core</span>\<span class="title">lib</span>\<span class="title">Db</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createDb</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Db();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>index.php文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;core/Loader.php&quot;</span>;</span><br><span class="line">spl_autoload_register(<span class="string">&quot;\\core\\Loader::autoload&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统写法</span></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> \core\lib\Db();</span><br><span class="line"><span class="variable">$db1</span> = <span class="keyword">new</span> \core\lib\Db();</span><br><span class="line"><span class="variable">$db2</span> = <span class="keyword">new</span> \core\lib\Db();</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂模式写法</span></span><br><span class="line"><span class="variable">$db</span> = \core\Factory::createDb();</span><br><span class="line"><span class="variable">$db1</span> = \core\Factory::createDb();</span><br><span class="line"><span class="variable">$db2</span> = \core\Factory::createDb();</span><br></pre></td></tr></table></figure>
<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>将多个工厂模式提炼成一个大工厂，隔离了客户端和各个产品类，客户端不用关心产品类的内部细节</p>
<p>缺点：增加了系统的抽象性和理解程度</p>
<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><ul>
<li><strong>简述</strong>：将多个截然不同的函数接口封装成统一的api</li>
<li><strong>作用</strong>：解耦，调用者只需要关心api，而不需要关心具体实现方式</li>
<li><strong>使用场景</strong>：cache：redis、file、memcache；数据库：mysql、mysqli、pdo</li>
</ul>
<hr>
<blockquote>
<p>index.php文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;core/Loader.php&quot;</span>;</span><br><span class="line">spl_autoload_register(<span class="string">&quot;\\core\\Loader::autoload&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&#x27;select id from users&#x27;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> \core\lib\PDO(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="string">&#x27;study&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$db</span>-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line">var_dump(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Database.php数据库适配器接口文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">core</span>\<span class="title">lib</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Database</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">conn</span>(<span class="params"><span class="variable">$host</span>, <span class="variable">$name</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"><span class="variable">$sql</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Mysql.php适配文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">core</span>\<span class="title">lib</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span> <span class="keyword">implements</span> <span class="title">Database</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">conn</span>(<span class="params"><span class="variable">$host</span>, <span class="variable">$name</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> Implement conn() method.</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"><span class="variable">$sql</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> Implement query() method.</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Mysqli.php适配文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">core</span>\<span class="title">lib</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysqli</span> <span class="keyword">implements</span> <span class="title">Database</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> <span class="built_in">static</span> <span class="variable">$conn</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">conn</span>(<span class="params"><span class="variable">$host</span>, <span class="variable">$name</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> Implement conn() method.</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"><span class="variable">$sql</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> Implement query() method.</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>PDO.php适配文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">core</span>\<span class="title">lib</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PDO</span> <span class="keyword">implements</span> <span class="title">Database</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> <span class="built_in">static</span> <span class="variable">$conn</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">conn</span>(<span class="params"><span class="variable">$host</span>, <span class="variable">$dbname</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> Implement conn() method.</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"><span class="variable">$sql</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> Implement query() method.</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><ul>
<li>含义：分离抽象部分和它的实现部分，使它们可以独立地变化。</li>
<li>作用：让抽象和实现之间的耦合度降低，提高系统的灵活性和可扩展性。</li>
<li>例子： 在 PHP 中，我们可以通过定义抽象类和接口来实现桥接模式。例如，下面的代码演示了如何使用桥接模式来实现一个抽象图形类：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义抽象图形类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$color</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Color <span class="variable">$color</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;color = <span class="variable">$color</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义具体图形类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 使用 $this-&gt;color 来绘制圆形</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 使用 $this-&gt;color 来绘制正方形</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义抽象颜色类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fill</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义具体颜色类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">extends</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fill</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 使用红色填充图形</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Green</span> <span class="keyword">extends</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fill</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 使用绿色填充图形</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="variable">$circle</span> = <span class="keyword">new</span> Circle(<span class="keyword">new</span> Red());</span><br><span class="line"><span class="variable">$circle</span>-&gt;draw();</span><br><span class="line"></span><br><span class="line"><span class="variable">$square</span> = <span class="keyword">new</span> Square(<span class="keyword">new</span> Green());</span><br><span class="line"><span class="variable">$square</span>-&gt;draw();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>将对象组合成树形结构，并使用户对单个对象和组合对象的使用具有一致性。</p>
<h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p>向一个现有对象添加新的功能，同时又不改变其结构。这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p>
<p>例子：</p>
<ol>
<li>数据库SQL语句额外修饰符</li>
<li>假设你想在一个字符串前面添加一些修饰符，如 “*” 或 “~”，你可以使用装饰模式来实现。<ul>
<li>首先，定义一个抽象类 StringDecorator，包含一个包含原始字符串的属性和一个抽象的 getString() 方法：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDecorator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$str</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">StringService <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;str = <span class="variable">$str</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getString</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li>然后，创建一个具体的实现类 StringService，实现 getString() 方法，并返回原始字符串：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;string = <span class="variable">$string</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;string;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>接着，创建一个装饰类 StringDecoratorAsterisk， 继承自抽象类 StringDecorator，并实现 getString() 方法，在调用原始的 getString() 方法之前添加修饰符 “*”：<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDecoratorAsterisk</span> <span class="keyword">extends</span> <span class="title">StringDecorator</span> </span>&#123;</span><br><span class="line">  public function getString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;*&quot;</span> . $<span class="keyword">this</span>-&gt;str-&gt;getString() . <span class="string">&quot;*&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>最后，创建一个装饰类 StringDecoratorTilde，继承自抽象类 StringDecorator， 并实现 getString() 方法，在调用原始的 getString() 方法之后添加修饰符 “~”：<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDecoratorTilde</span> <span class="keyword">extends</span> <span class="title">StringDecorator</span> </span>&#123;</span><br><span class="line">  public function getString() &#123;</span><br><span class="line">    <span class="keyword">return</span> $<span class="keyword">this</span>-&gt;str-&gt;getString() . <span class="string">&quot;~&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>允许一个对象在控制对另一个对象的访问。它通常用于提供对另一个对象的访问的替代方式，例如，在进行远程访问时。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$target</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;target = <span class="variable">$target</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>-&gt;target, <span class="variable">$name</span>), <span class="variable">$arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$target</span> = <span class="keyword">new</span> Target();</span><br><span class="line"><span class="variable">$proxy</span> = <span class="keyword">new</span> Proxy(<span class="variable">$target</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$proxy</span>-&gt;foo(); <span class="comment">// 输出 &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，Proxy 类通过实现 __call 方法来控制对 Target 类的访问。<br>当调用 Proxy 对象的方法时，__call 方法会被调用，并将调用转发到 Target 对象。<br>这样，就可以通过 Proxy 对象来间接访问 Target 对象的方法。</p>
<h3 id="注册器模式"><a href="#注册器模式" class="headerlink" title="注册器模式"></a>注册器模式</h3><ul>
<li><strong>简述</strong>：全局共享和数据交换|可以和工厂模式结合</li>
<li><strong>作用</strong>：将多个实例注册到统一的注册器(array)当中，通过注册器获取方法传递标识获取(alias)</li>
<li><strong>使用场景</strong>：系统加载默认配置文件时</li>
</ul>
<hr>
<blockquote>
<p>Register.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">core</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> <span class="built_in">static</span> <span class="variable">$obj_arr</span> = [];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"><span class="variable">$alias</span>, <span class="variable">$obj</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">self</span>::<span class="variable">$obj_arr</span>[<span class="variable">$alias</span>] = <span class="variable">$obj</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$alias</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$obj_arr</span>[<span class="variable">$alias</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Factory.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">core</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">core</span>\<span class="title">lib</span>\<span class="title">Db</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createDb</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="variable">$db</span> = Register::get(<span class="string">&quot;Db&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (!<span class="variable">$db</span>) &#123;</span><br><span class="line">			<span class="variable">$db</span> = <span class="keyword">new</span> Db();</span><br><span class="line">			Register::set(<span class="string">&quot;Db&quot;</span>, <span class="variable">$db</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="variable">$db</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>index.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;core/Loader.php&quot;</span>;</span><br><span class="line">spl_autoload_register(<span class="string">&quot;\\core\\Loader::autoload&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用注册器模式</span></span><br><span class="line">\core\Register::set(<span class="string">&quot;Db&quot;</span>, <span class="keyword">new</span> \core\lib\Db());</span><br><span class="line"><span class="variable">$db</span> = \core\Register::get(<span class="string">&quot;Db&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册器模式与工厂模式结合使用</span></span><br><span class="line"><span class="variable">$db</span> = \core\Factory::createDb();</span><br><span class="line"><span class="variable">$db1</span> = \core\Factory::createDb();</span><br><span class="line"><span class="variable">$db2</span> = \core\Factory::createDb();</span><br></pre></td></tr></table></figure>


<h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><ul>
<li><strong>简述</strong>：在不需要了解内部实现的前提下，遍历一个局和对象的内部元素</li>
</ul>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ul>
<li><strong>简述</strong>：当类的数据发生变更时，通知所有依赖这个类的观察者，执行更新机制</li>
<li><strong>作用</strong>：非侵入式更新机制、解耦</li>
<li><strong>使用场景</strong>：</li>
</ul>
<hr>
<blockquote>
<p>Observer.php接口文件，约束每个继承者都需要有更新操作</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">core</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"><span class="variable">$notify_info</span> = <span class="literal">null</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Observer1.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">core</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer1</span> <span class="keyword">implements</span> <span class="title">Observer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"><span class="variable">$notify_info</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;observer1 update done!\n&quot;</span>;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> Implement update() method.</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Observer2.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">core</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer2</span> <span class="keyword">implements</span> <span class="title">Observer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"><span class="variable">$notify_info</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;observer2 update done!\n&quot;</span>;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> Implement update() method.</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>index.php文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;core/Loader.php&quot;</span>;</span><br><span class="line">spl_autoload_register(<span class="string">&quot;\\core\\Loader::autoload&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察者模式,当用户操作后，通知所有观察者并执行更新机制</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span> <span class="keyword">extends</span> \<span class="title">core</span>\<span class="title">Event</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">event1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;event1 exec done!\n&quot;</span>;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;notify();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">event2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;event2 exec done!\n&quot;</span>;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;notify();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$users</span> = <span class="keyword">new</span> Users();</span><br><span class="line"><span class="variable">$users</span>-&gt;addObserver(<span class="keyword">new</span> \core\Observer1());<span class="comment">//添加观察者1</span></span><br><span class="line"><span class="variable">$users</span>-&gt;addObserver(<span class="keyword">new</span> \core\Observer2());<span class="comment">//添加观察者2</span></span><br><span class="line"><span class="variable">$users</span>-&gt;event1();<span class="comment">//执行事件1,因为在该类下存在两个观察者，所以两个观察者的update都执行</span></span><br><span class="line"><span class="variable">$users</span>-&gt;event2();<span class="comment">//同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">event1 exec done!</span><br><span class="line">observer1 update done!</span><br><span class="line">observer2 update done!</span><br><span class="line">event2 exec done!</span><br><span class="line">observer1 update done!</span><br><span class="line">observer2 update done!</span><br></pre></td></tr></table></figure>

<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><ul>
<li><strong>简述</strong>：通过复制(clone)一个已存在的实例，来创建新的实例，不用通过构造函数实现</li>
<li><strong>作用</strong>：避免类创建时重复的初始化操作，节省系统开销</li>
<li><strong>使用场景</strong>：代码中发现重复调用较大的类，适用于大对象</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><ul>
<li><strong>简述</strong>：将一组特定的行为和算法封装成类，以适应某些特定的上下文环境</li>
<li><strong>作用</strong>：如果要增加一种策略，只需要增加一种策略实现类，然后在入口文件中执行判断，传入这个类即可。解耦，数据反转(IOC)&#x2F;依赖注入<blockquote>
<p>相关文档：<a href="https://blog.csdn.net/ivan820819/article/details/79744797" target="_blank" rel="noopener">https://blog.csdn.net/ivan820819/article/details/79744797</a></p>
</blockquote>
</li>
<li><strong>使用场景</strong>：<ul>
<li>代码中发现重复调用较大的类，适用于大对象</li>
<li>把复杂系统分解成相互合作的对象</li>
<li>每个对象在设计时互不干扰，可以分组协做(不同同事)</li>
<li>CORE的site gete登录态、getTypes、getDownloadUrl<br>分支</li>
</ul>
</li>
</ul>
<hr>
<h3 id="代理模式-1"><a href="#代理模式-1" class="headerlink" title="代理模式"></a>代理模式</h3><ul>
<li><p><strong>简述</strong>：由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p>
</li>
<li><p><strong>作用</strong>：</p>
<blockquote>
<p>相关文档：<a href="https://blog.csdn.net/ivan820819/article/details/79744797" target="_blank" rel="noopener">https://blog.csdn.net/ivan820819/article/details/79744797</a></p>
</blockquote>
</li>
<li><p><strong>使用场景</strong>：数据库的主从自动切换</p>
</li>
<li><p><strong>优点</strong></p>
<ul>
<li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li>
<li>代理对象可以扩展目标对象的功能；</li>
<li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；</li>
</ul>
</li>
<li><p><strong>缺点</strong></p>
<ul>
<li>在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；</li>
<li>增加了系统的复杂度；</li>
</ul>
</li>
</ul>
<h3 id="数据对象映射模式"><a href="#数据对象映射模式" class="headerlink" title="数据对象映射模式"></a>数据对象映射模式</h3><h3 id="外观模式-1"><a href="#外观模式-1" class="headerlink" title="外观模式"></a>外观模式</h3><ul>
<li><p><strong>简述</strong>：一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。</p>
</li>
<li><p><strong>优点</strong>：</p>
<ul>
<li>外观（Facade）模式是“迪米特法则”的典型应用</li>
<li>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。</li>
<li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li>
<li>降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象。</li>
</ul>
</li>
<li><p><strong>缺点</strong>：</p>
<ul>
<li>不能很好地限制客户使用子系统类。<br>  +增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li>
</ul>
</li>
</ul>
<p>待补充…</p>
<h2 id="下方是经过验证过的CODE"><a href="#下方是经过验证过的CODE" class="headerlink" title="下方是经过验证过的CODE"></a>下方是经过验证过的CODE</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liguoxin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> guoxinlee129<span class="doctag">@gmail</span>.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Service</span>\<span class="title">Shop</span>\<span class="title">State</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderStateContext</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> OrderStateAbstract <span class="variable">$state</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">OrderStateAbstract <span class="variable">$state</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="variable">$state</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params"><span class="variable">$state</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;state = <span class="variable">$state</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;state-&gt;handle(<span class="keyword">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>课程体系<br>比如之前做过的商城场景中<br>商城中的商品类型很多，针对某一款商品我们要进行打折活动</p>
<p>实现方案：可以使用接口和抽象类<br>例子1：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 有资源网需求当中，存在多个资源网站，爬取网站的方式各不相同</span></span><br><span class="line"><span class="keyword">if</span> ($type === <span class="string">&#x27;包图网&#x27;</span>) &#123;</span><br><span class="line">    <span class="meta"># 包图网 资源爬取方式</span></span><br><span class="line">&#125; <span class="keyword">elseif</span> ($type === <span class="string">&#x27;97设计&#x27;</span>) &#123;</span><br><span class="line">    <span class="meta"># 97设计 资源爬取方式</span></span><br><span class="line">&#125; <span class="keyword">elseif</span> ($type === <span class="string">&#x27;千图网&#x27;</span>) &#123;</span><br><span class="line">    <span class="meta"># 千图网 资源爬取方式</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="meta"># 其他的资源网站爬取方式...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改良过之后</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ResourceCrawlStrategyInterface.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ResourceCrawlStrategyInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">crawl</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># BaotuwangResourceCrawlStrategy.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaotuwangResourceCrawlStrategy</span> <span class="keyword">implements</span> <span class="title">ResourceCrawlStrategyInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">crawl</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement crawl() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># QiantuwangResourceCrawlStrategy.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QiantuwangResourceCrawlStrategy</span> <span class="keyword">implements</span> <span class="title">ResourceCrawlStrategyInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">crawl</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement crawl() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sheji97ResourceCrawlStrategy.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheji97ResourceCrawlStrategy</span> <span class="keyword">implements</span> <span class="title">ResourceCrawlStrategyInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">crawl</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement crawl() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重要！ IndexController.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="鸭子应用"><a href="#鸭子应用" class="headerlink" title="鸭子应用"></a>鸭子应用</h3><p>某公司做了一套相当成功的鸭子游戏，鸭子有共同的行为，叫和游泳，并且每个鸭子的这两个动作，都是一致的，鸭子的外观各有不同。</p>
<h4 id="开始设计"><a href="#开始设计" class="headerlink" title="开始设计"></a>开始设计</h4><ol>
<li>因为所有的鸭子都会 <code>叫</code>、<code>游泳</code>,所以首先想到的是 抽象一个超类并且超类自身进行具体实现（父类实现，但是子类也可以覆盖父类的方法进行实现）</li>
<li>因为所有的鸭子外观都不同，每个所以在抽象超类中…创建抽象方法，继承的子类负责具体实现（子类实现外观）</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">quack</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;超类 具体实现了 所有鸭子叫 功能&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">swim</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;超类 具体实现了 所有鸭子游泳 功能&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 抽象方法，具体实现交给子类完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YellowDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;黄色鸭子 具体实现了 黄色颜色外观 功能&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;红色鸭子 具体实现了 红色颜色外观 功能&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$yellowDuck</span> = <span class="keyword">new</span> YellowDuck();</span><br><span class="line"><span class="variable">$yellowDuck</span>-&gt;display();</span><br></pre></td></tr></table></figure>
<p>上方首先考虑到的是类继承以及开闭原则，各个方面都ok，开发完毕。</p>
<p>隔了两个月，公司高层认为需要对产品进行一下创新，来提高产品的竞争力，然后确定了在游戏中添加<code>飞行</code>的功能。 产品经理找到你并确定了具体的功能。</p>
<h4 id="开始第二轮的维护"><a href="#开始第二轮的维护" class="headerlink" title="开始第二轮的维护"></a>开始第二轮的维护</h4><p>思路：</p>
<p>拿到这个功能，第一时间想到的实现方案是使用类继承</p>
<ol>
<li><p>继承，超类进行具体实现</p>
<p>在超类中添加<code>飞行</code>方法，并且加以具体实现，那么继承的所有鸭子们都能拥有这个功能</p>
</li>
</ol>
<p>版本迭代后，产品经理火速联系到你说有bug，所有的鸭子都在天上呱呱呱，包括橡皮鸭(橡皮鸭不具备飞行的能力)</p>
<p>发现问题：不是所有的鸭子都会飞</p>
<h4 id="开始第三轮的维护"><a href="#开始第三轮的维护" class="headerlink" title="开始第三轮的维护"></a>开始第三轮的维护</h4><ol start="2">
<li><p>继承，子类进行具体实现</p>
<p>将超类的<code>飞行</code>方法设置为抽象，具体实现交给所有继承的子类</p>
</li>
</ol>
<p>but，如果会飞的鸭子(假设有三个)，每一个都需要在自己类的<code>飞行</code>方法中实现会飞的逻辑，那么重复代码就会有三处，代码无法复用</p>
<ol start="3">
<li><p>接口方式实现</p>
<p>创建FlyInterface，会飞的鸭子implement它</p>
</li>
</ol>
<p>but，如果飞行的逻辑发生了修改，则每一处地方都要修改，以及代码无法复用（跟上一个解决方案一样的问题）</p>
<h4 id="重新梳理思路"><a href="#重新梳理思路" class="headerlink" title="重新梳理思路"></a>重新梳理思路</h4><p>核心点：随着鸭子的不同，fly这个方法是会变化的，有些鸭子会飞有些鸭子不会飞，那么就需要抽离出来，也就是不应该放在Duck这个超类中</p>
<h5 id="设计原则1：找出应用中可能需要变化的地方，并且把它独立封装起来，与固定、不会发生变化的代码进行隔离，以便后期可以轻易改动或扩充变化的部分"><a href="#设计原则1：找出应用中可能需要变化的地方，并且把它独立封装起来，与固定、不会发生变化的代码进行隔离，以便后期可以轻易改动或扩充变化的部分" class="headerlink" title="设计原则1：找出应用中可能需要变化的地方，并且把它独立封装起来，与固定、不会发生变化的代码进行隔离，以便后期可以轻易改动或扩充变化的部分"></a>设计原则1：找出应用中可能需要变化的地方，并且把它独立封装起来，与固定、不会发生变化的代码进行隔离，以便后期可以轻易改动或扩充变化的部分</h5><p>AB(一个应用) &#x3D; A(变化的，后期进行改动和扩充) + B(不变的)</p>
<p>实际操作中，每次新的需求更改，都会造成某方面的代码发生改变，那么就断言之，这份代码需要被封装，与其他代码进行隔离</p>
<p>原则1的优势：代码变化引起的后果变少，系统变得更有弹性</p>
<h5 id="设计原则2：针对接口编程，而不是针对实现编程，也就是说，变化的具体实现，交给别人做-面向接口，那就是接口负责"><a href="#设计原则2：针对接口编程，而不是针对实现编程，也就是说，变化的具体实现，交给别人做-面向接口，那就是接口负责" class="headerlink" title="设计原则2：针对接口编程，而不是针对实现编程，也就是说，变化的具体实现，交给别人做(面向接口，那就是接口负责)"></a>设计原则2：针对接口编程，而不是针对实现编程，也就是说，变化的具体实现，交给别人做(面向接口，那就是接口负责)</h5><p>原则2的优势：将具体实现交给接口处理，将之前的<code>具体实现</code>改变成<code>调用处</code>，再也不用关心之前实现的细节，第二个优势调用处可以动态改变<code>使用的实现</code>，第三个优势是只需要在运行时才指定具体实现的对象。第四个优势是超类只依赖实现飞行行为接口的对象，所以我们可以随时修改飞行功能，增加或减少等。</p>
<h4 id="什么是针对接口编程以及针对实现编程"><a href="#什么是针对接口编程以及针对实现编程" class="headerlink" title="什么是针对接口编程以及针对实现编程"></a>什么是针对接口编程以及针对实现编程</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeSound</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeSound</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;汪汪叫&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeSound</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;喵喵叫&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimalContext</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeSound</span>(<span class="params">Animal <span class="variable">$animal</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$animal</span>-&gt;makeSound();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对实现编程</span></span><br><span class="line"><span class="variable">$dog</span> = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="variable">$dog</span>-&gt;makeSound();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对接口编程</span></span><br><span class="line"><span class="variable">$animal</span> = <span class="keyword">new</span> AnimalContext();</span><br><span class="line"><span class="variable">$animal</span>-&gt;makeSound(<span class="keyword">new</span> Dog());</span><br></pre></td></tr></table></figure>
<p>原则的优势：可以在运行时动态改变鸭子飞行的行为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> DuckFlyBehavior <span class="variable">$duckFlyBehavior</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setFlyBehavior</span>(<span class="params">DuckFlyBehavior <span class="variable">$duckFlyBehavior</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;duckFlyBehavior = <span class="variable">$duckFlyBehavior</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">quack</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;超类 具体实现了 所有鸭子叫 功能&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">swim</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;超类 具体实现了 所有鸭子游泳 功能&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fly</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;duckFlyBehavior-&gt;fly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 抽象方法，具体实现交给子类完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YellowDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;duckFlyBehavior = <span class="keyword">new</span> DuckNoFly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;黄色鸭子 具体实现了 黄色颜色外观 功能&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;duckFlyBehavior = <span class="keyword">new</span> DuckNoFly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;红色鸭子 具体实现了 红色颜色外观 功能&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DuckFlyBehavior</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fly</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuckFlyWithWings</span> <span class="keyword">implements</span> <span class="title">DuckFlyBehavior</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fly</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;该方法实现了飞行的逻辑，鸭子会飞了&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuckNoFly</span> <span class="keyword">implements</span> <span class="title">DuckFlyBehavior</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fly</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;该方法啥也没做，鸭子不会飞&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$yellowDuck</span> = <span class="keyword">new</span> YellowDuck();</span><br><span class="line"><span class="variable">$yellowDuck</span>-&gt;setFlyBehavior(<span class="keyword">new</span> DuckFlyWithWings());</span><br><span class="line"><span class="variable">$yellowDuck</span>-&gt;fly();</span><br></pre></td></tr></table></figure>
<h4 id="开始第四轮的维护"><a href="#开始第四轮的维护" class="headerlink" title="开始第四轮的维护"></a>开始第四轮的维护</h4><p>将鸭子的飞行功能抽象一下，鸭子具有很多行为，诸多行为中包含飞行行为，那么就衍生出了两组类<br>变化行为类，不变化超类(含有部分行为)</p>
<h5 id="原则5：多用组合，少用继承"><a href="#原则5：多用组合，少用继承" class="headerlink" title="原则5：多用组合，少用继承"></a>原则5：多用组合，少用继承</h5><p>策略模式：定义了算法族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。</p>
<h3 id="观察者模式-1"><a href="#观察者模式-1" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>公司于气象公司签订了一个项目，内容是为一个气象站建立一个应用，能够利用气象公司实时提供的测量数据整理成一个统一的api，让其他开发人员可以写出自己的气象布告板，然后出售布告板的使用权，气象公司以此盈利。</p>
<p>以下是整理的细节：</p>
<ol>
<li>气象公司有很多观测设备，设备数据发生变化时，动态告知WeatherData对象，我们不需要知道如何被调用，只需要了解一旦数据发生改变，则会执行对象中的方法。</li>
<li>应用需要建立在WeatherData对象上，该对象负责追踪目前的天气状况（温度&#x2F;湿度&#x2F;气压）</li>
<li>将数据以三种面板（目前状况&#x2F;气象统计&#x2F;天气预报）进行展现，后期也许可能会拓展多个面板或是修改某个面板的展现内容</li>
<li>面板必须实时展现</li>
</ol>
<p>思路图…</p>
<p>基础实现…</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">measurementsChanged</span>(<span class="params"><span class="variable">$temperature</span>, <span class="variable">$humidity</span>, <span class="variable">$pressure</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment"># 气象数据测量数据，这里我们不必知道是如何被调用的，只需要知道只要数据发生改变，则一定会调用此方法通知该对象</span></span><br><span class="line">        <span class="comment">// 下面是三种面板的...</span></span><br><span class="line">        CurrentContidtionsDisplay::update(<span class="variable">$temperature</span>, <span class="variable">$humidity</span>, <span class="variable">$pressure</span>);</span><br><span class="line">        StatisticsDisplay::update(<span class="variable">$temperature</span>, <span class="variable">$humidity</span>, <span class="variable">$pressure</span>);</span><br><span class="line">        ForecastDisplay::update(<span class="variable">$temperature</span>, <span class="variable">$humidity</span>, <span class="variable">$pressure</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>思考：上面做有哪些问题呢？</p>
<ol>
<li>很显然，上面的实现方式是<code>针对具体实现编程</code>，会导致我们以后想要对布告板进行增删改时，必须要进行大量的重复工作，不方便扩展</li>
<li>一旦要进行修改，对于只进行扩展布告板的开发者来讲，必须要<code>侵入</code>核心类中进行修改。</li>
</ol>
<p>使用观察者模式：<br>什么是观察者模式？<br>很像报社与他们客户之间的关系：客户订阅报社的服务，报社每日将最新的报纸发送给每一个人，一个报社对应着很多客户<br>不想继续收到报纸，可以选择取消订阅，那么报社就不会继续发。<br>新的客户想要收到报纸，可以选择订阅，那么报社接下来每日都会派发给你，也包括其他所有的订阅者。<br>特殊情况下，报社也可能是订阅者，因为报社希望他们公司的所有人也都能看到最新的报纸。</p>
<p>图示…</p>
<p>观察者模式概念：定义了对象之间的一对多依赖，对象内部发生改变，则通知所有依赖的对象，并且执行他们的自动更新机制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weather</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$temperature</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$humidity</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$pressure</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTemperature</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment"># 温度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHumidity</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment"># 湿度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;humidity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPressure</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment"># 气压</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;pressure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">measurementsChanged</span>(<span class="params"><span class="variable">$temperature</span>, <span class="variable">$humidity</span>, <span class="variable">$pressure</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment"># 气象数据测量数据，这里我们不必知道是如何被调用的，只需要知道只要数据发生改变，则一定会调用此方法通知该对象</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;temperature = <span class="variable">$temperature</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;humidity = <span class="variable">$humidity</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pressure = <span class="variable">$pressure</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>特点：</p>
<ol>
<li>订阅&#x2F;取消订阅 功能</li>
<li>当类状态发生改变后，通知所有依赖的观察者</li>
<li>角色：订阅者&#x2F;发布者，可能集于一身</li>
<li>发布者只关注发送通知，不关心收到通知后的处理或其他</li>
</ol>
<p>设计原则<br>交互对象之间的松耦合设计很重要。<br>让我们建立有弹性的OO系统，能够应对变化，是因为对象之间的互相依赖降到了最低</p>
<p>确定技术要点</p>
<ol>
<li>一个地方，设计到多个不同的逻辑计算，多个策略</li>
<li>从-到-结束的整个流程，做成多个function</li>
<li>业务建模：上1的整个逻辑视图<br>流程：判断用户是否可以返奖-&gt;判断用户类型（新老用户）-&gt;不同奖励方案（n）-&gt;更新用户奖金信息-&gt;结算</li>
</ol>
<p>不变的是：(整个流程) 闭合</p>
<ol>
<li>判断用户是否可以返奖</li>
<li>判断类型</li>
<li>更新用户奖金信息</li>
<li>结算</li>
</ol>
<p>变化的是：(返奖规则) 开启</p>
<ol>
<li>不同奖励方案</li>
</ol>
<p>抽象 返奖规则类：针对不同用户类型的不同返奖方案，我们视为不同的返奖策略，不同的返奖策略会产生不同的返奖金额结果。</p>
<p>领域模型中：<br>返奖策略是一个 值对象，通过 工厂模式 生产不同的策略（工厂模式&#x2F;策略模式）</p>
<p>工厂模式</p>
<ol>
<li>抽象工厂模式</li>
<li>工厂方法</li>
<li>简单工厂（很多情况下不符合开闭原则）</li>
</ol>
<p>不同策略的可以进行 abstract function<br>其他的可以不进行抽象</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建某个功能的工厂对象，非抽象，且没构造</span></span><br><span class="line"><span class="variable">$factoryObject</span> = <span class="keyword">new</span> OrderShopFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码层面的判断之后执行不同的策略：创建策略</span></span><br><span class="line"><span class="variable">$orderShopModel</span> = <span class="variable">$factoryObject</span>-&gt;getOrderShopModel(<span class="keyword">new</span> OrderShop());</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行策略</span></span><br><span class="line"><span class="variable">$orderContext</span> = <span class="keyword">new</span> OrderContext(<span class="variable">$orderShopModel</span>);</span><br><span class="line"><span class="variable">$orderContext</span>-&gt;save();</span><br></pre></td></tr></table></figure>
<h2 id="策略模式-1"><a href="#策略模式-1" class="headerlink" title="策略模式"></a>策略模式</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><h2 id="适配器模式-1"><a href="#适配器模式-1" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>什么是适配器模式<br>核心概念：</p>
<ol>
<li>调用者通过目标接口 调用 适配器的方法 对适配器发出请求</li>
<li>适配器使用 被适配者接口 把请求转换成 被适配者 的一个或多个调用接口</li>
<li>调用者接收到请求结果，但并未察觉一切都是适配器在做转换作用</li>
</ol>
<p>调用者调用适配器接口。<br>适配器调用 被适配者定义的接口，持有被适配者的实例，。<br>适配器调用 被适配者定义的接口，将其调用方式转换成外部统一的API。</p>
<p>两个例子<br>插口<br>结果截然不同的API封装成统一的API，<br>鸭子</p>
<p>里氏替换原则（Liskov Substitution Principle，LSP）：子类可以拓展父类的功能，但是不能改变父类原有的功能</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathParent</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$a</span> - <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">MathParent</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span> + <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基础文件目录结构"><a href="#基础文件目录结构" class="headerlink" title="基础文件目录结构"></a>基础文件目录结构</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">├─core                  核心目录</span><br><span class="line">│  ├─lib                </span><br><span class="line">│  │  ├─Db<span class="selector-class">.php</span>          数据库文件</span><br><span class="line">│  │  ├─Database<span class="selector-class">.php</span>    数据库适配器接口文件</span><br><span class="line">│  │  ├─Mysql<span class="selector-class">.php</span>       MYSQL适配文件</span><br><span class="line">│  │  ├─Mysqli<span class="selector-class">.php</span>      MYSQLI适配文件</span><br><span class="line">│  │  ├─PDO<span class="selector-class">.php</span>         PDO适配文件</span><br><span class="line">│  ├─Loader<span class="selector-class">.php</span>         自动加载文件</span><br><span class="line">│  ├─Singleton<span class="selector-class">.php</span>      单例模式</span><br><span class="line">│  ├─Factory<span class="selector-class">.php</span>        工厂模式</span><br><span class="line">│  ├─Register<span class="selector-class">.php</span>       注册器模式</span><br><span class="line">│  ├─Observer<span class="selector-class">.php</span>       观察者接口文件</span><br><span class="line">│  ├─Observer1<span class="selector-class">.php</span>      观察者<span class="number">1</span></span><br><span class="line">│  ├─Observer2<span class="selector-class">.php</span>      观察者<span class="number">2</span></span><br><span class="line">│  ├─Event<span class="selector-class">.php</span>          事件继承基类(观察者模式)</span><br><span class="line">├─index<span class="selector-class">.php</span>             入口文件</span><br></pre></td></tr></table></figure>
<blockquote>
<p>index.php文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;core/Loader.php&quot;</span>;</span><br><span class="line">spl_autoload_register(<span class="string">&quot;\\core\\Loader::autoload&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下方是所有测试代码</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Loader.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">core</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Loader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">autoload</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">require</span> <span class="variable">$class</span>.<span class="string">&quot;.php&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>财富财富自由之路</title>
    <url>/blog/p/ec99c690/</url>
    <content><![CDATA[<p>暂无描述</p>
<span id="more"></span>


<h1 id="财富财富自由之路"><a href="#财富财富自由之路" class="headerlink" title="财富财富自由之路"></a>财富财富自由之路</h1><h2 id="如何优化第一种个人商业模式"><a href="#如何优化第一种个人商业模式" class="headerlink" title="如何优化第一种个人商业模式"></a>如何优化第一种个人商业模式</h2><p>例子：跳槽，利用信息不对成获得更高的薪水，但是高买低卖的“买家”早晚被淘汰<br>    看中 真正的价值 不是估值<br>    关注且只关注自身的持续成长<br>    不断成长，选择被低估，突破玻璃顶(里程碑)，一切的一切都是为了这一刻做准备<br>提高出售次数<br>    出售自己时间的同时，<br>    将时间卖给自己换取成长<br>    变成“为自己打工的人”</p>
<h2 id="如何启动第二种个人商业模式-一份时间出售多次"><a href="#如何启动第二种个人商业模式-一份时间出售多次" class="headerlink" title="如何启动第二种个人商业模式(一份时间出售多次)"></a>如何启动第二种个人商业模式(一份时间出售多次)</h2><p>方式有：写作、唱片、一部动漫(以内容制造)<br>方向要求：必须满足 消费者心里上真正以为的刚需<br>要理解 这个时间主要是由他人构成的</p>
<h2 id="如何优化第三种个人商业模式-购买他人的时间进行出售"><a href="#如何优化第三种个人商业模式-购买他人的时间进行出售" class="headerlink" title="如何优化第三种个人商业模式(购买他人的时间进行出售)"></a>如何优化第三种个人商业模式(购买他人的时间进行出售)</h2><p>当我们花钱购买服务的时候，就从本质上避免了将自己的时间花到哪些只能将“一份时间出售1次”的人所做的事情上 P042页 不理解本句</p>
<p>能被更大规模的批量卖出去的时间，最值得购买<br>把时间投资到自己的成长上最划算</p>
<p>结论：<br>在能用钱换时间的时候尽量用钱换时间<br>将省下来的时间全部投资到自己的持续成长上去</p>
<p>进化成一个能够不断升级的“新物种”</p>
<h2 id="你升级过自己的操作系统吗"><a href="#你升级过自己的操作系统吗" class="headerlink" title="你升级过自己的操作系统吗"></a>你升级过自己的操作系统吗</h2><p>操作系统结构(层层包裹)：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">实践与践行&#123;</span><br><span class="line">    价值观与方法论&#123;</span><br><span class="line">        概念与关联</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>衡量一个人是否聪明的依据：<br>看他脑子里面有多少清晰准确必要的概念<br>看他脑子里哪些清晰准确必要的概念之间有多少清晰准确必要的关联</p>
<p>价值观决定选择，选择促进行动，行动构成命运</p>
<h2 id="你所拥有的最宝贵的财务究竟是什么"><a href="#你所拥有的最宝贵的财务究竟是什么" class="headerlink" title="你所拥有的最宝贵的财务究竟是什么"></a>你所拥有的最宝贵的财务究竟是什么</h2><p>资本：<br>    注意力 &gt; 时间 &gt; 金钱<br>注意力：<br>    是你唯一可以随意调用且能有所产出的资源<br>人生的三个大坑：<br>    莫名其妙凑热闹<br>    心急火燎随大流<br>    为别人操碎了心<br>树立价值观 就是 明确了…更重要<br>文中举例是想要告知，尽量要将注意力集中在成长中去</p>
<h2 id="有没有提高注意力使用效率的科学方法"><a href="#有没有提高注意力使用效率的科学方法" class="headerlink" title="有没有提高注意力使用效率的科学方法"></a>有没有提高注意力使用效率的科学方法</h2><p>打坐，此章节未深入</p>
<h2 id="为了不断升级操作系统，你最需要具备什么能力"><a href="#为了不断升级操作系统，你最需要具备什么能力" class="headerlink" title="为了不断升级操作系统，你最需要具备什么能力"></a>为了不断升级操作系统，你最需要具备什么能力</h2><p>元认知能力<br>    元认知：对认知的认知<br>表现型人格：<br>    在乎的不是好坏对错，而是只在乎在别人眼中的自己，特点是随大流–只有“跟大家一起”，“与大多数人相同”才觉得安全<br>    被困到当下<br>进取型人格：<br>    活在未来<br>听大多数人的话，参考少数人的意见，最终自己做决定</p>
<h2 id="你的人生中最沉重的枷锁是什么（安全感）"><a href="#你的人生中最沉重的枷锁是什么（安全感）" class="headerlink" title="你的人生中最沉重的枷锁是什么（安全感）"></a>你的人生中最沉重的枷锁是什么（安全感）</h2><p>有效社交：概念待补充<br>问题：<br>    时时刻刻关注身边所有可以被关注的东西，而且对：“竟然有被自己漏掉的”感到非常害怕<br>    结果：被困到当下<br>关键点：几乎所有的进步都是在放弃部分安全感的情况下才有可能获得的<br>不要与缺乏安全感的人合作，因为在他们的世界里不可能有真正的合作关系</p>
<h2 id="你活在哪里？过去，当下，还是未来？"><a href="#你活在哪里？过去，当下，还是未来？" class="headerlink" title="你活在哪里？过去，当下，还是未来？"></a>你活在哪里？过去，当下，还是未来？</h2><p>“活在未来”<br>    对未来有一个预测,提前按照预测的结果去行动、选择、思考，相信并证明自己的预测是正确的，时间不短流逝，而最终走到那个结果出现的时刻<br>    预测不一定准确，就当放弃了安全感<br>    真正的安全感其实是来自对未来的清晰思考</p>
<h2 id="活在未来的最朴素的方法是什么？"><a href="#活在未来的最朴素的方法是什么？" class="headerlink" title="活在未来的最朴素的方法是什么？"></a>活在未来的最朴素的方法是什么？</h2><p>用正确的方法做正确的事情，一定会变得更好</p>
<p>自己是个贵人，才能遇到贵人，甚至更多贵人<br>    求助是一种交易，不仅如此，他还是一种隐蔽却意义巨大的交易<br>    求助不是“讨好的艺术”，而是“正确占时自我价值”的艺术，从而吸引贵人</p>
<p>有效社交，首先要自己是个优秀的人<br>储备人际价值</p>
<h2 id="做得正确就会有好结果吗"><a href="#做得正确就会有好结果吗" class="headerlink" title="做得正确就会有好结果吗"></a>做得正确就会有好结果吗</h2><p>人生的意义是活出来的<br>特立独行且正确才有价值</p>
<h2 id="你的世界究竟是活的还是死的"><a href="#你的世界究竟是活的还是死的" class="headerlink" title="你的世界究竟是活的还是死的"></a>你的世界究竟是活的还是死的</h2><p>善待自己的世界，你的世界大抵可以给你足够的善待，<br>宽容如此<br>认真如此<br>若你凝视着深渊，深渊也在凝视你<br>真正的安全感其实是来自对未来的清晰思考</p>
<h2 id="你为什么看不到别人的好？"><a href="#你为什么看不到别人的好？" class="headerlink" title="你为什么看不到别人的好？"></a>你为什么看不到别人的好？</h2><p>眼光六路，取之精华弃之糟粕，吸收经验，获得成长</p>
<h2 id="你知道自己有个所有人都有的恶习必须戒掉吗？"><a href="#你知道自己有个所有人都有的恶习必须戒掉吗？" class="headerlink" title="你知道自己有个所有人都有的恶习必须戒掉吗？"></a>你知道自己有个所有人都有的恶习必须戒掉吗？</h2><p>抱怨，抱怨只是无能和无奈的表现<br>当遇到麻烦和不顺利的事情的时候，能解决就解决，不能解决就承受</p>
<h2 id="究竟是什么再决定你的命运？"><a href="#究竟是什么再决定你的命运？" class="headerlink" title="究竟是什么再决定你的命运？"></a>究竟是什么再决定你的命运？</h2><p>成功：<br>    ①解答题高手作对了选择题<br>    ②正确的方式做正确的事情<br>养成正确、有效的价值观才能尽量做对选择<br>从而决定命运<br>回避问题：以偏概全</p>
<h2 id="究竟是什么在决定你的自驱动力"><a href="#究竟是什么在决定你的自驱动力" class="headerlink" title="究竟是什么在决定你的自驱动力"></a>究竟是什么在决定你的自驱动力</h2><p>成长 &gt; 成功<br>未来 &gt; 现在 &gt; 过去<br>注意力 &gt; 时间 &gt; 金钱</p>
<p>正确的刚需是一切动力的源头<br>    对于进取型人格的人而言，成功只是某一时刻的状态，成长才是真正的刚需<br>        成长的刚需是 耐心<br>现状：过往的积累<br>    目光短浅：急于改变现状<br>方案：把当下作为新的起点，不断积累，着眼未来，活在未来</p>
<p>赚不到钱是能力还不足<br>只要足够有耐心，一切都是可以习得的<br>假以时日，会冲破玻璃顶</p>
<h2 id="你有没有想过究竟什么是落后"><a href="#你有没有想过究竟什么是落后" class="headerlink" title="你有没有想过究竟什么是落后"></a>你有没有想过究竟什么是落后</h2><p>是自己意料不到的，非常恐怖的数值，但需要明确目标<br>做到不落后，成为前20% 前1%</p>
<h2 id="从平庸走向卓越的最佳策略是什么？"><a href="#从平庸走向卓越的最佳策略是什么？" class="headerlink" title="从平庸走向卓越的最佳策略是什么？"></a>从平庸走向卓越的最佳策略是什么？</h2><p>多维度打造竞争力<br>    单个维度：比的是长度<br>    两个维度：比的是面积<br>    三个维度：比的是体积（意向）<br>在自己曾经做到最好的维度之外，开拓其他的维度<br>每次跨界，都是给自己拓展一个新的维度<br>    前提：要在至少一个维度上足够突出，凡事都有成本~</p>
<h2 id="究竟是什么在决定你的价格（估值）？"><a href="#究竟是什么在决定你的价格（估值）？" class="headerlink" title="究竟是什么在决定你的价格（估值）？"></a>究竟是什么在决定你的价格（估值）？</h2><p>在市场上，决定价格的最重要因素是需求，而非成本<br>与这世界产生强联系，是提高生活幸福感的最根本方式<br>挑最重要的事情做<br>换位思考不仅仅是指某个人，而是整个世界</p>
<h2 id="我是如何生生错过一次升级机会的？“跟我没关系”"><a href="#我是如何生生错过一次升级机会的？“跟我没关系”" class="headerlink" title="我是如何生生错过一次升级机会的？“跟我没关系”"></a>我是如何生生错过一次升级机会的？“跟我没关系”</h2><p>我觉得你说的都对，但是好像跟我没多大关系<br>有些观念，即便你觉得与你有关，也不一定就会起作用，反之就一定不会起作用<br>有些观念，很重要，但他们要么太简单以至于被轻视，要么太过违背直觉以至于让人无法相信<br>方案：假定每个观念都和自己有巨大的关系，再调动所有的感官为自己创造“代入感”，去琢磨、去研究、去想象：这个观念若被我吸收，以后会变成什么样子？</p>
<h2 id="有没有一定能能让自己不错过升级机会的办法？“他行我也行”"><a href="#有没有一定能能让自己不错过升级机会的办法？“他行我也行”" class="headerlink" title="有没有一定能能让自己不错过升级机会的办法？“他行我也行”"></a>有没有一定能能让自己不错过升级机会的办法？“他行我也行”</h2><p>概念：镜像神经元、有效社交<br>大脑是可塑的<br>想要做到，就要从物理上接近目标<br>耳濡目染的教育才是真正有效的教育，才有可能真正激活镜像神经元<br>不再认为那和我没关系</p>
<h2 id="天天刷牙吗？-洗脑篇"><a href="#天天刷牙吗？-洗脑篇" class="headerlink" title="天天刷牙吗？ 洗脑篇"></a>天天刷牙吗？ 洗脑篇</h2><p>那些不愿意学习的人，不仅害怕自己学不会，更害怕别人竟然学得会</p>
<p>学习是一种生活方式；学习本身就是最好的洗脑方式<br>只要我投入时间和经历，从长期来看没有什么是我学不会的<br>我学会的东西越多，我在学习新的东西时速度就越快<br>学习不是目的，“用起来才是”，因为价值只能通过创造实现<br>我知道自己现在看起来很笨拙，但刚开始谁都是这样的，时间多了，就自然了，也就自然的好起来了<br>在学习这件事情上，别人不理解我是正常的，在这方面我也不需要别人理解，因为我是一个独立的人<br>我不应该与别人争辩，因为我不想伤害他们；我也不应该被他们影响没因为我不想伤害自己<br>可以联系是永远有必要的，虽然它通常并不舒适，但它的复制效应确实是巨大的<br>哪怕是为了下一代，我也要通过现在的努力成为学习专家，这样我才有资格和我的孩子共同成长<br>表现型人格：最在意自己在当下的表现<br>进取型人格：最在意自己在未来的表现</p>
<h2 id="人生作弊器"><a href="#人生作弊器" class="headerlink" title="人生作弊器"></a>人生作弊器</h2><p>对于某件事情<br>    这个技能的重点在哪里<br>    做得好的人为什么做的好<br>    做得不好的人为什么做不好<br>    有哪些地方可以改进<br>    有哪些可以联系是必不可少的<br>认真思考，反复琢磨</p>
<p>境界一：有没有心思去寻找，阅读大量的相关书籍和教程<br>境界二：有没有能力去甄别书籍和教程质量的好坏<br>境界三：有没有能力在实践中运用书籍和教程所传授的知识</p>
<p>不仅能学会没人能手把手教你的东西<br>甚至能学会连书本上都找不到的东西</p>
<p>关键点：<br>    确定自己有强烈的欲望去搞定这项技能<br>    寻找最少必要知识，反复问自己：这件事最关键的地方在哪里<br>    马上开始运用并践行<br>    相信自己一定能你学会；相信自己一定能通过践行获得进步<br>    通过记录，量化自己的刻意练习进程<br>    不断总结，不断整理，不断让那些新技能，新概念在自己的脑子里形成清晰的组织与关联<br>    绝对不要和笨蛋斗气，要珍惜自己的时间和生命</p>
<p>人生的意义：若能把生命中的一段变得与众不同，那自己的人生意义依然非凡</p>
<p>选书方法论：选择最著名的出版社、再版和重印次数比较多的书籍<br>听大多数人的话，参考少数人的意见，最终自己做决定<br>必须自己琢磨出自己的路径和跨越方式，而这恰恰是判断你能否进入第三个阶段（“境界”）的依据</p>
<h2 id="万能钥匙"><a href="#万能钥匙" class="headerlink" title="万能钥匙"></a>万能钥匙</h2><p>如果能让对方感到无比开心，那么他就没有办法痛苦、生气、无聊、无奈<br>当遇到最锁上的锁头时，要想到，应该去别的地方找钥匙</p>
<h2 id="把“坚持”这个概念从你的操作系统中删除行不行？"><a href="#把“坚持”这个概念从你的操作系统中删除行不行？" class="headerlink" title="把“坚持”这个概念从你的操作系统中删除行不行？"></a>把“坚持”这个概念从你的操作系统中删除行不行？</h2><p>无论做什么事情，从开始之前，都要想尽办法为这件事情赋予极其重大的意义<br>获取到动力后 就不需要“坚持”了<br>一念一世界<br>近朱者赤近墨者黑</p>
<h2 id="你生命中最值得拼死守护的究竟是什么"><a href="#你生命中最值得拼死守护的究竟是什么" class="headerlink" title="你生命中最值得拼死守护的究竟是什么"></a>你生命中最值得拼死守护的究竟是什么</h2><p>希望：一个人相信自己的明天会因为今天的努力而变得更好</p>
<p>重复，是从笨拙到熟练的唯一通路，如果还不熟练，就说明重复的还不够！！！！！<br>每个人都会低估任务的复杂程度，不必惊慌失措</p>
<p>是否心存希望才是真正重要的因素</p>
<h2 id="你知道投资领域实际上是另外一个镜像的世界吗"><a href="#你知道投资领域实际上是另外一个镜像的世界吗" class="headerlink" title="你知道投资领域实际上是另外一个镜像的世界吗"></a>你知道投资领域实际上是另外一个镜像的世界吗</h2><p>成功 &#x3D; 技能 + 运气<br>左侧 100%实力 ————– 右侧 100%运气  策略</p>
<h2 id="为什么就算有钱也不一定有资本"><a href="#为什么就算有钱也不一定有资本" class="headerlink" title="为什么就算有钱也不一定有资本"></a>为什么就算有钱也不一定有资本</h2><p>资金 !&#x3D; 资本<br>投资的重点并不在于盈亏绝对值，而在于盈亏比例<br>要学会将自己的资金判“无期”<br>投资的知识、经验和智慧，几乎只能从实战中获得，书上写的、牛人讲的都跟你没关系</p>
<h2 id="你真的没有投资机会吗？"><a href="#你真的没有投资机会吗？" class="headerlink" title="你真的没有投资机会吗？"></a>你真的没有投资机会吗？</h2><p>收益 &#x3D; 本金(1+复合年化收益率)^年数<br>成长定义：想到之后做到<br>人至践则无敌</p>
<p>概念与关联<br>价值观与方法论<br>实验与践行<br>将自己的所有假期利用起来可以省出别人没有的成长时间</p>
<h2 id="没有钱能不能开始投资"><a href="#没有钱能不能开始投资" class="headerlink" title="没有钱能不能开始投资"></a>没有钱能不能开始投资</h2><h2 id="投资是靠冒险赚钱的吗"><a href="#投资是靠冒险赚钱的吗" class="headerlink" title="投资是靠冒险赚钱的吗"></a>投资是靠冒险赚钱的吗</h2><p>行动者的所有注意力都放在如何避险上，而不是冒险<br>自己的投资依据必须靠且仅靠自己的深入思考而得到<br>尽可能获得最大化收益<br>尽可能降低系统化风险</p>
<p>人生安全<br>资本安全<br>成为专家</p>
<p>要想方设法把自己留在赌桌上<br>第一，风险是一种客观存在<br>第二，一旦有未知存在，就有风险存在<br>第三，衡量风险大小的在决定性因素是赌注的大小<br>第四，抗风险能力的高低本质上就是总赌本的大小，尤其是在面临同样概率的风险的时候<br>第五，冒险没问题，但不要被抽水<br>公平是有成本的</p>
<h2 id="为什么绝大多数人会“脑子一热就压上全部”"><a href="#为什么绝大多数人会“脑子一热就压上全部”" class="headerlink" title="为什么绝大多数人会“脑子一热就压上全部”"></a>为什么绝大多数人会“脑子一热就压上全部”</h2><p>凯利判据(Kelly Criterrion)</p>
<h2 id="“早知道”就能赚到更多的钱吗"><a href="#“早知道”就能赚到更多的钱吗" class="headerlink" title="“早知道”就能赚到更多的钱吗"></a>“早知道”就能赚到更多的钱吗</h2><p>早不重要，关键在“对”，后发也可能有优势</p>
<h2 id="为什么没有人能够准确预测市场价格的短期走向"><a href="#为什么没有人能够准确预测市场价格的短期走向" class="headerlink" title="为什么没有人能够准确预测市场价格的短期走向"></a>为什么没有人能够准确预测市场价格的短期走向</h2><p>问题的质量决定问题的答案</p>
<h2 id="10分钟教会你判断趋势"><a href="#10分钟教会你判断趋势" class="headerlink" title="10分钟教会你判断趋势"></a>10分钟教会你判断趋势</h2><p>周期：真正的趋势常常需要在多个周期之后才能真正实现<br>想对趋势进行有效判断 必须了解周期<br>现实的竞技里面没有直线，只有波动<br>关注周期，一级多个周期背后显现出来的真正趋势，会给你一个全新且更为可靠的世界和视界<br>赚的方式越多越好</p>
<h2 id="最安全的投资策略是什么"><a href="#最安全的投资策略是什么" class="headerlink" title="最安全的投资策略是什么"></a>最安全的投资策略是什么</h2><p>低买高卖<br>定投策略<br>所有的投资 功课都是在投资之前完成的</p>
<h2 id="如何提高你的选择质量"><a href="#如何提高你的选择质量" class="headerlink" title="如何提高你的选择质量"></a>如何提高你的选择质量</h2><p>选择最重要<br>每个人做出的选择的根基就是他的价值观<br>选择的方法论<br>    添加 必要的 条件<br>    每添加一个条件，选项就会大幅减少；如果有没必要的选择参杂进来，就会提前使自己“全无选择”<br>    要尽量“只要率且不遗漏那些最为必要的条件”<br>创业方向的原则<br>    高频<br>    刚需<br>    大市场</p>
<p>练习选择：<br>    面对任何选择，哪怕是很小的事情–当然，要从小事练起–都可以拿出纸和笔，罗列筛选条件。<br>    为每个条件的重要性打分，然后将他们重新排序<br>    考虑每个条件的必要性，打分只有1和0<br>    30分钟内，结果就会一目了然<br>    第二天再花30分钟重新考虑、打分<br>    重复这个过程N次  结果就更为正确</p>
<h2 id="无论是创业还是投资，你必须了解的概念是哪一个"><a href="#无论是创业还是投资，你必须了解的概念是哪一个" class="headerlink" title="无论是创业还是投资，你必须了解的概念是哪一个"></a>无论是创业还是投资，你必须了解的概念是哪一个</h2><p>概念<br>     长期<br>    聪明：看他脑子里面有多少清晰 准确 必要的概念；<br>          看他脑子里清晰 准确 必要的概念 有多少 清晰 准确 必要的关联<br>生意的层次：<br>    满足温饱的生意<br>    能够赚钱的生意(温饱之外还有富余)<br>    能够成长的生意(富余越来越多)<br>    具有成长率的生意(包含一个很多人从来都没有想过的概念：成长率)<br>保持成长率已经是难上加难</p>
<p>做选择时，要列出自己所有的必要条件，是否足够苛刻，是否最重要且最必要<br>然后加以筛选<br>通货膨胀</p>
<h2 id="你的长期究竟有多长"><a href="#你的长期究竟有多长" class="headerlink" title="你的长期究竟有多长"></a>你的长期究竟有多长</h2><p>越弱，长期就越长<br>可以通过提高能力缩短“长期”的长度<br>学习使人拥有质量更高的“长寿”<br>策略可以弥补能力上的不足</p>
<p>对能力越强的人来说，“长期”更短<br>对能使用正确策略的人来说，“长期”更短<br>对有能力在投资之外赚钱的人来说，“长期更短”</p>
<p>越年轻，欲望就越多，也越强烈<br>年轻的时候有太多事后可能觉得没必要花钱的欲望和需求，这使得“长期”更加难熬</p>
<p>投资需要特定思考能力</p>
<h2 id="年轻人是否应该不那么看中金钱"><a href="#年轻人是否应该不那么看中金钱" class="headerlink" title="年轻人是否应该不那么看中金钱"></a>年轻人是否应该不那么看中金钱</h2><p>那些认真对待金钱的人获得金钱的能力更强，而且会越来越强<br>后文都是解释<br>并提供了一种用于思考的工具  复杂二分法(多个组合)<br>作者认为：从一开始就重视金钱 可能是相对更划算的策略</p>
<h2 id="如何才能练就融会贯通的能力"><a href="#如何才能练就融会贯通的能力" class="headerlink" title="如何才能练就融会贯通的能力"></a>如何才能练就融会贯通的能力</h2><p>概念：<br>    知识：指的是能够指导我们做出更好的决策，且从长期来看更可能给我们带来更好结果的那些信息<br>如何分辨知识：<br>    在知道这些知识之后，我的决策会发生什么变化，那些决策会随之改变<br>    从长期看来，这些东西可能为我带来哪些意想得到或者想不到的好处<br>维度：<br>            有用	 无用<br>    长期<br>    短期<br>碎片化的只是时间<br>体系化的知识是更高级的知识，不用再纠结“学它有什么用”<br>从而会获得意外的好运<br>最优策略：<br>    莫问前程，但行好事<br>    主动增加连接：这个概念，这个道理还能运用到什么地方</p>
<h2 id="人生的终极问题到底是什么"><a href="#人生的终极问题到底是什么" class="headerlink" title="人生的终极问题到底是什么"></a>人生的终极问题到底是什么</h2><p>什么更重要</p>
<h2 id="执行力差的根源究竟在哪里"><a href="#执行力差的根源究竟在哪里" class="headerlink" title="执行力差的根源究竟在哪里"></a>执行力差的根源究竟在哪里</h2><p>概念：<br>    执行力就是指一个人是否清楚的知道要怎么一步一步做下去<br>    大多数人的执行力示意图 都是中途各种原因失败<br>有些时候在我们的脑子里会产生一些奇怪、甚至非常邪恶的“闪念”，那并不是因为我们已然变成了坏人，而是有科学解释的：只不过是我们大脑中的一些原本没有关联的脑细胞（活用“神经元”）突然相互关联了一下。你可以将这些“闪念”想象成“大脑在和自己玩，天马行空弄出的一些‘意外’的念头”<br>情绪是理智的快捷方式<br>直觉是情绪的快捷方式<br>重复 应用</p>
<p>一切的半途而废都是重复与应用的次数不够，内化过程没有完成，大脑皮层回沟构建不完整，应该建立的神经元关联不够强以至于断掉，回到了原本没有关联的状态</p>
<h2 id="如果真正让你赚到钱的不是知识，那究竟是什么"><a href="#如果真正让你赚到钱的不是知识，那究竟是什么" class="headerlink" title="如果真正让你赚到钱的不是知识，那究竟是什么"></a>如果真正让你赚到钱的不是知识，那究竟是什么</h2><p>事实：一切只是都正走在通往免费的路上<br>知识变现，真正能够变现的是认知差异<br>没有践行，就没有可以变现的东西；没有行动中的思考，就没有真正有价值的认知升级。没有认证</p>
<p>要做就要做到最好</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
  </entry>
</search>
